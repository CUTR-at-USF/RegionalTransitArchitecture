<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.DomainServices</name>
    </assembly>
    <members>
        <member name="M:System.ServiceModel.DomainServices.BinaryTypeUtility.IsTypeBinary(System.Type)">
            <summary>
            Returns whether the <paramref name="type"/> <c>is System.Data.Linq.Binary</c>.
            </summary>
            <remarks>
            We test Binary by Type Name so our client framework assembly can avoid taking an
            assembly reference to <c>System.Data.Linq</c>. If a type is determined to be
            binary, that type will be used to check reference equality for all subsequent
            invocations.
            </remarks>
            <param name="type">The type to check</param>
            <returns>Whether the <paramref name="type"/> is binary</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.BinaryTypeUtility.GetByteArrayFromBinary(System.Object)">
            <summary>
            Returns the <paramref name="binary"/> converted to a <c>byte[]</c>.
            </summary>
            <param name="binary">The binary to convert</param>
            <returns>The byte[] form of the binary</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.BinaryTypeUtility.GetBinaryFromByteArray(System.Byte[])">
            <summary>
            Returns the <paramref name="bytes"/> converted to a <c>System.Data.Linq.Binary</c>.
            </summary>
            <param name="bytes">The bytes to convert</param>
            <returns>The binary form of the bytes</returns>
        </member>
        <member name="F:System.ServiceModel.DomainServices.TypeUtility.systemAssemblyPublicKeyTokens">
            <summary>
            List of public key tokens used for System assemblies
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsNullableType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a <see cref="T:System.Nullable"/>
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the given type is a nullable type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.GetNonNullableType(System.Type)">
            <summary>
            If the given type is <see cref="T:System.Nullable"/>, returns the element type,
            otherwise simply returns the input type
            </summary>
            <param name="type">The type to test that may or may not be Nullable</param>
            <returns>Either the input type or, if it was Nullable, its element type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a primitive type or one
            of our standard acceptable simple types, such as <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/>, or one of our standard generic types whose generic
            argument is primitive or simple (e.g. Nullable, IEnumerable, IDictionary&lt;TKey,TValue&gt;).
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedListType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is <see cref="T:System.Collections.Generic.IEnumerable`1"/> or an <see cref="T:System.Collections.IList"/> type, 
            and is either an interface, an array, or has a default constructor.
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSupportedCollectionType(System.Type)">
            <summary>
            Returns <c>true</c> if specified type is a supported collection Type. This method only checks the collection
            Type itself, not whether the element Type is supported.
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a suppored collection Type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedDictionaryType(System.Type)">
            <summary>
            Returns <c>true</c> if <paramref name="type"/> implements <see cref="T:System.Collections.Generic.IDictionary`2"/> and
            its generic type arguments are acceptable predefined simple types.
            </summary>
            <param name="type">The type to test.</param>
            <returns><c>true</c> if the type is a <see cref="T:System.Collections.Generic.IDictionary`2"/> with supported generic type arguments.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedSimpleType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is either primitive or one of our
            standard acceptable simple types, such as <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/>, etc
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsComplexType(System.Type)">
            <summary>
            This method determines if the specified Type should be treated as a
            complex type by the framework.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a complex type, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsComplexTypeCollection(System.Type)">
            <summary>
            Determines whether the specified type is one of the supported collection types
            with a complex element type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a supported complex collection type, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSupportedComplexType(System.Type)">
            <summary>
            Determines whether the specified type is a complex type or a collection of
            complex types.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the specified type is a complex type or a collection of
            complex types, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.GetElementType(System.Type)">
            <summary>
            Returns the underlying element type starting from a given type.
            </summary>
            <remarks>
            Simple types simply return the input type.
            If the given type is an array, this method returns the array's
            element type.
            If the type is a generic type of <see cref="T:System.Collections.IEnumerable"/>, 
            or <see cref="T:System.Nullable"/>, this method returns the element
            type of the generic parameter
            </remarks>
            <param name="type"><see cref="T:System.Type"/> to examine.</param>
            <returns>The underlying element type starting from the given type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.DefinitionIsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether the generic type definition is assignable from the derived type.
            </summary>
            <remarks>
            This behaves just like <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> except that it determines
            whether any generic type that can be made from the <paramref name="genericTypeDefinition"/>
            is assignable from <paramref name="derivedType"/>.
            </remarks>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="derivedType">The type to determine assignability from</param>
            <returns>Whether the type definition is assignable from the derived type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.DefinitionIsAssignableFrom(System.Type,System.Type,System.Type@)">
            <summary>
            Determines whether the generic type definition is assignable from the derived type.
            </summary>
            <remarks>
            This behaves just like <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> except that it determines
            whether any generic type that can be made from the <paramref name="genericTypeDefinition"/>
            is assignable from <paramref name="derivedType"/>.
            </remarks>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="derivedType">The type to determine assignability from</param>
            <param name="genericType">The generic base class or interface implemented by the derived
            type that can be made from the <paramref name="genericTypeDefinition"/>. This value is
            null when the method return false.
            </param>
            <returns>Whether the type definition is assignable from the derived type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSystemAssembly(System.Reflection.Assembly)">
            <summary>
            Performs a check against an assembly to determine if it's a known
            System assembly.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns><c>true</c> if the assembly is known to be a system assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSystemAssembly(System.Reflection.AssemblyName)">
            <summary>
            Performs a check against an <see cref="T:System.Reflection.AssemblyName"/> to determine if it's a known
            System assembly.
            </summary>
            <param name="assemblyName">The assembly name to check.</param>
            <returns><c>true</c> if the assembly is known to be a system assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSystemAssembly(System.String)">
            <summary>
            Performs a check against an assembly's full name to determine if it's a known
            System assembly.
            </summary>
            <remarks>
            We can't use Assembly.GetName().GetPublicKeyToken() since that requires FileIOPermissions.
            </remarks>
            <param name="assemblyFullName">The <see cref="P:System.Reflection.AssemblyName.FullName"/> to check.</param>
            <returns><c>true</c> if the assembly is known to be a system assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.ExceptionHandlingUtility.IsFatal(System.Exception)">
            <summary>
            Determines if an <see cref="T:System.Exception"/> is fatal and therefore should not be handled.
            </summary>
            <example>
            try
            {
                // Code that may throw
            }
            catch (Exception ex)
            {
                if (ex.IsFatal())
                {
                    throw;
                }
                
                // Handle exception
            }
            </example>
            <param name="exception">The exception to check</param>
            <returns><c>true</c> if the exception is fatal, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:System.Windows.Common.CommonResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.CannotConvertValue">
            <summary>
              Looks up a localized string similar to The provided value of type &apos;{0}&apos; cannot be converted to type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.InvalidPropertyAccess">
            <summary>
              Looks up a localized string similar to The property named &apos;{1}&apos; cannot be accessed because &apos;{0}&apos; returned a null reference. .
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.PropertyNotFound">
            <summary>
              Looks up a localized string similar to The property named &apos;{0}&apos; cannot be found on type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.PropertyNotReadable">
            <summary>
              Looks up a localized string similar to The property named &apos;{0}&apos; on type &apos;{1}&apos; cannot be read..
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.PropertyNotWritable">
            <summary>
              Looks up a localized string similar to The property named &apos;{0}&apos; on type &apos;{1}&apos; cannot be written..
            </summary>
        </member>
        <member name="T:System.Windows.Common.Utilities">
            <summary>
            Utility class for sharing code
            </summary>
        </member>
        <member name="M:System.Windows.Common.Utilities.AreValuesEqual(System.Object,System.Object)">
            <summary>
            Determines if two objects are equal
            </summary>
            <param name="value1">first object to compare</param>
            <param name="value2">second object to compare</param>
            <returns>True if the two values are equal</returns>
        </member>
        <member name="M:System.Windows.Common.Utilities.GetConvertedValue(System.Globalization.CultureInfo,System.Type,System.Object)">
            <summary>
            Converts a value to the provided targetType
            </summary>
            <param name="culture">Culture used for the conversion</param>
            <param name="targetType">Destination type</param>
            <param name="value">Value to convert</param>
            <returns>The converted value</returns>
            <exception cref="T:System.ArgumentException">Thrown when conversion fails.</exception>
        </member>
        <member name="M:System.Windows.Common.Utilities.IsConversionException(System.Exception)">
            <summary>
            Determines whether an exception is acceptable for type conversion operations.
            </summary>
            <param name="exception">Exception to check</param>
            <returns>True if the exception is an acceptable conversion exception</returns>
        </member>
        <member name="T:System.Windows.Common.DebugTrace">
            <summary>
            Simple debug tracing utility.
            See sample usage in DomainDataSource.cs
            </summary>
        </member>
        <member name="M:System.Windows.Common.DebugTrace.TraceSwitch.#ctor(System.String)">
            <summary>
            Internal TraceSwitch constructor.
            </summary>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:System.Windows.Common.DebugTrace.TraceSwitch.DisplayName">
            <summary>
            Gets the DisplayName.
            </summary>
        </member>
        <member name="T:System.Windows.Common.DependencyObjectExtensions">
            <summary>
            Utility class for DependencyObject/DependencyProperty related operations
            </summary>
        </member>
        <member name="M:System.Windows.Common.DependencyObjectExtensions.IsHandlerSuspended(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Determines whether a dependency object has suspended the change handler for the provided dependency property.
            </summary>
            <param name="obj">The <see cref="T:System.Windows.DependencyObject"/> to examine.</param>
            <param name="dependencyProperty">The <see cref="T:System.Windows.DependencyObject"/>'s <see cref="T:System.Windows.DependencyProperty"/> to examine.</param>
            <returns>True when the change handler is suspended.</returns>
        </member>
        <member name="M:System.Windows.Common.DependencyObjectExtensions.SetValueNoCallback(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Suspends the change handler of a dependency property, sets the property value and reactivates the
            change handler.
            </summary>
            <param name="obj">The <see cref="T:System.Windows.DependencyObject"/> to update without triggering a change event.</param>
            <param name="property">The <see cref="T:System.Windows.DependencyObject"/>'s <see cref="T:System.Windows.DependencyProperty"/> to set.</param>
            <param name="value">The value that <paramref name="property"/> should be set to.</param>
        </member>
        <member name="T:System.Windows.Controls.CollectionManager">
            <summary>
            Abstract base class that observes and collates events from
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> collections of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CollectionManager"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.AddCollection``1(``0)">
            <summary>
            Adds a collection to this manager.
            </summary>
            <typeparam name="TCollection">The type of the collection</typeparam>
            <param name="collection">The collection to manage</param>
            <exception cref="T:System.ArgumentNullException"> is thrown if <paramref name="collection"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException"> is thrown if the collection has already been added to this manager.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.RemoveCollection``1(``0)">
            <summary>
            Removes a collection from this manager.
            </summary>
            <typeparam name="TCollection">The type of the collection</typeparam>
            <param name="collection">The collection to remove</param>
            <exception cref="T:System.ArgumentNullException"> is thrown if <paramref name="collection"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException"> is thrown if the collection has not been added to this manager.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.AddAll(System.Collections.IEnumerable)">
            <summary>
            Adds each item in the enumeration to this manager.
            </summary>
            <param name="collection">The collection of items to add</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.RemoveAll(System.Collections.IEnumerable)">
            <summary>
            Removes each item in the enumeration from this manager.
            </summary>
            <param name="collection">The collection of items to remove</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.AddItem(System.Collections.IList,System.Object)">
            <summary>
            Adds an item to this manager.
            </summary>
            <param name="localCollection">The local collection instance for tracking the item</param>
            <param name="item">The item to add</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.RemoveItem(System.Collections.IList,System.Object)">
            <summary>
            Removes an item from this manager.
            </summary>
            <param name="localCollection">The local collection instance for tracking the item</param>
            <param name="item">The item to remove</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.HandleCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection changes by adding or removing the corresponding items and raising a <see cref="E:System.Windows.Controls.CollectionManager.CollectionChanged"/> event.
            </summary>
            <remarks>
            Derived classes should call the base implementation when overriding this method.
            </remarks>
            <param name="sender">The collection that changed</param>
            <param name="e">The collection changed event</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.HandlePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles item changes and raises a <see cref="E:System.Windows.Controls.CollectionManager.PropertyChanged"/> event.
            </summary>
            <remarks>
            Derived classes should call the base implementation when overriding this method.
            </remarks>
            <param name="sender">The item that changed</param>
            <param name="e">The property changed event</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.OnCollectionChanged">
            <summary>
            Raises a <see cref="E:System.Windows.Controls.CollectionManager.CollectionChanged"/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.OnPropertyChanged">
            <summary>
            Raises a <see cref="E:System.Windows.Controls.CollectionManager.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.StoreOriginalValues">
            <summary>
            Stores the original values for all <see cref="T:System.Windows.Controls.IRestorable"/> items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionManager.RestoreOriginalValues">
            <summary>
            Restores the original values for all <see cref="T:System.Windows.Controls.IRestorable"/> items.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.CollectionManager.CollectionChanged">
            <summary>
            Raises a generic event any time a managed collection changes.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.CollectionManager.PropertyChanged">
            <summary>
            Raises a generic event any time an item in a managed collection changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CollectionManager.ExpressionCache">
            <summary>
            Gets or sets a cache of expressions. The entry for an item will be cleared if
            that item is changed or removed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CollectionManager.ValidationAction">
            <summary>
            Gets or sets the action that is invoked to validate a new or changed item.
            </summary>
            <remarks>
            This can be used to raise programming exceptions. The manager will not attempt
            to restore the previous state.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.CollectionManager.AsINotifyPropertyChangedFunc">
            <summary>
            Gets or sets the function that an <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            that corresponds to the specified item.
            </summary>
            <remarks>
            In most cases, this is used because the items do not directly implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.CollectionViewGroupInternal">
            <summary>
            A CollectionViewGroupInternal, as created by a PagedCollectionView 
            according to a GroupDescription.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.CollectionViewGroupInternal._groupBy">
            <summary>
            GroupDescription used to define how to group the items
            </summary>
        </member>
        <member name="F:System.Windows.Controls.CollectionViewGroupInternal._parentGroup">
            <summary>
            Parent group of this CollectionViewGroupInternal
            </summary>
        </member>
        <member name="F:System.Windows.Controls.CollectionViewGroupInternal._version">
            <summary>
            Used for detecting stale enumerators
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupInternal.#ctor(System.Object,System.Windows.Controls.CollectionViewGroupInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CollectionViewGroupInternal"/> class.
            </summary>
            <param name="name">Name of the CollectionViewGroupInternal</param>
            <param name="parent">Parent node of the CollectionViewGroup</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupInternal.Add(System.Object)">
            <summary>
            Adds the specified item to the collection
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupInternal.Clear">
            <summary>
            Clears the collection of items
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupInternal.Insert(System.Object,System.Int32)">
            <summary>
            Insert a new item or subgroup.
            </summary>
            <param name="item">The item being inserted.</param>
            <param name="index">The index at which to insert the item.</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupInternal.LeafAt(System.Int32)">
            <summary>
            Return the item at the given index within the list of leaves governed
            by this group
            </summary>
            <param name="index">Index of the leaf</param>
            <returns>Item at given index</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupInternal.LeafIndexFromItem(System.Object,System.Int32)">
            <summary>
            Returns the index of the given item within the list of leaves governed
            by the full group structure.  The item must be a (direct) child of this
            group.  The caller provides the index of the item within this group,
            if known, or -1 if not.
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="index">Index of the leaf</param>
            <returns>Number of items under that leaf</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupInternal.LeafIndexOf(System.Object)">
            <summary>
            Returns the index of the given item within the list of leaves governed
            by this group
            </summary>
            <param name="item">Item we are looking for</param>
            <returns>Number of items under that leaf</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupInternal.OnGroupByChanged">
            <summary>
            The group's description has changed - notify parent 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupInternal.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the specified item from the collection
            </summary>
            <param name="item">Item to remove</param>
            <param name="returnLeafIndex">Whether we want to return the leaf index</param>
            <returns>Leaf index where item was removed, if value was specified. Otherwise '-1'</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupInternal.RemoveEmptyGroup(System.Windows.Controls.CollectionViewGroupInternal)">
            <summary>
            Removes an empty group from the PagedCollectionView grouping
            </summary>
            <param name="group">Empty subgroup to remove</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupInternal.ChangeCounts(System.Object,System.Int32)">
            <summary>
            Update the item count of the CollectionViewGroup
            </summary>
            <param name="item">CollectionViewGroup to update</param>
            <param name="delta">Delta to change count by</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupInternal.OnGroupByChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handler for the GroupBy PropertyChanged event
            </summary>
            <param name="sender">CollectionViewGroupInternal whose GroupBy property changed</param>
            <param name="e">The args for the PropertyChanged event</param>
        </member>
        <member name="P:System.Windows.Controls.CollectionViewGroupInternal.IsBottomLevel">
            <summary>
            Gets a value indicating whether this group 
            is at the bottom level (not further sub-grouped).
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CollectionViewGroupInternal.FullCount">
            <summary>
            Gets or sets the number of items and groups in the subtree under this group
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CollectionViewGroupInternal.GroupBy">
            <summary>
            Gets or sets how this group divides into subgroups
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CollectionViewGroupInternal.LastIndex">
            <summary>
            Gets or sets the most recent index where activity took place
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CollectionViewGroupInternal.SeedItem">
            <summary>
            Gets the first item (leaf) added to this group.  If this can't be determined,
            DependencyProperty.UnsetValue.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CollectionViewGroupInternal.Parent">
            <summary>
            Gets the parent node for this CollectionViewGroupInternal
            </summary>
        </member>
        <member name="T:System.Windows.Controls.CollectionViewGroupRoot">
            <summary>
            PagedCollectionView classes use this class as the manager 
            of all Grouping functionality
            </summary>
        </member>
        <member name="F:System.Windows.Controls.CollectionViewGroupRoot.RootName">
            <summary>
            String constant used for the Root Name
            </summary>
        </member>
        <member name="F:System.Windows.Controls.CollectionViewGroupRoot.UseAsItemDirectly">
            <summary>
            Private accessor for empty object instance
            </summary>
        </member>
        <member name="F:System.Windows.Controls.CollectionViewGroupRoot.topLevelGroupDescription">
            <summary>
            Private accessor for the top level GroupDescription
            </summary>
        </member>
        <member name="F:System.Windows.Controls.CollectionViewGroupRoot._groupBy">
            <summary>
            Private accessor for an ObservableCollection containing group descriptions
            </summary>
        </member>
        <member name="F:System.Windows.Controls.CollectionViewGroupRoot._isDataInGroupOrder">
            <summary>
            Indicates whether the list of items (after applying the sort and filters, if any) 
            is already in the correct order for grouping.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.CollectionViewGroupRoot._view">
            <summary>
            Private accessor for the owning ICollectionView
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.#ctor(System.ComponentModel.ICollectionView,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CollectionViewGroupRoot"/> class.
            </summary>
            <param name="view">PagedCollectionView that contains this grouping</param>
            <param name="isDataInGroupOrder">True if items are already in correct order for grouping</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.AddToSubgroups(System.Object,System.Boolean,System.Object)">
            <summary>
            Adds specified item to subgroups.
            </summary>
            <param name="item">Item to add.</param>
            <param name="loading">Whether we are currently loading.</param>
            <param name="insertedBefore">The item to insert this item before,
            or <c>null</c> if the item should be added at the end.</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.Initialize">
            <summary>
            Initializes the group descriptions
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notify listeners that this View has changed
            </summary>
            <remarks>
            CollectionViews (and sub-classes) should take their filter/sort/grouping
            into account before calling this method to forward CollectionChanged events.
            </remarks>
            <param name="args">The NotifyCollectionChangedEventArgs to be passed to the EventHandler</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.OnGroupByChanged">
            <summary>
            Notify host that a group description has changed somewhere in the tree
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.RemoveFromSubgroups(System.Object)">
            <summary>
            Remove specified item from subgroups
            </summary>
            <param name="item">Item to remove</param>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.RemoveItemFromSubgroupsByExhaustiveSearch(System.Object)">
            <summary>
            Remove specified item from subgroups using an exhaustive search
            </summary>
            <param name="item">Item to remove</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.AddToSubgroup(System.Object,System.Windows.Controls.CollectionViewGroupInternal,System.Int32,System.Object,System.Boolean,System.Object)">
            <summary>
            Add an item to the subgroup with the given name
            </summary>
            <param name="item">Item to add</param>
            <param name="group">Group to add item to</param>
            <param name="level">The level of grouping.</param>
            <param name="name">Name of subgroup to add to</param>
            <param name="loading">Whether we are currently loading</param>
            <param name="insertedBefore">The item to insert this item before,
            or <c>null</c> if the item should be added at the end.</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.AddToSubgroups(System.Object,System.Windows.Controls.CollectionViewGroupInternal,System.Int32,System.Boolean,System.Object)">
            <summary>
            Add an item to the desired subgroup(s) of the given group
            </summary>
            <param name="item">Item to add</param>
            <param name="group">Group to add item to</param>
            <param name="level">The level of grouping</param>
            <param name="loading">Whether we are currently loading</param>
            <param name="insertedBefore">The item to insert this item before,
            or <c>null</c> if the item should be added at the end.</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.GetGroupDescription(System.Windows.Data.CollectionViewGroup,System.Int32)">
            <summary>
            Returns the description of how to divide the given group into subgroups
            </summary>
            <param name="group">CollectionViewGroup to get group description from</param>
            <param name="level">The level of grouping</param>
            <returns>GroupDescription of how to divide the given group</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.GetGroupName(System.Object,System.ComponentModel.GroupDescription,System.Int32)">
            <summary>
            Get the group name(s) for the given item
            </summary>
            <param name="item">Item to get group name for</param>
            <param name="groupDescription">GroupDescription for the group</param>
            <param name="level">The level of grouping</param>
            <returns>Group names for the specified item</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.InitializeGroup(System.Windows.Controls.CollectionViewGroupInternal,System.Int32,System.Object)">
            <summary>
            Initialize the given group
            </summary>
            <param name="group">Group to initialize</param>
            <param name="level">The level of grouping</param>
            <param name="seedItem">The seed item to compare with to see where to insert</param>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.RemoveFromGroupDirectly(System.Windows.Controls.CollectionViewGroupInternal,System.Object)">
            <summary>
            Remove an item from the direct children of a group.
            </summary>
            <param name="group">Group to remove item from</param>
            <param name="item">Item to remove</param>
            <returns>True if item could not be removed</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.RemoveFromSubgroup(System.Object,System.Windows.Controls.CollectionViewGroupInternal,System.Int32,System.Object)">
            <summary>
            Remove an item from the subgroup with the given name.
            </summary>
            <param name="item">Item to remove</param>
            <param name="group">Group to remove item from</param>
            <param name="level">The level of grouping</param>
            <param name="name">Name of item to remove</param>
            <returns>Return true if the item was not in one of the subgroups it was supposed to be.</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.RemoveFromSubgroups(System.Object,System.Windows.Controls.CollectionViewGroupInternal,System.Int32)">
            <summary>
            Remove an item from the desired subgroup(s) of the given group.
            </summary>
            <param name="item">Item to remove</param>
            <param name="group">Group to remove item from</param>
            <param name="level">The level of grouping</param>
            <returns>Return true if the item was not in one of the subgroups it was supposed to be.</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.RemoveItemFromSubgroupsByExhaustiveSearch(System.Windows.Controls.CollectionViewGroupInternal,System.Object)">
            <summary>
            The item did not appear in one or more of the subgroups it
            was supposed to.  This can happen if the item's properties
            change so that the group names we used to insert it are
            different from the names used to remove it. If this happens,
            remove the item the hard way.
            </summary>
            <param name="group">Group to remove item from</param>
            <param name="item">Item to remove</param>
        </member>
        <member name="E:System.Windows.Controls.CollectionViewGroupRoot.CollectionChanged">
            <summary>
            Raise this event when the (grouped) view changes
            </summary>
        </member>
        <member name="E:System.Windows.Controls.CollectionViewGroupRoot.GroupDescriptionChanged">
            <summary>
            Raise this event when the GroupDescriptions change
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CollectionViewGroupRoot.GroupBySelector">
            <summary>
            Gets or sets a delegate to select the group description as a 
            function of the parent group and its level.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CollectionViewGroupRoot.GroupDescriptions">
            <summary>
            Gets the description of grouping, indexed by level.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CollectionViewGroupRoot.Culture">
            <summary>
            Gets the culture to use during sorting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.CollectionViewGroupRoot.IsDataInGroupOrder">
            <summary>
            Gets or sets a value indicating whether the data is in group order
            </summary>
        </member>
        <member name="T:System.Windows.Controls.CollectionViewGroupRoot.TopLevelGroupDescription">
            <summary>
            TopLevelGroupDescription class
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.TopLevelGroupDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CollectionViewGroupRoot.TopLevelGroupDescription"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewGroupRoot.TopLevelGroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            We have to implement this abstract method, but it should never be called
            </summary>
            <param name="item">Item to get group name from</param>
            <param name="level">The level of grouping</param>
            <param name="culture">Culture used for sorting</param>
            <returns>We do not return a value here</returns>
        </member>
        <member name="T:System.Windows.Controls.DeferHelper">
            <summary>
            Used to keep track of <see cref="M:System.ComponentModel.ICollectionView.DeferRefresh"/> calls on the
            <see cref="T:System.Windows.Controls.EntityCollectionView"/>, which will prevent the consumer from
            calling <see cref="M:System.ComponentModel.ICollectionView.Refresh"/> on the view. In order to allow
            refreshes again, the consumer will have to call <see cref="M:System.IDisposable.Dispose"/>,
            to end the operation.
            </summary>
            <remarks>
            Also used by the <see cref="T:System.Windows.Controls.DomainDataSource"/> and its <see cref="M:System.Windows.Controls.DomainDataSource.DeferLoad"/> mechanism.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.DeferHelper._disposedCallback">
            <summary>
            The callback to issue when this <see cref="T:System.Windows.Controls.DeferHelper"/> is disposed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DeferHelper.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DeferHelper"/> class.
            </summary>
            <param name="disposedCallback">
            The action to call when this <see cref="T:System.Windows.Controls.DeferHelper"/> is disposed.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DeferHelper.Dispose">
            <summary>
            The consumer of this deferral is finished, thus we will call the callback
            provided to the constructor, indicating that this object has been disposed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSourceCommand">
            <summary>
            Command implementation that delegates to the <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceCommand.#ctor(System.Windows.Controls.DomainDataSource,System.String,System.Func{System.Boolean},System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DomainDataSourceCommand"/> class.
            </summary>
            <param name="domainDataSource">The <see cref="T:System.Windows.Controls.DomainDataSource"/> to delegate to</param>
            <param name="propertyFilter">The filter is compared to the property name in events raised
            by the <see cref="T:System.Windows.Controls.DomainDataSource"/> notifier. If it matches, a <see cref="E:System.Windows.Controls.DomainDataSourceCommand.CanExecuteChanged"/>
            event will be raised.
            </param>
            <param name="canExecute">Function used to determine whether this command can be executed</param>
            <param name="execute">Action invoked when executing this command</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceCommand.CanExecute(System.Object)">
            <summary>
            Determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command</param>
            <returns><c>true</c> if this command can be executed; otherwise, <c>false</c></returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceCommand.Execute(System.Object)">
            <summary>
            Invokes the command.
            </summary>
            <param name="parameter">Data used by the command</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if <see cref="M:System.Windows.Controls.DomainDataSourceCommand.CanExecute(System.Object)"/> returns <c>false</c>
            </exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceCommand.HandlePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles a property change event raised by the <see cref="T:System.Windows.Controls.DomainDataSource"/> notifier.
            </summary>
            <param name="sender">The <see cref="T:System.Windows.Controls.DomainDataSource"/> notifier</param>
            <param name="e">The property change event</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceCommand.OnCanExecuteChanged(System.EventArgs)">
            <summary>
            Raises a <see cref="E:System.Windows.Controls.DomainDataSourceCommand.CanExecuteChanged"/> event.
            </summary>
            <param name="e">The event args to raise</param>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSourceCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSourceView">
            <summary>
            Collection view for the <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            </summary>
            <remarks>
            This view supports adding, removing, access, and paging. For other standard view
            functions like sorting, filtering, and grouping, use of the Descriptor collections
            on the <see cref="T:System.Windows.Controls.DomainDataSource"/> is recommended.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.#ctor(System.Windows.Controls.PagedEntityCollectionView)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DomainDataSourceView"/> class.
            </summary>
            <param name="entityCollectionView">The <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/> to wrap</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.Add(System.Object)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">The item to add</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if <see cref="P:System.Windows.Controls.DomainDataSourceView.CanAdd"/> if <c>false</c>.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.GetItemAt(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index to get the item at</param>
            <returns>The item at the specified index</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> is thrown if <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.IndexOf(System.Object)">
            <summary>
            Gets the ordinal position of the specified item within the view.
            </summary>
            <param name="item">The item to get the index of.</param>
            <returns>Returns the index.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.Contains(System.Object)">
            <summary>
            Returns a value that indicates whether a given item belongs to this view.
            </summary>
            <param name="item">The item to check</param>
            <returns><c>true</c> if the item belongs to this view; otherwise <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.Contains(System.Object)"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.MoveCurrentTo(System.Object)">
            <summary>
            Sets the specified item to be the <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/> in the view.
            </summary>
            <param name="item">The item to set as the <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/>.</param>
            <returns><c>true</c> if the resulting <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/> is within the view; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.MoveCurrentToFirst">
            <summary>
            Sets the first item in the view as the <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/>.
            </summary>
            <returns><c>true</c> if the resulting <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/> is within the view; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.MoveCurrentToLast">
            <summary>
            Sets the last item in the view as the <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/>.
            </summary>
            <returns><c>true</c> if the resulting <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/> is within the view; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.MoveCurrentToLast"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.MoveCurrentToNext">
            <summary>
            Sets the item after the <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/> in the view as the <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/>.
            </summary>
            <returns><c>true</c> if the resulting <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/> is within the view; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.MoveCurrentToNext"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.MoveCurrentToPosition(System.Int32)">
            <summary>
            Sets the item at the specified index to be the <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/> in the view.
            </summary>
            <param name="position">The index to set the <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/> to</param>
            <returns><c>true</c> if the resulting <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/> is within the view; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.MoveCurrentToPrevious">
            <summary>
            Sets the item before the <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/> in the view as the <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/>.
            </summary>
            <returns><c>true</c> if the resulting <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/> is within the view; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.OnCollectionViewCurrentChanged(System.Object,System.EventArgs)">
            <summary>
            Handles current changed events raised by the <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
            <param name="sender">The <see cref="T:System.ComponentModel.ICollectionView"/></param>
            <param name="e">The event to handle</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.OnCurrentChanged(System.EventArgs)">
            <summary>
            Raises current changed events
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.OnCollectionViewCurrentChanging(System.Object,System.ComponentModel.CurrentChangingEventArgs)">
            <summary>
            Handles current changing events raised by the <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
            <param name="sender">The <see cref="T:System.ComponentModel.ICollectionView"/></param>
            <param name="e">The event to handle</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.OnCurrentChanging(System.ComponentModel.CurrentChangingEventArgs)">
            <summary>
            Raises current changing events
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.OnCollectionViewCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection changed events raised by the <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
            <param name="sender">The <see cref="T:System.ComponentModel.ICollectionView"/></param>
            <param name="e">The event to handle</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises collection changed events
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.Remove(System.Object)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <seealso cref="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified position from the collection.
            </summary>
            <param name="index">The position of the item to remove</param>
            <seealso cref="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.MoveToFirstPage">
            <summary>
            Sets the first page as the current page.
            </summary>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.IPagedCollectionView.MoveToFirstPage"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.MoveToLastPage">
            <summary>
            Sets the last page as the current page.
            </summary>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.IPagedCollectionView.MoveToLastPage"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.MoveToNextPage">
            <summary>
            Moves to the page after the current page.
            </summary>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.IPagedCollectionView.MoveToNextPage"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.MoveToPage(System.Int32)">
            <summary>
            Sets the first page as the current page.
            </summary>
            <param name="pageIndex">The index of the page to move to</param>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.IPagedCollectionView.MoveToPage(System.Int32)"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.MoveToPreviousPage">
            <summary>
            Moves to the page before the current page.
            </summary>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.IPagedCollectionView.MoveToPreviousPage"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.OnPagedCollectionViewPageChanged(System.Object,System.EventArgs)">
            <summary>
            Handles page changed events raised by the <see cref="T:System.ComponentModel.IPagedCollectionView"/>.
            </summary>
            <param name="sender">The <see cref="T:System.ComponentModel.IPagedCollectionView"/></param>
            <param name="e">The event to handle</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.OnPageChanged(System.EventArgs)">
            <summary>
            Raises page changed events
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.OnPagedCollectionViewPageChanging(System.Object,System.ComponentModel.PageChangingEventArgs)">
            <summary>
            Handles page changing events raised by the <see cref="T:System.ComponentModel.IPagedCollectionView"/>.
            </summary>
            <param name="sender">The <see cref="T:System.ComponentModel.IPagedCollectionView"/></param>
            <param name="e">The event to handle</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.OnPageChanging(System.ComponentModel.PageChangingEventArgs)">
            <summary>
            Raises page changing events
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.OnPagedEntityCollectionViewPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles property changed events raised by the <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/>.
            </summary>
            <param name="sender">The <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/></param>
            <param name="e">The event to handle</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises property changed events
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.NotifyProperties">
            <summary>
            Gets a list of the public properties supported in <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> events.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index to get the item at</param>
            <returns>The item at the specified index</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> is thrown if <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.CanAdd">
            <summary>
            Gets a value indicating whether items can be added to the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.Count">
            <summary>
            Gets the count of the items currently in this view.
            </summary>
            <remarks>
            This count only applies to the current view and does not represent the total
            count of items that may be in a paged view.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.PageCount">
            <summary>
            Gets the count of the pages in this view.
            </summary>
            <remarks>
            When <see cref="P:System.Windows.Controls.DomainDataSourceView.PageSize"/> is 0, the <see cref="P:System.Windows.Controls.DomainDataSourceView.PageCount"/> will also be 0.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.PagedEntityCollectionView">
            <summary>
            Gets the underlying collection
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.CollectionView">
            <summary>
            Gets the underlying collection as an <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.EditableCollectionView">
            <summary>
            Gets the underlying collection as an <see cref="T:System.ComponentModel.IEditableCollectionView"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.PagedCollectionView">
            <summary>
            Gets the underlying collection as an <see cref="T:System.ComponentModel.IPagedCollectionView"/>.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSourceView.CurrentChanged">
            <summary>
            Event raised after the current item has been changed.
            </summary>
            <seealso cref="E:System.ComponentModel.ICollectionView.CurrentChanged"/>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSourceView.CurrentChanging">
            <summary>
            Event raised before changing the current item.
            </summary>
            <seealso cref="E:System.ComponentModel.ICollectionView.CurrentChanging"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.CurrentItem">
            <summary>
            Gets the current item in the view.
            </summary>
            <remarks>
            Returns <c>null</c> if there is no current item.
            </remarks>
            <seealso cref="P:System.ComponentModel.ICollectionView.CurrentItem"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.CurrentPosition">
            <summary>
            Gets the ordinal position of the <see cref="P:System.Windows.Controls.DomainDataSourceView.CurrentItem"/> within the view.
            </summary>
            <remarks>
            Returns -1 if there is no current item.
            </remarks>
            <seealso cref="P:System.ComponentModel.ICollectionView.CurrentPosition"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.IsEmpty">
            <summary>
            Gets a value that indicates whether the resulting view is empty.
            </summary>
            <seealso cref="P:System.ComponentModel.ICollectionView.IsEmpty"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.CanRemove">
            <summary>
            Gets a value that indicates whether an item can be removed from the collection.
            </summary>
            <seealso cref="P:System.ComponentModel.IEditableCollectionView.CanRemove"/>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSourceView.PageChanged">
            <summary>
            Event raised after the <see cref="P:System.Windows.Controls.DomainDataSourceView.PageIndex"/> has changed.
            </summary>
            <seealso cref="E:System.ComponentModel.IPagedCollectionView.PageChanged"/>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSourceView.PageChanging">
            <summary>
            Event raised before changing the <see cref="P:System.Windows.Controls.DomainDataSourceView.PageIndex"/>.
            </summary>
            <seealso cref="E:System.ComponentModel.IPagedCollectionView.PageChanging"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.CanChangePage">
            <summary>
            Gets a value that indicates whether the <see cref="P:System.Windows.Controls.DomainDataSourceView.PageIndex"/> value can change.
            </summary>
            <seealso cref="P:System.ComponentModel.IPagedCollectionView.CanChangePage"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.IsPageChanging">
            <summary>
            Gets a value that indicates whether the page index is changing.
            </summary>
            <seealso cref="P:System.ComponentModel.IPagedCollectionView.IsPageChanging"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.PageIndex">
            <summary>
            Gets the zero-based index of the current page.
            </summary>
            <seealso cref="P:System.ComponentModel.IPagedCollectionView.PageIndex"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.PageSize">
            <summary>
            Gets or sets the number of items to display on a page.
            </summary>
            <remarks>
            When <see cref="P:System.Windows.Controls.DomainDataSourceView.PageSize"/> is 0, the view is not paging.
            </remarks>
            <seealso cref="P:System.ComponentModel.IPagedCollectionView.PageSize"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceView.TotalItemCount">
            <summary>
            Gets the total number of items in the view before paging is applied,
            or -1 if that total number is unknown.
            </summary>
            <seealso cref="P:System.ComponentModel.IPagedCollectionView.TotalItemCount"/>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSourceView.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Event raised 
            </summary>
        </member>
        <member name="T:System.Windows.Controls.EntityCollectionView`1">
            <summary>
            A standard implementation of <see cref="T:System.ComponentModel.ICollectionView"/> and <see cref="T:System.ComponentModel.IEditableCollectionView"/> that also represents
            an <see cref="T:System.Collections.Generic.IEnumerable`1"/> for <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> types.
            </summary>
            <remarks>
            This view implementation uses delegates defined in an <see cref="T:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates"/>
            instance to define what methods to call for functionality that must be implemented in the underlying <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </remarks>
            <typeparam name="TEntity">The type of <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> enumerable that this view represents.</typeparam>
        </member>
        <member name="T:System.Windows.Controls.EntityCollectionView">
            <summary>
            A standard implementation of <see cref="T:System.ComponentModel.ICollectionView"/> and <see cref="T:System.ComponentModel.IEditableCollectionView"/> that also represents
            an <see cref="T:System.Collections.IEnumerable"/> for <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> types.
            </summary>
            <remarks>
            This view implementation uses delegates defined in an <see cref="T:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates"/>
            instance to define what methods to call for functionality that must be implemented in the underlying <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.EntityCollectionView.uncancelableCurrentChangingEventArgs">
            <summary>
            Since there's nothing in the un-cancelable event args that is mutable,
            just create one instance to be used universally.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.EntityCollectionView._currentChangedMonitor">
            <summary>
            Private accessor for the monitor we use to prevent recursion
            </summary>
        </member>
        <member name="F:System.Windows.Controls.EntityCollectionView._isCurrentChangedEventPending">
            <summary>
            Private field to indicate if there is a pending <see cref="E:System.Windows.Controls.EntityCollectionView.CurrentChanged"/> event,
            indicating that no further <see cref="E:System.Windows.Controls.EntityCollectionView.CurrentChanging"/> events should be raiesd and
            that a <see cref="E:System.Windows.Controls.EntityCollectionView.CurrentChanged"/> event needs to be raised.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.EntityCollectionView._deferLevel">
            <summary>
            The number of defers that have been nested.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.EntityCollectionView"/> class
            that will wrap around the specified <paramref name="source"/>.
            </summary>
            <remarks>
            We default to support <see cref="F:System.ServiceModel.DomainServices.Client.EntitySetOperations.Add"/> and <see cref="F:System.ServiceModel.DomainServices.Client.EntitySetOperations.Remove"/>
            <see cref="T:System.ServiceModel.DomainServices.Client.EntitySetOperations"/> using the default implementations of methods such as
            <see cref="M:System.Collections.IList.Add(System.Object)"/> and <see cref="M:System.Collections.IList.Remove(System.Object)"/> when the <paramref name="source"/> implements
            <see cref="T:System.Collections.IList"/>.
            <para>
            If the <paramref name="source"/> doesn't implement <see cref="T:System.Collections.IList"/>, then
            the view will disable the functions that cannot be utilized.
            </para>
            <para>
            Because there is no default implementation if <see cref="M:System.Windows.Controls.EntityCollectionView.EditItem(System.Object)"/>, we don't allow that
            operation by default.
            </para>
            </remarks>
            <param name="source">Any enumerable of a type that derives from <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.#ctor(System.Collections.IEnumerable,System.ServiceModel.DomainServices.Client.EntitySetOperations)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.EntityCollectionView"/> class
            that will wrap around the specified <paramref name="source"/>.
            </summary>
            <param name="source">Any enumerable of a type that derives from <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>.</param>
            <param name="supportedOperations">Which <see cref="T:System.ServiceModel.DomainServices.Client.EntitySetOperations"/> to support in the view.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.#ctor(System.Collections.IEnumerable,System.ServiceModel.DomainServices.Client.EntitySetOperations,System.Windows.Controls.EntityCollectionView.CollectionViewDelegates)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.EntityCollectionView"/> class
            that will wrap around the specified <paramref name="source"/>.
            </summary>
            <param name="source">Any enumerable of a type that derives from <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>.</param>
            <param name="supportedOperations">Which <see cref="T:System.ServiceModel.DomainServices.Client.EntitySetOperations"/> to support in the view.</param>
            <param name="delegates">
            How to call back into the <paramref name="source"/> collection for operations such as
            <see cref="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Add"/> and <see cref="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Remove"/>.
            </param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.DeferRefreshDisposed">
            <summary>
            Handle the disposal of a <see cref="M:System.Windows.Controls.EntityCollectionView.DeferRefresh"/>, decrementing our defer level
            and when <c>0</c>, calling the <see cref="M:System.Windows.Controls.EntityCollectionView.DeferRefreshEnded"/> method.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.DeferRefreshEnded">
            <summary>
            Virtual method called when a <see cref="M:System.Windows.Controls.EntityCollectionView.DeferRefresh"/> cycle has ended,
            allowing derived classes to implement a refresh differently.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.ApplyDefaultDelegates">
            <summary>
            Apply default delegates that were not supplied.  This allows views to be
            created with default implementations for methods such as
            <see cref="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Add"/> and <see cref="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Remove"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.DefaultContainsImplementation(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            The default implementation for the <see cref="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Contains"/> delegate.
            </summary>
            <param name="item">The item to be tested.</param>
            <returns>Whether or not the source list contains the <paramref name="item"/>.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.DefaultIndexOfImplementation(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            The default implementation for the <see cref="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.IndexOf"/> delegate.
            </summary>
            <param name="item">The item to be tested.</param>
            <returns>
            The index of the <paramref name="item"/> within the source list, or <c>-1</c> if the item is not
            in the list.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.DefaultGetItemAtImplementation(System.Int32)">
            <summary>
            The default implementation for the <see cref="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.GetItemAt"/> delegate.
            </summary>
            <param name="index">The index of the entity to retrieve.</param>
            <returns>
            The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> at the specified index, or <c>null</c> if the index is out of bounds.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.DefaultCountImplementation">
            <summary>
            The default implementation for the <see cref="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Count"/> delegate.
            </summary>
            <returns>The count of items in the source list.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.DefaultRemoveAtImplementation(System.Int32)">
            <summary>
            The default implementation for the <see cref="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.RemoveAt"/> delegate.
            </summary>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.CalculateAllCalculatedProperties">
            <summary>
            Calculates all of the properties that are calculated through CalculateX methods.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.CalculateCanAddNew">
            <summary>
            Calculates <see cref="P:System.Windows.Controls.EntityCollectionView.CanAddNew"/> by determining if an <see cref="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Add"/> delegate
            exists and the <see cref="F:System.ServiceModel.DomainServices.Client.EntitySetOperations.Add"/> operation is supported.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.CalculateCanCancelEdit">
            <summary>
            Calculates <see cref="P:System.Windows.Controls.EntityCollectionView.CanCancelEdit"/> by determining if the <see cref="F:System.ServiceModel.DomainServices.Client.EntitySetOperations.Edit"/>
            operation is supported.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.CalculateCanRemove">
            <summary>
            Calculates <see cref="P:System.Windows.Controls.EntityCollectionView.CanRemove"/> from the <see cref="P:System.Windows.Controls.EntityCollectionView.IsAddingNew"/>, <see cref="P:System.Windows.Controls.EntityCollectionView.IsEditingItem"/>, and supported operations.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.CalculateIsAddingNew">
            <summary>
            Calculates <see cref="P:System.Windows.Controls.EntityCollectionView.IsAddingNew"/> from the <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentAddItem"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.CalculateIsEditingItem">
            <summary>
            Calculates <see cref="P:System.Windows.Controls.EntityCollectionView.IsEditingItem"/> from the <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentEditItem"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.CommittedEdit(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            Virtual method to be called after an entity has had an edit committed.
            </summary>
            <remarks>
            This allows derived views to provide post-processing when an edit is committed.
            </remarks>
            <param name="editItem">The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> that was committed.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.CommittedNew(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            Virtual method to be called after an entity has been committed as a new entity.
            </summary>
            <remarks>
            This allows derived views to provide post-processing when an entity is committed as new.
            </remarks>
            <param name="newItem">The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> that was committed.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.EndAddNew(System.Boolean)">
            <summary>
            Common functionality used by <see cref="M:System.Windows.Controls.EntityCollectionView.CommitNew"/>, <see cref="M:System.Windows.Controls.EntityCollectionView.CancelNew"/>,
            and when the new item is removed by <see cref="M:System.Windows.Controls.EntityCollectionView.Remove(System.Object)"/> or <see cref="M:System.Windows.Controls.EntityCollectionView.Refresh"/>.
            </summary>
            <param name="cancel">Whether we canceled the add</param>
            <returns>The new item we ended adding</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.EnsureValidCurrency">
            <summary>
            Ensure that our currency is valid within the view, adjusting the <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentPosition"/>
            as necessary and raising <see cref="E:System.Windows.Controls.EntityCollectionView.CurrentChanging"/> and <see cref="E:System.Windows.Controls.EntityCollectionView.CurrentChanged"/> events
            for changes that have occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.IsOperationSupported(System.ServiceModel.DomainServices.Client.EntitySetOperations)">
            <summary>
            Gets a value that indicates whether an operation is supported by this view.
            </summary>
            <param name="operation">The <see cref="T:System.ServiceModel.DomainServices.Client.EntitySetOperations"/> value to check.</param>
            <returns><c>true</c> if the view supports the operations, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the collection has changed and a <see cref="E:System.Windows.Controls.EntityCollectionView.CollectionChanged"/> event needs
            to be raised.
            </summary>
            <remarks>
            This method is virtual to allow derived views to implement additional logic into the flow
            of raising collection changed events.
            </remarks>
            <param name="args">The event args to use on the raised event.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.HandleSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handle a <see cref="E:System.Windows.Controls.EntityCollectionView.CollectionChanged"/> event from the source collection.
            </summary>
            <param name="sender">The sender of the event being handled.</param>
            <param name="e">The event arguments of the event being handled.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.SourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Respond to a <see cref="E:System.Windows.Controls.EntityCollectionView.CollectionChanged"/> event on the source collection.
            </summary>
            <remarks>
            This method is virtual to allow derived views to alter the logic of handling
            events from the source collection.
            </remarks>
            <param name="e">The event arguments of the event from the source collection.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.OkToChangeCurrent">
            <summary>
            Ask listeners (via <see cref="E:System.Windows.Controls.EntityCollectionView.CurrentChanging"/> event) if it's OK to change currency.
            </summary>
            <returns><c>false</c> if a listener cancels the change, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.OnCurrentChanging(System.ComponentModel.CurrentChangingEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.EntityCollectionView.CurrentChanging"/> event on the view.
            </summary>
            <param name="args">
            <see cref="T:System.ComponentModel.CancelEventArgs"/> used by the consumer of the event.
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> will be <c>true</c> after this
            call if the <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> should not be changed for
            any reason.
            </param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.RaiseCurrentChanging">
            <summary>
            Raise a <see cref="E:System.Windows.Controls.EntityCollectionView.CurrentChanging"/> event that is not cancelable.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.RaiseCurrentChanged(System.Object,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Raises necessary events for when the currency has changed.
            </summary>
            <param name="oldCurrentItem">The previous <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> value.</param>
            <param name="oldCurrentPosition">The previous <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentPosition"/> value.</param>
            <param name="oldIsCurrentBeforeFirst">The previous <see cref="P:System.Windows.Controls.EntityCollectionView.IsCurrentBeforeFirst"/> value.</param>
            <param name="oldIsCurrentAfterLast">The previous <see cref="P:System.Windows.Controls.EntityCollectionView.IsCurrentAfterLast"/> value.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.RaisePropertyChanged(System.String)">
            <summary>
            Raises a <see cref="E:System.Windows.Controls.EntityCollectionView.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The property that has changed.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.SetCurrent(System.Object,System.Int32,System.Int32)">
            <summary>
            Set <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> and <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentPosition"/>.
            </summary>
            <remarks>
            This method can be called from a constructor - it does not call any virtuals.
            <para>
            The <paramref name="count"/> parameter is substitute for the real Count, used only
            when <paramref name="newItem"/>is <c>null</c>.  In that case, this method sets
            <see cref="P:System.Windows.Controls.EntityCollectionView.IsCurrentAfterLast"/> to <c>true</c> if and only if
            <paramref name="newPosition"/> &gt;= <paramref name="count"/>.  This distinguishes
            between a <c>null</c> belonging to the view and the dummy <c>null</c> when
            <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentPosition"/> is past the end.
            </para>
            </remarks>
            <param name="newItem">New <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/>.</param>
            <param name="newPosition">New <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentPosition"/>.</param>
            <param name="count">Numbers of items in the collection</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.SetCurrentToPosition(System.Int32)">
            <summary>
            Just move it. No argument check, no events, just move current to position.
            </summary>
            <param name="position">Position to move the current item to</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.SubscribeToCollectionChanged">
            <summary>
            Subscribe to the <see cref="E:System.Windows.Controls.EntityCollectionView.CollectionChanged"/> event on the source collection
            if it implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.VerifyRefreshNotDeferred">
            <summary>
            Verify that there isn't a pending <see cref="M:System.Windows.Controls.EntityCollectionView.DeferRefresh"/>.  Many operations against
            the view are blocked during a deferred refresh.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.GetEnumerator">
            <summary>
            Gets the enumerator for this <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <returns>An enumerator for the source enumerable.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.Contains(System.Object)">
            <summary>
            Return true if the item belongs to this view.  No assumptions are
            made about the item. This method will behave similarly to IList.Contains().
            </summary>
            <param name="item">The item to be tested.</param>
            <returns><c>true</c> if the item is in the collection, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.DeferRefresh">
            <summary>
            Enter a Defer Cycle. Defer cycles are used to coalesce changes to the ICollectionView.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> object that will close the defer cycle when disposed.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.MoveCurrentTo(System.Object)">
            <summary>
            Move <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> to the given item.
            </summary>
            <param name="item">Move CurrentItem to this item.</param>
            <returns>true if <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> points to an item within the view.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.MoveCurrentToFirst">
            <summary>
            Move <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> to the first item.
            </summary>
            <returns>true if <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> points to an item within the view.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.MoveCurrentToLast">
            <summary>
            Move <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> to the last item.
            </summary>
            <returns>true if <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> points to an item within the view.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.MoveCurrentToNext">
            <summary>
            Move <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> to the next item.
            </summary>
            <returns>true if <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> points to an item within the view.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.MoveCurrentToPrevious">
            <summary>
            Move <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> to the previous item.
            </summary>
            <returns>true if <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> points to an item within the view.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.MoveCurrentToPosition(System.Int32)">
            <summary>
            Move <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> to the item at the given index.
            </summary>
            <param name="position">Move CurrentItem to this index</param>
            <returns>true if <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> points to an item within the view.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.Refresh">
            <summary>
            Re-create the view, using any <seealso cref="P:System.Windows.Controls.EntityCollectionView.SortDescriptions"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.AddNew">
            <summary>
            Add a new item to the underlying collection.  Returns the new item.
            After calling AddNew and changing the new item as desired, either
            <see cref="M:System.Windows.Controls.EntityCollectionView.CommitNew"/> or <see cref="M:System.Windows.Controls.EntityCollectionView.CancelNew"/> should be called
            to complete the transaction.
            </summary>
            <returns>The item that is created and added.</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.CancelEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:System.Windows.Controls.EntityCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are discarded.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.CancelNew">
            <summary>
            Cancel the transaction started by <seealso cref="M:System.Windows.Controls.EntityCollectionView.AddNew"/>.  The new
            item is removed from the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.CommitEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:System.Windows.Controls.EntityCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are committed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.CommitNew">
            <summary>
            Complete the transaction started by <seealso cref="M:System.Windows.Controls.EntityCollectionView.AddNew"/>.
            The pending changes (if any) to the item are committed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.EditItem(System.Object)">
            <summary>
            Begins an editing transaction on the given item.  The transaction is
            completed by calling either <see cref="M:System.Windows.Controls.EntityCollectionView.CommitEdit"/> or <see cref="M:System.Windows.Controls.EntityCollectionView.CancelEdit"/>.
            Any changes made to the item during the transaction are considered "pending", provided 
            that the view supports the notion of "pending changes" for the given item.
            </summary>
            <remarks>
            While it's possible that the underlying collection doesn't
            support editing, the <see cref="T:System.ComponentModel.IEditableCollectionView"/> interface does
            not have a mechanism for specifying that CanEdit is <c>false</c>.  Throwing
            an exception if editing is disallowed would lead to a crash when attempting to edit
            the item, without being able to check for the condition beforehand.  By allowing this
            operation to succeed, the caller when then get an exception only if changes are made
            on the entity's properties, and that can surface as a validation error in the UI.
            </remarks>
            <param name="item">Item to be edited.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.Remove(System.Object)">
            <summary>
            Remove the given item from the underlying collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the given index from the underlying collection.
            The index is interpreted with respect to the view (not with respect to
            the underlying collection).
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.SourceList">
            <summary>
            Gets the source collection as an <see cref="T:System.Collections.IList"/> so that we can easily test
            for this implementation and utilize <see cref="M:System.Collections.IList.Add(System.Object)"/> and <see cref="M:System.Collections.IList.Remove(System.Object)"/>
            methods if applicable.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.SourceEntities">
            <summary>
            Gets the source collection as an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.IsCurrentChangedEventPending">
            <summary>
            Gets a value indicating whether there is a pending <see cref="E:System.Windows.Controls.EntityCollectionView.CurrentChanged"/> event.
            </summary>
            <remarks>
            This is used to help ensure symmetry between <see cref="E:System.Windows.Controls.EntityCollectionView.CurrentChanging"/> and
            <see cref="E:System.Windows.Controls.EntityCollectionView.CurrentChanged"/> events.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.IsCurrentInSync">
            <summary>
            Gets a value indicating whether <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> and <see cref="P:System.Windows.Controls.EntityCollectionView.CurrentPosition"/>
            are up-to-date with the state and content of the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.IsCurrentInView">
            <summary>
            Gets a value indicating whether the current item is in the view.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.IsRefreshDeferred">
            <summary>
            Gets a value indicating whether there is still an outstanding
            <see cref="M:System.Windows.Controls.EntityCollectionView.DeferRefresh"/> in use.  If at all possible,
            derived classes should not call <see cref="M:System.Windows.Controls.EntityCollectionView.Refresh"/> if
            <see cref="P:System.Windows.Controls.EntityCollectionView.IsRefreshDeferred"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.Delegates">
            <summary>
            Gets the set of <see cref="T:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates"/> that
            provide implementations on the source collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.SupportedOperations">
            <summary>
            Gets or sets the set of <see cref="T:System.ServiceModel.DomainServices.Client.EntitySetOperations"/>
            supported by this view.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CanFilter">
            <summary>
            Indicates whether or not this ICollectionView can do any filtering.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CanGroup">
            <summary>
            Returns true if this view really supports grouping.
            When this returns false, the rest of the interface is ignored.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CanSort">
            <summary>
            Whether or not this ICollectionView does any sorting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.Culture">
            <summary>
            Culture contains the CultureInfo used in any operations of the
            ICollectionView that may differ by Culture, such as sorting.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.EntityCollectionView.CurrentChanging">
            <summary>
            Raise this event before change of current item pointer.  Handlers can cancel the change.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.EntityCollectionView.CurrentChanged">
            <summary>
            Raise this event after changing to a new current item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CurrentItem">
            <summary>
            Return current item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CurrentPosition">
            <summary>
            The ordinal position of the <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> within the view.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.Filter">
            <summary>
            Predicate-based filtering is not supported by this class.
            </summary>
            <exception cref="T:System.InvalidOperationException">thrown any time the getter or setter for this property is used.</exception>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.GroupDescriptions">
            <summary>
            The description of grouping, indexed by level.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.Groups">
            <summary>
            The top-level groups, constructed according to the descriptions
            given in GroupDescriptions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.IsCurrentAfterLast">
            <summary>
            Return true if <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> is beyond the end of the view.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.IsCurrentBeforeFirst">
            <summary>
            Return true if <seealso cref="P:System.Windows.Controls.EntityCollectionView.CurrentItem"/> is before the beginning of the view.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.IsEmpty">
            <summary>
            Returns true if the view is emtpy.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.SortDescriptions">
            <summary>
            Collection of Sort criteria to sort items in this view over the SourceCollection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.SourceCollection">
            <summary>
            SourceCollection is the original un-filtered collection of which
            this ICollectionView is a view.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.EntityCollectionView.CollectionChanged">
            <summary>
            Occurs when the collection changes, either by adding or removing an item.
            </summary>
            <remarks>
            The event handler receives an argument of type
            <seealso cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/>
            containing data related to this event.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CanAddNew">
            <summary>
            Return true if the view supports <seealso cref="M:System.Windows.Controls.EntityCollectionView.AddNew"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CanCancelEdit">
            <summary>
            Returns true if the view supports the notion of "pending changes" on the
            current edit item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CanRemove">
            <summary>
            Return true if the view supports <seealso cref="M:System.Windows.Controls.EntityCollectionView.Remove(System.Object)"/> and
            <seealso cref="M:System.Windows.Controls.EntityCollectionView.RemoveAt(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CurrentAddItem">
            <summary>
            When an <seealso cref="M:System.Windows.Controls.EntityCollectionView.AddNew"/> transaction is in progress, this property
            returns the new item.  Otherwise it returns null.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CurrentEditItem">
            <summary>
            When an <seealso cref="M:System.Windows.Controls.EntityCollectionView.EditItem(System.Object)"/> transaction is in progress, this property
            returns the affected item.  Otherwise it returns null.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.IsAddingNew">
            <summary>
            Returns true if an <seealso cref="M:System.Windows.Controls.EntityCollectionView.AddNew"/> transaction is in progress.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.IsEditingItem">
            <summary>
            Gets a value indicating whether an <see cref="M:System.Windows.Controls.EntityCollectionView.EditItem(System.Object)"/> transaction is in progress.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.NewItemPlaceholderPosition">
            <summary>
            Indicates whether to include a placeholder for a new item, and if so,
            where to put it.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.EntityCollectionView.PropertyChanged">
            <summary>
            Event raised when a public property value has changed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.EntityCollectionView.SimpleMonitor">
            <summary>
            A simple monitor class to help prevent re-entrant calls
            </summary>
        </member>
        <member name="F:System.Windows.Controls.EntityCollectionView.SimpleMonitor.entered">
            <summary>
            Whether the monitor is entered
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.SimpleMonitor.Enter">
            <summary>
            Sets a value indicating that we have been entered
            </summary>
            <returns>Boolean value indicating whether we were already entered</returns>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView.SimpleMonitor.Dispose">
            <summary>
            Cleanup method called when done using this class
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.SimpleMonitor.Busy">
            <summary>
            Gets a value indicating whether we have been entered or not
            </summary>
        </member>
        <member name="T:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates">
            <summary>
            A class that defines the delegates needed for the
            <see cref="T:System.Windows.Controls.EntityCollectionView"/>.
            </summary>
            <remarks>
            Consumers of the <see cref="T:System.Windows.Controls.EntityCollectionView"/>
            can specify delegates to call for these methods, and
            derived collection views can override
            <see cref="M:System.Windows.Controls.EntityCollectionView.ApplyDefaultDelegates"/> to override behavior.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Contains">
            <summary>
            Used from the <see cref="M:System.ComponentModel.ICollectionView.Contains(System.Object)"/> method.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.IndexOf">
            <summary>
            Gets the index of the specified entity.  Used to
            maintain valid currency position.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.GetItemAt">
            <summary>
            Gets the entity at the specified index.  Used to
            maintain valid currency position.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Count">
            <summary>
            Used to maintain valid currency position.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Add">
            <summary>
            Used from the <see cref="M:System.ComponentModel.IEditableCollectionView.AddNew"/> method
            to add a created entity to the source.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Remove">
            <summary>
            Used from the <see cref="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)"/> method
            to remove an entity from the source.
            </summary>
            <remarks>
            Also used from <see cref="M:System.ComponentModel.IEditableCollectionView.CancelNew"/> to
            remove a newly added entity
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.RemoveAt">
            <summary>
            Used from the <see cref="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)"/> method
            to remove an entity from the source by index.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.CreateInstance">
            <summary>
            Used from the <see cref="M:System.ComponentModel.IEditableCollectionView.AddNew"/> method
            to construct a new entity to be added to the source.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.EntityCollectionView`1"/> class
            that will wrap around the specified <paramref name="source"/>.
            </summary>
            <remarks>
            We default to support <see cref="F:System.ServiceModel.DomainServices.Client.EntitySetOperations.Add"/> and <see cref="F:System.ServiceModel.DomainServices.Client.EntitySetOperations.Remove"/>
            <see cref="T:System.ServiceModel.DomainServices.Client.EntitySetOperations"/> using the default implementations of methods such as
            <see cref="M:System.Collections.IList.Add(System.Object)"/> and <see cref="M:System.Collections.IList.Remove(System.Object)"/> when the <paramref name="source"/> implements
            <see cref="T:System.Collections.IList"/>.
            <para>
            If the <paramref name="source"/> doesn't implement <see cref="T:System.Collections.IList"/>, then
            the view will disable the functions that cannot be utilized.
            </para>
            <para>
            Because there is no default implementation if <see cref="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)"/>, we don't allow that
            operation by default.
            </para>
            </remarks>
            <param name="source">Any enumerable of a type that derives from <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.ServiceModel.DomainServices.Client.EntitySetOperations)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.EntityCollectionView`1"/> class
            that will wrap around the specified <paramref name="source"/>.
            </summary>
            <param name="source">Any enumerable of a type that derives from <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>.</param>
            <param name="supportedOperations">Which <see cref="T:System.ServiceModel.DomainServices.Client.EntitySetOperations"/> to support in the view.</param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.ServiceModel.DomainServices.Client.EntitySetOperations,System.Windows.Controls.EntityCollectionView.CollectionViewDelegates)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.EntityCollectionView`1"/> class
            that will wrap around the specified <paramref name="source"/>.
            </summary>
            <param name="source">Any enumerable of a type that derives from <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>.</param>
            <param name="supportedOperations">Which <see cref="T:System.ServiceModel.DomainServices.Client.EntitySetOperations"/> to support in the view.</param>
            <param name="delegates">
            How to call back into the <paramref name="source"/> collection for operations such as
            <see cref="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Add"/> and
            <see cref="P:System.Windows.Controls.EntityCollectionView.CollectionViewDelegates.Remove"/>.
            </param>
        </member>
        <member name="M:System.Windows.Controls.EntityCollectionView`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator">
            <summary>
            Gets the enumerator for this <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>An enumerator for the source enumerable.</returns>
        </member>
        <member name="T:System.Windows.Controls.CollectionViewConverter">
            <summary>
            Converter that creates an <see cref="T:System.ComponentModel.ICollectionView"/> instance from an
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> value where the type derives from <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>.
            </summary>
            <remarks>
            If the value is already an <see cref="T:System.ComponentModel.ICollectionView"/>, then it will be returned as-is.
            <para>
            If the value provided implements <see cref="T:System.ComponentModel.ICollectionViewFactory"/>, then
            <see cref="M:System.ComponentModel.ICollectionViewFactory.CreateView"/> will be called to create the view.
            </para>
            <para>
            If the value is neither an <see cref="T:System.ComponentModel.ICollectionView"/> nor an <see cref="T:System.ComponentModel.ICollectionViewFactory"/>,
            then an <see cref="T:System.Windows.Controls.PagedEntityCollectionView`1"/> will be created and returned.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to an <see cref="T:System.Windows.Controls.EntityCollectionView`1"/> if
            the type is an <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> type.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The System.Type of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Unimplemented conversion back to the target type.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The System.Type of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>The value to be passed to the source object.</returns>
            <exception cref="T:System.NotImplementedException">Any time this method is called.  It is not implemented.</exception>
        </member>
        <member name="M:System.Windows.Controls.CollectionViewConverter.IsEnumerableEntityType(System.Type,System.Type@)">
            <summary>
            Determines if the specified <paramref name="type"/> represents a type that implements
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> where T : <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>.  When <c>true</c>, provide
            the type of <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> as the output parameter <paramref name="entityType"/>.
            </summary>
            <param name="type">
            The type to test for <see cref="T:System.Collections.Generic.IEnumerable`1"/> support where T : <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>.
            </param>
            <param name="entityType">
            When the return value is <c>true</c>, this parameter will be set to the type of
            <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> that is represented in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </param>
            <returns>
            <c>true</c> if the <paramref name="type"/> implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            where T : <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.EntityCollectionViewResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionViewResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionViewResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionViewResources.ChangingPageSizeNotAllowedDuringAddOrEdit">
            <summary>
              Looks up a localized string similar to Changing the PageSize is not allowed during an AddNew or EditItem transaction..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionViewResources.IndexOutOfRange">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the size of the collection..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionViewResources.InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionViewResources.InvalidPageSize">
            <summary>
              Looks up a localized string similar to PageSize cannot be a negative value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionViewResources.ItemNotEntityType">
            <summary>
              Looks up a localized string similar to The item provided is not an instance of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionViewResources.NoCheckOrChangeWhenDeferred">
            <summary>
              Looks up a localized string similar to Cannot change or check the contents or Current position of the ICollectionView while Refresh is being deferred..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionViewResources.NotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not supported by this ICollectionView..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionViewResources.OperationNotAllowedDuringAddOrEdit">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed during an AddNew or EditItem transaction..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionViewResources.OperationNotAllowedDuringTransaction">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed during a transaction begun by &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.EntityCollectionViewResources.RefreshWithinDeferRefresh">
            <summary>
              Looks up a localized string similar to Refresh() cannot be called inside a DeferRefresh() transaction..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ExpressionCache">
            <summary>
            A custom dictionary for caching Linq <see cref="T:System.Linq.Expressions.Expression"/>s.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ExpressionCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ExpressionCache"/> class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.FilterCollectionManager">
            <summary>
            Manager that observes and collates the events raised by a <see cref="T:System.Windows.Controls.FilterDescriptorCollection"/>
            and all the <see cref="T:System.Windows.Controls.FilterDescriptor"/>s it contains.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.FilterCollectionManager.#ctor(System.Windows.Controls.FilterDescriptorCollection,System.Windows.Controls.ExpressionCache,System.Action{System.Windows.Controls.FilterDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.FilterCollectionManager"/> class.
            </summary>
            <param name="sourceCollection">The collection of <see cref="T:System.Windows.Controls.FilterDescriptor"/>s to manage</param>
            <param name="expressionCache">The cache with entries for the <see cref="T:System.Windows.Controls.FilterDescriptor"/>s</param>
            <param name="validationAction">The callback for validating items that are added or changed</param>
        </member>
        <member name="T:System.Windows.Controls.GroupCollectionManager">
            <summary>
            Manager that observes and collates the events raised by a <see cref="T:System.Windows.Controls.GroupDescriptorCollection"/>
            and all the <see cref="T:System.Windows.Controls.GroupDescriptor"/>s it contains.
            </summary>
            <remarks>
            The manager also keeps the collection synchronized with the specified collection of
            <see cref="T:System.ComponentModel.GroupDescription"/>s. The main challenge in synchronization is
            <see cref="T:System.Windows.Controls.GroupDescriptor"/>s can exist in an intermediate state while <see cref="T:System.ComponentModel.GroupDescription"/>s
            cannot. This may occasionally lead to a state where the <see cref="T:System.Windows.Controls.GroupDescriptorCollection"/> has
            more items than the collection of <see cref="T:System.ComponentModel.GroupDescription"/>s. This state will resolve once all of
            the <see cref="T:System.Windows.Controls.GroupDescriptor"/>s are fully defined.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.#ctor(System.Windows.Controls.GroupDescriptorCollection,System.Collections.ObjectModel.ObservableCollection{System.ComponentModel.GroupDescription},System.Windows.Controls.ExpressionCache,System.Action{System.Windows.Controls.GroupDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.GroupCollectionManager"/> class.
            </summary>
            <param name="sourceCollection">The collection of <see cref="T:System.Windows.Controls.GroupDescriptor"/>s to manage</param>
            <param name="descriptionCollection">The collection of <see cref="T:System.ComponentModel.GroupDescription"/>s to synchronize with the <paramref name="sourceCollection"/></param>
            <param name="expressionCache">The cache with entries for the <see cref="T:System.Windows.Controls.GroupDescriptor"/>s</param>
            <param name="validationAction">The callback for validating items that are added or changed</param>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.Validate(System.Object)">
            <summary>
            Action that validates <see cref="T:System.Windows.Controls.GroupDescriptor"/>s when they are added or changed.
            </summary>
            <param name="item">The item to validate</param>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.AsINotifyPropertyChanged(System.Object)">
            <summary>
            Function that returns the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation for the
            specified <paramref name="item"/>.
            </summary>
            <param name="item">The item to get the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation for</param>
            <returns>The <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation for the specified <paramref name="item"/>
            </returns>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.HandleCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Overridden to synchronize collections.
            </summary>
            <param name="sender">The collection that changed</param>
            <param name="e">The collection change event</param>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.HandlePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Overridden to synchronize collections.
            </summary>
            <param name="sender">The item that changed</param>
            <param name="e">The property change event</param>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.OnCollectionChanged">
            <summary>
            Overridden to suppress events when synchronizing.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.OnPropertyChanged">
            <summary>
            Overridden to suppress events when synchronizing.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.ResetToGroupDescriptions(System.Collections.ObjectModel.ObservableCollection{System.ComponentModel.GroupDescription},System.Windows.Controls.GroupDescriptorCollection)">
            <summary>
            Resets the <paramref name="groupDescriptors"/> collection to match the <paramref name="groupDescriptions"/> collection.
            </summary>
            <param name="groupDescriptions">The collection to match</param>
            <param name="groupDescriptors">The collection to reset</param>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.ResetToGroupDescriptors(System.Collections.ObjectModel.ObservableCollection{System.ComponentModel.GroupDescription},System.Windows.Controls.GroupDescriptorCollection)">
            <summary>
            Resets the <paramref name="groupDescriptions"/> collection to match the <paramref name="groupDescriptors"/> collection.
            </summary>
            <param name="groupDescriptions">The collection to reset</param>
            <param name="groupDescriptors">The collection to match</param>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.GetDescriptionFromDescriptor(System.Windows.Controls.GroupDescriptor)">
            <summary>
            Returns a <see cref="T:System.ComponentModel.GroupDescription"/> equivalent to the specified descriptor.
            </summary>
            <param name="groupDescriptor">The descriptor to get a description from</param>
            <returns>A <see cref="T:System.ComponentModel.GroupDescription"/> equivalent to the specified descriptor</returns>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.GetDescriptorFromDescription(System.ComponentModel.GroupDescription)">
            <summary>
            Returns a <see cref="T:System.Windows.Controls.GroupDescriptor"/> equivalent to the specified description
            </summary>
            <param name="groupDescription">The description to get a descriptor from</param>
            <returns>A <see cref="T:System.Windows.Controls.GroupDescriptor"/> equivalent to the specified description</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the description is not a
            <see cref="T:System.Windows.Data.PropertyGroupDescription"/>.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.HandleGroupDescriptionCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Synchronizes the group descriptors collection to the group descriptions collection.
            </summary>
            <param name="e">The collection change event</param>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.HandleGroupDescriptorCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Synchronizes the group descriptions collection to the group descriptors collection.
            </summary>
            <param name="e">The collection change event</param>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.HandleGroupDescriptionChanged(System.ComponentModel.GroupDescription,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Synchronizes the group descriptors collection to the group descriptions collection.
            </summary>
            <param name="description">The description that changed</param>
            <param name="e">The property change event</param>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.HandleGroupDescriptorChanged(System.Windows.Controls.GroupDescriptor,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Synchronizes the group descriptions collection to the group descriptors collection.
            </summary>
            <param name="descriptor">The descriptor that changed</param>
            <param name="e">The property change event</param>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.AssertCollectionsAreEquivalent">
            <summary>
            Asserts that the collections are equivalent.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.AreEquivalent(System.Collections.ObjectModel.ObservableCollection{System.ComponentModel.GroupDescription},System.Windows.Controls.GroupDescriptorCollection)">
            <summary>
            Determines whether the <paramref name="groupDescriptions"/> are equivalent to the <paramref name="groupDescriptors"/>.
            </summary>
            <param name="groupDescriptions">The descriptions to compare</param>
            <param name="groupDescriptors">The descriptors to compare</param>
            <returns><c>true</c> if the collections are equivalent</returns>
        </member>
        <member name="M:System.Windows.Controls.GroupCollectionManager.AreEquivalent(System.ComponentModel.GroupDescription,System.Windows.Controls.GroupDescriptor)">
            <summary>
            Determines whether the <paramref name="groupDescription"/> and <paramref name="groupDescriptor"/> are equivalent.
            </summary>
            <param name="groupDescription">The description to compare</param>
            <param name="groupDescriptor">The descriptor to compare</param>
            <returns><c>true</c> if the two are equivalent</returns>
        </member>
        <member name="T:System.Windows.Controls.IRestorable">
            <summary>
            Interface for <see cref="T:System.Windows.DependencyObject"/>s that supports change tracking
            and reverting.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IRestorable.StoreOriginalValue">
            <summary>
            Stores the current dependency property values as original values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IRestorable.RestoreOriginalValue">
            <summary>
            Restores the original values stored the last time <see cref="M:System.Windows.Controls.IRestorable.StoreOriginalValue"/> was called.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.IPagedEntityList">
            <summary>
            An interface to define how paging can be layered on top of an <see cref="T:System.ServiceModel.DomainServices.Client.EntitySet"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IPagedEntityList.Add(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            Adds an entity to the list.
            </summary>
            <param name="item">The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> to add.</param>
        </member>
        <member name="M:System.Windows.Controls.IPagedEntityList.MoveToPage(System.Int32)">
            <summary>
            Invokes the operation for moving to a new <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">Requested page index</param>
            <returns><c>true</c> if the page move was initiated, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.IPagedEntityList.Remove(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            Removes an entity from the list.
            </summary>
            <param name="item">The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> to add.</param>
            <returns>Whether or not the removal was successful.</returns>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.BackingEntitySet">
            <summary>
            The <see cref="T:System.ServiceModel.DomainServices.Client.EntitySet"/> that is used as the backing store
            for the entities within this <see cref="T:System.Windows.Controls.IPagedEntityList"/>.
            </summary>
            <remarks>
            There may be additional entities in the backing entity set that
            are not included in this <see cref="T:System.Windows.Controls.IPagedEntityList"/>.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.EntityType">
            <summary>
            Gets the type of <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> for this list.  This can
            differ from the <see cref="P:System.ServiceModel.DomainServices.Client.EntitySet.EntityType"/> from the
            <see cref="P:System.Windows.Controls.IPagedEntityList.BackingEntitySet"/> in inheritance scenarios.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.IsPagingOperationPending">
            <summary>
            Gets a value indicating that paging is enabled but the data hasn't yet been loaded.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.ItemCount">
            <summary>
            Gets a value indicating the minimum number of items known to be in the source collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.PageIndex">
            <summary>
            Gets the current page index.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.PageSize">
            <summary>
            Gets the number of items to display on a page.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.TotalItemCount">
            <summary>
            Gets the total number of items in the source collection, 
            or -1 if that value is unknown.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.IPagedEntityList.PageChanged">
            <summary>
            Raised when a page change has completed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.LoadContext">
            <summary>
            Stores the characteristics of a load operation 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.LoadSize">
            <summary>
            Value of the <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/> property for the load operation,
            at the time the load operation was initiated.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.LoadType">
            <summary>
            <see cref="P:System.Windows.Controls.LoadContext.LoadType"/> of the load operation.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.PageSize">
            <summary>
            Value of the <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/> property for the load operation,
            at the time the load operation was initiated.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.RaisePageChanged">
            <summary>
            Determines whether there is a pending page move. When <c>true</c>, the internal
            <see cref="T:System.Windows.Controls.PagedEntityCollection"/> needs to notify the
            <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/> of the page move's result.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.RequestedPageIndex">
            <summary>
            Potential page index requested via <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.StartPageIndex">
            <summary>
            Value of the <see cref="P:System.Windows.Controls.PagedEntityCollection.StartPageIndex"/> property for the load operation.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.IsInitialLoad">
            <summary>
            Indicates whether or not the <see cref="P:System.Windows.Controls.LoadContext.LoadType"/> represents an initial load.
            </summary>
            <remarks>
            An initial load is one that results in going back to the first page because a new query was
            invoked, such as filtering, sorting, or grouping.  But paging operations and incremental
            loads do not qualify.
            </remarks>
            <value>
            <c>true</c> when the <see cref="P:System.Windows.Controls.LoadContext.LoadType"/> is one that represents an initial load
            (<see cref="F:System.Windows.Controls.LoadType.LoadAll"/>, <see cref="F:System.Windows.Controls.LoadType.LoadFirstItems"/>,
            or <see cref="F:System.Windows.Controls.LoadType.LoadFirstPages"/>, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:System.Windows.Controls.LoadedDataEventArgs">
            <summary>
            Event arguments for the completion of a load operation
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LoadedDataEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Client.Entity},System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Client.Entity},System.Int32,System.Boolean,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.LoadedDataEventArgs"/> class.
            </summary>
            <param name="entities">The top-level entities loaded with this operation.</param>
            <param name="allEntities">All entities loaded with this operation, including those loaded as associations.</param>
            <param name="totalEntityCount">The total number of records for the original query without any paging applied to it.</param>
            <param name="cancelled"><c>true</c> if the load operation was cancelled, <c>false</c> otherwise.</param>
            <param name="error"><see cref="T:System.Exception"/> for the load operation if it failed.</param>
        </member>
        <member name="M:System.Windows.Controls.LoadedDataEventArgs.MarkErrorAsHandled">
            <summary>
            For an operation where <see cref="P:System.Windows.Controls.LoadedDataEventArgs.HasError"/> is <c>true</c>, this method marks the error as handled.
            If this method is not called for a failed operation, an exception will be thrown.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if <see cref="P:System.Windows.Controls.LoadedDataEventArgs.HasError"/> is <c>false</c>.</exception>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.AllEntities">
            <summary>
            Gets all the entities loaded, including any
            entities referenced by the top level entities.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.Entities">
            <summary>
            Gets all the top level entities loaded.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.HasError">
            <summary>
            Gets a value indicating whether the operation has failed. If
            true, inspect the Error property for details.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.IsErrorHandled">
            <summary>
            Gets a value indicating whether the operation error has been marked as
            handled by calling <see cref="M:System.Windows.Controls.LoadedDataEventArgs.MarkErrorAsHandled"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.TotalEntityCount">
            <summary>
            Gets the total server entity count for the query.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.LoadType">
            <summary>
            Enum used to characterize the current load operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.None">
            <summary>
            Used for non-existing deferred load
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadAll">
            <summary>
            Loading all items in a single shot
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadFirstPages">
            <summary>
            Loading the first pages in a paging situation (occurs when PageSize becomes > 0)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadPreviousPages">
            <summary>
            Loading previous set of pages in a paging situation (occurs when PageIndex moves before current boundaries)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadCurrentPages">
            <summary>
            Loading current set of pages in a paging situation (occurs with Refresh)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadNextPages">
            <summary>
            Loading next set of pages in a paging situation (occurs when PageIndex moves beyond current boundaries)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadLastPages">
            <summary>
            Loading last set of pages in a paging situation where PageIndex was set to a too large number
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadFirstItems">
            <summary>
            Loading first chunk of items in a progressive download situation
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadNextItems">
            <summary>
            Loading next chunk of items in a progressive download situation
            </summary>
        </member>
        <member name="T:System.Windows.Controls.PagedEntityCollectionView`1">
            <summary>
            An <see cref="T:System.ComponentModel.ICollectionView"/>, <see cref="T:System.ComponentModel.IEditableCollectionView"/>, and <see cref="T:System.ComponentModel.IPagedCollectionView"/>
            implementation used by the <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            </summary>
            <remarks>
            This class is responsible for managing currency, sorting, grouping, paging, add, edit, and remove transactions.
            <para>
            An <see cref="T:System.Windows.Controls.IPagedEntityList"/> is provided that supplies the entities to be exposed, and <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/>
            will apply sorting and grouping on top of that list of entities, so that the entities are returned from this view in the
            correct order.
            </para>
            </remarks>
            <typeparam name="TEntity">The type of <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> contained in the view.</typeparam>
        </member>
        <member name="T:System.Windows.Controls.PagedEntityCollectionView">
            <summary>
            An <see cref="T:System.ComponentModel.ICollectionView"/>, <see cref="T:System.ComponentModel.IEditableCollectionView"/>, and <see cref="T:System.ComponentModel.IPagedCollectionView"/>
            implementation used by the <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            </summary>
            <remarks>
            This class is responsible for managing currency, sorting, grouping, paging, add, edit, and remove transactions.
            <para>
            An <see cref="T:System.Windows.Controls.IPagedEntityList"/> is provided that supplies the entities to be exposed, and <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/>
            will apply sorting and grouping on top of that list of entities, so that the entities are returned from this view in the
            correct order.
            </para>
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._cachedPageIndex">
            <summary>
            Value that we cache for the PageIndex if we are in a DeferRefresh,
            and the user has attempted to move to a different page.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._cachedPageSize">
            <summary>
            Value that we cache for the PageSize if we are in a DeferRefresh,
            and the user has attempted to change the PageSize.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._canAdd">
            <summary>
            Private accessor for <see cref="P:System.Windows.Controls.PagedEntityCollectionView.CanAdd"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._canChangePage">
            <summary>
            Private accessor for <see cref="P:System.Windows.Controls.PagedEntityCollectionView.CanChangePage"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._canLoad">
            <summary>
            Private accessor for <see cref="P:System.Windows.Controls.PagedEntityCollectionView.CanLoad"/>, which
            the <see cref="T:System.Windows.Controls.DomainDataSource"/> will keep in sync
            with its own <see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._flags">
            <summary>
            Private accessor for the <see cref="T:System.Windows.Controls.PagedEntityCollectionView.CollectionViewFlags"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._group">
            <summary>
            Private accessor for the Grouping data.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._internalList">
            <summary>
            Private accessor for the <see cref="P:System.Windows.Controls.PagedEntityCollectionView.InternalList"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._isGrouping">
            <summary>
            Keeps track of whether groups have been applied to the
            collection already or not. Note that this can still be set
            to false even though we specify a GroupDescription, as the 
            collection may not have gone through the PrepareGroups function.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._itemCount">
            <summary>
            Represents the known number of items in the source collection
            that verify the potential filter.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._pageIndex">
            <summary>
            Private accessor for the <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageIndex"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._pageCount">
            <summary>
            The number of pages in the view.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._pageSize">
            <summary>
            The size of the pages in the view.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._source">
            <summary>
            Private accessor for the entity list behind this view.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._refreshCallback">
            <summary>
            The callback action to invoked when a <see cref="M:System.Windows.Controls.PagedEntityCollectionView.Refresh"/> is triggered,
            either directly or through a <see cref="M:System.Windows.Controls.PagedEntityCollectionView.DeferRefresh"/> disposal.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._sortDescriptions">
            <summary>
            Private accessor for the <see cref="P:System.Windows.Controls.PagedEntityCollectionView.SortDescriptions"/> collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView._totalItemCount">
            <summary>
            Private accessor for <see cref="P:System.Windows.Controls.PagedEntityCollectionView.TotalItemCount"/>. Represents the total
            number of items in the source collection, or -1 if the total number is unknown.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.#ctor(System.Collections.IEnumerable,System.Action,System.ServiceModel.DomainServices.Client.EntitySetOperations)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/> class, wrapping around
            the provided <see cref="T:System.Collections.IEnumerable"/> source.
            </summary>
            <remarks>
            By default, all <see cref="T:System.ServiceModel.DomainServices.Client.EntitySetOperations"/> are supported so that design-time support is fully functional.
            </remarks>
            <param name="source">The enumerable source that will be used for this view.</param>
            <param name="refreshCallback">The method to call when a <see cref="M:System.Windows.Controls.PagedEntityCollectionView.Refresh"/> is triggered.</param>
            <param name="supportedOperations">The operations supported for the source.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.#ctor(System.Windows.Controls.IPagedEntityList,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/> class.
            </summary>
            <param name="source">The <see cref="T:System.Windows.Controls.IPagedEntityList"/> to use as the source of this view.</param>
            <param name="refreshCallback">The method to call when a <see cref="M:System.Windows.Controls.PagedEntityCollectionView.Refresh"/> is triggered.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.Add(System.Object)">
            <summary>
            Adds a new entity to the underlying collection.
            </summary>
            <param name="item">The entity to add.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.CommittedEdit(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            When an entity is committed as an edit, we need to ensure the item's
            position is correct based on grouping and sorting.  Additionally,
            we will ensure the item has been added to the internal list.
            </summary>
            <param name="editItem">The entity that was committed.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.CommittedNew(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            When an entity is committed as new, we need to ensure the item's
            position is correct based on grouping and sorting.
            </summary>
            <param name="newItem">The entity that was committed.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.DeferRefresh">
            <summary>
            Enter a <see cref="M:System.Windows.Controls.PagedEntityCollectionView.DeferRefresh"/> cycle.
            Defer cycles are used to coalesce changes to the <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
            <returns><see cref="T:System.IDisposable"/> used to notify that we no longer need to defer, when we dispose.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.GetEnumerator">
            <summary>
            Override the enumerator to enumerate over the internal list
            which is sorted based on grouping and sorting.
            </summary>
            <returns>An enumerator that will enumerate over the sorted data.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.GetItemAt(System.Int32)">
            <summary>
            Retrieve item at the given zero-based index in this EntityCollectionView, after the source collection
            is filtered, sorted, and paged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> is thrown if <paramref name="index"/> is out of range.
            </exception>
            <param name="index">Index of the item we want to retrieve.</param>
            <returns>The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> at specified index.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.IndexOf(System.Object)">
            <summary> 
            Return the index where the given <paramref name="item"/> appears, or <c>-1</c> if doesn't appear.
            </summary>
            <param name="item"><see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> we are searching for.</param>
            <returns>Index of specified item.</returns>
            <exception cref="T:System.InvalidCastException">When the <paramref name="item"/> is not an <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>.</exception>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.MoveToFirstPage">
            <summary>
            Moves to the first page.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.MoveToLastPage">
            <summary>
            Moves to the last page.
            The move is only attempted when TotalItemCount is known.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.MoveToNextPage">
            <summary>
            Moves to the page after the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.MoveToPreviousPage">
            <summary>
            Moves to the page before the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.MoveToPage(System.Int32)">
            <summary>
            Requests a page move to page <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">Index of the target page</param>
            <returns>Whether or not the move was successfully initiated.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.Refresh">
            <summary>
            Re-create the view, using any SortDescriptions and/or Filters.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.RemoveItem(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            The implementation used for the <see cref="T:System.Windows.Controls.EntityCollectionView"/>'s
            <see cref="M:System.Windows.Controls.EntityCollectionView.Remove(System.Object)"/> method.
            </summary>
            <remarks>
            Find the entity's index and remove it.
            </remarks>
            <param name="item">The entity to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.RemoveIndex(System.Int32)">
            <summary>
            The implementation used for the <see cref="T:System.Windows.Controls.EntityCollectionView"/>'s
            <see cref="M:System.Windows.Controls.EntityCollectionView.Remove(System.Object)"/> method.
            </summary>
            <remarks>
            Find the entity by index and remove it.
            </remarks>
            <param name="index">The index of the entity to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.RemoveCore(System.ServiceModel.DomainServices.Client.Entity,System.Int32)">
            <summary>
            Remove an entity given its instance and index.
            </summary>
            <param name="item">The entity to remove.</param>
            <param name="index">The index of the entity to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.InvokePath(System.Object,System.String,System.Type)">
            <summary>
            Helper for SortList to handle nested properties (e.g. Address.Street)
            </summary>
            <param name="item">parent object</param>
            <param name="propertyPath">property names path</param>
            <param name="propertyType">property type that we want to check for</param>
            <returns>child object</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.ApplyDefaultDelegates">
            <summary>
            Override the default delegates that get used by the view so that efficient, specific
            implementations are used.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.CalculateAllCalculatedProperties">
            <summary>
            Calculates all of the properties that are calculated through CalculateX methods.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.CalculateCanAddNew">
            <summary>
            Calculates <see cref="P:System.Windows.Controls.EntityCollectionView.CanAddNew"/> using <see cref="M:System.Windows.Controls.EntityCollectionView.IsOperationSupported(System.ServiceModel.DomainServices.Client.EntitySetOperations)"/>,
            <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageSize"/>, and <see cref="P:System.Windows.Controls.IPagedEntityList.IsPagingOperationPending"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.CalculateCanAdd">
            <summary>
            Calculates <see cref="P:System.Windows.Controls.PagedEntityCollectionView.CanAdd"/> using <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageSize"/> and <see cref="P:System.Windows.Controls.IPagedEntityList.IsPagingOperationPending"/>
            and by determining whether the <see cref="T:System.ServiceModel.DomainServices.Client.EntitySet"/> supports <see cref="F:System.ServiceModel.DomainServices.Client.EntitySetOperations.Add"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.CalculateCanChangePage">
            <summary>
            Calculates <see cref="P:System.Windows.Controls.PagedEntityCollectionView.CanChangePage"/> from the <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew"/>
            and <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem"/> properties as well as the <see cref="P:System.Windows.Controls.PagedEntityCollectionView.CanLoad"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.CalculatePageCount">
            <summary>
            Calculates <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageCount"/> from the <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageSize"/> and <see cref="P:System.Windows.Controls.PagedEntityCollectionView.TotalItemCount"/> properties.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.CalculateSupportedOperations">
            <summary>
            Calculates what operations are supported based on the <see cref="P:System.Windows.Controls.PagedEntityCollectionView.SourceEntitySet"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.CheckFlag(System.Windows.Controls.PagedEntityCollectionView.CollectionViewFlags)">
            <summary>
            Returns true if specified flag in flags is set.
            </summary>
            <param name="flags">Flag we are checking for</param>
            <returns>Whether the specified flag is set</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.CompletePageMove(System.Int32)">
            <summary>
            Called either when the page is local or when the paged source collection
            notified this EntityCollectionView of a page move completion.
            </summary>
            <param name="pageIndex">Final page index</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.CopySourceToInternalList">
            <summary>
            Copy all items from the source collection to the internal list for processing.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.CreateEntity">
            <summary>
            Creates an <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> using the <see cref="P:System.Windows.Controls.IPagedEntityList.EntityType"/>.
            </summary>
            <returns>A new <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> instance of the <see cref="P:System.Windows.Controls.IPagedEntityList.EntityType"/>.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.DeferRefreshEnded">
            <summary>
            Notification that a <see cref="M:System.Windows.Controls.PagedEntityCollectionView.DeferRefresh"/> cycle has ended.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.InsertGroup(System.Object,System.Int32)">
            <summary>
            Insert a new group for the specified <paramref name="item"/>,
            with the item being added at the specified <paramref name="addIndex"/>.
            </summary>
            <param name="item">The item being inserted into this new group.</param>
            <param name="addIndex">The index at which this item is being inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.InternalIndexOf(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            Return index of item in the internal list.
            </summary>
            <param name="item">The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> we are checking</param>
            <returns>Integer value on where in the InternalList the object is located</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.InternalItemAt(System.Int32)">
            <summary>
            Return item at the given index in the internal list.
            </summary>
            <param name="index">The index we are checking</param>
            <returns>The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> at the specified index</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notify listeners that this View has changed
            </summary>
            <remarks>
            CollectionViews (and sub-classes) should take their filter/sort/grouping/paging
            into account before calling this method to forward CollectionChanged events.
            </remarks>
            <param name="args">
            The NotifyCollectionChangedEventArgs to be passed to the EventHandler
            </param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.OnGroupByChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            GroupBy changed handler
            </summary>
            <param name="sender">CollectionViewGroup whose GroupBy has changed</param>
            <param name="e">Arguments for the NotifyCollectionChanged event</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.OnGroupDescriptionChanged(System.Object,System.EventArgs)">
            <summary>
            GroupDescription changed handler
            </summary>
            <param name="sender">CollectionViewGroup whose GroupDescription has changed</param>
            <param name="e">Arguments for the GroupDescriptionChanged event</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.PrepareGroups">
            <summary>
            Use the GroupDescriptions to place items into their respective groups.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.PrepareLocalArray(System.Collections.IEnumerable)">
            <summary>
            Create and sort the local index array.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> containing the items.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.SourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Process <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> events from
            the source collection.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> to process.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.HandleSourceCollectionAdd(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handle additions to the source collection, inserting the item,
            and if necessary, adding it into the groups.
            </summary>
            <param name="e">The event args from the source collection change.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.HandleSourceCollectionRemove(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handle removals from the source collection, removing the item,
            and if necessary, removing it from the groups.
            </summary>
            <param name="e">The event args from the source collection change.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.Insert(System.ServiceModel.DomainServices.Client.Entity,System.Int32@)">
            <summary>
            Handles adding an <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> into the collection, and applying sorting (through both groups and sorts).
            </summary>
            <param name="item">The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> to insert in the collection.</param>
            <param name="index">Index to insert item into, updated if the position is altered due to sorting.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.RaisePageChanging(System.Int32)">
            <summary>
            Raises the PageChanging event
            </summary>
            <param name="newPageIndex">Index of the requested page</param>
            <returns>True if the event is cancelled (e.Cancel was set to True), False otherwise</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.RaisePageChanged">
            <summary>
            Raises the PageChanged event
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.RefreshOrDefer">
            <summary>
            If we are not being deferred, then refresh the view.
            </summary>
            <remarks>
            We do not queue refreshes when deferred, because when the
            defer cycles ends, we'll call our refresh callback on
            the <see cref="T:System.Windows.Controls.DomainDataSource"/>, which will result in
            <see cref="M:System.Windows.Controls.PagedEntityCollectionView.Refresh"/> being called after data is reloaded.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.RefreshView">
            <summary>
            Refresh the view, applying sorts and groups, and updating currency information.
            <para>This will not call the refresh callback.</para>
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.ResetCurrencyValues(System.ServiceModel.DomainServices.Client.Entity,System.Boolean,System.Boolean)">
            <summary>
            Set currency back to the previous value it had if possible. If the item is no longer in view
            then either use the first item in the view, or if the list is empty, use <c>null</c>.
            </summary>
            <param name="oldCurrentItem"><see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> before processing changes.</param>
            <param name="oldIsCurrentBeforeFirst"><see cref="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst"/> before processing changes.</param>
            <param name="oldIsCurrentAfterLast"><see cref="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast"/> before processing changes.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.RequestPageMove(System.Int32)">
            <summary>
            Requests a page move to the potential paged source collection.
            Completes the move if that paged source does not initiate a move
            (because the data is already local) or if the source is not paged.
            </summary>
            <param name="pageIndex">Requested page index</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.SetFlag(System.Windows.Controls.PagedEntityCollectionView.CollectionViewFlags,System.Boolean)">
            <summary>
            Sets the specified Flag(s)
            </summary>
            <param name="flags">Flags we want to set</param>
            <param name="value">Value we want to set these flags to</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.SetSortDescriptions(System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Set new SortDescription collection; re-hook collection change notification handler
            </summary>
            <param name="descriptions">SortDescriptionCollection to set the property value to</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.SortDescriptionsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            SortDescription was added/removed, refresh EntityCollectionView
            </summary>
            <param name="sender">Sender that triggered this handler</param>
            <param name="e">NotifyCollectionChangedEventArgs for this change</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.SourceCollection_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the source collection raises its PropertyChanged event.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> used in the event.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.UpdateItemPosition(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            Update an item's position based on sorting and grouping.  If the item was
            the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> then maintain the currency
            on that item in its potentially new position.
            </summary>
            <param name="item">The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> to update position for.</param>
        </member>
        <member name="E:System.Windows.Controls.PagedEntityCollectionView.PageChanged">
            <summary>
            Raised when a page index change completed
            </summary>
        </member>
        <member name="E:System.Windows.Controls.PagedEntityCollectionView.PageChanging">
            <summary>
            Raised when a page index change is requested
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.CanAdd">
            <summary>
            Gets a value indicating whether a new item can be added to the view using
            <see cref="M:System.Windows.Controls.PagedEntityCollectionView.Add(System.Object)"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.CanChangePage">
            <summary>
            Gets a value indicating whether the <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageIndex"/> value is allowed to change.
            </summary>
            <remarks>
            This is <c>false</c> when <see cref="P:System.Windows.Controls.PagedEntityCollectionView.CanLoad"/> is false or when <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageSize"/> is 0.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.CanGroup">
            <summary>
            Gets a value indicating whether this view supports grouping.
            </summary>
            <remarks>
            This property value doesn't respect <see cref="P:System.Windows.Controls.PagedEntityCollectionView.CanLoad"/> because
            <see cref="P:System.ComponentModel.ICollectionView.CanGroup"/> must be true at the time a
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event is fired
            in order for existing groups to be respected.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.CanSort">
            <summary>
            Gets a value indicating whether changes to the <see cref="P:System.Windows.Controls.PagedEntityCollectionView.SortDescriptions"/> are presently
            allowed with this <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
            <remarks>
            This will return <c>true</c> whenever the underlying <see cref="T:System.Windows.Controls.DomainDataSource"/>'s
            <see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/> property is <c>true</c>.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.Count">
            <summary>
            Gets the number of records in the view after 
            filtering, sorting, and paging.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.GroupDescriptions">
            <summary>
            Gets the description of grouping, indexed by level.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.Groups">
            <summary>
            Gets the top-level groups, constructed according to the descriptions
            given in GroupDescriptions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.IsEmpty">
            <summary>
            Gets a value indicating whether the resulting (filtered) view is empty.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.IsPageChanging">
            <summary>
            Gets a value indicating whether a page index change is in process or not.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.ItemCount">
            <summary>
            Gets a count of items known to be in the source collection after filtering
            is applied, but before paging.
            </summary>
            <remarks>
            Value is based on the number of items that have been loaded and what pages
            those items were loaded into.  If <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageIndex"/> of 0 or 1 were never
            loaded, but <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageIndex"/> of 2 was loaded successfully, then
            we can assume that page indexes of 0 and 1 exist and are full.
            </remarks>
            <example>
            While on <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageIndex"/> of 2 (the 3rd page), with <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageSize"/>
            of 5, and the page having 5 items, the return value will be at least 15.
            <para>
            If the <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageIndex"/> has been greater than 2 previously, we know that items
            exist beyond the 3rd page, so the return value could be greater than 15.
            </para>
            </example>
            <seealso cref="P:System.Windows.Controls.PagedEntityCollectionView.TotalItemCount"/>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.PageIndex">
            <summary>
            Gets the current page we are on. (zero based)
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.PageSize">
            <summary>
            Gets or sets the number of items to display on a page. If the
            PageSize = 0, then we are not paging, and will display all items
            in the collection. Otherwise, we will have separate pages for 
            the items to display.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.SortDescriptions">
            <summary>
            Gets the <see cref="T:System.ComponentModel.SortDescription"/>s that are used to sort the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.TotalItemCount">
            <summary>
            Gets the total number of items in the view before paging is applied,
            or <c>-1</c> if that total number is unknown.
            </summary>
            <remarks>
            The provider of the source collection is in charge of setting this value. In those cases, the value
            can be temporary only. That is, the provider can set TotalItemCount to a positive number or <c>-1</c>
            based on its latest information, but that may no longer reflect the reality at a later time, given
            the fact that the source may not be of a fixed length.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.CanLoad">
            <summary>
            Gets or sets a value indicating whether or not loads can currently be
            performed by the underlying <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            </summary>
            <remarks>
            This property is replicated on the <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/> because
            we don't have a mechanism for listening to change notifications on the underlying
            <see cref="T:System.Windows.Controls.DomainDataSource"/>.<see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/> property.
            Therefore, we expose a property on the <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/>
            so that the <see cref="T:System.Windows.Controls.DomainDataSource"/> can update it directly.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.IsRefreshing">
            <summary>
            Whether or not a <see cref="M:System.Windows.Controls.PagedEntityCollectionView.Refresh"/> is being queued up
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.CanCreateEntity">
            <summary>
            Gets a value indicating whether or not an entity can be created
            based on current state.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.InternalCount">
            <summary>
            Gets the private count without taking paging or
            placeholders into account
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.InternalList">
            <summary>
            Gets the InternalList
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.IsGrouping">
            <summary>
            Gets a value indicating whether or not we have grouping 
            taking place in this collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.PageCount">
            <summary>
            Gets the count of the pages in this view.
            </summary>
            <remarks>
            When <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageSize"/> is 0, the <see cref="P:System.Windows.Controls.PagedEntityCollectionView.PageCount"/> will also be 0.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.SourceEntitySet">
            <summary>
            Gets the <see cref="T:System.ServiceModel.DomainServices.Client.EntitySet"/> that serves as the backing store for our
            <see cref="T:System.Windows.Controls.IPagedEntityList"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.SourcePagedEntityList">
            <summary>
            Gets the source collection as an <see cref="T:System.Windows.Controls.IPagedEntityList"/>
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.UsesLocalArray">
            <summary>
            Gets a value indicating whether a private copy of the data is needed for sorting or paging.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollectionView.Item(System.Int32)">
            <summary>
            Return the item at the specified index
            </summary>
            <param name="index">Index of the item we want to retrieve</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="T:System.Windows.Controls.PagedEntityCollectionView.SortFieldComparer">
            <summary>
            IComparer class to sort by class property value (using reflection).
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.SortFieldComparer.#ctor(System.Collections.ObjectModel.ObservableCollection{System.ComponentModel.GroupDescription},System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Create a comparer, using the <paramref name="groupDescriptions"/> and/or
            <paramref name="sortFields"/> and the <see cref="T:System.Type"/> of each property.
            Tries to find a reflection <see cref="T:System.Reflection.PropertyInfo"/> for each property name.
            </summary>
            <remarks>
            Groups are used first, and then sorts.  This keeps the groups together.
            </remarks>
            <param name="groupDescriptions">List of group descriptions to respect
            (ascending, unless there is a descending sort also applied).</param>
            <param name="sortFields">List of sort descriptions to respect (ascending or descending).</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.SortFieldComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare the two items using the groups and sorts provided.
            </summary>
            <remarks>
            Uses reflection to find the <see cref="T:System.Type"/> of each field being sorted
            (groups first, then sorts), and assigns a comparer for each field.  Each
            comparer is then used to compare the property from both. 
            </remarks>
            <param name="x">First item to compare.</param>
            <param name="y">Second item to compare.</param>
            <returns>Negative number if <paramref name="x"/> should be grouped/sorted
            before than <paramref name="y"/>; zero if <paramref name="x"/> and <paramref name="y"/>
            have matching fields for the groups and sorts; and a positive number if
            <paramref name="x"/> should be grouped/sorted after <paramref name="y"/>.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.SortFieldComparer.FindInsertIndex(System.Object,System.Collections.IList)">
            <summary>
            Steps through the given list using the comparer to find where
            to insert the specified item to maintain sorted order
            </summary>
            <param name="x">Item to insert into the list</param>
            <param name="list">List where we want to insert the item</param>
            <returns>Index where we should insert into</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView.SortFieldComparer.CreatePropertyInfo(System.Collections.ObjectModel.ObservableCollection{System.ComponentModel.GroupDescription},System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Builds an array of <see cref="T:System.Windows.Controls.PagedEntityCollectionView.SortFieldComparer.SortPropertyInfo"/> objects by combining the groups and the sorts into
            a single list of sorts.  This will ensure that the groups remain contiguous and that the items
            within the groups are sorted within the groups.
            </summary>
            <remarks>
            Fields that are grouped will be sorted in ascending order by default, but if there is also a sort
            specified for that field and it is sorted in descending order, then the group will respect the
            descending order as well.
            </remarks>
            <param name="groupFields">The <see cref="T:System.ComponentModel.GroupDescription"/> list for the fields being grouped.  Must not be null.</param>
            <param name="sortFields">The <see cref="T:System.ComponentModel.SortDescriptionCollection"/> for the fields being sorted.  Must not be null.</param>
            <returns>
            A single array of <see cref="T:System.Windows.Controls.PagedEntityCollectionView.SortFieldComparer.SortPropertyInfo"/> that will apply the grouping and then sorting in the
            necessary order to have items grouped and then sorted within the groups.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.PagedEntityCollectionView.CollectionViewFlags">
            <summary>
            Enum for CollectionViewFlags
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView.CollectionViewFlags.ShouldProcessCollectionChanged">
            <summary>
            Whether we should process the collection changed event
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView.CollectionViewFlags.CachedIsEmpty">
            <summary>
            Whether we cache the IsEmpty value
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView.CollectionViewFlags.IsPageChanging">
            <summary>
            Indicates whether a page index change is in process or not
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView.CollectionViewFlags.IsMoveToPageDeferred">
            <summary>
            Whether we need to move to another page after a DeferRefresh is disposed
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollectionView.CollectionViewFlags.IsUpdatePageSizeDeferred">
            <summary>
            Whether we need to update the PageSize after a DeferRefresh is disposed
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/> class, wrapping around
            the provided <see cref="T:System.Collections.IEnumerable"/> source.
            </summary>
            <remarks>
            By default, all <see cref="T:System.ServiceModel.DomainServices.Client.EntitySetOperations"/> are supported so that design-time support is fully functional.
            </remarks>
            <param name="source">The enumerable source that will be used for this view.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView`1.#ctor(System.Windows.Controls.IPagedEntityList,System.Action,System.ServiceModel.DomainServices.Client.EntitySetOperations)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/> class.
            </summary>
            <param name="source">The <see cref="T:System.Windows.Controls.IPagedEntityList"/> to use as the source of this view.</param>
            <param name="refreshCallback">The method to call when a <see cref="M:System.ComponentModel.ICollectionView.Refresh"/> is triggered.</param>
            <param name="supportedOperations">The operations supported by the source.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollectionView`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator">
            <summary>
            Gets the enumerator for this <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <returns>An enumerator for the source enumerable.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagingHelper.CalculatePageCount(System.Int32,System.Int32)">
            <summary>
            Calculate the number of pages (full or partial) given an
            <paramref name="itemCount"/> and <paramref name="pageSize"/>.
            </summary>
            <param name="itemCount">The number of items across all pages.</param>
            <param name="pageSize">The size of each page.</param>
            <returns>The number of pages needed to represent all items.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagingHelper.CalculateFullPageCount(System.Int32,System.Int32)">
            <summary>
            Calculate the number of full pages given an
            <paramref name="itemCount"/> and <paramref name="pageSize"/>.
            </summary>
            <param name="itemCount">The number of items across all pages.</param>
            <param name="pageSize">The size of each page.</param>
            <returns>The number of pages that would be filled by the items.</returns>
        </member>
        <member name="T:System.Windows.Controls.ParameterCollectionManager">
            <summary>
            Manager that observes and collates the events raised by a <see cref="T:System.Windows.Controls.ParameterCollection"/>
            and all the <see cref="T:System.Windows.Controls.Parameter"/>s it contains.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ParameterCollectionManager.#ctor(System.Windows.Controls.ParameterCollection,System.Action{System.Windows.Controls.Parameter},System.Action{System.Windows.Controls.ParameterCollection})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ParameterCollectionManager"/> class.
            </summary>
            <param name="sourceCollection">The collection of <see cref="T:System.Windows.Controls.Parameter"/>s to manage</param>
            <param name="validationAction">The callback for validating items that are added or changed</param>
            <param name="collectionValidationAction">The callback for validating the collection when it is changed</param>
        </member>
        <member name="M:System.Windows.Controls.ParameterCollectionManager.OnCollectionChanged">
            <summary>
            Overridden to support validation of the entire collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ParameterCollectionManager.OnPropertyChanged">
            <summary>
            Overridden to support validation of the entire collection.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.PropertyChangedNotifier">
            <summary>
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation that is used for internal
            change notification between the <see cref="T:System.Windows.Controls.DomainDataSource"/>, Descriptors,
            and Commands.
            </summary>
            <remarks>
            This class enables the <see cref="T:System.Windows.Controls.DomainDataSource"/>, <see cref="T:System.Windows.Controls.FilterDescriptor"/>,
            <see cref="T:System.Windows.Controls.GroupDescriptor"/>, <see cref="T:System.Windows.Controls.Parameter"/>, and <see cref="T:System.Windows.Controls.SortDescriptor"/>
            to support property change notification internally without publicly implementing the
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.PropertyChangedNotifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.PropertyChangedNotifier"/> class.
            </summary>
            <param name="sender">The sender of the property changed events</param>
        </member>
        <member name="M:System.Windows.Controls.PropertyChangedNotifier.RaisePropertyChanged(System.String)">
            <summary>
            Raises a <see cref="E:System.Windows.Controls.PropertyChangedNotifier.PropertyChanged"/> event for the specified property.
            </summary>
            <param name="propertyName">The property that changed</param>
        </member>
        <member name="M:System.Windows.Controls.PropertyChangedNotifier.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a <see cref="E:System.Windows.Controls.PropertyChangedNotifier.PropertyChanged"/> event.
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="E:System.Windows.Controls.PropertyChangedNotifier.PropertyChanged">
            <summary>
            Occurs when a property value changes on the owner.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SortCollectionManager">
            <summary>
            Manager that observes and collates the events raised by a <see cref="T:System.Windows.Controls.SortDescriptorCollection"/>
            and all the <see cref="T:System.Windows.Controls.SortDescriptor"/>s it contains.
            </summary>
            <remarks>
            The manager also keeps the collection synchronized with the specified
            <see cref="T:System.ComponentModel.SortDescriptionCollection"/>. The main challenge in synchronization is
            <see cref="T:System.Windows.Controls.SortDescriptor"/>s can exist in an intermediate state while <see cref="T:System.ComponentModel.SortDescription"/>s
            cannot. This may occasionally lead to a state where the <see cref="T:System.Windows.Controls.SortDescriptorCollection"/> has
            more items than the <see cref="T:System.ComponentModel.SortDescriptionCollection"/>. This state will resolve once all of
            the <see cref="T:System.Windows.Controls.SortDescriptor"/>s are fully defined.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.#ctor(System.Windows.Controls.SortDescriptorCollection,System.ComponentModel.SortDescriptionCollection,System.Windows.Controls.ExpressionCache,System.Action{System.Windows.Controls.SortDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.SortCollectionManager"/> class.
            </summary>
            <param name="sourceCollection">The collection of <see cref="T:System.Windows.Controls.SortDescriptor"/>s to manage</param>
            <param name="descriptionCollection">The collection of <see cref="T:System.ComponentModel.SortDescription"/>s to synchronize with the <paramref name="sourceCollection"/></param>
            <param name="expressionCache">The cache with entries for the <see cref="T:System.Windows.Controls.SortDescriptor"/>s</param>
            <param name="validationAction">The callback for validating items that are added or changed</param>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.HandleCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Overridden to synchronize collections.
            </summary>
            <param name="sender">The collection that changed</param>
            <param name="e">The collection change event</param>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.HandleDescriptionCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Synchronizes collections in response to a change in the _descriptionCollection.
            </summary>
            <param name="sender">The collection that changed</param>
            <param name="e">The collection change event</param>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.HandlePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Overridden to synchronize collections.
            </summary>
            <param name="sender">The item that changed</param>
            <param name="e">The property change event</param>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.OnCollectionChanged">
            <summary>
            Overridden to suppress events when synchronizing.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.OnPropertyChanged">
            <summary>
            Overridden to suppress events when synchronizing.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.ResetToSortDescriptions(System.ComponentModel.SortDescriptionCollection,System.Windows.Controls.SortDescriptorCollection)">
            <summary>
            Resets the <paramref name="sortDescriptors"/> collection to match the <paramref name="sortDescriptions"/> collection.
            </summary>
            <param name="sortDescriptions">The collection to match</param>
            <param name="sortDescriptors">The collection to reset</param>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.ResetToSortDescriptors(System.ComponentModel.SortDescriptionCollection,System.Windows.Controls.SortDescriptorCollection)">
            <summary>
            Resets the <paramref name="sortDescriptions"/> collection to match the <paramref name="sortDescriptors"/> collection.
            </summary>
            <param name="sortDescriptions">The collection to reset</param>
            <param name="sortDescriptors">The collection to match</param>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.GetDescriptionFromDescriptor(System.Windows.Controls.SortDescriptor)">
            <summary>
            Returns a <see cref="T:System.ComponentModel.SortDescription"/> equivalent to the specified descriptor.
            </summary>
            <param name="sortDescriptor">The descriptor to get a description from</param>
            <returns>A <see cref="T:System.ComponentModel.SortDescription"/> equivalent to the specified descriptor</returns>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.GetDescriptorFromDescription(System.ComponentModel.SortDescription)">
            <summary>
            Returns a <see cref="T:System.Windows.Controls.SortDescriptor"/> equivalent to the specified description
            </summary>
            <param name="sortDescription">The description to get a descriptor from</param>
            <returns>A <see cref="T:System.Windows.Controls.SortDescriptor"/> equivalent to the specified description</returns>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.HandleSortDescriptionCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Synchronizes the sort descriptors collection to the sort descriptions collection.
            </summary>
            <param name="e">The collection change event</param>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.HandleSortDescriptorCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Synchronizes the sort descriptions collection to the sort descriptors collection.
            </summary>
            <param name="e">The collection change event</param>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.HandleSortDescriptorChanged(System.Windows.Controls.SortDescriptor,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Synchronizes the sort descriptions collection to the sort descriptors collection.
            </summary>
            <param name="descriptor">The descriptor that changed</param>
            <param name="e">The property change event</param>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.AssertCollectionsAreEquivalent">
            <summary>
            Asserts that the collections are equivalent.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.AreEquivalent(System.ComponentModel.SortDescriptionCollection,System.Windows.Controls.SortDescriptorCollection)">
            <summary>
            Determines whether the <paramref name="sortDescriptions"/> are equivalent to the <paramref name="sortDescriptors"/>.
            </summary>
            <param name="sortDescriptions">The descriptions to compare</param>
            <param name="sortDescriptors">The descriptors to compare</param>
            <returns><c>true</c> if the collections are equivalent</returns>
        </member>
        <member name="M:System.Windows.Controls.SortCollectionManager.AreEquivalent(System.ComponentModel.SortDescription,System.Windows.Controls.SortDescriptor)">
            <summary>
            Determines whether the <paramref name="sortDescription"/> and <paramref name="sortDescriptor"/> are equivalent.
            </summary>
            <param name="sortDescription">The description to compare</param>
            <param name="sortDescriptor">The descriptor to compare</param>
            <returns><c>true</c> if the two are equivalent</returns>
        </member>
        <member name="T:System.Windows.Controls.SubmittingChangesEventArgs">
            <summary>
            Event arguments for an in progress submit operation
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SubmittingChangesEventArgs.#ctor(System.ServiceModel.DomainServices.Client.EntityChangeSet)">
            <summary>
            Public constructor
            </summary>
            <param name="changeSet">The changeset being submitted</param>
        </member>
        <member name="P:System.Windows.Controls.SubmittingChangesEventArgs.ChangeSet">
            <summary>
            Gets the <see cref="T:System.ServiceModel.DomainServices.Client.EntityChangeSet"/> being submitted
            </summary>
        </member>
        <member name="T:System.Windows.Common.TypeHelper">
            <summary>
            Utility class for Type related operations
            </summary>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetNestedPropertyType(System.Type,System.String)">
            <summary>
            Extension method that returns the type of a property. That property can be nested.
            Each element of the path needs to be a public instance property.
            </summary>
            <param name="parentType">Type that exposes that property</param>
            <param name="propertyPath">Property path</param>
            <returns>Property type</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetNestedPropertyValue(System.Object,System.String,System.Exception@)">
            <summary>
            Retrieves the value of a property. That property can be nested.
            Each element of the path needs to be a public instance property.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="propertyPath">Property path</param>
            <param name="exception">Potential exception</param>
            <returns>Property value</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetNestedPropertyValue(System.Object,System.String,System.Type,System.Exception@)">
            <summary>
            Retrieves the value of a property. That property can be nested.
            Each element of the path needs to be a public instance property.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="propertyPath">Property path</param>
            <param name="propertyType">Property type</param>
            <param name="exception">Potential exception</param>
            <returns>Property value</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetNonNullableType(System.Type)">
            <summary>
            Get the type argument for a <see cref="T:System.Nullable`1"/> type.
            </summary>
            <param name="type">Any <see cref="T:System.Type"/> that might extend <see cref="T:System.Nullable`1"/>.</param>
            <returns>
            If the <paramref name="type"/> is a <see cref="T:System.Nullable`1"/> type, then the type argument
            of that type will be returned.  Otherwise <paramref name="type"/> will be returned as-is.
            </returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetUnderlyingEnumType(System.Type)">
            <summary>
            Get the underlying <see cref="T:System.Type"/> from an <see cref="T:System.Enum"/> type.
            </summary>
            <param name="type">Any <see cref="T:System.Type"/> that might represent an <see cref="T:System.Enum"/>
            or a <see cref="T:System.Nullable`1"/> of an <see cref="T:System.Enum"/> type.</param>
            <returns>
            If the <paramref name="type"/> is an <see cref="T:System.Enum"/> type, then <see cref="M:System.Enum.GetUnderlyingType(System.Type)"/>
            will be returned.
            <para>
            If the <paramref name="type"/> is a <see cref="T:System.Nullable`1"/> of an <see cref="T:System.Enum"/>
            type, then a <see cref="T:System.Nullable`1"/> of the <see cref="M:System.Enum.GetUnderlyingType(System.Type)"/> will be returned.
            </para>
            <para>
            Otherwise, <paramref name="type"/> will be returned as-is.
            </para>
            </returns>
            <remarks>
            If the <paramref name="type"/> is a <see cref="T:System.Nullable`1"/> type, then it will be returned as-is.
            </remarks>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetOrSetNestedPropertyValue(System.Boolean,System.Object,System.Object@,System.String)">
            <summary>
            Gets or sets the value of a public instance property. The property can be nested. 
            </summary>
            <param name="set">Set to true to write the property value</param>
            <param name="item">Object that exposes the property</param>
            <param name="value">Property value</param>
            <param name="propertyPath">Property path</param>
            <returns>Potential exception</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Returns the PropertyInfo corresponding to the provided propertyPath. The propertyPath can be a dotted
            path where each section is a public property name. Only public instance properties are searched for.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> extended by this method.</param>
            <param name="propertyPath">The property path.</param>
            <returns>The found PropertyInfo or null otherwise</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetTypeName(System.Type)">
            <summary>
            Returns the friendly name for a type
            </summary>
            <param name="type">The <see cref="T:System.Type"/> extended by this method.</param>
            <returns>Textual representation of the input type</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.SetNestedPropertyValue(System.Object,System.Object,System.String)">
            <summary>
            Sets the value of a property. That property can be nested. 
            Only works on public instance properties.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="value">Property value</param>
            <param name="propertyPath">Property path</param>
            <returns>Potential exception</returns>
        </member>
        <member name="T:System.Windows.Controls.LinqHelper">
            <summary>
            Utility class used for all Linq-related tasks
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildFilterExpression(System.Type,System.String,System.Windows.Controls.FilterOperator,System.Object,System.Boolean)">
            <summary>
            Produces the Linq expression that represents a particular FilterDescriptor
            </summary>
            <param name="type">Entity type</param>
            <param name="propertyPath">Left operand: Property on the entity type</param>
            <param name="filterOperator">One of the FilterOperator enum value</param>
            <param name="value">Right operand</param>
            <param name="isCaseSensitive">Boolean that specifies if the string operations are case sensitive or not</param>
            <returns>Resulting linq expression</returns>
            <exception cref="T:System.ArgumentException">When a filter descriptor references a property that could not be found.</exception>
            <exception cref="T:System.ArgumentException">When an exception occurs attempting to evaluate a filter descriptor.</exception>
            <exception cref="T:System.ArgumentException">When the supplied filter value has a type that cannot be compared to the property type.</exception>
            <exception cref="T:System.NotSupportedException">When attempting to use a property type/operator pair that is not supported.</exception>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildFiltersExpression(System.Windows.Controls.FilterDescriptorCollection,System.Windows.Controls.FilterDescriptorLogicalOperator,System.Windows.Controls.ExpressionCache)">
            <summary>
            Produces the Linq expression representing the entire filter descriptors collection.
            </summary>
            <param name="filterDescriptors">Collection of filters</param>
            <param name="filterOperator">The operator used to combine filters</param>
            <param name="expressionCache">Cache for storing built expressions</param>
            <returns>Produced linq expression, which can be <c>null</c> if there are no filter descriptors.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildPropertyExpression(System.Type,System.String)">
            <summary>
            Builds the Linq Expression for the provided propertyPath and type properties
            </summary>
            <param name="type">Type that exposes the property</param>
            <param name="propertyPath">Public property. Can be nested.</param>
            <returns>Resulting property expression</returns>
            <exception cref="T:System.ArgumentException">When property is not found on the specified type.</exception>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.GetEntityQueryMethod(System.String)">
            <summary>
            Gets an <see cref="T:System.ServiceModel.DomainServices.Client.EntityQuery`1"/> method by the specified name.
            </summary>
            <param name="methodName">The name of the method to find and return.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> from <see cref="T:System.ServiceModel.DomainServices.Client.EntityQuery`1"/>
            that matches the specified name, is generic, with 2 parameters, and accepting
            and <see cref="T:System.ServiceModel.DomainServices.Client.EntityQuery`1"/> as the first parameter.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.OrderBy(System.ServiceModel.DomainServices.Client.EntityQuery,System.Windows.Controls.GroupDescriptorCollection,System.Windows.Controls.SortDescriptorCollection,System.Windows.Controls.ExpressionCache)">
            <summary>
            Composes an <see cref="T:System.ServiceModel.DomainServices.Client.EntityQuery"/> for sorting and grouping purposes.
            </summary>
            <param name="source">The queryable source.</param>
            <param name="groupDescriptors">The group descriptors.</param>
            <param name="sortDescriptors">The sort descriptors.</param>
            <param name="expressionCache">Cache for storing built expressions</param>
            <returns>The composed <see cref="T:System.ServiceModel.DomainServices.Client.EntityQuery"/>.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.OrderBy(System.ServiceModel.DomainServices.Client.EntityQuery,System.String,System.Linq.Expressions.Expression)">
            <summary>
            Compose an OrderBy, ThenBy, OrderByDescending, or ThenByDescending clause onto an EntityQuery.
            </summary>
            <param name="source">The source EntityQuery</param>
            <param name="orderMethodName">The order method name to use: OrderBy, ThenBy, OrderByDescending, or ThenByDescending.</param>
            <param name="sortExpression">The expression to use for sorting.</param>
            <returns>The composed EntityQuery.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.Skip(System.ServiceModel.DomainServices.Client.EntityQuery,System.Int32)">
            <summary>
            Modifies the provided EntityQuery to perform a Skip operation.
            </summary>
            <param name="source">The EntityQuery to compose.</param>
            <param name="count">The number of items to skip.</param>
            <returns>The composed EntityQuery.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.Take(System.ServiceModel.DomainServices.Client.EntityQuery,System.Int32)">
            <summary>
            Modifies the provided EntityQuery to perform a Take operation.
            </summary>
            <param name="source">The EntityQuery to compose.</param>
            <param name="count">The number of items to take.</param>
            <returns>The composed EntityQuery.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.Where(System.ServiceModel.DomainServices.Client.EntityQuery,System.Linq.Expressions.Expression)">
            <summary>
            Modifies the provided EntityQuery to restrict the result set according to the <paramref name="filtersExpression"/> argument.
            </summary>
            <param name="source">EntityQuery to modify.</param>
            <param name="filtersExpression">Expression representing the filter to apply.</param>
            <returns>Composed EntityQuery</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.GenerateProperty(System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
            Generates a Linq property expression given a type and a property path
            </summary>
            <param name="type">Type that contains the property provided</param>
            <param name="propertyPath">Property path that can be dotted or not.</param>
            <param name="instance">Root expression</param>
            <returns>Resulting property expression if path is valid. Null otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.IsSupportedConversion(System.Type,System.Type)">
            <summary>
            Determine if the <paramref name="source"/> type can be converted
            to the <paramref name="target"/> type.
            </summary>
            <param name="source">The source type.</param>
            <param name="target">The desired target type.</param>
            <returns>Whether or not the source <see cref="T:System.Type"/> can be
            converted to the target <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.IsSupportedOperator(System.Type,System.Windows.Controls.FilterOperator)">
            <summary>
            Determine if the <paramref name="filterOperator"/> specified is supported for
            the <paramref name="type"/> specified.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the property to be filtered.</param>
            <param name="filterOperator">The <see cref="T:System.Windows.Controls.FilterOperator"/> to filter with.</param>
            <returns>Whether or not the <paramref name="type"/> can be filtered with <paramref name="filterOperator"/>.</returns>
        </member>
        <member name="T:System.Windows.Controls.LoadingDataEventArgs">
            <summary>
            Event arguments used for the DomainDataSource's Loading event
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LoadingDataEventArgs.#ctor(System.ServiceModel.DomainServices.Client.EntityQuery,System.ServiceModel.DomainServices.Client.LoadBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.LoadingDataEventArgs"/> class.
            </summary>
            <param name="query">Default query that will be used for the load operation</param>
            <param name="loadBehavior">Default load behavior that will be used for the load operation</param>
        </member>
        <member name="P:System.Windows.Controls.LoadingDataEventArgs.LoadBehavior">
            <summary>
            Gets or sets the load behavior applied to this load operation
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadingDataEventArgs.Query">
            <summary>
            Gets or sets the entity query executed remotely
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadingDataEventArgs.RestoreLoadSettings">
            <summary>
            Gets or sets a value indicating whether the DomainDataSource restores the 
            load/filter/sort/group settings to the state they were at the last successful 
            load operation. This restoration only occurs when both e.Cancel and
            e.RestoreLoadSettings are set to True.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSource">
            <summary>
            A component to simplify the interaction between the user interface and data from a
            <see cref="T:System.ServiceModel.DomainServices.Client.DomainContext"/>. With the
            DomainDataSource, you can <see cref="M:System.Windows.Controls.DomainDataSource.Load">load</see>, <see cref="P:System.Windows.Controls.DomainDataSource.FilterDescriptors">filter</see>,
            <see cref="P:System.Windows.Controls.DomainDataSource.GroupDescriptors">group</see>, and <see cref="P:System.Windows.Controls.DomainDataSource.SortDescriptors">sort</see> data easily.
            <para>
            After specifying a <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> and <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>, the
            <see cref="T:System.Windows.Controls.DomainDataSource"/> can load data and expose it through the <see cref="P:System.Windows.Controls.DomainDataSource.Data"/>
            and <see cref="P:System.Windows.Controls.DomainDataSource.DataView"/> properties.
            </para>
            </summary>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.AutoLoad"/>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.FilterDescriptors"/>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.SortDescriptors"/>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.GroupDescriptors"/>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.QueryNameSuffix">
            <summary>
            The preferred query name suffix to be added to
            <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/> values as needed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.DesignDataPropertyName">
            <summary>
            The property name used by the <see cref="F:System.Windows.Controls.DomainDataSource.DesignDataProperty"/>.
            </summary>
            <remarks>
            There is a constant for "DesignData" because the property name is
            used for both the dependency property registration and the
            design-time binding.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.AutoLoadProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.AutoLoad"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.CanLoadProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.DataProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.Data"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.DataViewProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.DataView"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.DesignDataProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.DesignData"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.DomainContextProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.FilterDescriptorsProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.FilterDescriptors"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.FilterOperatorProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.FilterOperator"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.GroupDescriptorsProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.GroupDescriptors"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.HasChangesProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.HasChanges"/> property.
            <para>
            This property is read-only.
            </para>
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.IsBusyProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.IsBusy"/> property.
            <para>
            This property is read-only.
            </para>
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.IsLoadingDataProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.IsLoadingData"/> property.
            <para>
            This property is read-only.
            </para>
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.IsSubmittingChangesProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.IsSubmittingChanges"/> property.
            <para>
            This property is read-only.
            </para>
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadDelayProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.LoadDelay"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadIntervalProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.LoadInterval"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadSizeProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.PageSizeProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.QueryNameProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.QueryParametersProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.RefreshIntervalProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.RefreshInterval"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.SortDescriptorsProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty"/> for the <see cref="P:System.Windows.Controls.DomainDataSource.SortDescriptors"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._currentLoadContext">
            <summary>
            Represents the characteristics of the latest load operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._currentLoadOperation">
            <summary>
            Represents the pending load operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._currentSubmitOperation">
            <summary>
            Represents the current submit operation requested of the DomainContext.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._preparingOperation">
            <summary>
            Flag used for preventing reentrance during Loading and Submitting events
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._entityType">
            <summary>
            The <see cref="T:System.Type"/> of <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> loaded for the query.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._internalEntityCollection">
            <summary>
            Collection populated by the loaded entities and provided as the
            source to the <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._internalEntityCollectionView">
            <summary>
            Collection view used as the source of the <see cref="P:System.Windows.Controls.DomainDataSource.DataView"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._lastRequestedPageIndex">
            <summary>
            Latest page index requested via <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._progressiveItemCount">
            <summary>
            Number of items downloaded progressively.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._queryMethod">
            <summary>
            The <see cref="T:System.ServiceModel.DomainServices.Client.EntityQuery`1"/> method that was discovered for the
            <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> and query method specified.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._skipNextAutoLoad">
            <summary>
            Set to <c>true</c> when a descriptor value cannot be converted.
            This indicates that the the subsequent auto-load should be skipped.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DomainDataSource"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.PagedEntityCollection_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Event handler for when a property changes on the <see cref="T:System.Windows.Controls.PagedEntityCollection"/>
            that is used for the <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/>.
            </summary>
            <remarks>
            The <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/> property can be changed through the <see cref="P:System.Windows.Controls.DomainDataSource.DataView"/>,
            and the change is relayed to the <see cref="T:System.Windows.Controls.DomainDataSource"/> through the
            <see cref="T:System.Windows.Controls.PagedEntityCollection"/>.
            </remarks>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.AutoLoadPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.AutoLoad"/> is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CanLoadPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/> is changed. An exception will be thrown if the property value is changed,
            as the underlying property is read-only.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.CanLoadProperty"/>.</param>
            <exception cref="T:System.InvalidOperationException">When the value is changed. The underlying property is read-only.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckEntityQueryInformation(System.Windows.Controls.DomainDataSource.MethodAccessStatus,System.Type,System.String,System.Type)">
            <summary>
            Analyze the status of determining the entity query, conditionally returning an exception that should be thrown
            by the caller. Scenarios that don't justify an exception will return <c>null</c>.
            </summary>
            <param name="methodAccessStatus">The status of the query method discovery.</param>
            <param name="domainContextType">The type of the domain context being used.</param>
            <param name="queryName">The name of the query to be used.</param>
            <param name="entityType">The type of the entity returned from the specified query.</param>
            <exception cref="T:System.ArgumentException">Thrown when the query parameters have an invalid parameter for the query.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DataPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.Data"/> is changed. An exception will be thrown if the property value is changed at runtime,
            as the underlying property is read-only.
            </summary>
            <remarks>
            At design-time, we allow <see cref="P:System.Windows.Controls.DomainDataSource.Data"/> to be changed, to allow the binding from <see cref="P:System.Windows.Controls.DomainDataSource.DesignData"/>
            to flow through, and we move currency to the first item.
            </remarks>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.DataProperty"/>.</param>
            <exception cref="T:System.InvalidOperationException">When the value is changed at run-time. The underlying property is read-only.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DataViewPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.DataView"/> is changed. An exception will be thrown if the property value is changed,
            as the underlying property is read-only.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.DataViewProperty"/>.</param>
            <exception cref="T:System.InvalidOperationException">When the value is changed. The underlying property is read-only.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DomainContextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.DomainContextProperty"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetEntityQueryInformation(System.ServiceModel.DomainServices.Client.DomainContext,System.String,System.Windows.Controls.ParameterCollection,System.Reflection.MethodInfo@,System.Type@,System.ServiceModel.DomainServices.Client.EntitySet@)">
            <summary>
            Analyze the input parameters and attempt to discover the entity query to be used and the type of
            <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> that will be loaded, as well as what <see cref="T:System.ServiceModel.DomainServices.Client.EntitySet"/> will contain
            the entities.
            </summary>
            <param name="domainContext">The <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> containing the specified query.</param>
            <param name="queryName">The name of the query to be invoked.</param>
            <param name="queryParameters">The collection of parameters to pass to the query method.</param>
            <param name="entityQueryMethodInfo">The query method to be invoked.</param>
            <param name="entityType">The type of entity to be loaded by the query.</param>
            <param name="entitySet">The entity set containing the entities to be loaded.</param>
            <returns>A <see cref="T:System.Windows.Controls.DomainDataSource.MethodAccessStatus"/> describing the results of the query discovery attempt.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetEntityQueryEntityType(System.Type)">
            <summary>
            Extracts the <see cref="T:System.Type"/> T from a <paramref name="type"/> of <see cref="T:System.ServiceModel.DomainServices.Client.EntityQuery`1"/> of T,
            where T derives from <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>.
            </summary>
            <param name="type">The <see cref="T:System.ServiceModel.DomainServices.Client.EntityQuery`1"/> type.</param>
            <returns>The <see cref="T:System.Type"/> of T when the type is <see cref="T:System.ServiceModel.DomainServices.Client.EntityQuery`1"/> of T and
            T derives from <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.MethodParametersMatchQueryParameters(System.Reflection.MethodInfo,System.Windows.Controls.ParameterCollection)">
            <summary>
            Determine if a method's parameter names match the query parameter names of a <see cref="T:System.Windows.Controls.ParameterCollection"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> whose parameters to check.</param>
            <param name="queryParameters">The <see cref="T:System.Windows.Controls.ParameterCollection"/> to check against.</param>
            <returns><c>true</c> when every parameter name is matched up, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.Clear">
            <summary>
            Clear all data from the <see cref="T:System.Windows.Controls.DomainDataSource"/> and the underlying <see cref="T:System.ServiceModel.DomainServices.Client.EntitySet"/>
            on the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CouldMethodParametersMatchQueryParameters(System.Reflection.MethodInfo,System.Windows.Controls.ParameterCollection)">
            <summary>
            Determine if a method's parameter names match a subset of the query parameter names of a <see cref="T:System.Windows.Controls.ParameterCollection"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> whose parameters to check.</param>
            <param name="queryParameters">The <see cref="T:System.Windows.Controls.ParameterCollection"/> to check against.</param>
            <returns><c>true</c> when every query parameter name is matched up, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetLoadSizeCeiling(System.Int32,System.Int32)">
            <summary>
            Determine the actual load size to be used for a query invocation. This accounts for mismatches
            between <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/> and <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/> ensuring that the load size used is
            a multiple of the <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/>.
            </summary>
            <param name="pageSize">The page size being used.</param>
            <param name="loadSize">The load size being used.</param>
            <returns>The actual load size to be used for the specified scenario.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.FilterDescriptorsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.FilterDescriptors"/> is changed. An exception will be thrown if the property value is changed,
            as the underlying property is read-only.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.FilterDescriptorsProperty"/>.</param>
            <exception cref="T:System.InvalidOperationException">When the value is changed. The underlying property is read-only.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.FilterOperatorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.FilterOperator"/> is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.FilterOperatorProperty"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GroupDescriptorsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.GroupDescriptors"/> is changed. An exception will be thrown if the property value is changed,
            as the underlying property is read-only.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.GroupDescriptorsProperty"/>.</param>
            <exception cref="T:System.InvalidOperationException">When the value is changed. The underlying property is read-only.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HasChangesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.HasChanges"/> is changed. An exception will be thrown if the property value is changed,
            as the underlying property is read-only.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.HasChangesProperty"/>.</param>
            <exception cref="T:System.InvalidOperationException">When the value is changed. The underlying property is read-only.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.IsBusyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.IsBusy"/> is changed. An exception will be thrown if the property value is changed,
            as the underlying property is read-only.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.IsBusyProperty"/>.</param>
            <exception cref="T:System.InvalidOperationException">When the value is changed. The underlying property is read-only.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.IsLoadingDataPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.IsLoadingData"/> is changed. An exception will be thrown if the property value is changed,
            as the underlying property is read-only.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.IsLoadingDataProperty"/>.</param>
            <exception cref="T:System.InvalidOperationException">When the value is changed. The underlying property is read-only.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.IsSubmittingChangesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.IsSubmittingChanges"/> is changed. An exception will be thrown if the property value is changed,
            as the underlying property is read-only.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.IsSubmittingChangesProperty"/>.</param>
            <exception cref="T:System.InvalidOperationException">When the value is changed. The underlying property is read-only.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadDelayPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.LoadDelay"/> is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.LoadDelayProperty"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.LoadInterval"/> is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.LoadIntervalProperty"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/> is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.LoadSizeProperty"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.PageSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/> is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.PageSizeProperty"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.QueryNamePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/> is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.QueryNameProperty"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.QueryParametersPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/> is changed. An exception will be thrown if the property value is changed,
            as the underlying property is read-only.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.QueryParametersProperty"/>.</param>
            <exception cref="T:System.InvalidOperationException">When the value is changed. The underlying property is read-only.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ReadOnlyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs,System.String)">
            <summary>
            A utility method to handle changes to read-only properties. This method will throw
            an <see cref="T:System.InvalidOperationException"/> if the application attempts to change
            the value of the property.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the change to the specified property.</param>
            <param name="propertyName">The name of the read-only property that changed.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RefreshIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.RefreshInterval"/> is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.RefreshIntervalProperty"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the specified <see cref="T:System.TimeSpan"/> has a negative value.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.SortDescriptorsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.SortDescriptors"/> is changed. An exception will be thrown if the property value is changed,
            as the underlying property is read-only.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.SortDescriptorsProperty"/>.</param>
            <exception cref="T:System.InvalidOperationException">When the value is changed. The underlying property is read-only.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ApplyState(System.Boolean)">
            <summary>
            Apply the current visual state to the control, optionally supporting animation.
            </summary>
            <param name="animate">Whether or not to support animation in the visual state change.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CancelLoad">
            <summary>
            Cancels the current load operation performed by this <see cref="T:System.Windows.Controls.DomainDataSource"/>, if any.
            </summary>
            <remarks>
            This method will cancel a <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> operation already in progress. Operations canceled
            using <see cref="M:System.Windows.Controls.DomainDataSource.CancelLoad"/> will raise a <see cref="E:System.Windows.Controls.DomainDataSource.LoadedData"/> event when they complete
            with the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> flag set to <c>true</c>. If
            <see cref="P:System.Windows.Controls.DomainDataSource.IsLoadingData"/> is <c>false</c>, this method will not do anything. This
            method of cancellation differs slightly from canceling a load via the <see cref="E:System.Windows.Controls.DomainDataSource.LoadingData"/>
            event.
            </remarks>
            <seealso cref="E:System.Windows.Controls.DomainDataSource.LoadingData"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CancelLoadPrivate">
            <summary>
            Cancels the current load operation performed by this <see cref="T:System.Windows.Controls.DomainDataSource"/>, if any
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CancelSubmit">
            <summary>
            Cancels the current submit operation performed by this <see cref="T:System.Windows.Controls.DomainDataSource"/>, if any.
            </summary>
            <remarks>
            This method will cancel a <see cref="M:System.Windows.Controls.DomainDataSource.SubmitChanges"/> operation already in progress. Operations
            canceled using <see cref="M:System.Windows.Controls.DomainDataSource.CancelSubmit"/> will raise a <see cref="E:System.Windows.Controls.DomainDataSource.SubmittedChanges"/> event when
            they complete with the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> flag set to <c>true</c>.
            If <see cref="P:System.Windows.Controls.DomainDataSource.IsSubmittingChanges"/> is <c>false</c>, this method will not do anything. This
            method of cancellation differs slightly from canceling a submit via the
            <see cref="E:System.Windows.Controls.DomainDataSource.SubmittingChanges"/> event.
            <para>
            Upon completion of the operation, check the <see cref="P:System.ServiceModel.DomainServices.Client.OperationBase.IsCanceled"/>
            property to determine whether or not the operation was successfully canceled. Note that cancellation
            of the operation does not guarantee state changes were prevented from happening on the server.
            </para>
            </remarks>
            <seealso cref="E:System.Windows.Controls.DomainDataSource.SubmittingChanges"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckFilterDescriptor(System.Windows.Controls.FilterDescriptor)">
            <summary>
            Checks the validity of a <see cref="T:System.Windows.Controls.FilterDescriptor"/> instance.
            </summary>
            <param name="filterDescriptor">The descriptor to validate.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckGroupDescriptor(System.Windows.Controls.GroupDescriptor)">
            <summary>
            Checks the validity of a <see cref="T:System.Windows.Controls.GroupDescriptor"/> instance.
            </summary>
            <param name="groupDescriptor">The descriptor to validate.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckQueryParameter(System.Windows.Controls.Parameter)">
            <summary>
            Check the validity of a <see cref="T:System.Windows.Controls.Parameter"/> instance.
            </summary>
            <param name="queryParameter">The parameter to validate.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckQueryParameters(System.Windows.Controls.ParameterCollection)">
            <summary>
            Check the validity of a <see cref="T:System.Windows.Controls.ParameterCollection"/> instance.
            </summary>
            <param name="queryParameters">The parameter collection to validate.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckSortDescriptor(System.Windows.Controls.SortDescriptor)">
            <summary>
            Checks the validity of a <see cref="T:System.Windows.Controls.SortDescriptor"/> instance.
            </summary>
            <param name="sortDescriptor">The descriptor to validate.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ValidatePropertyPath(System.String,System.String,System.Int32)">
            <summary>
            Checks the validity of descriptor property path.
            </summary>
            <param name="propertyPath">The property path to validate.</param>
            <param name="descriptorName">The name used when composing error messages.</param>
            <param name="descriptorIndex">The index of the descriptor in the containing collection used
            when composing error messages.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DeferLoad">
            <summary>
            Used to group changes to multiple load characteristics together, deferring
            the resulting load into a single load when the object returned from this
            method is disposed.
            </summary>
            <returns>
            <see cref="T:System.IDisposable"/> object that will trigger a load operation when disposed
            using <see cref="M:System.IDisposable.Dispose"/>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DeferLoadFirstItems">
            <summary>
            If we're paging or using progressive load, then we will defer a load type
            that ensures the first items will be loaded upon the next load.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DomainContext_Loaded(System.Windows.Controls.LoadedDataEventArgs,System.Windows.Controls.LoadContext)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>'s load is completed.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Controls.LoadedDataEventArgs"/> that result from this load operation.</param>
            <param name="loadContext">The <see cref="T:System.Windows.Controls.LoadContext"/> associated with this load operation.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DomainContext_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> is changed.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments describing the property change event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.EntityCollectionView_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="F:System.Windows.Controls.DomainDataSource._internalEntityCollectionView"/> is changed.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments describing the property change event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DomainDataSource_IsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.Control.IsEnabled"/> is changed.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.Control.IsEnabledProperty"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DomainDataSource_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="T:System.Windows.Controls.Control"/> has <see cref="E:System.Windows.FrameworkElement.Loaded"/>
            (not when data has been loaded). Initialize Auto-Load behavior.
            </summary>
            <param name="sender">The sender of the loaded event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> for this loaded event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.EndLoadDefer">
            <summary>
            Callback for when a deferred load has ended via disposal of the object
            returned from a <see cref="M:System.Windows.Controls.DomainDataSource.DeferLoad"/> call.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RequestAutoLoad">
            <summary>
            Requests that a <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> be invoked when <see cref="P:System.Windows.Controls.DomainDataSource.AutoLoad"/> is <c>true</c>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ExecuteLoad(System.Windows.Controls.LoadType)">
            <summary>
            Execute a load of the specified <see cref="T:System.Windows.Controls.LoadType"/>. Any pending load will be canceled.
            </summary>
            <param name="loadType">The <see cref="T:System.Windows.Controls.LoadType"/> to be used for this load.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetFilterDescriptorsQuery(System.ServiceModel.DomainServices.Client.EntityQuery)">
            <summary>
            Appends the query parameters that will filter the list on the server-side
            before bringing the data down.
            </summary>
            <param name="query">The query before the filter descriptions are applied.</param>
            <returns>The query for the load operation with the filter descriptors applied.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetPagingQuery(System.ServiceModel.DomainServices.Client.EntityQuery,System.Windows.Controls.LoadType,System.Int32@)">
            <summary>
            Appends the paging statements (Skip/Take) onto the specified <paramref name="query"/>
            based on the <paramref name="loadType"/>, <paramref name="startPageIndex"/>, 
            <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/>, and <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/>.
            </summary>
            <param name="query">The query before the paging statements are applied.</param>
            <param name="loadType">The type of load being performed.</param>
            <param name="startPageIndex">The first page requested for the load.</param>
            <returns>The query for the load operation with the paging statements applied.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetProgressiveLoadQuery(System.ServiceModel.DomainServices.Client.EntityQuery)">
            <summary>
            Appends the progressive load statements (Skip/Take) ontp the specified <paramref name="query"/>
            using the <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/> property.
            </summary>
            <param name="query">The query before the progressive load statements are applied.</param>
            <returns>The query for the load operation with the progressive load statements applied.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetQueryParameterValues">
            <summary>
            Returns an array of values to be used for the query parameters.
            </summary>
            <returns>Array of <see cref="T:System.Windows.Controls.Parameter"/> values to use in the load operation.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetSortDescriptorsQuery(System.ServiceModel.DomainServices.Client.EntityQuery)">
            <summary>
            Appends the query parameters that will sort/group the list on the server-side.
            </summary>
            <remarks>
            Because we cannot actually pass in a grouping parameter, we translate grouping
            into server-side sorting that is applied before the sort descriptors.
            </remarks>
            <param name="query">The query before the sorting statements are applied.</param>
            <returns>The query for the load operation with the sort statements applied.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.InitializeAutoLoad">
            <summary>
            Called once the control has been loaded and auto-load can safely begin.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.InitializeView">
            <summary>
            Sets up the internal entity collection and the paged collection view.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.InitializeCommands">
            <summary>
            Initialize the various <see cref="T:System.Windows.Input.ICommand"/> implementations for the control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.Load">
            <summary>
            Starts a load operation synchronously. Any pending load will be implicitly canceled.
            </summary>
            <remarks>
            If you don't wish to cancel a pending load, check <see cref="P:System.Windows.Controls.DomainDataSource.IsLoadingData"/> before
            calling <see cref="M:System.Windows.Controls.DomainDataSource.Load"/>.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadData(System.Windows.Controls.LoadType)">
            <summary>
            Invoke a load operation for the specified <see cref="T:System.Windows.Controls.LoadType"/>. The <see cref="T:System.ServiceModel.DomainServices.Client.EntityQuery"/> will be
            composed and the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>'s <see cref="M:System.ServiceModel.DomainServices.Client.DomainContext.Load(System.ServiceModel.DomainServices.Client.EntityQuery,System.ServiceModel.DomainServices.Client.LoadBehavior,System.Action{System.ServiceModel.DomainServices.Client.LoadOperation},System.Object)"/>
            method will be called.
            </summary>
            <remarks>
            A <see cref="E:System.Windows.Controls.DomainDataSource.LoadingData"/> event will always be raised when this method is called, regardless of success.
            </remarks>
            <param name="loadType">The type of load to be invoked.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadData_Callback(System.ServiceModel.DomainServices.Client.LoadOperation)">
            <summary>
            The callback used for the <see cref="T:System.ServiceModel.DomainServices.Client.LoadOperation"/>, indicating completion
            of the load.
            </summary>
            <param name="loadOperation">The LoadOperation that has finished.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadData_PostInvoke(System.Windows.Controls.LoadContext)">
            <summary>
            Post processing that occurs synchronously after invoking a load (after when the load completes).
            </summary>
            <param name="loadContext">The <see cref="T:System.Windows.Controls.LoadContext"/> that was used for the load.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Callback for when the <see cref="P:System.Windows.Controls.DomainDataSource.LoadTimer"/> ticks. This indicates that
            a queued auto-load can now be invoked.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.AutoLoad"/>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.LoadDelay"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.MoveToPage(System.Int32)">
            <summary>
            Called when the paged collection view requests a new page index.
            </summary>
            <param name="pageIndex">Index of the requested page.</param>
            <returns><c>true</c> if an asynchronous page load was initiated, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.OnApplyTemplate">
            <summary>
            Called when a new template gets applied to the <see cref="T:System.Windows.Controls.Control"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ProcessLoadedEntities(System.Windows.Controls.LoadContext,System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Client.Entity})">
            <summary>
            Process the entities that resulted from a load operation, loading those entities
            into the <see cref="F:System.Windows.Controls.DomainDataSource._internalEntityCollection"/>.
            </summary>
            <param name="loadContext">The <see cref="T:System.Windows.Controls.LoadContext"/> used to perform the load operation.</param>
            <param name="entities">The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> list that was loaded.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ProgressiveLoadTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Callback for when the <see cref="P:System.Windows.Controls.DomainDataSource.ProgressiveLoadTimer"/> ticks. This indicates that
            a progressive load can invoke the next load.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.LoadInterval"/>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RaiseLoadedData(System.Windows.Controls.LoadedDataEventArgs)">
            <summary>
            Raise the <see cref="E:System.Windows.Controls.DomainDataSource.LoadedData"/> event.
            </summary>
            <param name="e">The event arguments to use for the raised event.</param>
            <exception cref="T:System.ServiceModel.DomainServices.Client.DomainException">thrown when a load error occurred and was not handled.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RaiseLoadingData(System.Windows.Controls.LoadingDataEventArgs)">
            <summary>
            Raise the <see cref="E:System.Windows.Controls.DomainDataSource.LoadingData"/> event. If the event is canceled and
            <see cref="P:System.Windows.Controls.LoadingDataEventArgs.RestoreLoadSettings"/> is set to <c>true</c>,
            then load settings will be restored.
            </summary>
            <param name="e">The event arguments to use for the raised event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RaisePageChanged(System.Windows.Controls.LoadContext,System.Int32,System.Int32)">
            <summary>
            Notify the <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/> that the page move was completed.
            </summary>
            <param name="loadContext">Load characteristics</param>
            <param name="newStartPageIndex">Final start page index</param>
            <param name="newPageIndex">Final page index</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RaiseSubmittedChanges(System.Windows.Controls.SubmittedChangesEventArgs)">
            <summary>
            Raise the <see cref="E:System.Windows.Controls.DomainDataSource.SubmittedChanges"/> event.
            </summary>
            <param name="e">The event arguments to use for the raised event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RaiseSubmittingChanges(System.Windows.Controls.SubmittingChangesEventArgs)">
            <summary>
            Raise the <see cref="E:System.Windows.Controls.DomainDataSource.SubmittingChanges"/> event.
            </summary>
            <param name="e">The event arguments to use for the raised event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RefreshLoadTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Callback for when the <see cref="P:System.Windows.Controls.DomainDataSource.RefreshLoadTimer"/> ticks. This indicates that
            the data should be refreshed from the server.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.RefreshInterval"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RejectChanges">
            <summary>
            Rejects the changes for every <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> in the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>.
            </summary>
            <remarks>
            Changes will be rejected for all entities in the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>, including
            those that were not loaded through this <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            <para>
            This will also cancel a pending Add or Edit transaction on the <see cref="P:System.Windows.Controls.DomainDataSource.DataView"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ResetEntitySet">
            <summary>
            Resets the backing entity set for the <see cref="F:System.Windows.Controls.DomainDataSource._internalEntityCollection"/>
            and clears all entities from the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ResetFiltersExpression">
            <summary>
            Resets the calculated filters expression.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ResetPendingLoads">
            <summary>
            Resets all pending loads by stopping the auto-load <see cref="P:System.Windows.Controls.DomainDataSource.LoadTimer"/>
            and the <see cref="P:System.Windows.Controls.DomainDataSource.ProgressiveLoadTimer"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.StoreLoadSettings">
            <summary>
            Stores the descriptor settings used to compose the last successful load query.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RestoreLoadSettings">
            <summary>
            Restores the descriptor settings used to compose the last successful load query.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.SubmitChanges">
            <summary>
            Submits the changes for every <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> in the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>.
            </summary>
            <remarks>
            Changes will be submitted for all entities in the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>, including
            those that were not loaded through this <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            <para>
            This will also commit a pending Add or Edit transaction on the <see cref="P:System.Windows.Controls.DomainDataSource.DataView"/>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.SubmitChanges_Callback(System.ServiceModel.DomainServices.Client.SubmitOperation)">
            <summary>
            The callback used for the <see cref="T:System.ServiceModel.DomainServices.Client.SubmitOperation"/>, when the operation completes.
            </summary>
            <param name="submitOperation">The <see cref="T:System.ServiceModel.DomainServices.Client.SubmitOperation"/> that raised this callback.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.UpdateCanLoadProperty">
            <summary>
            Update the <see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/> property based on the <see cref="P:System.Windows.Controls.DomainDataSource.HasChanges"/>
            and <see cref="P:System.Windows.Controls.DomainDataSource.IsSubmittingChanges"/> properties.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.UpdateCanRejectChangesProperty">
            <summary>
            Updates the <see cref="P:System.Windows.Controls.DomainDataSource.CanRejectChanges"/> property based on the 
            <see cref="P:System.Windows.Controls.DomainDataSource.HasChanges"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.UpdateCanSubmitChangesProperty">
            <summary>
            Updates the <see cref="P:System.Windows.Controls.DomainDataSource.CanSubmitChanges"/> property based on the 
            <see cref="P:System.Windows.Controls.DomainDataSource.HasChanges"/> and <see cref="P:System.Windows.Controls.DomainDataSource.IsSubmittingChanges"/> properties.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.UpdatePagingCounts(System.Windows.Controls.LoadedDataEventArgs,System.Windows.Controls.LoadContext,System.Int32)">
            <summary>
            Update the count properties involved in paging when a load operation has succeeded.
            </summary>
            <param name="e">The event args from the load completion.</param>
            <param name="loadContext">The context of the load that completed.</param>
            <param name="loadedEntitiesCount">The count of top-level entities that were loaded.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ValidateFilterDescriptors">
            <summary>
            Validate all filter descriptors and ensure each is valid.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when a filter descriptor is invalid.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ValidateGroupDescriptors">
            <summary>
            Process all group descriptors, validating that each is valid.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when a group descriptor is invalid.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ValidateQueryParameters">
            <summary>
            Validates all <see cref="T:System.Windows.Controls.Parameter"/>s in the <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/> collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if a parameter name is empty of if the entity query cannot be determined.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ValidateEntityQuery">
            <summary>
            Validates the entity query by determining whether the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>,
            <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>, and <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/> can identify a unique
            query to load.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the query parameters have an invalid parameter for the query.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ValidateSortDescriptors">
            <summary>
            Process all sort descriptors, validating that each is valid.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when a sort descriptor is invalid.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ViewRefreshCallback">
            <summary>
            Callback provided to the <see cref="T:System.Windows.Controls.PagedEntityCollectionView"/> for when a <see cref="M:System.ComponentModel.ICollectionView.Refresh"/> occurs.
            </summary>
            <remarks>
            This can be called either from a <see cref="M:System.ComponentModel.ICollectionView.DeferRefresh"/> disposal, or from a direct
            <see cref="M:System.ComponentModel.ICollectionView.Refresh"/> call. A load will be invoked to refresh the data and the view.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleManagerCollectionChanged_Filter(System.Object,System.EventArgs)">
            <summary>
            Handles collection changed events raised by the <see cref="T:System.Windows.Controls.FilterCollectionManager"/> and enqueues
            an immediate reload.
            </summary>
            <param name="sender">The collection manager</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleManagerPropertyChanged_Filter(System.Object,System.EventArgs)">
            <summary>
            Handles property changed events raised by the <see cref="T:System.Windows.Controls.FilterCollectionManager"/> and enqueues
            a delayed reload.
            </summary>
            <param name="sender">The collection manager</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleManagerCollectionChanged_Group(System.Object,System.EventArgs)">
            <summary>
            Handles collection changed events raised by the <see cref="T:System.Windows.Controls.GroupCollectionManager"/> and enqueues
            an immediate reload.
            </summary>
            <param name="sender">The collection manager</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleManagerPropertyChanged_Group(System.Object,System.EventArgs)">
            <summary>
            Handles property changed events raised by the <see cref="T:System.Windows.Controls.GroupCollectionManager"/> and enqueues
            a delayed reload.
            </summary>
            <param name="sender">The collection manager</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleManagerCollectionChanged_Parameter(System.Object,System.EventArgs)">
            <summary>
            Handles collection changed events raised by the <see cref="T:System.Windows.Controls.ParameterCollectionManager"/> and enqueues
            an immediate reload.
            </summary>
            <param name="sender">The collection manager</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleManagerPropertyChanged_Parameter(System.Object,System.EventArgs)">
            <summary>
            Handles property changed events raised by the <see cref="T:System.Windows.Controls.ParameterCollectionManager"/> and enqueues
            a delayed reload.
            </summary>
            <param name="sender">The collection manager</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleManagerCollectionChanged_Sort(System.Object,System.EventArgs)">
            <summary>
            Handles collection changed events raised by the <see cref="T:System.Windows.Controls.SortCollectionManager"/> and enqueues
            an immediate reload.
            </summary>
            <param name="sender">The collection manager</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleManagerPropertyChanged_Sort(System.Object,System.EventArgs)">
            <summary>
            Handles property changed events raised by the <see cref="T:System.Windows.Controls.SortCollectionManager"/> and enqueues
            a delayed reload.
            </summary>
            <param name="sender">The collection manager</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleManagerCollectionChanged(System.Object,System.EventArgs)">
            <summary>
            Handles collection changed events raised by a <see cref="T:System.Windows.Controls.CollectionManager"/> and enqueues
            an immediate reload.
            </summary>
            <param name="sender">The collection manager</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleManagerPropertyChanged(System.Object,System.EventArgs)">
            <summary>
            Handles property changed events raised by a <see cref="T:System.Windows.Controls.CollectionManager"/> and enqueues
            a delayed reload.
            </summary>
            <param name="sender">The collection manager</param>
            <param name="e">The event args</param>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.SubmittedChanges">
            <summary>
            Event raised whenever a submit operation is completed.
            </summary>
            <remarks>
            This event is raised on the completion of an asynchronous <see cref="M:System.Windows.Controls.DomainDataSource.SubmitChanges"/> operation.
            If the operation was canceled via <see cref="M:System.Windows.Controls.DomainDataSource.CancelSubmit"/>, the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> flag will be <c>true</c>. Also, exceptions that
            occurred during the operation will be available on <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/>.
            If the submit was canceled from the <see cref="E:System.Windows.Controls.DomainDataSource.SubmittingChanges"/> event, this event will not be
            raised. Also, if there were no changes this event will not be raised.
            </remarks>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.LoadedData">
            <summary>
            Event raised whenever a load operation is completed.
            </summary>
            <remarks>
            This event is raised on the completion of an asynchronous <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> operation. If the
            operation was canceled via <see cref="M:System.Windows.Controls.DomainDataSource.CancelLoad"/>, the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/>
            flag will be <c>true</c>. Also, exceptions that occurred during the operation will be available
            on <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/>. If the load was canceled from the
            <see cref="E:System.Windows.Controls.DomainDataSource.LoadingData"/> event, this event will not be raised.
            </remarks>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.LoadingData">
            <summary>
            Event raised whenever a load operation is launched.
            </summary>
            <remarks>
            This event is raised from <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> and allows a handler to cancel the load before it
            begins. When a handler sets <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>, the load
            will be aborted and a subsequent <see cref="E:System.Windows.Controls.DomainDataSource.LoadedData"/> event will not be raised. This
            differs slightly from canceling a load via <see cref="M:System.Windows.Controls.DomainDataSource.CancelLoad"/>.
            </remarks>
            <seealso cref="M:System.Windows.Controls.DomainDataSource.CancelLoad"/>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.SubmittingChanges">
            <summary>
            Event raised whenever a submit operation is launched.
            </summary>
            <remarks>
            This event is raised from <see cref="M:System.Windows.Controls.DomainDataSource.SubmitChanges"/> and allows a handler to cancel the submit
            before it begins. When a handler sets <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to
            <c>true</c>, the submit will be aborted and a subsequent <see cref="E:System.Windows.Controls.DomainDataSource.SubmittedChanges"/> event
            will not be raised. This differs slightly from canceling a submit via <see cref="M:System.Windows.Controls.DomainDataSource.CancelSubmit"/>.
            </remarks>
            <seealso cref="M:System.Windows.Controls.DomainDataSource.CancelSubmit"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.AutoLoad">
            <summary>
            Gets or sets a value indicating whether <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> is automatically invoked when
            a change occurs that impacts the query composed by the <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            </summary>
            <remarks>
            When <see cref="P:System.Windows.Controls.DomainDataSource.AutoLoad"/> is <c>true</c>, any property change affecting the load
            query will automatically invoke a <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> after the specified
            <see cref="P:System.Windows.Controls.DomainDataSource.LoadDelay"/>. Examples of properties that impact the query are
            <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/> and <see cref="P:System.Windows.Controls.DomainDataSource.FilterOperator"/>. Also, changes to dependency
            object collections like <see cref="P:System.Windows.Controls.DomainDataSource.FilterDescriptors"/> and changes to the dependency
            properties on elements contained in those collections will affect the query and prompt
            an automatic <see cref="M:System.Windows.Controls.DomainDataSource.Load"/>.
            </remarks>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.LoadDelay"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.CanLoad">
            <summary>
            Gets a value indicating whether the control can perform
            a load operation based on the present state.
            </summary>
            <value>
            <c>false</c> whenever <see cref="P:System.Windows.Controls.DomainDataSource.HasChanges"/> or <see cref="P:System.Windows.Controls.DomainDataSource.IsSubmittingChanges"/>
            is <c>true</c>.
            </value>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.CanRejectChanges">
            <summary>
            Get a value indicating whether <see cref="M:System.Windows.Controls.DomainDataSource.RejectChanges"/> can be called.
            </summary>
            <value>
            <c>true</c> whenever <see cref="P:System.Windows.Controls.DomainDataSource.HasChanges"/> is <c>true</c>. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.CanSubmitChanges">
            <summary>
            Gets a value indicating whether <see cref="M:System.Windows.Controls.DomainDataSource.SubmitChanges"/> can be called.
            </summary>
            <value>
            <c>true</c> whenever <see cref="P:System.Windows.Controls.DomainDataSource.HasChanges"/> is <c>true</c> and
            <see cref="P:System.Windows.Controls.DomainDataSource.IsSubmittingChanges"/> is <c>false</c>
            </value>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.Culture">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo"/> used for comparisons and conversions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.Data">
            <summary>
            Gets the entities resulting from the last load operation, as an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <remarks>
            Primarily used when binding other controls to the results of the load; for programmatic
            access to the loaded entities, see the <see cref="P:System.Windows.Controls.DomainDataSource.DataView"/> property.
            </remarks>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.DataView"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.DataView">
            <summary>
            Gets the current view of entities resulting from the last load operation, using a
            <see cref="T:System.Windows.Controls.DomainDataSourceView"/>.
            </summary>
            <remarks>
            The entities returned from this view are the same as those returned from the
            <see cref="P:System.Windows.Controls.DomainDataSource.Data"/> property.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.DesignData">
            <summary>
            Gets or sets the data to use at design-time. DesignData
            will accept an <see cref="T:System.Collections.Generic.IEnumerable`1"/> for any
            <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> type and, at design-time, provide
            that value to the <see cref="P:System.Windows.Controls.DomainDataSource.Data"/> property.
            </summary>
            <remarks>
            This property allows for support of design-time sample data
            and it also enhances the design-time support of the
            <see cref="T:System.Windows.Controls.DomainDataSource"/> control.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.DomainContext">
            <summary>
            Gets or sets the <see cref="T:System.ServiceModel.DomainServices.Client.DomainContext"/>
            instance used for executing the load and submit operations.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.FilterDescriptors">
            <summary>
            Gets the collection of <see cref="T:System.Windows.Controls.FilterDescriptor"/> objects used when performing loads.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.FilterOperator">
            <summary>
            Gets or sets the logical operator used for combinining <see cref="P:System.Windows.Controls.DomainDataSource.FilterDescriptors"/> in the filters collection.
            <para>The default value is <see cref="F:System.Windows.Controls.FilterDescriptorLogicalOperator.And"/>.</para>
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.GroupDescriptors">
            <summary>
            Gets the collection of <see cref="T:System.Windows.Controls.GroupDescriptor"/> objects used to organize the loaded entities into groups.
            </summary>
            <remarks>
            When a <see cref="T:System.Windows.Controls.GroupDescriptor"/> is applied, the data will inherently be sorted by the grouped property.
            To force a grouped property to be sorted in <see cref="F:System.ComponentModel.ListSortDirection.Descending"/> order, add a
            <see cref="T:System.Windows.Controls.SortDescriptor"/> to the <see cref="P:System.Windows.Controls.DomainDataSource.SortDescriptors"/> collection for that property using the
            <see cref="F:System.ComponentModel.ListSortDirection.Descending"/> direction.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.HasChanges">
            <summary>
            Gets a value indicating whether the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> currently has any entities with
            pending changes.
            </summary>
            <remarks>
            <see cref="P:System.Windows.Controls.DomainDataSource.HasChanges"/> is <c>true</c> whenever any <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> within the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>
            has changes, regardless of whether or not the entity was loaded through this <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.InitialLoadType">
            <summary>
            Gets the type of load operation required given the
            <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/> and <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/> values.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.IsBusy">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Windows.Controls.DomainDataSource"/> is
            busy, either loading data or submitting changes.
            </summary>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.IsLoadingData"/>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.IsSubmittingChanges"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.IsLoadingData">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Windows.Controls.DomainDataSource"/> is currently loading data.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.IsSubmittingChanges">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Windows.Controls.DomainDataSource"/> is currently
            submitting changes as a result of a call to <see cref="M:System.Windows.Controls.DomainDataSource.SubmitChanges"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.LoadDelay">
            <summary>
            Gets or sets the delay between the time a change that prompts an automatic load occurs
            and the time the subsequent <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> is invoked.
            </summary>
            <remarks>
            Multiple changes that occur within the specified time span are aggregated into a single
            <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> operation. For every change that occurs, the delay timer is reset.
            This allows many changes to be combined into a single call as long as each change occurs
            within the specified delay from the last. Once the delay timer is allowed to elapse
            without a change occurring, <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> will be invoked.
            </remarks>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.AutoLoad"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.LoadInterval">
            <summary>
            Gets or sets the pause duration between two successive load operations in 
            progressive loads.
            </summary>
            <remarks>
            Progressive loads allow entities to be loaded in the background when
            a <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/> is specified, and <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/>
            is set to <c>0</c>.
            </remarks>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.LoadSize">
            <summary>
            Gets or sets the maximum number of items to load each time a <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> is executed.
            When equal to <c>0</c>, all requested entities will be loaded.
            </summary>
            <remarks>
            When <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/> and <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/> are both non-zero, entities will be
            loaded using the multiple of <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/> nearest <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/>, allowing
            multiple pages to be loaded at once without loading partial pages.
            </remarks>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.LoadInterval"/>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.PageSize"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.LoadTimer">
            <summary>
            Gets or sets a timer used to aggregate auto-load requests before loading.
            </summary>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.LoadDelay"/>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.AutoLoad"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.PageSize">
            <summary>
            Gets or sets the number of items displayed on each page of the view
            returned from <see cref="P:System.Windows.Controls.DomainDataSource.Data"/> and <see cref="P:System.Windows.Controls.DomainDataSource.DataView"/>, or
            <c>0</c> to disable paging.
            <para>
            A non-zero page size will cause the number of entities loaded with each
            <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> operation to be limited as well, using server-side paging.
            </para>
            </summary>
            <remarks>
            When <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/> and <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/> are both non-zero, entities will be
            loaded using the multiple of <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/> nearest <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/>, allowing
            multiple pages to be loaded at once without loading partial pages.
            </remarks>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.ProgressiveLoadTimer">
            <summary>
            Gets or sets a timer used to progressively load data.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.QueryName">
            <summary>
            Gets or sets the name of the query to use for loading.
            </summary>
            <remarks>
            The <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> will be searched for a method
            that returns an <see cref="T:System.ServiceModel.DomainServices.Client.EntityQuery`1"/>, with a name
            matching what is provided to <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>, with or
            without a "Query" suffix.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.QueryParameters">
            <summary>
            Gets the collection of <see cref="T:System.Windows.Controls.Parameter"/> objects representing arguments of the
            <see cref="T:System.ServiceModel.DomainServices.Client.EntityQuery`1"/> referenced by <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.RefreshInterval">
            <summary>
            Gets or sets the interval between automatic <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> operations, to refresh
            the data with any changes that may have occurred on the server.
            </summary>
            <remarks>
            When a non-zero <see cref="T:System.TimeSpan"/> is specified, a <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> operation will automatically
            be invoked each time this interval elapses, as long as <see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/> is <c>true</c>.
            <para>
            As soon as this interval is set, a timer will start, regardless of the <see cref="P:System.Windows.Controls.DomainDataSource.AutoLoad"/>
            property or whether or not a <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> has previously been executed.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.RefreshLoadTimer">
            <summary>
            Gets or sets the timer to use for the <see cref="P:System.Windows.Controls.DomainDataSource.RefreshInterval"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.SortDescriptors">
            <summary>
            Gets the collection of <see cref="T:System.Windows.Controls.SortDescriptor"/> objects used to sort the data.
            </summary>
            <remarks>
            During a <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> operation, the <see cref="P:System.Windows.Controls.DomainDataSource.SortDescriptors"/> will be used
            to perform server-side sorting. The specified sorting will also be used as changes
            are made to the loaded entities, with the <see cref="P:System.Windows.Controls.DomainDataSource.Data"/> and <see cref="P:System.Windows.Controls.DomainDataSource.DataView"/>
            results reflecting the changes.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.CommandPropertyNotifier">
            <summary>
            Gets a <see cref="T:System.Windows.Controls.PropertyChangedNotifier"/> that raises property changed events for the
            command properties.
            </summary>
            <remarks>
            This raises events for the <see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/>, <see cref="P:System.Windows.Controls.DomainDataSource.CanRejectChanges"/>, and
            <see cref="P:System.Windows.Controls.DomainDataSource.CanSubmitChanges"/> properties used by the <see cref="P:System.Windows.Controls.DomainDataSource.LoadCommand"/>,
            <see cref="P:System.Windows.Controls.DomainDataSource.RejectChangesCommand"/>, and <see cref="P:System.Windows.Controls.DomainDataSource.SubmitChangesCommand"/> respectively.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.LoadCommand">
            <summary>
            Gets an <see cref="T:System.Windows.Input.ICommand"/> that invokes <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> on this <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            </summary>
            <remarks>
            The <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> method for this command returns the value of <see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/>.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.RejectChangesCommand">
            <summary>
            Gets an <see cref="T:System.Windows.Input.ICommand"/> that invokes <see cref="M:System.Windows.Controls.DomainDataSource.RejectChanges"/> on this <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.SubmitChangesCommand">
            <summary>
            Gets an <see cref="T:System.Windows.Input.ICommand"/> that invokes <see cref="M:System.Windows.Controls.DomainDataSource.SubmitChanges"/> on this <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.CanValidateEntityQuery">
            <summary>
            Gets a value that indicates whether the properties required to determine the
            entity query have been set.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSource.MethodAccessStatus">
            <summary>
            Enum used to indicate success or failure when trying to locate a method through reflection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.Success">
            <summary>
            Load information is gathered successfully.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.NameNotFound">
            <summary>
            <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/> not found.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.ArgumentSubset">
            <summary>
            <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/> match a subset of a valid <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.ArgumentMismatch">
            <summary>
            <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/> do not match any <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.EntitySetNotFound">
            <summary>
            The <see cref="T:System.ServiceModel.DomainServices.Client.EntitySet`1"/> property couldn't be found
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSource.ITimer">
            <summary>
            Timer interface used in the <see cref="T:System.Windows.Controls.DomainDataSource"/> to enable deterministic unit testing.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ITimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ITimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.ITimer.IsEnabled">
            <summary>
            Gets a value that indicates whether the timer is running.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.ITimer.Interval">
            <summary>
            Gets or sets the amount of time between timer ticks.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.ITimer.Tick">
            <summary>
            Occurs when the timer interval has elapsed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSource.Timer">
            <summary>
            Default implementation of the <see cref="T:System.Windows.Controls.DomainDataSource.ITimer"/> interface that delegates to
            a <see cref="T:System.Windows.Threading.DispatcherTimer"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.Timer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.Timer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.Timer.IsEnabled">
            <summary>
            Gets a value that indicates whether the timer is running.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.Timer.Interval">
            <summary>
            Gets or sets the amount of time between timer ticks.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.Timer.Tick">
            <summary>
            Occurs when the timer interval has elapsed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.PagedEntityCollection">
            <summary>
            Internal collection owned by the <see cref="T:System.Windows.Controls.DomainDataSource"/> and exposed to its <see cref="T:System.Windows.Controls.EntityCollectionView"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._moveToPageCallback">
            <summary>
            Represents the MoveToPage callback to use when invoking a <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/> operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._itemCount">
            <summary>
            Represents the minimum number of items known to be in the source collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._pageCount">
            <summary>
            The number of pages loaded.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._pageIndex">
            <summary>
            Represents the current page index.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._pageSize">
            <summary>
            Represents the page size.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._pageTracking">
            <summary>
            Map of what entities are on what page indexes.  This is used to
            maintain page affinity as the collection is modified and pages
            are navigated.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._raiseCollectionChangedEvents">
            <summary>
            Whether or not to raise collection changed events.  During a
            load operation, events are suppressed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._sourceEntitySet">
            <summary>
            Underlying entity set
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._entityType">
            <summary>
            Type of entity in the list
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._startPageIndex">
            <summary>
            Represents the index of the first page of items provided by the source collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._totalItemCount">
            <summary>
            Represents the total number of items in the source collection, or -1 if that value is unknown.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.#ctor(System.Func{System.Int32,System.Boolean})">
            <summary>
            Default constructor, accepting a callback for when <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/> is invoked.
            </summary>
            <param name="moveToPageCallback">
            The function to call when a <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/> operation is invoked.
            <para>
            The <c>int</c> of the <paramref name="moveToPageCallback"/> represents the pageIndex
            parameter from the <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/> method.
            </para>
            <para>
            The <c>bool</c> of the <paramref name="moveToPageCallback"/> represents the return
            value of the <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/> method, indicating whether or not
            the paging operation was successfully handled.
            </para>
            </param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)">
            <summary>
            Transmits the request for a page move.
            </summary>
            <param name="pageIndex">Requested page index</param>
            <returns>True if an asynchronous page move was initiated, False otherwise</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.ClearItems">
            <summary>
            Clear the items and raise a Reset CollectionChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.InsertItem(System.Int32,System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            Track what page an item is inserted to.  If inserted to the current page,
            then insert the item to the underlying collection, otherwise just record
            its existence on another page.
            </summary>
            <param name="index">The desired index for insertion.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.RemoveItem(System.Int32)">
            <summary>
            Remove an item from the underlying collection and raise the CollectionChanged event.
            </summary>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.SetItem(System.Int32,System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            Update an item in the list and raise a CollectionChanged event.
            </summary>
            <param name="index">The index of the item to be replaced.</param>
            <param name="item">The new item.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.AddLoadedEntity(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            Adds a loaded entity into the collection, tracking the start page index
            that was used to load the entity.
            </summary>
            <param name="loadedEntity">The entity to be added.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.BeginLoad">
            <summary>
            Indicates that a load is beginning and collection changed
            events should be suppressed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.Clear(System.Boolean)">
            <summary>
            Clear the collection, specifying whether or not it's being
            cleared for an initial load of entities.
            </summary>
            <param name="isInitialLoad">Indicates whether or not this clear
            is being done as part of an initial load of data.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.ClearPageTracking(System.Boolean)">
            <summary>
            Clear page tracking, optionally clearing the added items' page tracking.
            </summary>
            <param name="clearAddedItemTracking">Whether or not to also clear the page tracking
            for added items.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.CompleteLoad">
            <summary>
            Indicate that a load has completed, raising a collection changed notification for the Reset
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.NotifyPageChanged(System.Int32,System.Int32)">
            <summary>
            Updates the <see cref="P:System.Windows.Controls.PagedEntityCollection.StartPageIndex"/> and <see cref="P:System.Windows.Controls.PagedEntityCollection.PageIndex"/> properties.
            </summary>
            <param name="startPageIndex">Final start page index</param>
            <param name="pageIndex">Final page index</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.AddTrackedItems(System.Action{System.ServiceModel.DomainServices.Client.Entity})">
            <summary>
            Ensures that any entities that have been recorded as on the current page
            are added to the collection.  When there are tracked items that need to be
            added, the specified <paramref name="addAction"/> is used to perform the add.
            </summary>
            <param name="addAction">The action to call for each entity that needs to be added.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.CalculateIsPagingOperationPending">
            <summary>
            Calculates <see cref="P:System.Windows.Controls.PagedEntityCollection.IsPagingOperationPending"/> using <see cref="P:System.Windows.Controls.PagedEntityCollection.StartPageIndex"/>
            and <see cref="P:System.Windows.Controls.PagedEntityCollection.PageIndex"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.GetEntityPageTracking(System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            Get the page tracking for an entity
            </summary>
            <param name="entity">The entity being tracked</param>
            <returns>A nullable int that represents the page the entity is being
            tracked against, or null if the entity is not being tracked against a page.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.HookupSourceCollectionChangeNotifications">
            <summary>
            Attaches to the source's INotifyPropertyChanged and INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.InsertItemWithoutEvents(System.Int32,System.ServiceModel.DomainServices.Client.Entity)">
            <summary>
            Insert an item without raising <see cref="E:System.Windows.Controls.PagedEntityCollection.CollectionChanged"/> events.
            </summary>
            <param name="index">The index at which to add the item.</param>
            <param name="item">The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> to add.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notifies the consuming <see cref="T:System.Windows.Controls.EntityCollectionView"/> of the provided source collection change.
            </summary>
            <param name="e">Event argument to use for the notification</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.ServiceModel.DomainServices.Client.Entity,System.Int32)">
            <summary>
            Notifies the consuming PagedCollectionView of a source collection change.
            </summary>
            <param name="action">Type of collection change</param>
            <param name="entity">Potential <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> affected by the change</param>
            <param name="index">Index of that potential entity</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.Reset">
            <summary>
            Reset the collection, clearing all items and tracking all items in the
            source collection as added items, so that our list then contains the
            items that are being tracked that remain in the source collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.SourceEntitySet_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> events from the source
            <see cref="T:System.ServiceModel.DomainServices.Client.EntitySet"/>, synchronizing those changes to the local collection.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.TrackAddedItems(System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Client.Entity})">
            <summary>
            Tracks items that were added to the source entity set.  If an entity
            is being added after it was removed from our list, then we add it back.
            </summary>
            <param name="addedItems">The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> items that were added to the source entity set.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.TrackEntityPage(System.ServiceModel.DomainServices.Client.Entity,System.Int32)">
            <summary>
            Track the page index that an entity is loaded or added onto
            </summary>
            <param name="entity">The <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> for which the page needs to be tracked.</param>
            <param name="trackedPageIndex">The page index for the <paramref name="entity"/> being tracked.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.TrackRemovedItems(System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Client.Entity})">
            <summary>
            Track items that were removed from the source entity set.  If an entity
            is being removed and it's also in our list, then we remove it.
            </summary>
            <param name="removedItems">The list of <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> items being removed from the collection.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.UnhookSourceCollectionChangeNotifications">
            <summary>
            Detaches from the source's INotifyPropertyChanged and INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.PagedEntityCollection.PropertyChanged">
            <summary>
            Event exposed by the INotifyPropertyChanged interface
            </summary>
        </member>
        <member name="E:System.Windows.Controls.PagedEntityCollection.CollectionChanged">
            <summary>
            Occurs when this collection has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.BackingEntitySet">
            <summary>
            Gets or sets the source entity collection
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.EntityType">
            <summary>
            Gets or sets the type of <see cref="T:System.ServiceModel.DomainServices.Client.Entity"/> within the list
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.IsPagingOperationPending">
            <summary>
            Gets a value indicating that paging is enabled but the data hasn't yet been loaded.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.ItemCount">
            <summary>
            Gets a value indicating the minimum number of items known to be in the source collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.PageIndex">
            <summary>
            Gets or sets the current page index
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.PageSize">
            <summary>
            Gets or sets the number of items to display on a page.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.TotalItemCount">
            <summary>
            Gets the total number of items in the source collection, 
            or -1 if that value is unknown.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.PagedEntityCollection.PageChanged">
            <summary>
            Raised when a page change has completed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.LoadedItemCount">
            <summary>
            Gets the count of non-new entities that are being tracked, starting with the start page index
            and ending based on our load size / page size (how many pages are loaded at once).
            <para>
            When paging is disabled, it just returns Count.
            </para>
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.PageCount">
            <summary>
            Gets or sets the number of pages loaded.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.StartPageIndex">
            <summary>
            Gets the index of the first page of items provided by the source collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.IsLastPage">
            <summary>
            Gets the total number of pages based on the <see cref="P:System.Windows.Controls.PagedEntityCollection.TotalItemCount"/>
            and the <see cref="P:System.Windows.Controls.PagedEntityCollection.PageSize"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CancelLoadOperation">
            <summary>
              Looks up a localized string similar to load cancelling.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CancelSubmitOperation">
            <summary>
              Looks up a localized string similar to submit cancelling.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotEvaluateDescriptor">
            <summary>
              Looks up a localized string similar to The {0} with its PropertyPath equal to &apos;{1}&apos; cannot be evaluated..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotExecuteCommand">
            <summary>
              Looks up a localized string similar to Cannot execute command when CanExecute is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse">
            <summary>
              Looks up a localized string similar to A load operation cannot be performed when CanLoad is false.  Controls that invoke load operations should be disabled when CanLoad is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_DeferLoad">
            <summary>
              Looks up a localized string similar to DeferLoad cannot execute when CanLoad is false.  Calling DeferLoad initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that invoke load operations should be disabled when CanLoad is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_Filtering">
            <summary>
              Looks up a localized string similar to FilterDescriptors cannot be applied or modified when CanLoad is false.  Applying or modifying FilterDescriptors initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that apply filters should be disabled when CanLoad is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_Grouping">
            <summary>
              Looks up a localized string similar to Grouping cannot be applied or modified when CanLoad is false.  Applying or modifying grouping initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that apply grouping should be disabled when CanLoad is false.  Note that CanGroup is false whenever CanLoad is false, so controls that respect the CanGroup property are automatically disabled..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_Paging">
            <summary>
              Looks up a localized string similar to Page cannot be changed when CanLoad is false.  Changing the page initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that invoke paging should be disabled when CanLoad is false.  Note that CanChangePage is false whenever CanLoad is false, so controls that respect the CanChangePage property are automatically disabled..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_PropertySetter">
            <summary>
              Looks up a localized string similar to Cannot set property &apos;{0}&apos; when CanLoad is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_QueryParameters">
            <summary>
              Looks up a localized string similar to QueryParameters cannot be changed when CanLoad is false.  Changing the QueryParameters initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that invoke load operations should be disabled when CanLoad is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_Refresh">
            <summary>
              Looks up a localized string similar to Refresh cannot execute when CanLoad is false.  Refreshing the data initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that invoke load operations should be disabled when CanLoad is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_Sorting">
            <summary>
              Looks up a localized string similar to Sorting cannot be applied when CanLoad is false. Applying sorting initiates a load operation, and load operations are not permitted when CanLoad is false.  Controls that apply sorting should be disabled when CanLoad is false.  Note that CanSort is false whenever CanLoad is false, so controls that respect the CanSort property are automatically disabled..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.DescriptorPropertyPathIsNull">
            <summary>
              Looks up a localized string similar to The {0} at index {1} cannot be used because it has a null or empty PropertyPath property..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.DomainContextAlreadySet">
            <summary>
              Looks up a localized string similar to The DomainContext property can only be set once..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.EntityQueryMethodHasMismatchedArguments">
            <summary>
              Looks up a localized string similar to The {0} method does not have arguments that match the QueryParameters collection..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.FilterNotSupported">
            <summary>
              Looks up a localized string similar to FilterDescriptor for property &apos;{0}&apos; on type &apos;{1}&apos; cannot be used because filters for type &apos;{2}&apos; using FilterOperator &apos;{3}&apos; are not supported..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.HasErrorMustBeTrue">
            <summary>
              Looks up a localized string similar to MarkErrorAsHandled can only be called if HasError is true..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.IncompatibleOperands">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; incompatible with operand types &apos;{1}&apos; and &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.InvalidOperationDuringLoadOrSubmit">
            <summary>
              Looks up a localized string similar to This operation is not supported during a load or submit operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.InvalidTimeSpan">
            <summary>
              Looks up a localized string similar to The {0} time span must be {1}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.LoadErrorWasNotHandled">
            <summary>
              Looks up a localized string similar to An error occurred while loading data through the &apos;{0}&apos; query on DomainContext of type &apos;{1}&apos; and the error was not handled.  If this error is expected, then you must handle the LoadedData event on the DomainDataSource and call LoadedDataEventArgs.MarkErrorAsHandled() to avoid this exception..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.LoadOperation">
            <summary>
              Looks up a localized string similar to load.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.LoadWithinDeferLoad">
            <summary>
              Looks up a localized string similar to Load() cannot be called inside a DeferLoad() transaction..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.MemberNotFound">
            <summary>
              Looks up a localized string similar to The type {0} does not expose {1} called &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.Method">
            <summary>
              Looks up a localized string similar to a method.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.NoEntitySetMember">
            <summary>
              Looks up a localized string similar to The DomainContext value must have a public property of type EntitySet&lt;{0}&gt;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.OperationAlreadyInProgress">
            <summary>
              Looks up a localized string similar to A {0} operation is already in progress on this DomainDataSource..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.OperationNeedsPropertySet">
            <summary>
              Looks up a localized string similar to The {0} property needs to be set for {1} operations to succeed..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.Positive">
            <summary>
              Looks up a localized string similar to positive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.QueryParameterNameIsEmpty">
            <summary>
              Looks up a localized string similar to The Parameter at index {0} cannot be used because it has a null or empty ParameterName property..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.RejectChangesOperation">
            <summary>
              Looks up a localized string similar to change reverting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.RequiresPropertyGroupDescription">
            <summary>
              Looks up a localized string similar to The DomainDataSourceView only supports PropertyGroupDescriptions in its GroupDescriptions collection..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.StrictlyPositive">
            <summary>
              Looks up a localized string similar to strictly positive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.SubmitErrorWasNotHandled">
            <summary>
              Looks up a localized string similar to An error occurred while submitting changes on the DomainContext of type &apos;{0}&apos; and the error was not handled.  You must handle the SubmittedChanges event on the DomainDataSource and call SubmittedChangesEventArgs.MarkErrorAsHandled() to avoid this exception..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.SubmitOperation">
            <summary>
              Looks up a localized string similar to submit.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.UnderlyingPropertyIsReadOnly">
            <summary>
              Looks up a localized string similar to {0} cannot be set because the underlying property is read only..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.ValueMustBeGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1}..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.FilterDescriptor">
            <summary>
            Descriptor used by the <see cref="T:System.Windows.Controls.DomainDataSource"/> to filter data
            returned from domain service queries.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterDescriptor.DefaultIgnoredValue">
            <summary>
            The default value of the <see cref="P:System.Windows.Controls.FilterDescriptor.IgnoredValue"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterDescriptor.IgnoredValueProperty">
            <summary>
            The DependencyProperty for the <see cref="P:System.Windows.Controls.FilterDescriptor.IgnoredValue"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterDescriptor.IsCaseSensitiveProperty">
            <summary>
            The DependencyProperty for the <see cref="P:System.Windows.Controls.FilterDescriptor.IsCaseSensitive"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterDescriptor.OperatorProperty">
            <summary>
            The DependencyProperty for the <see cref="P:System.Windows.Controls.FilterDescriptor.Operator"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterDescriptor.PropertyPathProperty">
            <summary>
            The DependencyProperty for the <see cref="P:System.Windows.Controls.FilterDescriptor.PropertyPath"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterDescriptor.ValueProperty">
            <summary>
            The DependencyProperty for the <see cref="P:System.Windows.Controls.FilterDescriptor.Value"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.FilterDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.FilterDescriptor"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.FilterDescriptor.#ctor(System.String,System.Windows.Controls.FilterOperator,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.FilterDescriptor"/> class using
            the specified parameters.
            </summary>
            <param name="propertyPath">The filter property path</param>
            <param name="filterOperator">The filter operator</param>
            <param name="filterValue">The filter value</param>
        </member>
        <member name="M:System.Windows.Controls.FilterDescriptor.RaisePropertyChanged(System.String)">
            <summary>
            Raises a changed event when a dependency property changes.
            </summary>
            <param name="propertyName">The name of the property that changed</param>
        </member>
        <member name="P:System.Windows.Controls.FilterDescriptor.IgnoredValue">
            <summary>
            Gets or sets the value for the right operand for which this filter should be ignored.
            </summary>
            <remarks>
            If <see cref="P:System.Windows.Controls.FilterDescriptor.Value"/> matches <see cref="P:System.Windows.Controls.FilterDescriptor.IgnoredValue"/>, this filter will not be applied
            to the load query by the <see cref="T:System.Windows.Controls.DomainDataSource"/>. The <see cref="P:System.Windows.Controls.FilterDescriptor.IgnoredValue"/> is
            compared to <see cref="P:System.Windows.Controls.FilterDescriptor.Value"/> twice in the <see cref="T:System.Windows.Controls.DomainDataSource"/>. First, it is
            strictly compared using an <see cref="M:System.Object.Equals(System.Object,System.Object)"/> comparison. Second,
            both values are converted to type of the property specified by the <see cref="P:System.Windows.Controls.FilterDescriptor.PropertyPath"/>
            and compared again. If either conversion matches, this filter is ignored.
            <para>
            For example, the following Value/IgnoredValue pairs will all match for an integer property
            and result in the filter being ignored: 0/0, 0/"0", "0"/"0", and "0"/0.
            </para>
            <para>
            This property is set to <see cref="F:System.Windows.Controls.FilterDescriptor.DefaultIgnoredValue"/> by default. The default value
            will only match if <see cref="P:System.Windows.Controls.FilterDescriptor.Value"/> is also set to <see cref="F:System.Windows.Controls.FilterDescriptor.DefaultIgnoredValue"/>.
            </para>
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.FilterDescriptor.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether the filter is case sensitive for <c>string</c> values.
            </summary>
            <remarks>
            When this is <c>true</c>, the load query in the <see cref="T:System.Windows.Controls.DomainDataSource"/> will represent
            case sensitivity. However, it is not guaranteed that the data store used by the domain service
            will also respect case sensitivity.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.FilterDescriptor.Operator">
            <summary>
            Gets or sets the filter operator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.FilterDescriptor.PropertyPath">
            <summary>
            Gets or sets the name of the property path used as the left operand.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.FilterDescriptor.Value">
            <summary>
            Gets or sets the value of the right operand.
            </summary>
            <remarks>
            This will be used by the <see cref="T:System.Windows.Controls.DomainDataSource"/> to compose a filter for the load
            query. It will be applied following the pattern
            <c>[Entity].[PropertyPath] [Operator] [Value]</c>. For example, a query might look like
            <c>Customer.Name == "CurrentCustomerName"</c>.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.FilterDescriptor.Notifier">
            <summary>
            Gets a notifier instance that will raise property changes events for this descriptor 
            when the dependency properties change.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.FilterDescriptorCollection">
            <summary>
            Collection of <see cref="T:System.Windows.Controls.FilterDescriptor"/> dependency objects.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.FilterDescriptorCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.FilterDescriptorCollection"/> class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.FilterDescriptorLogicalOperator">
            <summary>
            Enumeration of logical operators for filter collections
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterDescriptorLogicalOperator.And">
            <summary>
            Filters are AND'ed
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterDescriptorLogicalOperator.Or">
            <summary>
            Filters are OR'ed
            </summary>
        </member>
        <member name="T:System.Windows.Controls.FilterOperator">
            <summary>
            Operator used in FilterDescriptor class
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterOperator.IsLessThan">
            <summary>
            Left operand must be smaller than the right one
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterOperator.IsLessThanOrEqualTo">
            <summary>
            Left operand must be smaller than or equal to the right one
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterOperator.IsEqualTo">
            <summary>
            Left operand must be equal to the right one
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterOperator.IsNotEqualTo">
            <summary>
            Left operand must be different from the right one
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterOperator.IsGreaterThanOrEqualTo">
            <summary>
            Left operand must be larger than the right one
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterOperator.IsGreaterThan">
            <summary>
            Left operand must be larger than or equal to the right one
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterOperator.StartsWith">
            <summary>
            Left operand must start with the right one
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterOperator.EndsWith">
            <summary>
            Left operand must end with the right one
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterOperator.Contains">
            <summary>
            Left operand must contain the right one
            </summary>
        </member>
        <member name="F:System.Windows.Controls.FilterOperator.IsContainedIn">
            <summary>
            Left operand must be contained in the right one
            </summary>
        </member>
        <member name="T:System.Windows.Controls.GroupDescriptor">
            <summary>
            Descriptor used by the <see cref="T:System.Windows.Controls.DomainDataSource"/> to group data
            returned from domain service queries.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.GroupDescriptor.PropertyPathProperty">
            <summary>
            The DependencyProperty for the <see cref="P:System.Windows.Controls.GroupDescriptor.PropertyPath"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GroupDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.GroupDescriptor"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GroupDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.GroupDescriptor"/> class.
            </summary>
            <param name="propertyPath">The group property path</param>
        </member>
        <member name="M:System.Windows.Controls.GroupDescriptor.RaisePropertyChanged(System.String)">
            <summary>
            Raises a changed event when a dependency property changes.
            </summary>
            <param name="propertyName">The name of the property that changed</param>
        </member>
        <member name="P:System.Windows.Controls.GroupDescriptor.PropertyPath">
            <summary>
            Gets or sets the name of the property path used to group data.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.GroupDescriptor.Notifier">
            <summary>
            Gets a notifier instance that will raise property changes events for this descriptor 
            when the dependency properties change.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.GroupDescriptorCollection">
            <summary>
            Collection of <see cref="T:System.Windows.Controls.GroupDescriptor"/> dependency objects.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.GroupDescriptorCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.GroupDescriptorCollection"/> class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Parameter">
            <summary>
            Descriptor used by the <see cref="T:System.Windows.Controls.DomainDataSource"/> to define parameters
            for domain service queries.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Parameter.ParameterNameProperty">
            <summary>
            The DependencyProperty for the <see cref="P:System.Windows.Controls.Parameter.ParameterName"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Parameter.ValueProperty">
            <summary>
            The DependencyProperty for the <see cref="P:System.Windows.Controls.Parameter.Value"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Parameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Parameter"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Parameter.RaisePropertyChanged(System.String)">
            <summary>
            Raises a changed event when a dependency property changes
            </summary>
            <param name="propertyName">The name of the property that changed</param>
        </member>
        <member name="P:System.Windows.Controls.Parameter.ParameterName">
            <summary>
            Gets or sets the name of the <see cref="T:System.Windows.Controls.Parameter"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Parameter.Value">
            <summary>
            Gets or sets the value of the <see cref="T:System.Windows.Controls.Parameter"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Parameter.Notifier">
            <summary>
            Gets a notifier instance that will raise property changes events for this descriptor 
            when the dependency properties change.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ParameterCollection">
            <summary>
            Collection of <see cref="T:System.Windows.Controls.Parameter"/> dependency objects.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ParameterCollection"/> class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SortDescriptor">
            <summary>
            Descriptor used by the <see cref="T:System.Windows.Controls.DomainDataSource"/> to sort data
            returned from domain service queries.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.SortDescriptor.DirectionProperty">
            <summary>
            The DependencyProperty for the <see cref="P:System.Windows.Controls.SortDescriptor.Direction"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.SortDescriptor.PropertyPathProperty">
            <summary>
            The DependencyProperty for the <see cref="P:System.Windows.Controls.SortDescriptor.PropertyPath"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SortDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.SortDescriptor"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SortDescriptor.#ctor(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.SortDescriptor"/> class.
            </summary>
            <param name="propertyPath">The sort property path</param>
            <param name="direction">The sort direction</param>
        </member>
        <member name="M:System.Windows.Controls.SortDescriptor.RaisePropertyChanged(System.String)">
            <summary>
            Raises a changed event when a dependency property changes.
            </summary>
            <param name="propertyName">The name of the property that changed</param>
        </member>
        <member name="P:System.Windows.Controls.SortDescriptor.Direction">
            <summary>
            Gets or sets the sort direction: Ascending or Descending.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SortDescriptor.PropertyPath">
            <summary>
            Gets or sets the name of the property path used to sort data.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SortDescriptor.Notifier">
            <summary>
            Gets a notifier instance that will raise property changes events for this descriptor 
            when the dependency properties change.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SortDescriptorCollection">
            <summary>
            Collection of <see cref="T:System.Windows.Controls.SortDescriptor"/> dependency objects.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SortDescriptorCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.SortDescriptorCollection"/> class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SubmittedChangesEventArgs">
            <summary>
            Event arguments for a completed submit operation
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SubmittedChangesEventArgs.#ctor(System.ServiceModel.DomainServices.Client.EntityChangeSet,System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Client.Entity},System.Exception,System.Boolean)">
            <summary>
            Public constructor
            </summary>
            <param name="changeSet">The changeset that was submitted.</param>
            <param name="entitiesInError">The list of entities that were in error.</param>
            <param name="error"><see cref="T:System.Exception"/> for the submit operation if it failed.</param>
            <param name="canceled"><c>true</c> if the submit operation was canceled, <c>false</c> otherwise.</param>
        </member>
        <member name="M:System.Windows.Controls.SubmittedChangesEventArgs.MarkErrorAsHandled">
            <summary>
            For an operation in error, this method marks the error as handled. If this method is
            not called for a failed operation, an exception will be thrown.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if <see cref="P:System.Windows.Controls.SubmittedChangesEventArgs.HasError"/> <c>false</c>.</exception>
        </member>
        <member name="P:System.Windows.Controls.SubmittedChangesEventArgs.ChangeSet">
            <summary>
            Gets the <see cref="T:System.ServiceModel.DomainServices.Client.EntityChangeSet"/> that was submitted
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SubmittedChangesEventArgs.EntitiesInError">
            <summary>
            Gets the entities that caused the submit operation to fail.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SubmittedChangesEventArgs.HasError">
            <summary>
            Gets a value indicating whether the operation has failed. If
            true, inspect the Error property for details.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SubmittedChangesEventArgs.IsErrorHandled">
            <summary>
            Gets or sets a value indicating whether the operation error has been marked as
            handled by calling <see cref="M:System.Windows.Controls.SubmittedChangesEventArgs.MarkErrorAsHandled"/>.
            </summary>
        </member>
    </members>
</doc>
