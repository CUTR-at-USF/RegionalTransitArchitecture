<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ESRI.ArcGIS.Client</name>
    </assembly>
    <members>
        <member name="M:ESRI.ArcGIS.Client.Utils.Transform.GetTransformToRoot(System.Windows.FrameworkElement)">
            <summary>
            Gets the root visual transform for both WPF, Silverlight and WinForms
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.TimeUnit">
            <summary>
            Unit of measurement in time
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.TimeUnit.Days">
            <summary>
            Time measured in days.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.TimeUnit.Hours">
            <summary>
            Time measured in hours.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.TimeUnit.Milliseconds">
            <summary>
            Time measured in milliseconds.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.TimeUnit.Minutes">
            <summary>
            Time measured in minutes.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.TimeUnit.Months">
            <summary>
            Time measured in months.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.TimeUnit.Seconds">
            <summary>
            Time measured in seconds.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.TimeUnit.Weeks">
            <summary>
            Time measured in weeks.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.TimeUnit.Years">
            <summary>
            Time measured in years.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter">
            <summary>
            General purpose class for writing out JSON.  Can optionally format the output
            in a "pretty" format with carriage returns, white space, and indenting for ease of reading.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.#ctor(System.IO.TextWriter,System.Int32)">
            <summary>
            Initializes a new instance of the JsonWriter class that renders 
            "pretty" JSON.
            </summary>
            <param name="writer">The TextWriter instance to use to write out JSON.</param>
            <param name="indent">The number of spaces to use for indenting.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the JsonWriter class that writes to a 
            single compact line.
            </summary>
            <param name="writer">The TextWriter instance to use to write out 
            JSON.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.StartObject">
            <summary>
            Writes a left brace to start a new object.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.StartObjectIndented">
            <summary>
            Writes a left brace to start a new object.
            If Pretty=true the brace will written on a new line.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.StartAppendObjectIndented">
            <summary>
            Writes a comma followed by a left brace to start a new object.
            If Pretty=true the brace will written on a new line.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.EndObject">
            <summary>
            Writes a right brace to end the current object.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.EndObjectIndented">
            <summary>
            Writes the closing right brace to the current object.
            If Pretty=true the brace will written on a new line.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.StartArray">
            <summary>
            Writes a left bracket to start a new array.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.StartArrayIndented">
            <summary>
            Writes a left bracket to start a new array.
            If Pretty=true the bracket will written on a new line.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.EndArray">
            <summary>
            Writes a right bracket to end the current array.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.EndArrayIndented">
            <summary>
            Writes the closing right bracket to the current array.
            If Pretty=true the bracket will written on a new line.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.StartProperty(System.String)">
            <summary>
            Writes the property name followed by a colon.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.StartPropertyIndented(System.String)">
            <summary>
            Writes the property name followed by a colon.
            If Pretty=true the property will be started on a new line.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.StartAppendProperty(System.String)">
            <summary>
            Writes a comma followed by the property name followed by a colon.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.StartAppendPropertyIndented(System.String)">
            <summary>
            Writes a comma followed by the property name followed by a colon.
            If Pretty=true the property will be started on a new line.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.Writer">
            <summary>
            The TextWriter instance used for writing out JSON.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Utils.JSON.JsonWriter.Pretty">
            <summary>
            If true, line returns and indenting are added when writing out JSON for readability.
            If false, the JSON is written out in a single contiguous line.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.DirectionsFeatureSet">
            <summary>
            A FeatureSet that has properties specific to routing. The features property
            contains the turn-by-turn directions text and geometry of the route.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.FeatureSet">
            <summary>
            A collection of Features.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.FeatureSet"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.#ctor(System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.FeatureSet"/> class.
            </summary>
            <param name="featureIDs">The feature IDs.</param>
            <param name="objectIdFieldName">Name of the object id field.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.#ctor(ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.FeatureSet"/> class.
            The geometry passed in is used to create a new Graphic in the Features collection.
            </summary>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.#ctor(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.FeatureSet"/> class.
            </summary>
            <param name="graphics">A set of graphics to populate the <see cref="T:ESRI.ArcGIS.Client.Tasks.FeatureSet"/> with.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.#ctor(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Geometry.Geometry})">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.FeatureSet"/> class.
            </summary>
            <param name="geometries">A set of geometries to populate the <see cref="T:ESRI.ArcGIS.Client.Tasks.FeatureSet"/> with.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.FromJsonAsync(System.String,System.Action{ESRI.ArcGIS.Client.Tasks.FeatureSet,System.Exception})">
            <summary>
            Asynchronous version of the FromJson method. This method uses a 
            BackgroundWorker object to deserialize a FeatureSet on a seperate 
            thread so that the current running thead is not blocked.
            </summary>
            <param name="json">The json of the FeatureSet to deserialize</param>
            <param name="callback">A callback method to return the the calling thread.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.FromJson(System.String)">
            <summary>
            Creates a FeatureSet from a string in JSON format.
            </summary>
            <param name="json">The FeatureSet JSON.</param>
            <returns>The deserialized FeatureSet.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.ToJson">
            <summary>
            Serializes the FeatureSet to JSON
            </summary>
            <returns>A JSON string representation of the FeatureSet</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.ToJson(System.Boolean,System.Boolean)">
            <summary>
            Serializes the FeatureSet to JSON.
            </summary>
            <param name="includeGeometryInJson">if set to <c>true</c> then the resultant JSON will include
            the feature geometries.</param>
            <param name="normalize">if set to <c>true</c> will normalize to central meridian.</param>
            <returns>
            A JSON string representation of the FeatureSet
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a FeatureSet from a Dictionary.
            </summary>
            <param name="dictionary">The FeatureSet Dictionary.</param>
            <returns>The deserialized FeatureSet.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.deserializeGraphics(System.Collections.Generic.IDictionary{System.String,System.Object},ESRI.ArcGIS.Client.Geometry.SpatialReference,ESRI.ArcGIS.Client.Tasks.GeometryType,System.Collections.Generic.IList{ESRI.ArcGIS.Client.Field})">
            <summary>
            Creates a list of features for a FeatureSet.
            </summary>
            <param name="dictionary">The FeatureSet Dictionary</param>
            <param name="sr">The SpatialReference of the FeatureSet</param>
            <param name="geoType">the GeometryType of the FeatureSet</param>
            <param name="fields">Fields used to ensure attributes for the Graphic.Attribute property are correct</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.deserializeFeatureSet(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{ESRI.ArcGIS.Client.Field})">
            <summary>
            Creates a FeatureSet from a dictionary.
            </summary>
            <param name="dictionary">The FeatureSet dictionary.</param>
            <param name="fields">The fields to set the FeatureSet.ObjectIdFieldName property</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.deserializeFields(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates list of fields for a FeatureSet.
            </summary>
            <param name="dictionary">The FeatureSet dictionary.</param>
            <returns>List of fields and types that should appear in each feature.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.deserializeTheadSafeGraphics(System.Collections.Generic.IDictionary{System.String,System.Object},ESRI.ArcGIS.Client.Geometry.SpatialReference,ESRI.ArcGIS.Client.Tasks.GeometryType,System.Collections.Generic.IList{ESRI.ArcGIS.Client.Field})">
            <summary>
            Creates a list of GraphicThreadSafe objects that can be used to 
            represent a list of Graphic objects in a thread that does not allow 
            dependency objects to be created.
            </summary>
            <param name="dictionary">The FeatureSet dictionary.</param>
            <param name="sr">The SpatialReference of the FeatureSet</param>
            <param name="geoType">The GeometryType of the FeatureSet</param>
            <param name="fields">The Fields of the features.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FeatureSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FeatureSet.FieldAliases">
            <summary>
            Gets or sets the field aliases.
            </summary>
            <value>The field aliases.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FeatureSet.GeometryType">
            <summary>
            Gets or sets the type of the geometry.
            </summary>
            <value>The type of the geometry.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FeatureSet.SpatialReference">
            <summary>
            Gets or sets the spatial reference.
            </summary>
            <value>The spatial reference.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FeatureSet.Features">
            <summary>
            Gets or sets the features.
            </summary>
            <value>The features.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FeatureSet.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FeatureSet.DisplayFieldName">
            <summary>
            Gets or sets the display field name.
            </summary>
            <value>The display field name.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FeatureSet.ObjectIdFieldName">
            <summary>
            Gets or sets the object ID field name.
            </summary>
            <value>The object ID field name.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FeatureSet.GlobalIdFieldName">
            <summary>
            Gets or sets the global ID field name.
            </summary>
            <value>The global ID field name.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FeatureSet.ObjectIDs">
            <summary>
            Gets the object IDs.
            </summary>
            <value>The object IDs.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DirectionsFeatureSet.Extent">
            <summary>
            The extent of the route.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DirectionsFeatureSet.MergedGeometry">
            <summary>
            A single polyline representing the route. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DirectionsFeatureSet.RouteID">
            <summary>
            The ID of the route returned from the server. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DirectionsFeatureSet.RouteName">
            <summary>
            Name specified in <see cref="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.Stops"/>. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DirectionsFeatureSet.TotalDriveTime">
            <summary>
            Actual drive time calculated for the route.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DirectionsFeatureSet.TotalLength">
            <summary>
            The length of the route as specified in <see cref="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.DirectionsLengthUnits"/>.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DirectionsFeatureSet.TotalTime">
            <summary>
            The total time calculated for the route as
            specified in <see cref="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.DirectionsTimeAttribute"/>.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.RelationshipEventArgs">
            <summary>
            EventArgs for the ExecuteRelationshipQueryCompleted event.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.TaskEventArgs">
            <summary>
            Base EventArgs for the task events.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TaskEventArgs.UserState">
            <summary>
             Gets the unique identifier for the asynchronous task.
            </summary>
            <value> An object reference that uniquely identifies the asynchronous task; otherwise,
            null if no value has been set.</value>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RelationshipEventArgs.#ctor(ESRI.ArcGIS.Client.Tasks.RelationshipResult,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="RelationshipResult">The RelationshipResult returned by the QueryTask.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RelationshipEventArgs.Result">
            <summary>
            The RelationshipResult returned by the QueryTask.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPLong">
            <summary>
            An input to a geoprocessing task.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPParameter">
            <summary>
            Base class for parameters passed to geoprocessing tasks.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPParameter"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPParameter.ToJson">
            <summary>
            Serializes the parameter to JSON.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPParameter.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPLong.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPLong"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPLong.ToJson">
            <summary>
            Serializes the parameter to JSON.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPLong.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPDate">
            <summary>
            A date input to a geoprocessing task.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPDate.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPDate"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPDate.ToJson">
            <summary>
            Serializes the parameter to JSON.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPDate.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPDate.Format">
            <summary>
            The format of the date.
            </summary>
            <remarks>
            The default date format string is "M/d/yyyy h:mm:ss tt".
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GeometryService">
            <summary>
            
            </summary>
            <summary>
            The Auto Complete operation is performed on a geometry service 
            resource. The AutoComplete operation simplifies the process of 
            constructing new polygons that are adjacent to other polygons. 
            It constructs polygons that fill in the gaps between existing 
            polygons and a set of polylines.
            </summary>
            <summary>
            Represents a geometry service resource exposed by the ArcGIS Server REST 
            API. It is used to perform various operations on geometries such as 
            project, simplify, buffer, and relationships.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.TaskBase">
            <summary>
            Base class for tasks.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.TaskBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.TaskBase"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.TaskBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.TaskBase"/> class.
            </summary>
            <param name="url">The URL of the REST MapService layer to query.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.TaskBase.CancelAsync">
            <summary>
            Cancels a pending asynchronous operation.
            </summary>
            <remarks>
            <para>If an operation is pending, this method calls Abort on the underlying WebRequest.</para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.TaskBase.AppendBaseQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Appends a token parameter if Token is not null or empty and an _ts parameter 
            if DisableClientCaching is true.
            </summary>
            <param name="parameters">Parameter collection to add to</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.TaskBase.CheckForServiceError(ESRI.ArcGIS.Client.WebRequest.RequestEventArgs)">
            <summary>
            Checks for failure.
            </summary>
            <param name="e">The <see cref="T:System.Net.DownloadStringCompletedEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.TaskBase.OnPropertyChanged(System.String)">
            <summary>
            Called when a task result related property value has changed.
            These properties are named, or end with, "LastResult". 
            E.g. <see cref="T:ESRI.ArcGIS.Client.Tasks.QueryTask"/> exposes the
            "LastResult" property, and <see cref="T:ESRI.ArcGIS.Client.Tasks.GeometryService"/>
            has a "BufferLastResult" property.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TaskBase.Url">
            <summary>
            Gets or sets the URL of the task.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TaskBase.ProxyURL">
            <summary>
            Gets or sets the URL to proxy the request through.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TaskBase.AutoNormalize">
            <summary>
            If <c>true</c> automatically normalizes geometry crossing the anti-meridian.
            </summary>
            <remarks>
            Default is <c>true</c>. Normalization will only occur on geometries using
            one of the supported spatial references supported.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TaskBase.DisableClientCaching">
            <summary>
            If true, adds a timestamp parameter ("_ts") to the request to prevent it from 
            being loaded from the browser's cache.
            </summary>
            <value>
            	<c>true</c> to disable client caching otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TaskBase.Token">
            <summary>
            Token for accessing a secure ArcGIS task.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TaskBase.IsBusy">
             <summary>
            Gets a value that indicates whether a Web request is in progress.
             </summary>
             <value><c>true</c> to indicate a Web request is in progress; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed">
            <summary>
            Occurs when the query completes.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.TaskBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.IProjectionService">
            <summary>
            Declares a contract for projecting graphics between spatial references.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.IProjectionService.ProjectAsync(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.SpatialReference)">
            <summary>
            Projects a set of geometries into a new spatial reference. 
            Raises the <see cref="E:ESRI.ArcGIS.Client.IProjectionService.ProjectCompleted"/> event when completed.
            </summary>
            <param name="outSpatialReference">The SpatialReference to project to.</param>
            <param name="graphics">The graphics containing the geometry to project. The graphics must have their
            spatial reference set on the geometries it contains.</param>
        </member>
        <member name="E:ESRI.ArcGIS.Client.IProjectionService.ProjectCompleted">
            <summary>
            Occurs when the Project operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.IProjectionService.IsBusy">
             <summary>
            Gets a value that indicates whether a projection operation is in progress.
             </summary>
             <value><c>true</c> to indicate a projection operation is in progress; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OffsetAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Tasks.OffsetParameters)">
            <summary>
            Constructs offset copies of the input polylines or polygons.
            </summary>
            <param name="graphics">A collection of polylines or polygons. Input 
            types can be mixed. All geometries are assumed to be in the 
            coordinate system defined by the input SpatialReference.</param>
            <param name="parameters">Parameters contains additional properties 
            that defines how the offset task will be preformed.</param>
            <returns>Returns a graphic collection of the offset geometries that
            were processed. </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OffsetAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Tasks.OffsetParameters,System.Object)">
            <summary>
            Constructs offset copies of the input polylines or polygons.
            </summary>
            <param name="graphics">A collection of polylines or polygons. Input 
            types can be mixed. All geometries are assumed to be in the 
            coordinate system defined by the input SpatialReference.</param>
            <param name="parameters">Parameters contains additional properties 
            that defines how the offset task will be preformed.</param>		
            <param name="userToken">The user token.</param>
            <returns>Returns a graphic collection of the offset geometries that
            were processed. </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnOffsetCompleted(ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.OffsetCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.TrimExtendAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Geometry.Polyline},ESRI.ArcGIS.Client.Geometry.Polyline,ESRI.ArcGIS.Client.Tasks.CurveExtension)">
            <summary>
            Trims or extends each input polyline to meet another polyline.
            </summary>
            <param name="polylines">The collection of polylines to be trimmed or 
            extended</param>
            <param name="trimExtendTo">The defining trim/extend line.</param>
            <param name="extendHow">Flags controlling the extend operation.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.TrimExtendAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Geometry.Polyline},ESRI.ArcGIS.Client.Geometry.Polyline,ESRI.ArcGIS.Client.Tasks.CurveExtension,System.Object)">
            <summary>
            Trims or extends each input polyline to meet another polyline.
            </summary>
            <param name="polylines">The collection of polylines to be trimmed or
            extended</param>
            <param name="trimExtendTo">The defining trim/extend line.</param>
            <param name="extendHow">Flags controlling the extend operation.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnTrimExtendCompleted(ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.TrimExtendCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.GeneralizeAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Tasks.GeneralizeParameters)">
            <summary>
            Applies Douglas-Poiker generalization to the input polylines and
            polygons.
            </summary>
            <param name="graphics">The collection of polylines and polygons to
            be generalized.</param>
            <param name="parameters">Parameters contains additional properties 
            that defines how the generalize task will be preformed.</param>				
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.GeneralizeAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Tasks.GeneralizeParameters,System.Object)">
            <summary>
            Applies Douglas-Poiker generalization to the input polylines and
            polygons.
            </summary>
            <param name="graphics">The collection of polylines and polygons to
            be generalized.</param>
            <param name="parameters">Parameters contains additional properties 
            that defines how the generalize task will be preformed.</param>		
            <param name="userToken">The user token.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnGeneralizeCompleted(ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.GeneralizeCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.DensifyAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Tasks.DensifyParameters)">
            <summary>
            This operation densifies geometries by plotting points
            between existing vertices.
            </summary>
            <param name="graphics">The collection of Geometry to be densified.
            All geometries are assumed to be in the coordinate system
            SpatialReference.</param>
            <param name="parameters">Parameters contains additional properties 
            that defines how the densify task will be preformed.</param>		
            <example>A polyline with two points that span 100 meters between
            them can be densified to have a point ever 10 meters by indicating a
            maxSegmentLength of 10 and lengthUnit of meters. The Same polyline
            would be returned but with 10 points instead of 2 points.</example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.DensifyAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Tasks.DensifyParameters,System.Object)">
            <summary>
            This operation densifies geometries by plotting points
            between existing vertices.
            </summary>
            <param name="graphics">The collection of Geometry to be densified.
            All geometries are assumed to be in the coordinate system
            SpatialReference.</param>
            <param name="parameters">Parameters contains additional properties 
            that defines how the densify task will be preformed.</param>		
            <param name="userToken">The user token.</param>
            <example>A polyline with two points that span 100 meters between
            them can be densified to have a point ever 10 meters by indicating a
            maxSegmentLength of 10 and lengthUnit of meters. The Same polyline
            would be returned but with 10 points instead of 2 points.</example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnDensifyCompleted(ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.DensifyCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.UnionAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            This operation constructs the set-theoretic union of the geometries 
            in the input collection. All inputs must be of the same type.
            </summary>
            <param name="geometries">A collection of points, multipoints, 
            polylines or polygons. The input types cannot be mixed.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.UnionAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Object)">
            <summary>
            This operation constructs the set-theoretic union of the geometries 
            in the input collection. All inputs must be of the same type.
            </summary>
            <param name="geometries">A collection of points, multipoints,
            polylines or polygons. The input types cannot be mixed.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnUnionCompleted(ESRI.ArcGIS.Client.Tasks.GeometryEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.UnionCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GeometryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.DistanceAsync(ESRI.ArcGIS.Client.Geometry.Geometry,ESRI.ArcGIS.Client.Geometry.Geometry,ESRI.ArcGIS.Client.Tasks.DistanceParameters)">
            <summary>
            Calculates the distance between two geometries.
            </summary>
            <param name="geometry1">The geometry from where the distance is to 
            be measured.</param>
            <param name="geometry2">The geometry to which the distance is to be 
            measured. The structure of geometry is same as the structure of the 
            JSON geometry objects returned by the ArcGIS REST API. The use of 
            simple syntax is not supported.</param>
            <param name="parameters">Parameters contains additional properties 
            that defines how the distance task will be preformed.</param>		
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.DistanceAsync(ESRI.ArcGIS.Client.Geometry.Geometry,ESRI.ArcGIS.Client.Geometry.Geometry,ESRI.ArcGIS.Client.Tasks.DistanceParameters,System.Object)">
            <summary>
            Calculates the distance between two geometries.
            </summary>
            <param name="geometry1">The geometry from where the distance is to 
            be measured.</param>
            <param name="geometry2">The geometry to which the distance is to be 
            measured. The structure of geometry is same as the structure of the 
            JSON geometry objects returned by the ArcGIS REST API. The use of 
            simple syntax is not supported.</param>
            <param name="parameters">Parameters contains additional properties 
            that defines how the distance task will be preformed.</param>
            <param name="userToken">A user-defined object that is passed to the
            method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnDistanceCompleted(ESRI.ArcGIS.Client.Tasks.DistanceEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.DistanceCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.DistanceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.IntersectAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Constructs the set-theoretic intersection between an collection of 
            geometries and another geometry. Only the geometries of the 
            collection that intersect will be returned.
            </summary>
            <param name="geometries">A collection of points, multipoints, 
            polylines or polygons. The input types can be mixed.</param>
            <param name="geometry">A single geometry of any type.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.IntersectAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.Geometry,System.Object)">
            <summary>
            Constructs the set-theoretic intersection between an collection of 
            geometries and another geometry. Only the geometries of the 
            collection that intersect will be returned.
            </summary>
            <param name="geometries">A collection of points, multipoints, 
            polylines or polygons. The input types can be mixed.</param>
            <param name="geometry">A single geometry of any type.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnIntersectCompleted(ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.IntersectCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.AutoCompleteAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Executes the Auto Complete geometry service.
            </summary>
            <param name="polygons">The array of polygons that will 
            provide some boundaries for new polygons. The spatial reference 
            of the polygons is specified by sr.</param>
            <param name="polylines">An array of polylines that will provide 
            the remaining boundaries for new polygons. The spatial reference 
            of the polylines is specified by sr.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.AutoCompleteAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Object)">
            <summary>
            Executes the Auto Complete geometry service.
            </summary>
            <param name="polygons">The collection of polygons that will
            provide some boundaries for new polygons. The spatial reference
            of the polygons is specified by sr.</param>
            <param name="polylines">An collection of polylines that will provide
            the remaining boundaries for new polygons. The spatial reference
            of the polylines is specified by sr.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnAutoCompleteCompleted(ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.AutoCompleteCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.ConvexHullAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            The convexHull operation is performed on a geometry service resource. 
            It returns the convex hull of the input geometry. The input geometry 
            can be a point, multipoint, polyline or polygon. The hull is typically 
            a polygon but can also be a polyline or point in degenerate cases. 
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.ConvexHullAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Object)">
            <summary>
            The convexHull operation is performed on a geometry service resource. 
            It returns the convex hull of the input geometry. The input geometry 
            can be a point, multipoint, polyline or polygon. The hull is typically 
            a polygon but can also be a polyline or point in degenerate cases. 
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnConvexHullCompleted(ESRI.ArcGIS.Client.Tasks.GeometryEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.ConvexHullCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GeometryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GeometryService"/> 
            class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GeometryService"/> 
            class.
            </summary>
            <param name="Url">The URL of the REST API Geometry service.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.LengthsAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Calculates the lengths of each specified polyline. 
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.LengthsCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="graphics">The graphics used to calculate lengths.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.LengthsAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Object)">
            <summary>
            Calculates the lengths of each specified polyline. 
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.LengthsCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="graphics">The graphics used to calculate lengths.</param>
            <param name="userToken"> A user-defined object that is passed to 
            the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.LengthsAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Nullable{ESRI.ArcGIS.Client.Tasks.LinearUnit},System.Boolean,System.Object)">
            <summary>
            Calculates the lengths of each specified polyline. 
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.LengthsCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="graphics">The graphics used to calculate lengths.</param>
            <param name="lengthUnit">The length unit in which perimeters of 
            polygons will be calculated. If unit is not specified, the units are 
            derived from the Spatial Reference of the geometry.</param>
            <param name="geodesic">If polylines are in geographic coordinate 
            system, then geodesic needs to be set to true in order to calculate 
            the ellipsoidal shortest path distance between each pair of the 
            vertices in the polylines. The output if lengthUnit is not specified 
            is returned in meters.</param>
            <param name="userToken">A user-defined object that is passed to the 
            method invoked.</param> 
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnLengthsCompleted(ESRI.ArcGIS.Client.Tasks.LengthsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.LengthsCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.LengthsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.AreasAndLengthsAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Calculates the areas and lengths of each specified polygon. 
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.AreasAndLengthsCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="graphics">The graphics used to calculate areas and lengths.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.AreasAndLengthsAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Object)">
            <summary>
            Calculates the areas and lengths of each specified polygon. 
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.AreasAndLengthsCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="graphics">The graphics used to calculate areas and lengths.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.AreasAndLengthsAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Nullable{ESRI.ArcGIS.Client.Tasks.LinearUnit},System.Nullable{ESRI.ArcGIS.Client.Tasks.LinearUnit},System.Object)">
            <summary>
            Calculates the areas and lengths of each specified polygon. 
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.AreasAndLengthsCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="graphics">The graphics used to calculate areas and lengths.</param>
            <param name="lengthUnit">The length unit in which perimeters of polygons will be 
            calculated. If unit is not specified, the units are 
            derived from the spatial reference of the first geometry. </param>
            <param name="areaUnit">The area unit in which areas of polygons will be calculated. 
            If unit is not specified, the units are derived 
            from the spatial reference of the first geometry.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnAreasAndLengthsCompleted(ESRI.ArcGIS.Client.Tasks.AreasAndLengthsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.AreasAndLengthsCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.AreasAndLengthsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.ProjectAsync(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.SpatialReference)">
            <summary>
            Projects a set of geometries into a new spatial reference. 
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.ProjectCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="outSpatialReference">The SpatialReference to project to.</param>
            <param name="graphics">The graphics containing the geometry to project.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.ProjectAsync(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.SpatialReference,System.Object)">
            <summary>
            Projects a set of geometries into a new spatial reference. 
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.ProjectCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="outSpatialReference">The SpatialReference to project to.</param>
            <param name="graphics">The graphics containing the geometry to project.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnProjectCompleted(ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.ProjectCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.SimplifyAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Alters the given geometries to make their definitions topologically legal with respect to their geometry type. 
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.SimplifyCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="graphics">The graphics containing the geometry to simplify.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.SimplifyAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Object)">
            <summary>
            Alters the given geometries to make their definitions topologically legal with respect to their geometry type.
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.SimplifyCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="graphics">The graphics containing the geometry to simplify.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnSimplifyCompleted(ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.SimplifyCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.BufferAsync(ESRI.ArcGIS.Client.Tasks.BufferParameters)">
            <summary>
            Buffers a set of geometries.
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.BufferCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="bufferParameters">The buffer parameters.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.BufferAsync(ESRI.ArcGIS.Client.Tasks.BufferParameters,System.Object)">
            <summary>
            Buffers a set of geometries.
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.BufferCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="bufferParameters">The buffer parameters.</param>
            <param name="userToken">A user-defined object that is passed to the 
            method invoked.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnBufferCompleted(ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.BufferCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.LabelPointsAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Generates a set of points suitable for displaying labels for the given set of Graphics.
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.LabelPointsCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="graphics">The graphics used to calculate label points.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.LabelPointsAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Object)">
            <summary>
            Generates a set of points suitable for displaying labels for the given set of Graphics.
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.LabelPointsCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="graphics">The graphics used to calculate label points.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnLabelPointsCompleted(ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.LabelPointsCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.RelationAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Tasks.GeometryRelation,System.String)">
            <summary>
            Computes the set of pairs of geometries from graphics1 and graphics2 that belong to the 
            specified relation. Both arrays are assumed to be in the same spatial reference. The 
            relations are evaluated in 2D. Z coordinates are not used. Geometry types cannot be 
            mixed within an array.
            Note that if the spatialRelationship is specified as esriGeometryRelationRelation, the relationParam 
            parameter describes the spatial relationship and must be specified. 
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.RelationCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="graphics1">The first set of graphics in the comparison.</param>
            <param name="graphics2">The second set of graphics in the comparison.</param>
            <param name="spatialRelationship">The spatial relationship to be tested between the two 
            sets of geometries. If GeometryRelation.esriGeometryRelationRelation is specified, then
            the comparisonString parameter must be specified.</param>
            <param name="comparisonString">The 'Shape Comparison Language' string to be evaluated. 
            Strings such as RELATE(G1, G2, "FFFTTT***") are accepted, in addition to other kinds of 
            strings. This string describes the spatial relationship to be tested when the spatialRelationship 
            parameter is specified as esriGeometryRelationRelation. 
            </param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.RelationAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Tasks.GeometryRelation,System.String,System.Object)">
            <summary>
            Computes the set of pairs of geometries from graphics1 and graphics2 that belong to the 
            specified relation. Both arrays are assumed to be in the same spatial reference. The 
            relations are evaluated in 2D. Z coordinates are not used. Geometry types cannot be 
            mixed within an array.
            Note that if the spatialRelationship is specified as esriGeometryRelationRelation, the relationParam 
            parameter describes the spatial relationship and must be specified. 
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.RelationCompleted"/> event on success, or
            the <see cref="E:ESRI.ArcGIS.Client.Tasks.TaskBase.Failed"/> event on failure.
            </summary>
            <param name="graphics1">The first set of graphics in the comparison.</param>
            <param name="graphics2">The second set of graphics in the comparison.</param>
            <param name="spatialRelationship">The spatial relationship to be tested between the two 
            sets of geometries. If GeometryRelation.esriGeometryRelationRelation is specified, then
            the comparisonString parameter must be specified.</param>
            <param name="comparisonString">The 'Shape Comparison Language' string to be evaluated. 
            Strings such as RELATE(G1, G2, "FFFTTT***") are accepted, in addition to other kinds of 
            strings. This string describes the spatial relationship to be tested when the spatialRelationship 
            parameter is specified as esriGeometryRelationRelation. 
            </param>
            <param name="userToken">A user-defined object that is passed to the method invoked.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnRelationCompleted(ESRI.ArcGIS.Client.Tasks.RelationEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.RelationCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.RelationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.ReshapeAsync(ESRI.ArcGIS.Client.Geometry.Geometry,ESRI.ArcGIS.Client.Geometry.Polyline)">
            <summary>
            Reshapes a polyline or a part of a polygon using a reshaping line.
            </summary>
            <param name="target">Polygon or Polyline to be reshaped.</param>
            <param name="reshaper">The reshaper.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.ReshapeAsync(ESRI.ArcGIS.Client.Geometry.Geometry,ESRI.ArcGIS.Client.Geometry.Polyline,System.Object)">
            <summary>
            Reshapes a polyline or a part of a polygon using a reshaping line.
            </summary>
            <param name="target">Polygon or Polyline to be reshaped.</param>
            <param name="reshaper">The reshaper.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnReshapeCompleted(ESRI.ArcGIS.Client.Tasks.GeometryEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.ReshapeCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GeometryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.DifferenceAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Constructs the set-theoretic difference between an array of 
            geometries and another geometry.
            </summary>
            <param name="geometries">A collection of points, multipoints, 
            polylines or polygons. The input types can be mixed.</param>
            <param name="geometry">A single geometry of any type, of dimension 
            equal to or greater than the elements of the goemetries collection.
            </param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.DifferenceAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.Geometry,System.Object)">
            <summary>
            Constructs the set-theoretic difference between an array of 
            geometries and another geometry.
            </summary>
            <param name="geometries">A collection of points, multipoints, 
            polylines or polygons. The input types can be mixed.</param>
            <param name="geometry">A single geometry of any type, of dimension 
            equal to or greater than the elements of the goemetries collection.
            </param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnDifferenceCompleted(ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.DifferenceCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.CutAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.Polyline)">
            <summary>
            Splits input polylines or polygons where they cross a cutting 
            polyline.
            </summary>
            <param name="target">The input polylines or polygons to be cut.
            </param>
            <param name="cutter">The polyline that will be used to divide the 
            targets into pieces where they cross the cutter.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.CutAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.Polyline,System.Object)">
            <summary>
            Splits input polylines or polygons where they cross a cutting 
            polyline.
            </summary>
            <param name="target">The input polylines or polygons to be cut.
            </param>
            <param name="cutter">The polyline that will be used to divide the 
            targets into pieces where they cross the cutter.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryService.OnCutCompleted(ESRI.ArcGIS.Client.Tasks.CutEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.CutCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.CutEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.OffsetLastResult">
            <summary>
            Gets the offset last result.
            </summary>
            <value>The offset last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.OffsetCompleted">
            <summary>
            Occurs when the Generalize operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.TrimExtendLastResult">
            <summary>
            Gets the trim / extend last result.
            </summary>
            <value>The trim / extend last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.TrimExtendCompleted">
            <summary>
            Occurs when the Trim / Extend operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.GeneralizeLastResult">
            <summary>
            Gets the generalize last result.
            </summary>
            <value>The generalize last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.GeneralizeCompleted">
            <summary>
            Occurs when the Generalize operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.DensifyLastResult">
            <summary>
            Gets the densify last result.
            </summary>
            <value>The densify last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.DensifyCompleted">
            <summary>
            Occurs when the Densify operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.UnionLastResult">
            <summary>
            Gets the union last result.
            </summary>
            <value>The union last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.UnionCompleted">
            <summary>
            Occurs when the Union operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.DistanceLastResult">
            <summary>
            The last result of the Distance operation.
            </summary>
            <value>The distance last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.DistanceCompleted">
            <summary>
            Occurs when the Distance operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.IntersectLastResult">
            <summary>
            Gets the intersect last result.
            </summary>
            <value>The intersect last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.IntersectCompleted">
            <summary>
            Occurs when the Intersect operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.AutoCompleteLastResult">
            <summary>
            Gets the auto complete last result.
            </summary>
            <value>The auto complete last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.AutoCompleteCompleted">
            <summary>
            Occurs when the Auto Complete operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.ConvexHullLastResult">
            <summary>
            Gets the convex hull last result.
            </summary>
            <value>The convex hull last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.ConvexHullCompleted">
            <summary>
            Occurs when the Convex Hull operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.LengthsLastResult">
            <summary>
            The last result of the Lengths operation.
            </summary>
            <value>The lengths last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.LengthsCompleted">
            <summary>
            Occurs when the lengths operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.AreasAndLengthsLastResult">
            <summary>
            The last result of the AreasAndLengths operation.
            </summary>
            <value>The AreasAndLengths last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.AreasAndLengthsCompleted">
            <summary>
            Occurs when the AreasAndLengths operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.ProjectLastResult">
            <summary>
            The last result of the Project operation.
            </summary>
            <value>The project last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.ProjectCompleted">
            <summary>
            Occurs when the Project operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.SimplifyLastResult">
            <summary>
            The last result of the Simplify operation.
            </summary> 
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.SimplifyCompleted">
            <summary>
            Occurs when the Simplify operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.BufferLastResult">
            <summary>
            The last result of the Buffer operation.
            </summary>   
            <value>The Buffer last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.BufferCompleted">
            <summary>
            Occurs when the Buffer operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.LabelPointsLastResult">
            <summary>
            The last result of the LabelPoints operation.
            </summary>
            <value>The label points last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.LabelPointsCompleted">
            <summary>
            Occurs when the LabelPoints operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.RelationLastResult">
            <summary>
            The last result of the Relation operation.
            </summary>   
            <value>The Relation last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.RelationCompleted">
            <summary>
            Occurs when the Relation operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.ReshapeLastResult">
            <summary>
            Gets the reshape last result.
            </summary>
            <value>The reshape last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.ReshapeCompleted">
            <summary>
            Occurs when the Reshape operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.DifferenceLastResult">
            <summary>
            Gets the difference last result.
            </summary>
            <value>The difference last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.DifferenceCompleted">
            <summary>
            Occurs when the Difference operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryService.CutLastResult">
            <summary>
            Gets the cut last result.
            </summary>
            <value>The cut last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.GeometryService.CutCompleted">
            <summary>
            Occurs when the Cut operation completes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.OffsetParameters">
            <summary>
            Parameters contains additional properties 
            that defines how the offset task will be preformed
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.OffsetParameters.OffsetDistance">
            <summary>
            Gets or sets the offset distance.
            </summary>
            <value>The distance which the output will be
            offset from the original.</value>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.OffsetParameters.OffsetUnit">
            <summary>
            Gets or sets the offset unit.
            </summary>
            <value>(optional) the unit of measure in which
            lengths will be returned.</value>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.OffsetParameters.OffsetHow">
            <summary>
            Gets or sets the offset how.
            </summary>
            <value>One of esriGeometryOffsetMitered,
            esriGeometryOffsetBevelled, esriGeometryOffsetRounded.</value>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.OffsetParameters.BevelRatio">
            <summary>
            Gets or sets the bevel ratio. The bevel ration only applies when 
            OffsetHow property is set to Bevelled, otherwise this property is 
            ignored. 
            </summary>
            <value>The bevel ratio.</value>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.OffsetParameters.Simplify">
            <summary>
            Gets or sets a value indicating whether the returning geometry 
            should be simplified.
            </summary>
            <value>Simplifies the amount of points for each geometry.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Map">
             <summary>
             Represents a Map control with a set of service layers that can be navigated using mouse and keyboard controls. 
             </summary>
             <remarks>
             <para>
             The <see cref="T:ESRI.ArcGIS.Client.Map"/> allows the user to zoom and pan around one or more map service layers placed on top of each other.
             </para>
             <para>
             <B>Navigation:</B> The map has the following default navigation options:
             </para>
             <list type="table">  
             <listheader>
               <term>User Action</term>
               <description>Description</description>
               <platform>Platform</platform>
             </listheader>  
             <item>
               <term>Left Mouse Button Drag</term>
               <description>Pans the map.</description>
               <platform>Silverlight<br/>WPF</platform>
             </item>
             <item>
               <term>Left Mouse Double-click</term>
               <description>Zooms the map in the amount specified in <see cref="P:ESRI.ArcGIS.Client.Map.ZoomFactor"/> around the map cursor.</description>
               <platform>Silverlight<br/>WPF</platform>
             </item>
             <item>
               <term>Left Mouse Double-click + Shift Key</term>
               <description>Zooms the map out the amount specified in <see cref="P:ESRI.ArcGIS.Client.Map.ZoomFactor"/> around the map cursor.</description>
               <platform>Silverlight<br/>WPF</platform>
             </item>
             <item>
               <term>Left Mouse Wheel</term>
               <description>Zooms the map in or out the amount specified in <see cref="P:ESRI.ArcGIS.Client.Map.ZoomFactor"/> around the map cursor.</description>
               <platform>Silverlight<br/>WPF</platform>
             </item>
             <item>
               <term>Left mouse + Sthif Key + Drag</term>
               <description>Drags a zoom box and zooms to the box.</description>
               <platform>Silverlight<br/>WPF</platform>
             </item>
             <item>
               <term>Left Mouse + Shift Key + Ctrl Key + Drag</term>
               <description>Drags a zoom box and zooms out around the box.</description>
               <platform>Silverlight<br/>WPF</platform>
             </item>
             <item>
               <term>Up Arrow Key</term>
               <description>Pans the map up.</description>
               <platform>Silverlight<br/>WPF</platform>
             </item>
             <item>
               <term>Down Arrow Key</term>
               <description>Pans the map down.</description>
               <platform>Silverlight<br/>WPF</platform>
             </item>
             <item>
               <term>Left Arrow Key</term>
               <description>Pans the map to the left.</description>
               <platform>Silverlight<br/>WPF</platform>
             </item>
             <item>
               <term>Right Arrow Key</term>
               <description>Pans the map to the right.</description>
               <platform>Silverlight<br/>WPF</platform>
             </item>
             <item>
               <term>+ Key</term>
               <description>Zooms in the amount specified in <see cref="P:ESRI.ArcGIS.Client.Map.ZoomFactor"/> around the map center.</description>
               <platform>Silverlight<br/>WPF</platform>
             </item>
             <item>
               <term>- Key</term>
               <description>Zooms out the amount specified in <see cref="P:ESRI.ArcGIS.Client.Map.ZoomFactor"/> around the map center.</description>
               <platform>Silverlight<br/>WPF</platform>
             </item>
             <item>
               <term>Pan/Drag Gesture<br/><img border="0" alt="Pan/Drag Gesture" src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.Gesture_PanDrag.png"/></term>
               <description>Pans in the direction the finger is moved.</description>
               <platform>Silverlight<br/>WPF<br/>Windows Phone</platform>
             </item>
             <item>
               <term>Pinch Gesture<br/><img border="0" alt="Pinch Gesture" src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.Gesture_Pinch.png"/></term>
               <description>Zooms in.</description>
               <platform>Silverlight<br/>WPF<br/>Windows Phone</platform>
             </item>
             <item>
               <term>Stretch Gesture<br/><img border="0" alt="Stretch Gesture" src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.Gesture_Stretch.png"/></term>
               <description>Zooms out.</description>
               <platform>Silverlight<br/>WPF<br/>Windows Phone</platform>
             </item>
             <item>
               <term>Double-tap Gesture<br/><img border="0" alt="Double-tap Gesture" src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.Gesture_DoubleTap.png"/></term>
               <description>Zooms in one zoom factor. The zoom factor is defined by the <see cref="P:ESRI.ArcGIS.Client.Map.ZoomFactor"/> property.</description>
               <platform>Silverlight<br/>WPF<br/>Windows Phone</platform>
             </item>
             <item>
               <term>Flick Gesture<br/><img border="0" alt="Flick Gesture" src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.Gesture_Flick.png"/></term>
               <description>Pans in the direction of the flick and slowly comes to a stop.</description>
               <platform>Silverlight<br/>WPF<br/>Windows Phone</platform>
             </item>
             </list>
             <para>
             If the map contains any tiled layers, the map will by default only allow
             you to zoom out and in to the range of the tiled cache resolution. However 
             this value can be overridden explictly by setting the 
             <see cref="P:ESRI.ArcGIS.Client.Map.MinimumResolution"/> and <see cref="P:ESRI.ArcGIS.Client.Map.MaximumResolution"/> 
             properties on the map. These values can also be used to limit how far the user
             can zoom in or out. If no tiled layers are present, these values defaults
             to <see cref="F:System.Double.Epsilon"/> and <see cref="F:System.Double.MaxValue"/>.
             </para>
             <para>
             In order to navigate in a map via the mouse scroll wheel when a Silverlight application first starts, it 
             is required that the end user clicks somewhere in the application for the Silverlight application to have 
             focus. The first time a Silverlight application starts there is no initial focus set; by clicking somewhere
             in the Silverlight application the application obtains focus.
             </para>
             <para>
             <B>Layers:</B> The control supports a set of base layer types that are 
             supported for display within a map. These are: 
             </para>
             <list type="table">  
             <listheader><term>Command</term><description>Description</description></listheader>  
             <item><term><see cref="T:ESRI.ArcGIS.Client.TiledMapServiceLayer"/></term><description>Abstract layer type. 
             Displays cached images arranged as a set of image tiles. 
             See <see cref="T:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer"/></description></item>  
             <item><term><see cref="T:ESRI.ArcGIS.Client.DynamicLayer"/></term><description>Abstract layer type. Displays 
             non-cached images generated generated based on an image size and map extent.
             See <see cref="T:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer"/>, <see cref="T:ESRI.ArcGIS.Client.ArcGISImageServiceLayer"/>
             </description></item>  
             <item><term><see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/></term><description>Displays <see cref="T:ESRI.ArcGIS.Client.Graphic"/>s 
             rendered on the client using a custom symbology and allows for user interaction 
             (click, select, mouse over etc). Also see <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/></description></item>  
             <item><term><see cref="T:ESRI.ArcGIS.Client.ElementLayer"/></term><description>Allows the user to place any
             <see cref="T:System.Windows.UIElement"/> relative to a point or scaled to an extent on the map.</description></item>  
             </list>
             <para>
             <B>Spatial Reference:</B> The Map's spatial reference is determined by the 
             first layer in the map that has this property set. However, it can be overridden
             by explicitly setting the <see cref="P:ESRI.ArcGIS.Client.Map.Extent"/> property with an envelope
             that has a <see cref="P:ESRI.ArcGIS.Client.Map.SpatialReference"/> defined. This has to be done
             before any layers will be initalized by the map. Once the spatial 
             reference of a map has been set and the layers has loaded, the spatial 
             reference can no longer be changed. If you need to change spatial reference 
             on the fly, you can instead create a new map instance, move the layers 
             to this map, and replace the previous map instance.
             Also note that tiled layers does not support reprojection, and will
             not be displayed if the Map's <see cref="P:ESRI.ArcGIS.Client.Map.SpatialReference"/> does not
             match the spatial reference of the tiled layer.
             </para>
             <para>
             <B>Map Scale and Resolution:</B>
             The map is scale agnostic, meaning that it doesn't deal with the scale of 
             the map at any given point. Instead it exposes a resolution value that
             tells you how many map units one pixel represents. This has the benefit
             of being agnostic to the DPI (dots per inches) settings of your screen - 
             something that a scale value is not. A large screen has a different scale 
             than a smaller screen with the same amount of pixels across, and therefore
             the scale can be misleading when viewing the same map on two different screen, 
             like for instance on a projector screen and a laptop.
             </para>
             <para>
             If you were to assume a DPI setting on your screen (96dpi is a common used
             value) and you know the units used in your map's SpatialReference, you can
             calculate the scale of your map.
             <code>
             Map scale = 1 : (ScreenRes pixels/inch * 39.37 inches/meter * (Map.Resolution * conversionFactorToMeters))
             </code>
             So if your map units are in meters and you have a screen resolution of 
             96dpi the current map scale is:
             <code>
             Map scale = 1 : (96dpi * 39.37 inches/meter * (Map.Resolution * 1))
             </code>
             </para>
             <para>
             <B>Creating a map instance with two layers and a startup extent:</B>
             <code lang="XAML">
             &lt;esri:Map x:Name="MyMap" Extent="-120,20,-90,60"&gt;
               &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer" 
                    Url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_ShadedRelief_World_2D/MapServer"/&gt;
               &lt;esri:ArcGISDynamicMapServiceLayer ID="DynamicLayer" Opacity="0.6" 
                    Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer"/&gt;
             &lt;/esri:Map
             </code>
             </para>
             <para>
             <B>Creating a map instance with a pre-defined spatial reference:</B>
             <code lang="XAML">
             &lt;esri:Map x:Name="MyMap"&gt;
               &lt;esri:Map.Extent&gt;
                 &lt;esri:Envelope XMin="661140" YMin="-1420246" XMax="3015668" YMax="1594451" &gt;
                   &lt;esri:Envelope.SpatialReference&gt;
                     &lt;esri:SpatialReference WKID="26777"/&gt;
                   &lt;/esri:Envelope.SpatialReference&gt;
                 &lt;/esri:Envelope&gt;
               &lt;/esri:Map.Extent&gt;
            
               &lt;esri:ArcGISDynamicMapServiceLayer ID="DynamicLayer1"
                    Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer"/&gt;
               &lt;esri:ArcGISDynamicMapServiceLayer ID="DynamicLayer2"
                    Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Petroleum/KGS_OilGasFields_Kansas/MapServer"/&gt;
             &lt;/esri:Map&gt;
             </code>
             </para>
             </remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.backgroundWindow">
            <summary>This element ensures that mouse events are triggered all over the window</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.esriLogo">
            <summary>Reference to the ESRI logo.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.previousExtent">
            <summary>Used for holding the previous extent used for firing the ExtentChanged event</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.rootElement">
            <summary>The root element that will hold all the map layers</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.zoomBox">
            <summary>Box used for mouse drag zooming</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.cacheExtent">
            <summary>Used to store extent changes when the map is collapsed</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.designExtent">
            <summary>Temporary extent only used during design time</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.layerCollectionCanvas">
            <summary>Holds a reference to the element that contains all the layers</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.rotateTransform">
            <summary>Used to fire extent change events while zoom animation is running.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.mapResolution">
            <summary>Map resolution. The resolution might not be the correct resolution if the map is currently animating.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.scaleCached">
            <summary>Cached value of current scale. This should be set to NaN whenever mapResolution changes. The Scale getter will recalculate the cached value when needed</summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.OnCreateAutomationPeer">
            <summary>
            When implemented in a derived class, returns class-specific 
            <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> 
            implementations for the Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>
            subclass to return.
            </returns>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.MapProperty">
            <summary>
            Attached DP used to registering Map property on layers to prevent layer from belonging to multiple maps
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.LastLayerExtentProperty">
            <summary>
            Attached DP used to registering Map property on layers to prevent layer from belonging to multiple maps
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.isDesignMode">
            <summary>
            Value indicating whether we are currently running in design mode.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Map"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.#cctor">
            <summary>
            Static initialization for the <see cref="T:ESRI.ArcGIS.Client.Map"/> control.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.raiseRotationChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Used for firing the rotation changed event from OnRotationPropertyChanged.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code
            or internal processes (such as a rebuilding layout pass) call
            <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.checkBingLogoVisibility">
            <summary>
            Checks and sets Bing logo visibilitity if a bing layer is present.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of Silverlight layout. Classes can override this method to define their own arrange pass behavior.
            </summary>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.layers">
            <summary>
            Used for maintaining reference to all layers if a Clear() occurs so events can be unhooked.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.MoveLayer(System.Int32,System.Int32)">
            <summary>
            Reorders a layer in the Layers collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the layer to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the layer.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.layer_OnLayerChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the OnLayerChanged event of the layer objects and causes a Draw of the layer.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.assignLayerCanvas(ESRI.ArcGIS.Client.Layer)">
            <summary>
            Assigns a canvas to the layer and inserts it into the layer canvas collection.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.insertLayerCanvas(ESRI.ArcGIS.Client.Layer)">
            <summary>
            Inserts the LayerCanvas of the layer, taking into
            account that some layers might not exist exist yet.
            </summary>
            <param name="layer">The layer to get the index for.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.loadLayersInView(System.Boolean,ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Draws/Refreshes all layers in the current view.
            </summary>
            <param name="useTransitions">if set to <c>true</c> use fade transitions.</param>
            <param name="drawExtent">The draw extent.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.loadLayerInView(System.Boolean,ESRI.ArcGIS.Client.Geometry.Envelope,ESRI.ArcGIS.Client.Layer,System.Boolean,System.Double)">
            <summary>
            Draws/Refreshes a layer in the current view.
            </summary>
            <param name="useTransitions">if set to <c>true</c> use fade transitions.</param>
            <param name="drawExtent">The draw extent.</param>
            <param name="layer">The layer.</param>
            <param name="isContinuous">if set to <c>true</c> notify the layer that this is rendering on continuous (panning) mode.</param>
            <param name="scale">The map scale.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.loadContinuousLayersInView(System.Boolean)">
            <summary>
            Draws/Refreshes all layers that are rendered continuously during pan 
            (tiled layers) in the current view.
            </summary>
            <param name="useTransitions">if set to <c>true</c> [use transitions].</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.CheckClipBox">
            <summary>
            Check that the extent is inside the clipbox and reset the origin of the canvas if it's not
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.PanTo(ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Pans the map to center around the center of the geometry
            </summary>
            <param name="geometry">Center</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.ZoomTo(ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Zooms the <see cref="P:ESRI.ArcGIS.Client.Map.Extent">Map.Extent</see> to a specified 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Geometry">Geometry</see>.
            </summary>
            <param name="geom">Geometry to zoom to</param>
            <remarks>
            <para>
            Geometry is an abstract base class for objects that define geometric shapes. The valid types of 
            geometric objects that can be used for the ZoomIn Method as they have Extents that are useful for 
            setting a Map.Extent include:
            </para>
            <list type="bullet">
            <item><see cref="T:ESRI.ArcGIS.Client.Geometry.Envelope">Envelope</see></item>
            <item><see cref="T:ESRI.ArcGIS.Client.Geometry.MultiPoint">MultiPoint</see></item>
            <item><see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon">Polygon</see></item>
            <item><see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline">Polyline</see></item>
            </list>
            <para>
            If the Geometry object parameter that is being passed into the Map.ZoomTo Method does not have the same 
            SpatialReference as the <see cref="P:ESRI.ArcGIS.Client.Map.SpatialReference">Map.SpatialReference</see> 
            then the following runtime error message will result:<br></br>
            ArgumentException was unhandled by user code<br></br>
            Invalid spatial reference. Spatial reference must match map's spatial reference. Clear the map layers 
            collection prior to changing the spatial reference.
            </para>
            <para>
            <img border="0" alt="Runtime ArgumentException error message when the Geometry.SpatialReference does not match the Map.SpatialReference" src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.ZoomTo2.png"/>
            </para>
            <para>
            The example code in the <see cref="P:ESRI.ArcGIS.Client.Map.SpatialReference">Map.SpatialReference</see> 
            Property documentation contains one possible demonstration of how to change the Map.SpatialReference. You 
            could use the same kind of reasoning to change the 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Geometry.SpatialReference">Geometry.SpatialReference</see> to 
            match the Map.SpatialReference.  
            </para>
            <para>
            <b>Note:</b> Using Methods are only available in code-behind. You cannot use a Method directly via XAML.
            </para>
            <para>
            The following image shows a map with two layers. An ArcGISTiledMapServiceLayer (the World) is the first 
            layer and an ArcGISDynamicMapServiceLayer (USA Highways) is the second layer. The top map in the 
            image shows how by default the Map starts-up at the full extent of both layers. The bottom map in the 
            image has as its start-up the second layer as the defined Map.Extent. To achieve the Map.Extent of the 
            second layer as the start-up, the Map.ZoomTo Method in the second layers Initialized Event was used. 
            The screen shots correspond to the code example in this document.
            </para>
            <para>
            <img border="0" alt="Demonstrating the difference between the default Map.Extent and defining a Map.Exent for a Layer." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.ZoomTo.png"/>
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;!-- 
            Add two layers with different extents. By default the Map starts up at the full extent of both layers.  
            --&gt;
            
            &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="705,69,0,0" 
                      Name="Map3" VerticalAlignment="Top" Height="512" Width="1024"&gt;
                        
              &lt;esri:ArcGISTiledMapServiceLayer 
                    Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                        
              &lt;!--
              To make the Map's initial Extent start up as the Extent of the second layer (i.e. USA Highways)
              utilize the Initialized event handler.
              --&gt;
              &lt;esri:ArcGISDynamicMapServiceLayer 
                    Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer" 
                    Initialized="ArcGISDynamicMapServiceLayer_Initialized"/&gt;
              
              &lt;!--
              Note: It is not possible to perform the work of the Map1.ZoomTo Method directly in XAML.
              This must be done via code-behind (either C# or VB.NET). Adding the Initialized attribute
              to the XAML allows for use of code-behind.
              --&gt;
            &lt;/esri:Map&gt;
            </code>
            
            <code title="Example CS1" description="" lang="CS">
            void MainPage_Loaded(object sender, RoutedEventArgs e)
            {
              
              // Clear out any existing layers.
              Map1.Layers.Clear();
              
              // Add an ArcGISTiledMapsServiceLayer to the Map.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              Map1.Layers.Add(myArcGISTiledMapServiceLayer);
              
              // Add an ArcGISDynamicServiceLayer to the Map.
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = new ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer();
              myArcGISDynamicMapServiceLayer.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer";
              Map1.Layers.Add(myArcGISDynamicMapServiceLayer);
              
              // By default the Map Control will set its initial extent to the full extent of both layers.
              
              // But if you want to have the initial extent of the Map Control be that of the second layer 
              // (the ArcGISDynamicServiceLayer) then the following line of code will cause that to happen.
              myArcGISDynamicMapServiceLayer.Initialized += new EventHandler&lt;EventArgs&gt;(ArcGISDynamicMapServiceLayer_Initialized);
              
            }
              
            private void ArcGISDynamicMapServiceLayer_Initialized(object sender, EventArgs e)
            {
              
              // The ArcGISDynamicMapServiceLayer.IntialExtent, and Layer.FullExtent can produce different results.
              // Uncomment/comment the two options to suit your preference:
              
              // Option #1: ArcGISDynamicMapServiceLayer.InitialExtent
              if (sender is ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
              {
                  ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)sender;
                  Map1.ZoomTo(myArcGISDynamicMapServiceLayer.InitialExtent);
              }
              
              //// Option #2: Layer.FullExtent
              //if (sender is ESRI.ArcGIS.Client.Layer)
              //{
              //    ESRI.ArcGIS.Client.Layer myLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)sender;
              //    Map1.ZoomTo(myLayer.FullExtent);
              //}
              
            }
            </code>
            
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
              
              ' Clear out any existing layers.
              Map1.Layers.Clear()
              
              ' Add an ArcGISTiledMapsServiceLayer to the Map.
              Dim myArcGISTiledMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              Map1.Layers.Add(myArcGISTiledMapServiceLayer)
              
              ' Add an ArcGISDynamicServiceLayer to the Map.
              Dim myArcGISDynamicMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer"
              Map1.Layers.Add(myArcGISDynamicMapServiceLayer)
              
              ' By default the Map Control will set its initial extent to the full extent of both layers.
              
              ' But if you want to have the initial extent of the Map Control be that of the second layer 
              ' (the ArcGISDynamicServiceLayer) then the following line of code will cause that to happen.
              AddHandler myArcGISDynamicMapServiceLayer.Initialized, AddressOf ArcGISDynamicMapServiceLayer_Initialized
              
              End Sub
              
              Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As Object, ByVal e As EventArgs)
              
              ' The ArcGISDynamicMapServiceLayer.IntialExtent, and Layer.FullExtent can produce different results.
              ' Uncomment/comment the two options to suit your preference:
              
              ' Option #1: ArcGISDynamicMapServiceLayer.InitialExtent
              If TypeOf sender Is ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer Then
                  Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer = sender
                  Map1.ZoomTo(myArcGISDynamicMapServiceLayer.InitialExtent)
              End If
              
              '' Option #2: Layer.FullExtent
              'If TypeOf sender Is ESRI.ArcGIS.Client.Layer Then
              '    Dim myLayer As ESRI.ArcGIS.Client.Layer = sender
              '    Map1.ZoomTo(myLayer.FullExtent)
              'End If
              
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.Zoom(System.Double)">
            <summary>
            Zooms the map a specified factor.
            Example:
            Factor=0.5 zooms out to half the scale.
            Factor=2 zooms in to twice the scale.
            </summary>
            <param name="factor">Zoom factor</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.zoomAbout(System.Double,ESRI.ArcGIS.Client.Geometry.MapPoint,System.Boolean)">
            <summary>
            Zooms around a point on the map
            </summary>
            <param name="factor"></param>
            <param name="center"></param>
            <param name="skipAnimation"></param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.ZoomToResolution(System.Double)">
            <summary>
            Zooms the Map Control to a specific pixel resolution.
            </summary>
            <param name="resolution">The pixel resolution to zoom to.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.ZoomToResolution(System.Double,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Zooms the Map Control to a specific pixel resolution.
            </summary>
            <remarks>
            <para>
            This version of the Map.ZoomToResolution Method takes two parameters: a 
            <a href="http://msdn.microsoft.com/en-us/library/643eft0t(v=VS.95).aspx" target="_blank">Double</a>
            and a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint">MapPoint</see>. When the Map.ZoomToResolution Method 
            is called the Map zooms into the specified resolution (Double) expanded around the MapPoint so as to 
            maintain the exact mouse cursor location relative to the pre and post Map images rendered.
            </para>
            <para>
            Resolution is defined as the number of map units per pixel.
            </para>
            <para>
            The standard Map navigation options of <b>left mouse double-click</b> and <b>mouse-wheel zoom in</b> 
            internally make use of the Map.ZoomToResolution Method. The defining feature of these two navigation 
            options is that the mouse cursor remains in the same location on the Map when the zoom in occurs. This 
            means the user does not need to move the mouse cursor to accomplish a fluid motion of multiple zooms 
            for each new <see cref="P:ESRI.ArcGIS.Client.Map.Extent">Map.Extent</see> change to keep the same location 
            where the mouse cursor is located. As part of the internal algorithm of the Map.ZoomToResolution Method, 
            the Map.Extent is automatically expanded to the inverse of the 
            <see cref="P:ESRI.ArcGIS.Client.Map.ZoomFactor">Map.ZoomFactor</see> Property while maintaining the exact 
            position of the MapPoint between the pre and post images directly where the mouse cursor action was 
            initiated. Depending on the position of the MapPoint in relation to the bounding box of the Map Control 
            will determine how the internal expansion algorithm works. As the user initiated MapPoint location is 
            increased from the <b>dead-center</b> of the Map Control, the exaggeration of the expansion increases.
            </para>
            <para>
            See the following image for a visual depiction of the expansion exaggeration effect in the automatic 
            calculation of the Map.Extent as part of the Map.ZoomToResolution Method. In the left column, the red 
            star is the MapPoint where the user either <b>left mouse double-clicks</b> or where the cursor was for 
            the <b>mouse-wheel zoom in</b> (both actions call the Map.ZoomToResolution Method internally). The black 
            rectangle, in the left column images, represents a 'zoom-in-factor' of 0.5 (the inverse of the default 
            Map.ZoomFactor which equals 2). The red leading lines inside of the back rectangles represent the 
            internal algorithm of the Map.ZoomToResolution Method which expands the Map.Extent around the MapPoint. 
            Note how the exaggeration of the expansion increases as the MapPoint location moves from the 
            <b>dead-center</b> of the Map Control. In the right column, the MapPoint location stays in the same 
            location; it is the Map.ZoomToResolution internal algorithm which expands the Map.Extent around the 
            MapPoint. Note how the black rectangle in the graphic in the left column exactly matches the Map.Extent 
            shown in right column.
            </para>
            <para>
            <img border="0" alt="Demonstration of various expansion exaggeration effect that are part of the Map.ZoomToResolution Method." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.ZoomToResolution(Double,MapPoint)1.png"/>
            </para>
            <para>
            One common use case that developers request is the ability to click on the Map Control and be able to 
            zoom in by the defined inverse of the Map.ZoomFactor while automatically re-centering the returned 
            image from ArcGIS Server in the Map Control. There are two functions that can accomplish this: the 
            Map.ZoomToResolution and the Map.ZoomTo Methods. The example code in this document demonstrates both 
            ways.
            </para>
            <para>
            <b>Note:</b> Using Methods are only available in code-behind. You cannot use a Method directly via XAML.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click on the ZoomToResolution RadioButton and hold down the Alt key and click on the Map. It will zoom 
            in and automatically re-center the image in the Map Control. Then click on the ZoomTo RadioButton and 
            likewise hold down the Alt key and click on the Map. It will also zoom in and automatically re-center 
            the image in the Map Control. Both functions provide equivalent end results.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following images correspond to the code example in this page:
            </para>
            <para>In this image the user clicks with the Alt + left mouse directly over Madrid, Spain. Note how 
            using either the ZoomToResolution or ZoomTo RadioButtons produce the same zoom and re-center the image 
            effect in the Map Control. 
            </para>
            <para>
            <img border="0" alt="Demonstrating the example code of performing a zoom and re-center the image in the Map Control." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.ZoomToResolution(Double,MapPoint)2.png"/>
            </para>
            <para>
            In this image a visual depiction is shown of how the functions differ in using the ZoomToResolution and 
            ZoomTo RadioButtons. The red dots in the left column Map Controls represent where the user Alt + left 
            mouse clicks over Mardid, Spain. The black rectangles in the left column Map Controls represents a 
            'zoom-in-factor' of 0.5 (the inverse of the default Map.ZoomFactor which equals 2) which will become 
            the Map.Extent of the right column Map Control (note how the black rectangle in the graphic in the left 
            column exactly matches the Map.Extent shown in right column). The red lines connecting the red dot and 
            the black rectangle show how the algorithms differ in achieving the desired zoom and re-centering 
            functionality. For the ZoomToResolution, the yellow dot is the center of the Map.Extent before the next 
            image is created (it corresponds to the <b>myCenterMapPoint</b> variable in the code). Also for the 
            ZoomToResolution, the blue dot is the derived (or calculated) offset MapPoint that is needed in order 
            to generate an image that is centered in the Map Control at the user click point (the blue dot 
            corresponds to the <b>myNewMapPoint</b> variable in the code).
            </para>
            <para>
            <img border="0" alt="Demonstrating the example code of performing a zoom and re-center the image in the Map Control." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.ZoomToResolution(Double,MapPoint)3.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- 
              Add a Map control with an ArcGISTiledMapServiceLayer with a pre-defined Extent. The MouseClick
              Event has been wired-up for use with code-behind functionality. 
              --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Name="Map1" VerticalAlignment="Top" 
                        Height="300" Width="300" Margin="55,114,0,0" MouseClick="Map1_MouseClick" 
                        Extent="-6904231,-7526802,7317314,6432596"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="MyLayer"
                          Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer" /&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- 
              Add two RadioButtons to demonstrate that the same functionality of zoom-in with automatic Map
              re-centering using both the ZoomToResolution and ZoomTo Methods.
              --&gt;
              &lt;RadioButton Content="ZoomToResolution" Height="16" HorizontalAlignment="Left" Margin="55,94,0,0" 
                           Name="RadioButton_ZoomToResolution" VerticalAlignment="Top" /&gt;
              &lt;RadioButton Content="ZoomTo" Height="16" HorizontalAlignment="Left" Margin="289,94,0,0" 
                           Name="RadioButton_ZoomTo" VerticalAlignment="Top" /&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="79" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" 
                         Width="585" TextWrapping="Wrap" Margin="2,9,0,0" 
                         Text="Click on the ZoomToResolution RadioButton and hold down the Alt key and click on 
                         the Map. It will zoom in and automatically re-center the image in the Map Control. Then 
                         click on the ZoomTo RadioButton and likewise hold down the Alt key and click on the Map. 
                         It will also zoom in and automatically re-center the image in the Map Control. Both
                         functions provide equivalent end results." /&gt;
                         
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Map1_MouseClick(object sender, ESRI.ArcGIS.Client.Map.MouseEventArgs e)
            {
              // Get the ModifierKeys that are currently depressed (options include: None, Alt, 
              // Control, Shift, Windows, and Apple)
              ModifierKeys theKey = Keyboard.Modifiers;
              
              // Check to ensure that only the Alt key is being depressed.
              if (theKey == ModifierKeys.Alt)
              {
                // Get the current Map Resolution. 
                double currentResolution = Map1.Resolution;
                
                // Get the ZoomFactor of the Map. The default is 2.
                double myZoomFactor = Map1.ZoomFactor;
                
                // Calculate the ZoomIn Ratio. It is the inverse of the ZoomFactor (ex: 1 / 2 = 0.5).
                double myZoomInRatio = 1 / myZoomFactor;
                
                // Calculate the ZoomIn Resolution. The current Map.Resolution * ZoomIn Ratio.
                double myZoomInResolution = currentResolution * myZoomInRatio;
                
                if (RadioButton_ZoomToResolution.IsChecked == true)
                {
                  // Use the ZoomToResolution Method to perform the zoom and center.
                  CenterAndZoom_via_ZoomToResolution(Map1, e.MapPoint, myZoomInResolution);
                }
                else if (RadioButton_ZoomTo.IsChecked == true)
                {
                  // Use the ZoomTo Methdod to perform the zoom and center.
                  CenterAndZoom_via_ZoomTo(Map1, e.MapPoint, myZoomInResolution);
                }
              }
            }
            
            private void CenterAndZoom_via_ZoomTo(ESRI.ArcGIS.Client.Map myMap, ESRI.ArcGIS.Client.Geometry.MapPoint myMapPoint, double myResolution)
            {
              // Calculate the bounding extents of the zoom centered on the users point click on the Map.
              double xMin = myMapPoint.X - (myMap.ActualWidth * myResolution * 0.5);
              double yMin = myMapPoint.Y - (myMap.ActualHeight * myResolution * 0.5);
              double xMax = myMapPoint.X + (myMap.ActualWidth * myResolution * 0.5);
              double yMax = myMapPoint.Y + (myMap.ActualHeight * myResolution * 0.5);
              
              // Construct an Envelope from the bounding extents.
              ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope = new ESRI.ArcGIS.Client.Geometry.Envelope(xMin, yMin, xMax, yMax);
              
              // Adjust the Map.Extent using the ZoomTo Method. It will be centered where the user clicked.
              myMap.ZoomTo(myEnvelope);
            }
            
            private void CenterAndZoom_via_ZoomToResolution(ESRI.ArcGIS.Client.Map myMap, ESRI.ArcGIS.Client.Geometry.MapPoint myMapPoint, double myResolution)
            {
              // Create the ratio used to re-center the map
              double myRatio = myResolution / myMap.Resolution;
              
              // Get the current extent of the Map before any zooming occurs.
              ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope = myMap.Extent;
              
              // Get the current center of the Map extent before any zooming occurs.
              ESRI.ArcGIS.Client.Geometry.MapPoint myCenterMapPoint = myEnvelope.GetCenter();
              
              // Calculate the X,Y coordinates for the new Map extent center.
              double myX = (myMapPoint.X - (myRatio * myCenterMapPoint.X)) / (1 - myRatio);
              double myY = (myMapPoint.Y - (myRatio * myCenterMapPoint.Y)) / (1 - myRatio);
              ESRI.ArcGIS.Client.Geometry.MapPoint myNewMapPoint = new ESRI.ArcGIS.Client.Geometry.MapPoint(myX, myY);
              
              // The Map will re-center the map using the artifically calculated myNewMapPoint and expand
              // the extent using the calculated myResolution value.
              myMap.ZoomToResolution(myResolution, myNewMapPoint);
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Map1_MouseClick(ByVal sender As Object, ByVal e As ESRI.ArcGIS.Client.Map.MouseEventArgs) Handles Map1.MouseClick
              
              ' Get the ModifierKeys that are currently depressed (options include: None, Alt, 
              ' Control, Shift, Windows, and Apple)
              Dim theKey As ModifierKeys = Keyboard.Modifiers
              
              ' Check to ensure that only the Alt key is being depressed.
              If theKey = ModifierKeys.Alt Then
                
                ' Get the current Map Resolution. 
                Dim currentResolution As Double = Map1.Resolution
                
                ' Get the ZoomFactor of the Map. The default is 2.
                Dim myZoomFactor As Double = Map1.ZoomFactor
                
                ' Calculate the ZoomIn Ratio. It is the inverse of the ZoomFactor (ex: 1 / 2 = 0.5).
                Dim myZoomInRatio As Double = 1 / myZoomFactor
                
                ' Calculate the ZoomIn Resolution. The current Map.Resolution * ZoomIn Ratio.
                Dim myZoomInResolution As Double = currentResolution * myZoomInRatio
                
                If RadioButton_ZoomToResolution.IsChecked = True Then
                  
                  ' Use the ZoomToResolution Method to perform the zoom and center.
                  CenterAndZoom_via_ZoomToResolution(Map1, e.MapPoint, myZoomInResolution)
                ElseIf RadioButton_ZoomTo.IsChecked = True Then
                  
                  ' Use the ZoomTo Methdod to perform the zoom and center.
                  CenterAndZoom_via_ZoomTo(Map1, e.MapPoint, myZoomInResolution)
                  
                End If
                
              End If
              
            End Sub
            
            Private Sub CenterAndZoom_via_ZoomTo(ByVal myMap As ESRI.ArcGIS.Client.Map, ByVal myMapPoint As ESRI.ArcGIS.Client.Geometry.MapPoint, ByVal myResolution As Double)
              
              ' Calculate the bounding extents of the zoom centered on the users point click on the Map.
              Dim xMin As Double = myMapPoint.X - (myMap.ActualWidth * myResolution * 0.5)
              Dim yMin As Double = myMapPoint.Y - (myMap.ActualHeight * myResolution * 0.5)
              Dim xMax As Double = myMapPoint.X + (myMap.ActualWidth * myResolution * 0.5)
              Dim yMax As Double = myMapPoint.Y + (myMap.ActualHeight * myResolution * 0.5)
              
              ' Construct an Envelope from the bounding extents.
              Dim myEnvelope As New ESRI.ArcGIS.Client.Geometry.Envelope(xMin, yMin, xMax, yMax)
              
              ' Adjust the Map.Extent using the ZoomTo Method. It will be centered where the user clicked.
              myMap.ZoomTo(myEnvelope)
              
            End Sub
            
            Private Sub CenterAndZoom_via_ZoomToResolution(ByVal myMap As ESRI.ArcGIS.Client.Map, ByVal myMapPoint As ESRI.ArcGIS.Client.Geometry.MapPoint, ByVal myResolution As Double)
              
              ' Create the ratio used to re-center the map
              Dim myRatio As Double = myResolution / myMap.Resolution
              
              ' Get the current extent of the Map before any zooming occurs.
              Dim myEnvelope As ESRI.ArcGIS.Client.Geometry.Envelope = myMap.Extent
              
              ' Get the current center of the Map extent before any zooming occurs.
              Dim myCenterMapPoint As ESRI.ArcGIS.Client.Geometry.MapPoint = myEnvelope.GetCenter()
              
              ' Calculate the X,Y coordinates for the new Map extent center.
              Dim myX As Double = (myMapPoint.X - (myRatio * myCenterMapPoint.X)) / (1 - myRatio)
              Dim myY As Double = (myMapPoint.Y - (myRatio * myCenterMapPoint.Y)) / (1 - myRatio)
              Dim myNewMapPoint As ESRI.ArcGIS.Client.Geometry.MapPoint = New ESRI.ArcGIS.Client.Geometry.MapPoint(myX, myY)
              
              ' The Map will re-center the map using the artifically calculated myNewMapPoint and expand
              ' the extent using the calculated myResolution value.
              myMap.ZoomToResolution(myResolution, myNewMapPoint)
              
            End Sub
            </code>
            </example>
            <param name="resolution">The pixel resolution of the Map.</param>
            <param name="center">The center to Map.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.quinticEaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Quintic ease out function
            </summary>
            <param name="t">Time</param>
            <param name="b">Begin</param>
            <param name="c">Change</param>
            <param name="d">Duration</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.panLayerToMap(System.Windows.Point)">
            <summary>
            Converts coordinates relative to the panLayer to map coordinates.
            </summary>
            <param name="pnt">Point relative to upper left of panLayer</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.mapToPanLayer(ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Converts coordinates relative to the panLayer from map coordinates.
            </summary>
            <param name="pnt">Point on map</param>
            <returns>Point relative to upper left of panLayer</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.rootElementToMap(System.Windows.Point)">
            <summary>
            Converts coordinates relative to the rootElement to map coordinates.
            </summary>
            <param name="pnt"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.ScreenToMap(System.Windows.Point)">
            <summary>
            Converts screen coordinates relative to the  control into map coordinates.
            </summary>
            <remarks>
            Ensure that the point argument is relative to the map instance. You can easily
            do this by using the  method:
            <b>myElement.TransformToVisual(myMap).Transform(myPoint);</b>
            <para>where myElement is the element the screen coordinates are relative to. You
            can use &quot;System.Windows.Application.Current.RootVisual&quot; if you want to
            use coordinates relative to the entire Silverlight control.</para>
            </remarks>
            <param name="point">Point to convert.</param>
            <returns>
            Map coordinate
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.MapToScreen(ESRI.ArcGIS.Client.Geometry.MapPoint,System.Boolean)">
            <summary>
            Converts map coordinates to screen coordinates relative to the upper left of the map control.
            </summary>
            <param name="point">Map coordinate.</param>
            <param name="adjustForWrapAround">if set to <c>true</c> the conversion will adjust for wrap around if the map is in this mode.</param>
            <returns>Screen coordinate</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.MapToScreen(ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Converts map coordinates to screen coordinates relative to the upper left of the map control.
            </summary>
            <param name="point">Map coordinate.</param>
            <returns>Screen coordinate</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.getFullViewExtent">
            <summary>
            Gets the view extent compensating for transforms applied to the map.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.LayersProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Map.Layers"/> dependency property.
            </summary>
            <remarks>
            <para>
            Property Fields are used for binding to other objects in the code-behind class file. You do not use
            Property Fields directly in XAML.
            </para>
            <para>
            Binding is a powerful mechanism to have Properties automatically update when something changes in an 
            application. Typically Binding is performed in the XAML as this is the easiest coding pattern but there
            may be instance where you want perform binding in code-behind. The various Property Fields allow this to
            occur.
            </para>
            <para>
            Setting LayersProperty Field dependency property could have useful applications such as:
            </para>
            <para>
            <list type="bullet">
            <item>
            Changing the LayersCollection on a Map from one XAML page to another XAML page (i.e. passing
            a global variable to maintain state in an application).
            </item>
            <item>Storing the LayersCollection in a hidden object on a page that can update automatically based
            user interaction with another set of controls.
            </item>
            </list>
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the various buttons to see the effect of performing Binding in code-behind.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate 
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page. 
            </para>
            <para>
            <img border="0" alt="Demonstrating how to perform Binding via code-behind." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.LayersProperty.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Add a Map control. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Name="Map1" VerticalAlignment="Top" 
                        Height="232" Width="364" Margin="12,70,0,0"/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="40" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="618" TextWrapping="Wrap" Margin="2,9,0,0" 
                         Text="Click the various buttons to see the effect of performing Binding in code-behind." /&gt;
              
              &lt;!-- Create a few buttons to demonstrate an example of Binding in code-behind. --&gt;
              &lt;Button Content="Add a layer via binding" Height="23" HorizontalAlignment="Left" Margin="382,72,0,0" 
                      Name="Button1" VerticalAlignment="Top" Width="246" Click="Button1_Click"/&gt;
              &lt;Button Content="Number of layers" Height="23" HorizontalAlignment="Left" Margin="382,101,0,0" 
                      Name="Button2" VerticalAlignment="Top" Width="246" Click="Button2_Click"/&gt;
              &lt;Button Content="Set layer binding = Nothing/null" Height="23" HorizontalAlignment="Left" Margin="382,130,0,0" 
                      Name="Button3" VerticalAlignment="Top" Width="246" Click="Button3_Click"/&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Create a new LayerCollection and add an ArcGISTiledMapServiceLayer to it.
              ESRI.ArcGIS.Client.LayerCollection myLayerCollection = new ESRI.ArcGIS.Client.LayerCollection();
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer";
              myLayerCollection.Add(myArcGISTiledMapServiceLayer);
              
              // Assign the LayerCollection to the Button's Tag Property
              Button1.Tag = myLayerCollection;
              
              // Bind the Button1.Tag to Map1.Layers using the Map.LayersProperty Field
              System.Windows.Data.Binding myBinding = new System.Windows.Data.Binding("Tag");
              myBinding.ElementName = "Button1";
              Map1.SetBinding(ESRI.ArcGIS.Client.Map.LayersProperty, myBinding);
            }
            
            private void Button2_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Try using this button after clicking Button1 and Button3 to see the different results.
              
              // Display the number of Layers in the Map in a MessageBox.
              ESRI.ArcGIS.Client.LayerCollection myLayerCollection = Map1.Layers;
              double myLayerCount = myLayerCollection.Count;
              MessageBox.Show("Number of Layers in the Map:" + myLayerCount.ToString());
            }
              
            private void Button3_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Clear out all of the Layers in the LayerCollection which will automatically impact the
              // Map.Layers LayerCollection because they were bound together in the Button1 Click Event.
              ESRI.ArcGIS.Client.LayerCollection myLayerCollection = Button1.Tag;
              myLayerCollection.Clear();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Create a new LayerCollection and add an ArcGISTiledMapServiceLayer to it.
              Dim myLayerCollection As New ESRI.ArcGIS.Client.LayerCollection
              Dim myArcGISTiledMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer"
              myLayerCollection.Add(myArcGISTiledMapServiceLayer)
              
              ' Assign the LayerCollection to the Button's Tag Property
              Button1.Tag = myLayerCollection
              
              ' Bind the Button1.Tag to Map1.Layers using the Map.LayersProperty Field
              Dim myBinding As System.Windows.Data.Binding = New System.Windows.Data.Binding("Tag")
              myBinding.ElementName = "Button1"
              Map1.SetBinding(ESRI.ArcGIS.Client.Map.LayersProperty, myBinding)
              
            End Sub
              
            Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Try using this button after clicking Button1 and Button3 to see the different results.
              
              ' Display the number of Layers in the Map in a MessageBox.
              Dim myLayerCollection As ESRI.ArcGIS.Client.LayerCollection = Map1.Layers
              Dim myLayerCount As Double = myLayerCollection.Count
              MessageBox.Show("Number of Layers in the Map:" + myLayerCount.ToString)
              
            End Sub
              
            Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Clear out all of the Layers in the LayerCollection which will automatically impact the
              ' Map.Layers LayerCollection because they were bound together in the Button1 Click Event.
              Dim myLayerCollection As ESRI.ArcGIS.Client.LayerCollection = Button1.Tag
              myLayerCollection.Clear()
              
            End Sub
            </code>
            </example>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.ZoomFactorProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Map.ZoomFactor"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.ZoomDurationProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Map.ZoomDuration"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.PanDurationProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Map.PanDuration"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.RotationProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Map.Rotation"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.OnRotationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when rotation dependency property changed.
            </summary>
            <param name="d">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.SnapToLevelsProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Map.SnapToLevels"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.IsLogoVisibleProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Map.IsLogoVisible"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.OnIsLogoVisiblePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsLogoVisible dependency property changed.
            </summary>
            <param name="d">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.mapSpatialReference">
            <summary>
            Spatial reference of the map. This SREF should only be set once, and never overridden.
            (ie. map cannot change sref after it has been set)
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.TimeExtentProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent"/> dependency property.
            </summary>
            <remarks>
            <para>
            Property Fields are used for binding to other objects in the code-behind class file. You do not use 
            Property Fields directly in XAML.
            </para>
            <para>
            Binding is a powerful mechanism to have Properties automatically update when something changes in an 
            application. Typically Binding is performed in the XAML as this is the easiest coding pattern but there
            may be instances where you want perform binding in code-behind. The various Property Fields allow this to
            occur.
            </para>
            <para>
            Setting TimeExtentProperty Field dependency property could have useful applications such as:
            </para>
            <para>
            <list type="bullet">
            <item>
            Automatically updating the Map based upon a specified TimeExtent to demonstrate the importance of temporal 
            issues changing over time.
            </item>
            </list>
            </para>
            <para>
            <b>Note:</b> An example of Binding an ESRI TimeSlider to the Map.TimeExentProperty via the code-behind can 
            be found in the 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">ESRI.ArcGIS.Client.TemporalRenderer</see> 
            Class documentation. 
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Select different dates in the DatePicker Controls to see the effect of performing Binding in code-behind.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate 
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page. 
            </para>
            <para>
            <img border="0" alt="Demonstrating how to perform Binding via code-behind." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.TimeExtentProperty.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Add a Map control. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Name="Map1" VerticalAlignment="Top" 
                        Height="444" Width="364" Margin="12,36,0,0"
                        Extent="-77.69,-13.88,-11.77,52.03"&gt;
                
                &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer"
                                                 Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                
                &lt;esri:FeatureLayer ID="MyFeatureLayer"
                                   Url="http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0"
                                   Where="EVENTID = 'Alberto'" 
                                   OutFields="*"/&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="40" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" 
                         Width="638" TextWrapping="Wrap" Margin="6,9,0,0" 
                         Text="Change the Start Date and End Date DatePicker controls to see how the Map.TimeExtentProperty could be used." /&gt;
              
              &lt;!-- Add two Microsoft DatePicker Controls and some Labels to demonstrate using the Map.TimeExtentProperty. --&gt;
              &lt;sdk:DatePicker Height="23" HorizontalAlignment="Left" Margin="382,57,0,0" Name="StartDate" 
                              VerticalAlignment="Top" Width="120" SelectedDate="8/3/2000" SelectedDateChanged="UpdateMapDate"/&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="382,38,0,0" 
                         VerticalAlignment="Top" Width="120" Content="Start Date:"/&gt;
              
              &lt;sdk:DatePicker Height="23" HorizontalAlignment="Left" Margin="382,276,0,0" Name="EndDate" 
                              VerticalAlignment="Top" Width="120" SelectedDate="8/24/2000" SelectedDateChanged="UpdateMapDate"/&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="382,259,0,0" 
                         VerticalAlignment="Top" Width="120" Content="End Date:"/&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            // Utilize a global variable for the TimeExtent object
            public ESRI.ArcGIS.Client.TimeExtent _myTimeExtent = new ESRI.ArcGIS.Client.TimeExtent();
              
            public TimeExtentProperty()
            {
              InitializeComponent();
              
              // Bind the _myTimeExtent object to the Map.TimeExtent using the Map.TimeExtentProperty Field
              System.Windows.Data.Binding myBinding = new System.Windows.Data.Binding();
              myBinding.Source = _myTimeExtent;
              Map1.SetBinding(ESRI.ArcGIS.Client.Map.TimeExtentProperty, myBinding);
            }
            
            private void UpdateMapDate(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
            {
              // Update the _myTimeExtent object with a new Start and End Dates
              _myTimeExtent.Start = StartDate.SelectedDate;
              _myTimeExtent.End = EndDate.SelectedDate;
              
              // Because we are updating the Properties of the _myTimeExtent object and not the object itself
              // the Binding may not work quite like you would expect. You will need to update the Layers
              // individually in the Map using the .Refresh option.
              ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer = Map1.Layers[1];
              myFeatureLayer.Refresh();
              
              // NOTE: You could use the ESRI.Client.Toolkit.TimeSlider for controlling the dates for the 
              // Map.TimeExtentProperty and you would not need to update the Layers with a .Refresh as this
              // logic is handled internally in the ESRI.Client.Toolkit.TimeSlider. See the 
              // ESRI.ArcGIS.Client.TemporalRenderer documentation for an example.
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            ' Utilize a global variable for the TimeExtent object
            Public _myTimeExtent As New ESRI.ArcGIS.Client.TimeExtent
            
            Public Sub New()
              InitializeComponent()
              
              ' Bind the _myTimeExtent object to the Map.TimeExtent using the Map.TimeExtentProperty Field
              Dim myBinding As System.Windows.Data.Binding = New System.Windows.Data.Binding()
              myBinding.Source = _myTimeExtent
              Map1.SetBinding(ESRI.ArcGIS.Client.Map.TimeExtentProperty, myBinding)
            End Sub
              
            Private Sub UpdateMapDate(ByVal sender As System.Object, ByVal e As System.Windows.Controls.SelectionChangedEventArgs)
              ' Update the _myTimeExtent object with a new Start and End Dates
              _myTimeExtent.Start = StartDate.SelectedDate
              _myTimeExtent.End = EndDate.SelectedDate
              
              ' Because we are updating the Properties of the _myTimeExtent object and not the object itself
              ' the Binding may not work quite like you would expect. You will need to update the Layers
              ' individually in the Map using the .Refresh option.
              Dim myFeatureLayer As ESRI.ArcGIS.Client.FeatureLayer = Map1.Layers(1)
              myFeatureLayer.Refresh()
              
              ' NOTE: You could use the ESRI.Client.Toolkit.TimeSlider for controlling the dates for the 
              ' Map.TimeExtentProperty and you would not need to update the Layers with a .Refresh as this
              ' logic is handled internally in the ESRI.Client.Toolkit.TimeSlider. See the 
              ' ESRI.ArcGIS.Client.TemporalRenderer documentation for an example.
            End Sub
            </code>
            </example>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Map.WrapAroundProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Map.WrapAround"/> dependency property.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Map.MapGesture">
            <summary>
            Occurs when the user performs a touch gesture on the map.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Map.MouseClick">
             <summary>
             The event handler that determines when the left mouse click has occurred in the Map Control. 
             </summary>
             <remarks>
             <para>
             The Map.MouseClick Event is useful for capturing where the user clicked in the Map Control. The information 
             obtained from the Map.MouseEventArgs can be useful for creating tools that perform actions such as:
             </para>
             <list type="bullet">
               <item>Identifying what features are at that location</item>
               <item>Drawing graphics where the user clicked</item>
               <item>Showing the map and screen coordinates</item>
               <item>Creating custom pan/zoom functionality</item>
               <item>Finding the address where the user clicked</item>
               <item>Creating routing stops or barriers</item>
               <item>Executing geoprocessing functions that take a mouse click location as input</item>
             </list>
             <para>
             There are two scenarios that will invoke the event:
             </para> 
             <list type="bullet">
               <item>You click on the map with the left mouse button (i.e. an Identify).</item>
               <item>You click on the map with the left mouse button and while you are holding the button down you use 
               the scroll wheel to Zoom In/Out.</item>
             </list>
             <para>
             The Event will not fire if you are doing a mouse click and drag type of action (i.e. Pan, Zoom In/Out via 
             Rectangle using the Shift or Ctrl+Shift keys).
             </para>
             <para>
             Setting the <see cref="P:ESRI.ArcGIS.Client.Map.MouseEventArgs.Handled">Map.MouseEventArgs.Handled</see> = True 
             prevents most handlers along the Event route from handling the same Event again. The default setting of 
             Map.MouseEventArgs.Handled = False leaves the routed Event unhandled, which permits the Event to 
             potentially route further and be acted on by other handlers. For more information on routing Event handlers 
             also known as "bubbling" see the Microsoft Silverlight document entitled
             <a href="http://msdn.microsoft.com/en-us/library/system.windows.input.mousebuttoneventargs.handled(v=VS.95).aspx" target="_blank">MouseButtonEventArgs.Handled</a>.
             </para>
             <para>
             The <see cref="P:ESRI.ArcGIS.Client.Map.MouseEventArgs.WheelDelta">Map.MouseEventArgs.WheelDelta</see> will 
             always be zero (0) in the Map.MouseClick Event. There is no way to capture Mouse Wheel changes 
             programmatically. Additionally, the 
             <a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&amp;l=EN-US&amp;k=k(System.Windows.UIElement.MouseWheel);k(TargetFrameworkMoniker-SILVERLIGHT,VERSION=V4.0)&amp;rd=true" target="_blank">Map.MouseWheel</a>
             Event never fires because it is being handled internally in the ArcGIS Silverlight source code.
             </para>
             </remarks>
             <example>
             <para>
             <b>How to use:</b>
             </para>
             <para>
             Click on the Map Control with the left mouse to see how the MouseClick Events provide information for the 
             MouseEventArgs.
             </para>
             <para>
             The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
             the functionality.
             </para>
             <para>
             The following screen shot corresponds to the code example in this page.
             </para>
             <para>
             <img border="0" alt="Demonstrating the obtaining the various MouseEventArgs values from the Map.MouseClick Event." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.MouseClick.png"/>
             </para>
             <code title="Example XAML1" description="" lang="XAML">
             &lt;Grid x:Name="LayoutRoot"  &gt;
               
               &lt;!-- Add a Map control with an ArcGISDymanicMapServiceLayer. Specify the use of the MouseClick Event. --&gt;
               &lt;esri:Map Background="White" HorizontalAlignment="Left" Name="Map1" VerticalAlignment="Top" 
                         Height="426" Width="434" MouseClick="Map1_MouseClick" Margin="2,54,0,0"&gt;
                 &lt;esri:ArcGISDynamicMapServiceLayer Url="http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer" /&gt;
               &lt;/esri:Map&gt;
               
               &lt;!-- Provide the instructions on how to use the sample code. --&gt;
               &lt;TextBlock Height="40" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="436" TextWrapping="Wrap" Margin="2,9,0,0" 
                          Text="Click on the Map Control with the left mouse to see how the MouseClick Events provide information for the MouseEventArgs." /&gt;
               
               &lt;!-- Show the information for the Handled Property. --&gt;
               &lt;StackPanel Height="24" HorizontalAlignment="Left" Margin="440,54,0,0" Name="StackPanel1" 
                           VerticalAlignment="Top" Width="200" &gt;
                 &lt;Grid Name="Grid1"&gt;
                   &lt;Grid.RowDefinitions&gt;
                     &lt;RowDefinition Height="24"/&gt;
                   &lt;/Grid.RowDefinitions&gt;
                   &lt;Grid.ColumnDefinitions&gt;
                     &lt;ColumnDefinition Width="60"/&gt;
                     &lt;ColumnDefinition Width="160"/&gt;
                   &lt;/Grid.ColumnDefinitions&gt;
                   &lt;sdk:Label Grid.Row="0" Grid.Column="0" Content="Handled:" FontWeight="Bold"/&gt;
                   &lt;sdk:Label Grid.Row="0" Grid.Column="1" Name="Handled"/&gt;
                 &lt;/Grid&gt;
               &lt;/StackPanel&gt;
               
               &lt;!-- Show the information for the MapPoint Property. --&gt;
               &lt;StackPanel Height="265" HorizontalAlignment="Left" Margin="440,100,0,0" Name="StackPanel2" 
                           VerticalAlignment="Top" Width="200" &gt;
                 &lt;sdk:Label Height="24" Width="120" Content="MapPoint:" HorizontalAlignment="Left" FontWeight="Bold" /&gt;
                 &lt;sdk:Label Height="24" Width="120" Content="Extent"  HorizontalAlignment="Left"/&gt;
                 &lt;Grid Name="Grid2"&gt;
                   &lt;Grid.RowDefinitions&gt;
                     &lt;RowDefinition Height="24"/&gt;
                     &lt;RowDefinition Height="24"/&gt;
                     &lt;RowDefinition Height="24"/&gt;
                     &lt;RowDefinition Height="24"/&gt;
                   &lt;/Grid.RowDefinitions&gt;
                   &lt;Grid.ColumnDefinitions&gt;
                     &lt;ColumnDefinition Width="40"/&gt;
                     &lt;ColumnDefinition Width="160"/&gt;
                   &lt;/Grid.ColumnDefinitions&gt;
                   &lt;sdk:Label Grid.Row="0" Grid.Column="0" Content="XMin:"/&gt;
                   &lt;sdk:Label Grid.Row="0" Grid.Column="1" Name="MapPoint_Extent_XMin"/&gt;
                   &lt;sdk:Label Grid.Row="1" Grid.Column="0" Content="XMax:"/&gt;
                   &lt;sdk:Label Grid.Row="1" Grid.Column="1" Name="MapPoint_Extent_XMax" /&gt;
                   &lt;sdk:Label Grid.Row="2" Grid.Column="0" Content="YMin:"/&gt;
                   &lt;sdk:Label Grid.Row="2" Grid.Column="1" Name="MapPoint_Extent_YMin"/&gt;
                   &lt;sdk:Label Grid.Row="3" Grid.Column="0" Content="YMin:"/&gt;
                   &lt;sdk:Label Grid.Row="3" Grid.Column="1" Name="MapPoint_Extent_YMax" /&gt;
                 &lt;/Grid&gt;
                 &lt;sdk:Label Height="24" Width="120" Content="SpatialReference"  HorizontalAlignment="Left"/&gt;
                 &lt;Grid Name="Grid3"&gt;
                   &lt;Grid.RowDefinitions&gt;
                     &lt;RowDefinition Height="24"/&gt;
                     &lt;RowDefinition Height="24"/&gt;
                   &lt;/Grid.RowDefinitions&gt;
                   &lt;Grid.ColumnDefinitions&gt;
                     &lt;ColumnDefinition Width="40"/&gt;
                     &lt;ColumnDefinition Width="160"/&gt;
                   &lt;/Grid.ColumnDefinitions&gt;
                   &lt;sdk:Label Grid.Row="0" Grid.Column="0" Content="WKID:"/&gt;
                   &lt;sdk:Label Grid.Row="0" Grid.Column="1" Name="MapPoint_SpatialReference_WKID"/&gt;
                   &lt;sdk:Label Grid.Row="1" Grid.Column="0" Content="WKT:"/&gt;
                   &lt;sdk:Label Grid.Row="1" Grid.Column="1" Name="MapPoint_SpatialReference_WKT" /&gt;
                 &lt;/Grid&gt;
                 &lt;Grid Name="Grid4"&gt;
                   &lt;Grid.RowDefinitions&gt;
                     &lt;RowDefinition Height="24"/&gt;
                     &lt;RowDefinition Height="24"/&gt;
                   &lt;/Grid.RowDefinitions&gt;
                   &lt;Grid.ColumnDefinitions&gt;
                     &lt;ColumnDefinition Width="40"/&gt;
                     &lt;ColumnDefinition Width="160"/&gt;
                   &lt;/Grid.ColumnDefinitions&gt;
                   &lt;sdk:Label Grid.Row="0" Grid.Column="0" Content="X:"/&gt;
                   &lt;sdk:Label Grid.Row="0" Grid.Column="1" Name="MapPoint_X"/&gt;
                   &lt;sdk:Label Grid.Row="1" Grid.Column="0" Content="Y:"/&gt;
                   &lt;sdk:Label Grid.Row="1" Grid.Column="1" Name="MapPoint_Y" /&gt;
                 &lt;/Grid&gt;
               &lt;/StackPanel&gt;
               
               &lt;!-- Show the information for the ScreenPoint Property. --&gt;
               &lt;StackPanel Height="72" HorizontalAlignment="Left" Margin="440,375,0,0" Name="StackPanel3" 
                           VerticalAlignment="Top" Width="200" &gt;
                 &lt;sdk:Label Height="24" Width="120" Content="ScreenPoint:" HorizontalAlignment="Left" FontWeight="Bold"/&gt;
                 &lt;Grid Name="Grid5"&gt;
                   &lt;Grid.RowDefinitions&gt;
                     &lt;RowDefinition Height="24"/&gt;
                     &lt;RowDefinition Height="24"/&gt;
                   &lt;/Grid.RowDefinitions&gt;
                   &lt;Grid.ColumnDefinitions&gt;
                     &lt;ColumnDefinition Width="60"/&gt;
                     &lt;ColumnDefinition Width="160"/&gt;
                   &lt;/Grid.ColumnDefinitions&gt;
                   &lt;sdk:Label Grid.Row="0" Grid.Column="0" Content="X:"/&gt;
                   &lt;sdk:Label Grid.Row="0" Grid.Column="1" Name="ScreenPoint_X"/&gt;
                   &lt;sdk:Label Grid.Row="1" Grid.Column="0" Content="Y:"/&gt;
                   &lt;sdk:Label Grid.Row="1" Grid.Column="1" Name="ScreenPoint_Y"/&gt;
                 &lt;/Grid&gt;
               &lt;/StackPanel&gt;
               
               &lt;!-- Show the information for the WheelDelta Property. --&gt;
               &lt;StackPanel Height="24" HorizontalAlignment="Left" Margin="440,455,0,0" Name="StackPanel4" 
                           VerticalAlignment="Top" Width="200" &gt;
                 &lt;Grid Name="Grid6"&gt;
                   &lt;Grid.RowDefinitions&gt;
                     &lt;RowDefinition Height="24"/&gt;
                   &lt;/Grid.RowDefinitions&gt;
                   &lt;Grid.ColumnDefinitions&gt;
                     &lt;ColumnDefinition Width="80"/&gt;
                     &lt;ColumnDefinition Width="160"/&gt;
                   &lt;/Grid.ColumnDefinitions&gt;
                   &lt;sdk:Label Grid.Row="0" Grid.Column="0" Content="WheelDelta:" FontWeight="Bold"/&gt;
                   &lt;sdk:Label Grid.Row="0" Grid.Column="1" Name="WheelDelta"/&gt;
                 &lt;/Grid&gt;
               &lt;/StackPanel&gt;
               
             &lt;/Grid&gt;
             </code>
             <code title="Example CS1" description="" lang="CS">
             private void Map1_MouseClick(object sender, ESRI.ArcGIS.Client.Map.MouseEventArgs e)
             {
            
               // Use local variables to obtain the e arguments.
               bool myHandled = e.Handled;
               ESRI.ArcGIS.Client.Geometry.MapPoint myMapPoint = e.MapPoint;
               System.Windows.Point myScreenPoint = e.ScreenPoint;
               double myWheelDelta = e.WheelDelta;
               
               // Display the results from the Map.MouseClick Event.
               // --------------------------------------------------
               Handled.Content = myHandled.ToString();
               
               MapPoint_Extent_XMax.Content = myMapPoint.Extent.XMax.ToString();
               MapPoint_Extent_XMin.Content = myMapPoint.Extent.XMin.ToString();
               MapPoint_Extent_YMax.Content = myMapPoint.Extent.YMax.ToString();
               MapPoint_Extent_YMin.Content = myMapPoint.Extent.YMin.ToString();
               
               if ((myMapPoint.SpatialReference) != null)
               {
                 MapPoint_SpatialReference_WKID.Content = myMapPoint.SpatialReference.WKID.ToString();
                 MapPoint_SpatialReference_WKT.Content = myMapPoint.SpatialReference.WKT;
               }
            
               MapPoint_X.Content = myMapPoint.X.ToString();
               MapPoint_Y.Content = myMapPoint.Y.ToString();
               
               ScreenPoint_X.Content = myScreenPoint.X.ToString();
               ScreenPoint_Y.Content = myScreenPoint.Y.ToString();
               
               WheelDelta.Content = myWheelDelta.ToString();
               
             }
             </code>
             <code title="Example VB1" description="" lang="VB.NET">
             Private Sub Map1_MouseClick(ByVal sender As System.Object, ByVal e As ESRI.ArcGIS.Client.Map.MouseEventArgs)
             
               ' Use local variables to obtain the e arguments.
               Dim myHandled As Boolean = e.Handled
               Dim myMapPoint As ESRI.ArcGIS.Client.Geometry.MapPoint = e.MapPoint
               Dim myScreenPoint As System.Windows.Point = e.ScreenPoint
               Dim myWheelDelta As Double = e.WheelDelta
               
               ' Display the results from the Map.MouseClick Event.
               ' --------------------------------------------------
               Handled.Content = myHandled.ToString
               
               MapPoint_Extent_XMax.Content = myMapPoint.Extent.XMax.ToString
               MapPoint_Extent_XMin.Content = myMapPoint.Extent.XMin.ToString
               MapPoint_Extent_YMax.Content = myMapPoint.Extent.YMax.ToString
               MapPoint_Extent_YMin.Content = myMapPoint.Extent.YMin.ToString
               
               If (myMapPoint.SpatialReference) IsNot Nothing Then
                 MapPoint_SpatialReference_WKID.Content = myMapPoint.SpatialReference.WKID.ToString
                 MapPoint_SpatialReference_WKT.Content = myMapPoint.SpatialReference.WKT
               End If
               
               MapPoint_X.Content = myMapPoint.X.ToString
               MapPoint_Y.Content = myMapPoint.Y.ToString
               
               ScreenPoint_X.Content = myScreenPoint.X.ToString
               ScreenPoint_Y.Content = myScreenPoint.Y.ToString
               
               WheelDelta.Content = myWheelDelta.ToString
               
             End Sub
             </code>
             </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Map.MouseScroll">
            <summary>
            Occurs when the mouse wheel was scrolled.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Map.ExtentChanged">
            <summary>
            The event handler that determines when the Extent of the Map Control has changed.
            </summary>
            <remarks>
            <para>
            Each time the ExtentChanged Event fires the <b>e</b> parameter 
            (<see cref="T:ESRI.ArcGIS.Client.ExtentEventArgs">ExtentEventArgs</see>) 
            provides information for the <see cref="P:ESRI.ArcGIS.Client.ExtentEventArgs.NewExtent">NewExtent</see> 
            and <see cref="P:ESRI.ArcGIS.Client.ExtentEventArgs.OldExtent">OldExtent</see> Propeties. The first time the 
            ExtentChanged Event fires the OldExtent will be Nothing/null since no Extent was previously set. For each 
            subsequent firing of the ExtentChanged Event what was the previous NewExtent will become the current OldExtent 
            (and the pattern continues). The <b>sender</b> parameter of the ExtentChanged Event is the Map Control. 
            </para>
            <para>
            The information obtained from the Map.ExtentChanged can be useful for creating tools that 
            perform actions such as:
            </para>
            <list type="bullet">
              <item>Adding/removing specific layers if the fall within a specified extent</item>
              <item>Prompting the user for enhanced credentials to see more detailed information at a specified extent</item>
              <item>Notifying a user that data is not available for a specific extent</item>
            </list>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Use the standard zoom in/out, pan, keyboard, mouse, and touch actions in the Map Control to interrogate the
            ExtentEventArgs information of the ExtentChanged Event.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Demonstrating the OldExtent and NewExtent values from the Map.ExtentChanged Event." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.ExtentChanged.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
                
              &lt;!-- Add a Map control with an ArcGISDymanicMapServiceLayer. Specify the use of the ExtentChanged Event. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Name="Map1" VerticalAlignment="Top" 
                        Height="426" Width="434" ExtentChanged="Map1_ExtentChanged" Margin="2,54,0,0"&gt;
                &lt;esri:ArcGISDynamicMapServiceLayer Url="http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer" /&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="40" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="436" TextWrapping="Wrap" Margin="2,9,0,0" 
                         Text="Use the standard Zoom In/Out and Pan, keyboard and mouse actions to see how the ExtentChanged Events provide information for the ExtentEventArgs." /&gt;
                  
              &lt;!-- Show the Envelope information for the OldExtent. --&gt;  
              &lt;StackPanel Height="120" HorizontalAlignment="Left" Margin="440,54,0,0" Name="StackPanel1" 
                          VerticalAlignment="Top" Width="200" &gt;
                &lt;sdk:Label Height="24" Name="Label1" Width="120" Content="OldExtent"/&gt;
                &lt;Grid Name="Grid1"&gt;
                  &lt;Grid.RowDefinitions&gt;
                    &lt;RowDefinition Height="24"/&gt;
                    &lt;RowDefinition Height="24"/&gt;
                    &lt;RowDefinition Height="24"/&gt;
                    &lt;RowDefinition Height="24"/&gt;
                  &lt;/Grid.RowDefinitions&gt;
                  &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="40"/&gt;
                    &lt;ColumnDefinition Width="160"/&gt;
                  &lt;/Grid.ColumnDefinitions&gt;
                  &lt;sdk:Label Grid.Row="0" Grid.Column="0" Content="XMin:"/&gt;
                  &lt;sdk:Label Grid.Row="0" Grid.Column="1" Name="OldExtent_XMin"/&gt;
                  &lt;sdk:Label Grid.Row="1" Grid.Column="0" Content="XMax:"/&gt;
                  &lt;sdk:Label Grid.Row="1" Grid.Column="1" Name="OldExtent_XMax" /&gt;
                  &lt;sdk:Label Grid.Row="2" Grid.Column="0" Content="YMin:"/&gt;
                  &lt;sdk:Label Grid.Row="2" Grid.Column="1" Name="OldExtent_YMin"/&gt;
                  &lt;sdk:Label Grid.Row="3" Grid.Column="0" Content="YMin:"/&gt;
                  &lt;sdk:Label Grid.Row="3" Grid.Column="1" Name="OldExtent_YMax" /&gt;
                &lt;/Grid&gt;
              &lt;/StackPanel&gt;
                  
              &lt;!-- Show the Envelope information for the NewExtent. --&gt;
              &lt;StackPanel Height="120" HorizontalAlignment="Left" Margin="440,200,0,0" Name="StackPanel2" 
                          VerticalAlignment="Top" Width="200" &gt;
                &lt;sdk:Label Height="24" Name="Label1A" Width="120" Content="NewExtent"/&gt;
                &lt;Grid Name="Grid2"&gt;
                  &lt;Grid.RowDefinitions&gt;
                    &lt;RowDefinition Height="24"/&gt;
                    &lt;RowDefinition Height="24"/&gt;
                    &lt;RowDefinition Height="24"/&gt;
                    &lt;RowDefinition Height="24"/&gt;
                  &lt;/Grid.RowDefinitions&gt;
                  &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="40"/&gt;
                    &lt;ColumnDefinition Width="160"/&gt;
                  &lt;/Grid.ColumnDefinitions&gt;
                  &lt;sdk:Label Grid.Row="0" Grid.Column="0" Content="XMin:"/&gt;
                  &lt;sdk:Label Grid.Row="0" Grid.Column="1" Name="NewExtent_XMin"/&gt;
                  &lt;sdk:Label Grid.Row="1" Grid.Column="0" Content="XMax:"/&gt;
                  &lt;sdk:Label Grid.Row="1" Grid.Column="1" Name="NewExtent_XMax" /&gt;
                  &lt;sdk:Label Grid.Row="2" Grid.Column="0" Content="YMin:"/&gt;
                  &lt;sdk:Label Grid.Row="2" Grid.Column="1" Name="NewExtent_YMin"/&gt;
                  &lt;sdk:Label Grid.Row="3" Grid.Column="0" Content="YMin:"/&gt;
                  &lt;sdk:Label Grid.Row="3" Grid.Column="1" Name="NewExtent_YMax" /&gt;
                &lt;/Grid&gt;
              &lt;/StackPanel&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Map1_ExtentChanged(object sender, ESRI.ArcGIS.Client.ExtentEventArgs e)
            {
              // Use local variables to obtain the e arguments.
              ESRI.ArcGIS.Client.Geometry.Envelope myOldExtent = e.OldExtent;
              ESRI.ArcGIS.Client.Geometry.Envelope myNewExtent = e.NewExtent;
              
              // Display the results from the Map.ExtentChanged Event.
              if (myOldExtent != null)
              {
                OldExtent_XMax.Content = myOldExtent.XMax;
                OldExtent_XMin.Content = myOldExtent.XMin;
                OldExtent_YMax.Content = myOldExtent.YMax;
                OldExtent_YMin.Content = myOldExtent.YMin;
              }
              
              if (myNewExtent != null)
              {
                NewExtent_XMax.Content = myNewExtent.XMax;
                NewExtent_XMin.Content = myNewExtent.XMin;
                NewExtent_YMax.Content = myNewExtent.YMax;
                NewExtent_YMin.Content = myNewExtent.YMin;
              }
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Map1_ExtentChanged(ByVal sender As System.Object, ByVal e As ESRI.ArcGIS.Client.ExtentEventArgs)
              
              ' Use local variables to obtain the e arguments.
              Dim myOldExtent As ESRI.ArcGIS.Client.Geometry.Envelope = e.OldExtent
              Dim myNewExtent As ESRI.ArcGIS.Client.Geometry.Envelope = e.NewExtent
              
              ' Display the results from the Map.ExtentChanged Event.
              If myOldExtent IsNot Nothing Then
                OldExtent_XMax.Content = myOldExtent.XMax
                OldExtent_XMin.Content = myOldExtent.XMin
                OldExtent_YMax.Content = myOldExtent.YMax
                OldExtent_YMin.Content = myOldExtent.YMin
              End If
              
              If myNewExtent IsNot Nothing Then
                NewExtent_XMax.Content = myNewExtent.XMax
                NewExtent_XMin.Content = myNewExtent.XMin
                NewExtent_YMax.Content = myNewExtent.YMax
                NewExtent_YMin.Content = myNewExtent.YMin
              End If
              
            End Sub
            </code>
            </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Map.ExtentChanging">
            <summary>
            Occurs when extent is changing.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Map.RotationChanged">
            <summary>
            The event handler reports when the <see cref="P:ESRI.ArcGIS.Client.Map.Rotation">Map.Rotation</see> Property 
            has changed in the Map Control.
            </summary>
            <remarks>
            <para>
            The information obtained from the Map.RotationChanged can be useful for creating tools that perform actions 
            such as:
            </para>
            <list type="bullet">
              <item>Updating a user created custom control with Map's new Rotation value</item>
            </list>
            <para>
            The <b>e</b> parameter of the Map.RotationChanged Event is of Type 
            <a href="http://msdn.microsoft.com/en-us/library/ms602343(v=VS.95).aspx" target="_blank">System.Windows.DepedencyPropertyChangedEventArgs</a>. 
            This Type has three Properties: 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.dependencypropertychangedeventargs.newvalue(v=VS.95).aspx" target="_blank">NewValue</a>, 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.dependencypropertychangedeventargs.oldvalue(v=VS.95).aspx" target="_blank">OldValue</a>, and 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.dependencypropertychangedeventargs.property(v=VS.95).aspx" target="_blank">Property</a>. 
            The NewValue is of Type Double and is the new Map.Rotation value that was set. The OldValue is of Type 
            Double and is previous Map.Rotation value that was set. The initial Map.Rotation value by default is 
            zero (0). The Property is of Type System.Windows.DependencyProperty which identifies which dependency 
            property had the value change occur.
            </para>
            <para>
            The <b>sender</b> parameter of the Map.RotationChanged Event is the Map Control.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click button to see how the RotationChanged Event provides information for the DependencyPropertyChangedEventArgs.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Demonstrating the obtaining the DependencyPropertyChangedEventArgs values from the Map.RotationChanged Event." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.RotationChanged.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map control with an ArcGISDymanicMapServiceLayer. Specify the use of the ExtentChanged Event. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Name="Map1" VerticalAlignment="Top" 
                        Height="426" Width="434" RotationChanged="Map1_RotationChanged" Margin="2,54,0,0"&gt;
                &lt;esri:ArcGISDynamicMapServiceLayer Url="http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer" /&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="40" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="618" TextWrapping="Wrap" Margin="2,9,0,0" 
                         Text="Click button to see how the RotationChanged Event provides information for the DependencyPropertyChangedEventArgs." /&gt;
              
              &lt;!-- Show the information for the NewValue. --&gt;
              &lt;StackPanel Height="24" HorizontalAlignment="Left" Margin="440,54,0,0" Name="StackPanel1" 
                          VerticalAlignment="Top" Width="200" &gt;
                &lt;Grid Name="Grid1"&gt;
                  &lt;Grid.RowDefinitions&gt;
                    &lt;RowDefinition Height="24"/&gt;
                  &lt;/Grid.RowDefinitions&gt;
                  &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="65"/&gt;
                    &lt;ColumnDefinition Width="160"/&gt;
                  &lt;/Grid.ColumnDefinitions&gt;
                  &lt;sdk:Label Grid.Row="0" Grid.Column="0" Content="NewValue:"/&gt;
                  &lt;sdk:Label Grid.Row="0" Grid.Column="1" Name="NewValue"/&gt;
                &lt;/Grid&gt;
              &lt;/StackPanel&gt;
              
              &lt;!-- Show the information for the Property. --&gt;
              &lt;StackPanel Height="24" HorizontalAlignment="Left" Margin="440,90,0,0" Name="StackPanel2" 
                          VerticalAlignment="Top" Width="200" &gt;
                &lt;Grid Name="Grid2"&gt;
                  &lt;Grid.RowDefinitions&gt;
                    &lt;RowDefinition Height="24"/&gt;
                  &lt;/Grid.RowDefinitions&gt;
                  &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="65"/&gt;
                    &lt;ColumnDefinition Width="160"/&gt;
                  &lt;/Grid.ColumnDefinitions&gt;
                  &lt;sdk:Label Grid.Row="0" Grid.Column="0" Content="OldValue:"/&gt;
                  &lt;sdk:Label Grid.Row="0" Grid.Column="1" Name="OldValue"/&gt;
                &lt;/Grid&gt;
              &lt;/StackPanel&gt;
              
              &lt;!-- Show the information for the OldValue. --&gt;
              &lt;StackPanel Height="24" HorizontalAlignment="Left" Margin="440,130,0,0" Name="StackPanel3" 
                          VerticalAlignment="Top" Width="200" &gt;
                &lt;Grid Name="Grid3"&gt;
                  &lt;Grid.RowDefinitions&gt;
                    &lt;RowDefinition Height="24"/&gt;
                  &lt;/Grid.RowDefinitions&gt;
                  &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="55"/&gt;
                    &lt;ColumnDefinition Width="160"/&gt;
                  &lt;/Grid.ColumnDefinitions&gt;
                  &lt;sdk:Label Grid.Row="0" Grid.Column="0" Content="Property:"/&gt;
                  &lt;sdk:Label Grid.Row="0" Grid.Column="1" Name="Property"/&gt;
                &lt;/Grid&gt;
              &lt;/StackPanel&gt;
              
              &lt;!-- Create a button to demonstrate the Map.RotationChanged Event. --&gt;
              &lt;Button Content="Set a Map.Rotation value" Height="23" HorizontalAlignment="Left" Margin="440,160,0,0" 
                      Name="Button1" VerticalAlignment="Top" Width="188" Click="Button1_Click"/&gt;
               
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Map1_RotationChanged(object sender, DependencyPropertyChangedEventArgs e)
            {
              // Use local variables to obtain the e arguments.
              double myNewValue = System.Convert.ToDouble(e.NewValue);
              double myOldValue = System.Convert.ToDouble(e.OldValue);
              System.Windows.DependencyProperty myProperty = e.Property;
              
              // Display the results from the Map.RotationChanged Event.
              NewValue.Content = myNewValue.ToString();
              OldValue.Content = myOldValue.ToString();
              Property.Content = myProperty.ToString();
            }
              
            private void Button1_Click(object sender, RoutedEventArgs e)
            {
              // Change the Map.Rotation Property which will fire the Map.RotationChanged Event
              Map1.Rotation = -45;
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Map1_RotationChanged(ByVal sender As System.Object, ByVal e As System.Windows.DependencyPropertyChangedEventArgs)
              
              ' Use local variables to obtain the e arguments.
              Dim myNewValue As Double = CDbl(e.NewValue)
              Dim myOldValue As Double = CDbl(e.OldValue)
              Dim myProperty As System.Windows.DependencyProperty = e.Property
              
              ' Display the results from the Map.RotationChanged Event.
              NewValue.Content = myNewValue.ToString
              OldValue.Content = myOldValue.ToString
              
              ' Note: The word 'Property' is a reserved word in VB.NET and hence referencing the XAML Label control
              ' called 'Property' must be encased in square brackets ([]).
              [Property].Content = myProperty.ToString
            
            End Sub
              
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs) Handles Button1.Click
              ' Change the Map.Rotation Property which will fire the Map.RotationChanged Event
              Map1.Rotation = -45
            End Sub
            </code>
            </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Map.Progress">
            <summary>
            The event handler reports what percent of images have loaded in the Map Control.
            </summary>
            <remarks>
            <para>
            The Map.Progress Event is useful for determining what percent of the images that compose the drawing of 
            Layers in the Map Control have completed. The information obtained from the Map.Progress can be useful 
            for creating tools that perform actions such as:
            </para>
            <list type="bullet">
              <item>Creating a custom Progress Control to display Map drawing completion</item>
              <item>Invoking other actions in your application that should perform work/display depending on how much 
              the Map drawing has completed</item>
            </list>
            <para>
            As an alternative to having to write custom code to track the Progress of the layers loading in the Map 
            Control, consider using the 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.MapProgressBar">ESRI.ArcGIS.Client.Toolkit.MapProgressBar</see> 
            instead. The benefits of using the MapProgressBar include:
            </para>
            <list type="bullet">
              <item>The MapProgressBar automatically hides (i.e. turns invisible) when all of the layers have loaded</item>
              <item>You can set numerous Properties (like: Background, Foreground, TextBrush, BorderThickness, Width 
              Height, etc.) in XAML to modify the appearance of the Control</item>
              <item>You don't need to develop your own custom control that would bind to the Map.Progress event to 
              display the progress of the layer loading</item>
            </list>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Use the standard zoom in/out, pan, keyboard, mouse, and touch actions in the Map Control to interrogate 
            the ProgressEventArgs information of the Progress Event.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Demonstrating the obtaining the ProgressEventArgs values from the Map.Progress Event." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.Progress.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer and an ArcGISDynamicMapServiceLayer. 
              Specify the use of the Progress Event. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Name="Map1" VerticalAlignment="Top" 
                        Height="426" Width="434" Progress="Map1_Progress" Margin="2,54,0,0"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="MyLayer"
                          Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer" /&gt;
                &lt;esri:ArcGISDynamicMapServiceLayer ID="DynamicLayer" Opacity="0.5" 
                          Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Population_World/MapServer"/&gt;
              &lt;/esri:Map&gt;
                  
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="40" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="436" TextWrapping="Wrap" Margin="2,9,0,0" 
                         Text="Use the standard zoom in/out, pan, keyboard, mouse, and touch actions in the Map Control to interrogate the ProgressEventArgs information of the Progress Event." /&gt;
            
              &lt;!-- Show the information for the Progress Property. --&gt;
              &lt;StackPanel Height="24" HorizontalAlignment="Left" Margin="440,54,0,0" Name="StackPanel1" 
                          VerticalAlignment="Top" Width="200" &gt;
                &lt;Grid Name="Grid1"&gt;
                  &lt;Grid.RowDefinitions&gt;
                    &lt;RowDefinition Height="24"/&gt;
                  &lt;/Grid.RowDefinitions&gt;
                  &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="60"/&gt;
                    &lt;ColumnDefinition Width="160"/&gt;
                  &lt;/Grid.ColumnDefinitions&gt;
                  &lt;sdk:Label Grid.Row="0" Grid.Column="0" Content="Progress:"/&gt;
                  &lt;sdk:Label Grid.Row="0" Grid.Column="1" Name="Progress"/&gt;
                &lt;/Grid&gt;
              &lt;/StackPanel&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Map1_Progress(object sender, ESRI.ArcGIS.Client.ProgressEventArgs e)
            {
              // Display the results from the Map.Progress Event.
              Progress.Content = e.Progress.ToString();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Map1_Progress(ByVal sender As System.Object, ByVal e As ESRI.ArcGIS.Client.ProgressEventArgs)
              
              ' Display the results from the Map.Progress Event.
              Progress.Content = e.Progress.ToString
              
            End Sub
            </code>
            </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Map.PropertyChanged">
            <summary>
            The event handler reports the name of a Non-Dependency Map Property when its value has changed in 
            the Map Control.
            </summary>
            <remarks>
            <para>
            Perfomance of your application can be negatively impacted by putting a lot of intensive programming logic 
            in the Map.PropertyChanged Event. It is a best practice to only put essential code for your coding 
            customization in the Map.PropertyChanged Event.
            </para>
            <para>
            The importance of the PropertyChanged Event is to allow developers to listen for when a 
            particular Non-Dependency Property has changed and thereby write custom code to respond to that change. 
            </para>
            <para>
            In general there are two types of Properties on a Class, 
            <a href="http://msdn.microsoft.com/en-us/library/zzh9ha57(v=VS.100).aspx" target="_blank">Non-Dependency Properties</a> 
            (otherwise known as a "Property" in classic .NET Programming) and
            <a href="http://msdn.microsoft.com/en-us/library/cc221408(v=vs.95).aspx" target="_blank">Dependency Properties</a>. 
            Non-Dependency Properties, depending on their access level, get and set values. Dependency Properties 
            enhance Non-Dependency Properties by holding a default value (with a built in mechanism for Property 
            value validation and automatic notification for changes in Property value) and allowing for Binding 
            in code-behind or XAML.
            </para>
            <para>
            The PropertyChanged Event provides the mechanism for trapping when the more basic Non-Dependency 
            Properties values change. To detect when a Dependency Property changes, use 
            <a href="http://msdn.microsoft.com/en-us/library/cc278072(v=vs.95).aspx" target="_blank">Data Binding</a>.
            </para>
            <para>
            Non-Dependency Properties are those that do not have corresponding Fields in the API Reference 
            documentation for a specific Class. In the case of the Map Class, the Non-Dependency Properties are:
            <list type="bullet">
            <item><see cref="P:ESRI.ArcGIS.Client.Map.Extent">Map.Extent</see></item>
            <item><see cref="P:ESRI.ArcGIS.Client.Map.MaximumResolution">Map.MaximumResolution</see></item>
            <item><see cref="P:ESRI.ArcGIS.Client.Map.MinimumResolution">Map.MinimumResolution</see></item>
            <item><see cref="P:ESRI.ArcGIS.Client.Map.Resolution">Map.Resolution</see></item>
            <item><see cref="P:ESRI.ArcGIS.Client.Map.SpatialReference">Map.SpatialReference</see></item>
            </list>
            </para>
            <para>
            Dependency Properties have corresponding Fields in the API Reference documentation for a specific 
            Class. In the case of the Map Class, the Dependency Properties are:
            <list type="bullet">
            <item><see cref="P:ESRI.ArcGIS.Client.Map.IsLogoVisible">Map.IsLogoVisible</see></item>
            <item><see cref="P:ESRI.ArcGIS.Client.Map.Layers">Map.Layers</see></item>
            <item><see cref="P:ESRI.ArcGIS.Client.Map.PanDuration">Map.PanDuration</see></item>
            <item><see cref="P:ESRI.ArcGIS.Client.Map.Rotation">Map.Rotation</see></item>
            <item><see cref="P:ESRI.ArcGIS.Client.Map.SnapToLevels">Map.SnapToLevels</see></item>
            <item><see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see></item>
            <item><see cref="P:ESRI.ArcGIS.Client.Map.ZoomDuration">Map.ZoomDuration</see></item>
            <item><see cref="P:ESRI.ArcGIS.Client.Map.ZoomFactor">Map.ZoomFactor</see></item>
            </list>
            </para>
            <para>
            You can see a visual example of how to detect which Properties are Dependency Properties 
            in the following enhanced screen shot from the ArcGIS API for Silverlight/WPF 
            documentation.
            </para>
            <para>
            <img border="0" alt="Using the ArcGIS API for Silverlight/WPF documentation to determine which Properties are Dependency Properties." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.PropertyChanged2.png"/>
            </para>
            <para>
            In some cases Map Properties will have matching Events that could also be used to detect 
            changes; rather than using the Map.PropertyChanged Event you could use matching Event directly 
            to perform some custom coding. In the case of the Map Control the following Properties have 
            matching Events:
            </para>
            <list type="table">  
            <listheader><term>Property</term><description>Event</description></listheader>  
            <item>
              <term><see cref="P:ESRI.ArcGIS.Client.Map.Extent">Map.Extent</see></term>
              <description><see cref="E:ESRI.ArcGIS.Client.Map.ExtentChanged">Map.ExtentChanged</see></description>
            </item>
            <item>
              <term><see cref="P:ESRI.ArcGIS.Client.Map.Rotation">Map.Rotation</see></term>
              <description><see cref="P:ESRI.ArcGIS.Client.Map.Rotation">Map.RotationChanged</see></description>
              </item>
            </list>
            <para>
            <b>NOTE:</b> Due to internal implementations you may find that some Dependency Properties do in 
            fact fire a PropertyChanged Event notification. These are exceptions rather than the rule. In the 
            case of the Map Class, the: Layers Property, Rotation Property, and TimeExtent Property do fire 
            notifications in the PropertyChanged Event although they are Dependedncy Properties.
            </para>
            <para>
            Finding when a specific Layer changes in the Map.Layers LayerCollection (i.e. adding a new layer, removing 
            an existing layer, or clearing all the layers) cannot be detected by the Map.PropertyChanged Event. The 
            Map.PropertyChanged Event will only fire for the Map.Layers Property when 
            the Map.Layers is set to Nothing/null or set to a new instance of a LayerCollection object. In order to 
            detect when layers are added, removed, cleared from the exisiting Map.Layers Property use the 
            <a href="http://msdn.microsoft.com/en-us/library/ms653375(v=VS.95).aspx" target="_blank">LayerCollection.CollectionChanged</a> 
            Event.
            </para>
            <para>
            You may notice that the Map.PropertyChanged Event fires (utilizing the Extent Property) numerous times 
            for a single Pan or Zoom In/Out operation. This is by design and is part of the charm for 
            Silverlight/WPF/Windows Phone user experiences. It is the 
            <see cref="P:ESRI.ArcGIS.Client.Map.PanDuration">Map.PanDuration</see> and 
            <see cref="P:ESRI.ArcGIS.Client.Map.ZoomDuration">Map.ZoomDuration</see> Properties that control how often the 
            Map.PropertyChanged Event fires showing changes for the Map.Extent Property. The default Map.PanDuration and 
            Map.ZoomDuration Properties is set to 0.75 seconds and this gives the appearance of a highly responsive Map 
            Control display. The Map.PanDuration and Map.ZoomDuration Properties can be set to zero (0) and will provide 
            a more static look and feel of the Map Control refreshing images as they come in from a service. Consequently, 
            setting the Map.PanDuration and Map.ZoomDuration Properties to zero (0) will cause the Map.PropertyChanged 
            Event to only fire once per layer in the Map Control as the user performs a single Pan of Zoom In/Out.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Use the standard Zoom In/Out and Pan, keyboard and mouse actions, to see how the PropertyChanged Event 
            provides information for the PropertyChangedEventArgs.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Demonstrating displaying Non-Dependency Properties that have fired in the Map.PropertyChanged Event." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.PropertyChanged.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer and an ArcGISDynamicMapServiceLayer. 
              Specify the use of the PropertyChanged Event. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Name="Map1" VerticalAlignment="Top" 
                    Height="400" Width="400" PropertyChanged="Map1_PropertyChanged" Margin="2,76,0,0"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="MyLayer"
                      Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer" /&gt;
                &lt;esri:ArcGISDynamicMapServiceLayer ID="DynamicLayer" Opacity="0.5" 
                      Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Population_World/MapServer"/&gt;
              &lt;/esri:Map&gt;
            
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="61" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" 
                         Width="531" TextWrapping="Wrap" Margin="2,9,0,0" 
                         Text="Use the standard Zoom In/Out and Pan, keyboard and mouse actions, to see how the 
                         PropertyChanged Event provides information for the PropertyChangedEventArgs." /&gt;
              
              &lt;!-- Add a Label and ListBox to show which Map.PropertyChanged notifications have occured. --&gt;
              &lt;sdk:Label Content="PropertyName:" Margin="420,74,20,390" HorizontalAlignment="Left" VerticalAlignment="Top"/&gt;
              &lt;ListBox x:Name="PropertyName" Margin="420,96,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" 
                       Width="160" Height="372" /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Map1_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
            {
              // Display the results from the Map.PropertyChanged Event.
              PropertyName.Items.Add(e.PropertyName);
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Map1_PropertyChanged(ByVal sender As System.Object, ByVal e As System.ComponentModel.PropertyChangedEventArgs)
            
              ' Display the results from the Map.PropertyChanged Event.
              PropertyName.Items.Add(e.PropertyName)
              
            End Sub
            </code>
            </example>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.Layers">
            <summary>
            Gets or sets the <see cref="T:ESRI.ArcGIS.Client.LayerCollection">LayerCollection</see> of 
            <see cref="T:ESRI.ArcGIS.Client.Layer">Layer</see> objects in the Map Control.
            </summary>
            <remarks>
            <para>
            The Layers Property always returns a <see cref="T:ESRI.ArcGIS.Client.LayerCollection">LayerCollection</see> object; 
            it is never Nothing/null. If no layers are added to the Map the LayerCollection.Count = 0.
            </para>
            <para>
            Do not confuse the results of a Map.Layers Property (which returns a LayerCollection object) with the 
            ArcGISTiledMapServiceLayer.Layers and ArcGISDynamicMapServicelayer.Layers Properties (which return a LayerInfo() 
            object). The LayerInfo() is an array of LayerInfo objects and is often referred to in the documentation as a 
            ‘sub-layers’.
            </para>
            <para>
            <b>Note:</b> Accessing a specific Layer via XAML can be done with or without drilling through the 
            &lt;esri:Map.Layers&gt; tag. The following two abbreviated XAML code fragments are equivalent:
            <code>
            &lt;Grid&gt;
              &lt;esri: Map&gt;
                &lt;esri:Map.Layers&gt;
                  &lt;esri:ArcGISDynamicMapServiceLayer/&gt;
                &lt;/esri:Map.Layers&gt;
              &lt;/esri:Map&gt;
            &lt;/Grid&gt;
            </code>
            <br></br>
            <code>
            &lt;Grid&gt;
              &lt;esri: Map&gt;
                &lt;esri:ArcGISDynamicMapServiceLayer/&gt;
              &lt;/esri:Map&gt;
            &lt;/Grid&gt;
            </code>
            </para>
            <para>
            Accessing an individual <see cref="T:ESRI.ArcGIS.Client.Layer">Layer</see> in the LayerCollection in code-behind 
            can be done either by its index number, ID (string name), or via iterating over the LayerCollection. In XAML it 
            is not possible to iterate over a collection using a For/Each loop so accessing a Layer in the LayerCollection 
            is done using either its index number or ID (string name). When using XAML is may be necessary to escape special 
            characters when accessing a Layer via it’s ID (string name); for example a ‘space’ in the name should be escaped 
            with &amp;#32;. The screen shot and code example in this document demonstrates the alternatives for accessing Layers 
            in a LayerCollection.
            </para>
            <para>
            <img border="0" alt="Accessing Layers and their information using different techniques from the LayerCollection." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.Layers.png"/>
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;!-- 
            Add the following types of Layers to the Map Control: ArcGISTiledMapsServiceLayer, FeatureLayer,
            and ArcGISDynamicServiceLayer. Zoom to Southern California.
            --&gt;
            &lt;esri:Map Name="Map1" Background="White" Margin="12,12,0,0" Height="331" Width="883" Extent="-121,30,-113,38"&gt;
              &lt;esri:Map.Layers&gt;
                &lt;esri:ArcGISTiledMapServiceLayer 
                      Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                &lt;esri:FeatureLayer 
                      Url="http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer/8"/&gt;
                &lt;esri:ArcGISDynamicMapServiceLayer 
                      ID="California Points" Url="http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer"/&gt;
              &lt;/esri:Map.Layers&gt;
            &lt;/esri:Map&gt;
              
            &lt;!--
            Obtain the Layers via their index number and ID. Display various information about each layer in TextBlocks.
            --&gt;
            &lt;TextBlock Name="TB_NumberOfLayers" Text="{Binding ElementName=Map1, Path=Layers.Count}" 
                       Height="23" Width="56" Margin="12,349,839,68" /&gt;
            &lt;TextBlock Name="TB_FirstLayer_Type" Text="{Binding ElementName=Map1, Path=Layers[0]}" 
                       Height="23" Width="281" Margin="12,366,614,52"/&gt;
            &lt;TextBlock Name="TB_SecondLayer_Visible" Text="{Binding ElementName=Map1, Path=Layers[1].Visible}" 
                       Height="23" Width="31" Margin="12,385,864,32" /&gt;
            &lt;TextBlock Name="TB_ThirdLayer_Opacity" Text="{Binding ElementName=Map1, Path=Layers[California&amp;#32;Points].Opacity}" 
                       Height="23" Width="31" Margin="12,405,864,12"/&gt;
            </code>
            
            <code title="Example CS1" description="" lang="CS">
            public void AddLayers()
            {
              // Clear out any existing layers.
              Map1.Layers.Clear();
              
              // Add an ArcGISTiledMapsServiceLayer to the Map.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              Map1.Layers.Add(myArcGISTiledMapServiceLayer);
              
              // Add a FeatureLayer to the Map.
              ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer = new ESRI.ArcGIS.Client.FeatureLayer();
              myFeatureLayer.Url = "http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer/8";
              Map1.Layers.Add(myFeatureLayer);
              
              // Add an ArcGISDynamicServiceLayer to the Map.
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = new ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer();
              myArcGISDynamicMapServiceLayer.Url = "http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer";
              myArcGISDynamicMapServiceLayer.ID = "California Points";
              Map1.Layers.Add(myArcGISDynamicMapServiceLayer);
              
              // Zoom into the Southern California.
              Map1.Extent = new ESRI.ArcGIS.Client.Geometry.Envelope(-121, 30, -113, 38);
            }
              
            public void GetLayerInfomation()
            {
              // Obtain the first Layer in the LayerCollection via it's index number.
              ESRI.ArcGIS.Client.Layer firstLayer = Map1.Layers[0];
              
              // Obtain the second Layer in the LayerCollection via iterating over the collection.
              ESRI.ArcGIS.Client.Layer secondLayer = null;
              foreach (object x in Map1.Layers)
              {
                if (x is ESRI.ArcGIS.Client.FeatureLayer)
                {
                  secondLayer = (ESRI.ArcGIS.Client.Layer)x;
                }
              }
              
              // Obtain the third Layer in the LayerCollection via it's ID (string name).
              ESRI.ArcGIS.Client.Layer thirdLayer = Map1.Layers["California Points"];
              
              // Display various information about each layer in a MessageBox.
              System.Text.StringBuilder sb_LayerInfo = new System.Text.StringBuilder();
              sb_LayerInfo.Append("The number of layers in the Map: " + Map1.Layers.Count.ToString() + System.Environment.NewLine + System.Environment.NewLine);
              sb_LayerInfo.Append("The 'firstLayer' is of Type: " + firstLayer.GetType().ToString() + System.Environment.NewLine);
              sb_LayerInfo.Append("The 'secondLayer' is Visible: " + secondLayer.Visible.ToString() + System.Environment.NewLine);
              sb_LayerInfo.Append("The 'thirdLayer' has an Opacity of: " + thirdLayer.Opacity.ToString());
              MessageBox.Show(sb_LayerInfo.ToString());
            }
            </code>
            
            <code title="Example VB1" description="" lang="VB.NET">
            Public Sub AddLayers()
            
              ' Clear out any existing layers.
              Map1.Layers.Clear()
              
              ' Add an ArcGISTiledMapsServiceLayer to the Map.
              Dim myArcGISTiledMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              Map1.Layers.Add(myArcGISTiledMapServiceLayer)
              
              ' Add a FeatureLayer to the Map.
              Dim myFeatureLayer As New ESRI.ArcGIS.Client.FeatureLayer
              myFeatureLayer.Url = "http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer/8"
              Map1.Layers.Add(myFeatureLayer)
              
              ' Add an ArcGISDynamicServiceLayer to the Map.
              Dim myArcGISDynamicMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer.Url = "http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer"
              myArcGISDynamicMapServiceLayer.ID = "California Points"
              Map1.Layers.Add(myArcGISDynamicMapServiceLayer)
              
              ' Zoom into the Southern California.
              Map1.Extent = New ESRI.ArcGIS.Client.Geometry.Envelope(-121, 30, -113, 38)
              
            End Sub
              
            Public Sub GetLayerInfomation()
              
              ' Obtain the first Layer in the LayerCollection via it's index number.
              Dim firstLayer As ESRI.ArcGIS.Client.Layer = Map1.Layers(0)
              
              ' Obtain the second Layer in the LayerCollection via iterating over the collection.
              Dim secondLayer As ESRI.ArcGIS.Client.Layer = Nothing
              Dim x As Object
              For Each x In Map1.Layers
                If TypeOf x Is ESRI.ArcGIS.Client.FeatureLayer Then
                    secondLayer = x
                End If
              Next
              
              ' Obtain the third Layer in the LayerCollection via it's ID (string name).
              Dim thirdLayer As ESRI.ArcGIS.Client.Layer = Map1.Layers("California Points")
              
              ' Display various information about each layer in a MessageBox.
              Dim sb_LayerInfo As New System.Text.StringBuilder
              sb_LayerInfo.Append("The number of layers in the Map: " + Map1.Layers.Count.ToString + vbCrLf + vbCrLf)
              sb_LayerInfo.Append("The 'firstLayer' is of Type: " + firstLayer.GetType.ToString + vbCrLf)
              sb_LayerInfo.Append("The 'secondLayer' is Visible: " + secondLayer.Visible.ToString + vbCrLf)
              sb_LayerInfo.Append("The 'thirdLayer' has an Opacity of: " + thirdLayer.Opacity.ToString)
              MessageBox.Show(sb_LayerInfo.ToString)
              
            End Sub
            </code>
            </example>
            <seealso cref="T:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.ArcGISImageServiceLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.DynamicLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.DynamicMapServiceLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.ElementLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.Resolution">
            <summary>
            Gets the current pixel resolution of the Map Control.
            </summary>
            <remarks>
            <para>
            If no layers are added the default value is -1.#IND. #IND is a NaN (Not a Number). Not a Number is a 
            value of numeric data type representing an undefined or unrepresentable value, especially in 
            floating-point calculations.
            </para>
            <para>
            The Map.Resolution is constrained by what is specified for the 
            <see cref="P:ESRI.ArcGIS.Client.Map.MaximumResolution">Map.MaxmimumResolution</see> and 
            <see cref="P:ESRI.ArcGIS.Client.Map.MinimumResolution">Map.MinmimumResolution</see>. 
            The Map.Resolution is Read Only.
            </para>
            <para>
            Setting the Map.MaximumResolution and the Map.MinimumResolution to the same value essentially locks the 
            Map to a specific scale; meaning that you can only Pan around. You can see this demonstrated in the 
            example code in this document. 
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the various buttons to see the effect of the getting the Map’s Resolution Property on a Tiled 
            Layer as well as getting and setting the MaximumResolution and MinimumResolution values. If you use 
            the default values in the textboxes for both the ‘Set MaximumResolution’ and ‘Set MinimumResolution’ 
            buttons the Map control will be locked to a single Resolution value and you will only be able to Pan 
            around.   
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate 
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page. 
            </para>
            <para>
            <img border="0" alt="Demonstrating how to get the Resolution Property to see all the tiles in a Tiled Layer." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.Resolution.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,88,0,0" 
                        Name="Map1" VerticalAlignment="Top" Height="380" Width="300"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="MyTiledLayer" 
                               Url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="73" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" 
                         Width="517" TextWrapping="Wrap" Margin="12,13,0,0" 
                         Text="Use the standard Zoom In/Out, keyboard mouse, and touch actions to see how the different Resolution Properties work." /&gt;
              
              &lt;!-- Get the current Map.Resolution. --&gt;
              &lt;Button Content="Get Resolution" Height="23" HorizontalAlignment="Left" Margin="318,88,0,0" 
                      Name="Button_Get_Resolution" VerticalAlignment="Top" Width="234" Click="Button_Get_Resolution_Click"/&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="318,115,0,0" Name="Label2" 
                         VerticalAlignment="Top" Width="234" Content="Resolution:"/&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="318,133,0,0" Name="Label_Resolution" 
                         VerticalAlignment="Top" Width="234" /&gt;
              
              &lt;!-- Get/Set the Map.MaximumResolution. --&gt;
              &lt;Button Content="Get MaximumResolution" Height="23" HorizontalAlignment="Left" Margin="318,191,0,0" 
                      Name="Button_Get_MaximumResolution" VerticalAlignment="Top" Width="234" 
                      Click="Button_Get_MaximumResolution_Click" /&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="318,216,0,0" Name="Label1" 
                         VerticalAlignment="Top" Width="234" Content="MaximumResolution:"/&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="318,234,0,0" Name="Label_MaximumResolution" 
                         VerticalAlignment="Top" Width="234" /&gt;
              &lt;Button Content="Set MaximumResolution" Height="23" HorizontalAlignment="Left" Margin="318,252,0,0" 
                      Name="Button_Set_MaximumResolution" VerticalAlignment="Top" Width="234" 
                      Click="Button_Set_MaximumResolution_Click"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="318,281,0,0" Name="TextBox_MaximumResolution" 
                       VerticalAlignment="Top" Width="234" Text=".0227734375"/&gt;
            
              &lt;!-- Get/Set the Map.MinimumResolution. --&gt;
              &lt;Button Content="Get MinimumResolution" Height="23" HorizontalAlignment="Left" Margin="318,350,0,0" 
                      Name="Button_Get_MinimumResolution" VerticalAlignment="Top" Width="234" 
                      Click="Button_Get_MinimumResolution_Click"/&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="318,377,0,0" Name="Label3" 
                         VerticalAlignment="Top" Width="234" Content="MinimumResolution:"/&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="318,395,0,0" Name="Label_MinimumResolution" 
                         VerticalAlignment="Top" Width="234" /&gt;
              &lt;Button Content="Set Minimum Resolution" Height="23" HorizontalAlignment="Left" Margin="318,413,0,0" 
                      Name="Button_Set_MinimumResolution" VerticalAlignment="Top" Width="234" 
                      Click="Button_Set_MinimumResolution_Click"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="318,442,0,0" Name="TextBox_MinimumResolution" 
                       VerticalAlignment="Top" Width="234" Text=".0227734375"/&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button_Get_Resolution_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Get the current Map.Resolution
              Label_Resolution.Content = Map1.Resolution.ToString();
            }
            
            private void Button_Set_MaximumResolution_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Set the Map.MaximumResolution
              Map1.MaximumResolution = System.Convert.ToDouble(TextBox_MaximumResolution.Text);
            }
            
            private void Button_Get_MaximumResolution_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Get the Map.MaximumResolution
            Label_MaximumResolution.Content = Map1.MaximumResolution.ToString();
            }
            
            private void Button_Set_MinimumResolution_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Set the Map.MinimumResolution
              Map1.MinimumResolution = System.Convert.ToDouble(TextBox_MinimumResolution.Text);
            }
            
            private void Button_Get_MinimumResolution_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Get the Map.MinimumResolution
              Label_MinimumResolution.Content = Map1.MinimumResolution.ToString();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button_Get_Resolution_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              ' Get the current Map.Resolution
              Label_Resolution.Content = Map1.Resolution.ToString
            End Sub
            
            Private Sub Button_Set_MaximumResolution_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              ' Set the Map.MaximumResolution
              Map1.MaximumResolution = CDbl(TextBox_MaximumResolution.Text)
            End Sub
            
            Private Sub Button_Get_MaximumResolution_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              ' Get the Map.MaximumResolution
              Label_MaximumResolution.Content = Map1.MaximumResolution.ToString
            End Sub
            
            Private Sub Button_Set_MinimumResolution_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              ' Set the Map.MinimumResolution
              Map1.MinimumResolution = CDbl(TextBox_MinimumResolution.Text)
            End Sub
            
            Private Sub Button_Get_MinimumResolution_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              ' Get the Map.MinimumResolution
              Label_MinimumResolution.Content = Map1.MinimumResolution.ToString
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.Scale">
            <summary>
            Gets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.MaximumResolution">
            <summary>
            Gets or sets the maximum resolution (map units per pixel) one can zoom out.
            </summary>
            <remarks>
            <para>
            If the Map contains one or more tiled layers, the default MaximumResolution value will be the maximum 
            resolution of the tiled layers. If the Map does not contain any tiled layers, the default MaximumResolution 
            value will be constant 
            <a href="http://msdn.microsoft.com/en-us/library/system.double.maxvalue(v=VS.95).aspx" target="_blank">System.Double.MaxValue</a>.
            </para>
            <para>
            System.Double.MaxValue represents the largest possible positive value of a Double. This field is constant. 
            The System.Double.MaxValue = 1.7976931348623157E+308. This value is considered to be infinity by the 
            Operating System.
            </para>
            <para>
            Setting the Map.MaximumResolution and the Map.MinimumResolution to the same value essentially locks the 
            Map to a specific scale; meaning that you can only Pan around.
            </para>
            <para>
            The <see cref="T:ESRI.ArcGIS.Client.Toolkit.Navigation">ESRI.ArcGIS.Client.Toolkit.Navigation</see> Control 
            contains a slider to zoom in and out, interactive elements in a ring to rotate the map, and a set of buttons 
            to zoom, pan, zoom to full extent, and reset rotation. The behavior of the Navigation control at runtime 
            depends on the content and properties of the Map Control to which it is bound. The zoom slider will only be 
            displayed if the Map.MinimumResolution and Map.MaximumResolution resolution on the Map control have been 
            defined. If a 
            <see cref="T:ESRI.ArcGIS.Client.TiledMapServiceLayer">ESRI.ArcGIS.Client.TiledMapServiceLayer</see> 
            is present in the Map's layer collection, in most cases the minimum and maximum resolution will be set for 
            you. If a Map only contains 
            <see cref="T:ESRI.ArcGIS.Client.DynamicLayer">ESRI.ArcGIS.Client.DynamicLayer</see>
            , you must set the minimum and maximum resolution explicitly. 
            </para>
            <para>
            For some Tiled map services, the Map.MaximumResolution may be set to a low value resulting in not being 
            able to see the full extent of all the tiles in the Map Control. Developers must override this default 
            MaximumResolution value by setting it to a higher number so that all the tiles can be seen. The code 
            example in this document provides a demonstration of how to address this common issue.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the various buttons to see the effect of setting the MaximumResolution Property on a Tiled Layer.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate 
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page. 
            </para>
            <para>
            <img border="0" alt="Demonstrating how to adjust the MaximumResolution Property to see all the tiles in a Tiled Layer." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.MaximumResolution.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer. --&gt;
              &lt;esri:Map Background="Blue" HorizontalAlignment="Left" Margin="12,88,0,0" 
                        Name="Map1" VerticalAlignment="Top" Height="216" Width="247"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="MyTiledLayer" 
                               Url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer. --&gt;
              &lt;esri:Map Background="Blue" HorizontalAlignment="Left" Margin="282,88,0,0" 
                        Name="Map2" VerticalAlignment="Top" Height="216" Width="247"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="MyTiledLayer" 
                               Url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a button with instructions and a label. --&gt;
              &lt;Button Height="57" HorizontalAlignment="Left" Margin="12,12,0,0" 
                      Name="Button_Step1" VerticalAlignment="Top" Width="247" Click="Button_Step1_Click"&gt;
                &lt;Button.Content&gt;
                  &lt;TextBlock Text="Step 1 - Click me to show the initial MaximumResolution and then zoom out to the maximum extent possible." 
                             TextWrapping="Wrap" /&gt;
                &lt;/Button.Content&gt;
              &lt;/Button&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="12,68,0,0" Name="Label1" VerticalAlignment="Top" 
                         Width="120" Content="MaximumResolution:" /&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="133,68,0,0" Name="Label_Initial_MaximumResolution" 
                         VerticalAlignment="Top" Width="126" /&gt;
              
              &lt;!-- Add a button with instructions and a label. --&gt;
              &lt;Button Height="57" HorizontalAlignment="Left" Margin="282,12,0,0" 
                      Name="Button_Step2" VerticalAlignment="Top" Width="247" Click="Button_Step2_Click"&gt;
                &lt;Button.Content&gt;
                  &lt;TextBlock Text="Step 2 - Click me to set a larger MaximumResolution and then zoom out to the maximum extent possible." 
                             TextWrapping="Wrap" /&gt;
                &lt;/Button.Content&gt;
              &lt;/Button&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="282,68,0,0" Name="Label2" VerticalAlignment="Top" 
                         Width="120" Content="MaximumResolution:"/&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="408,68,0,0" Name="Label_Set_Large_MaximumResolution" 
                         VerticalAlignment="Top" Width="121"/&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button_Step1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Display the initial Map.MaximumResolution value.
              Label_Initial_MaximumResolution.Content = Map1.MaximumResolution;
             }
            
            private void Button_Step2_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Set the Map.MaximumResolution value to a higher number than the default.
              Map2.MaximumResolution = 2.0;
              Label_Set_Large_MaximumResolution.Content = Map2.MaximumResolution;
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button_Step1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              ' Display the initial Map.MaximumResolution value.
              Label_Initial_MaximumResolution.Content = Map1.MaximumResolution
            End Sub
              
            Private Sub Button_Step2_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              ' Set the Map.MaximumResolution value to a higher number than the default.
              Map2.MaximumResolution = 2.0
              Label_Set_Large_MaximumResolution.Content = Map2.MaximumResolution
            End Sub
            </code>
            </example>
            <seealso cref="P:ESRI.ArcGIS.Client.Map.Resolution"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Map.MinimumResolution"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.MinimumResolution">
            <summary>
            Gets or sets the minimum resolution (map units per pixel) one can zoom in.
            </summary>
            <remarks>
            <para>
            If the Map contains one or more tiled layers, the default MinimumResolution value will be the minimum 
            resolution of the tiled layers. If the Map does not contain any tiled layers, the default 
            MinimumResolution value will be constant 
            <a href="http://msdn.microsoft.com/en-us/library/system.double.epsilon(v=VS.95).aspx" target="_blank">System.Double.Epsilon</a>.
            </para>
            <para>
            System.Double.Epsilon represents the smallest positive Double value greater than zero. This field is 
            constant. The System.Double.Epsilon = 4.94065645841247e-324
            </para>
            <para>
            Setting the Map.MaximumResolution and the Map.MinimumResolution to the same value essentially locks the 
            Map to a specific scale; meaning that you can only Pan around.
            </para>
            <para>
            The <see cref="T:ESRI.ArcGIS.Client.Toolkit.Navigation">ESRI.ArcGIS.Client.Toolkit.Navigation</see> Control 
            contains a slider to zoom in and out, interactive elements in a ring to rotate the map, and a set of buttons 
            to zoom, pan, zoom to full extent, and reset rotation. The behavior of the Navigation control at runtime 
            depends on the content and properties of the Map Control to which it is bound. The zoom slider will only be 
            displayed if the Map.MinimumResolution and Map.MaximumResolution resolution on the Map control have been 
            defined. If a 
            <see cref="T:ESRI.ArcGIS.Client.TiledMapServiceLayer">ESRI.ArcGIS.Client.TiledMapServiceLayer</see> 
            is present in the Map's layer collection, in most cases the minimum and maximum resolution will be set for 
            you. If a Map only contains 
            <see cref="T:ESRI.ArcGIS.Client.DynamicLayer">ESRI.ArcGIS.Client.DynamicLayer</see>
            , you must set the minimum and maximum resolution explicitly. 
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the various buttons to see the effect of setting the MinimumResolution Property on a Tiled Layer.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate 
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page. 
            </para>
            <para>
            <img border="0" alt="Demonstrating how to adjust the MinimumResolution Property to see all the tiles in a Tiled Layer." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.MinimumResolution.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer. --&gt;
              &lt;esri:Map Background="Blue" HorizontalAlignment="Left" Margin="12,88,0,0" 
                        Name="Map1" VerticalAlignment="Top" Height="250" Width="250"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="MyTiledLayer" 
                               Url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer. --&gt;
              &lt;esri:Map Background="Blue" HorizontalAlignment="Left" Margin="282,88,0,0" 
                        Name="Map2" VerticalAlignment="Top" Height="250" Width="250"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="MyTiledLayer" 
                               Url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
              &lt;/esri:Map&gt;
            
              &lt;!-- Add a button with instructions and a label. --&gt;
              &lt;Button Height="57" HorizontalAlignment="Left" Margin="12,12,0,0" 
                      Name="Button_Step1" VerticalAlignment="Top" Width="250" Click="Button_Step1_Click"&gt;
                &lt;Button.Content&gt;
                  &lt;TextBlock Text="Step 1 - Click me to show the initial MinimumResolution and then zoom in to the minimum extent possible." 
                             TextWrapping="Wrap" /&gt;
                &lt;/Button.Content&gt;
              &lt;/Button&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="12,68,0,0" Name="Label1" VerticalAlignment="Top" 
                         Width="120" Content="MinimumResolution:" /&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="126,68,0,0" Name="Label_Initial_MinimumResolution" 
                         VerticalAlignment="Top" Width="136" /&gt;
              
              &lt;!-- Add a button with instructions and a label. --&gt;
              &lt;Button Height="57" HorizontalAlignment="Left" Margin="282,12,0,0" 
                      Name="Button_Step2" VerticalAlignment="Top" Width="250" Click="Button_Step2_Click"&gt;
                &lt;Button.Content&gt;
                  &lt;TextBlock Text="Step 2 - Click me to set a larger MinimumResolution and then zoom in to the minimum extent possible." 
                             TextWrapping="Wrap" /&gt;
                &lt;/Button.Content&gt;
              &lt;/Button&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="282,68,0,0" Name="Label2" VerticalAlignment="Top" 
                         Width="120" Content="MinimumResolution:"/&gt;
              &lt;sdk:Label Height="20" HorizontalAlignment="Left" Margin="396,68,0,0" Name="Label_Set_Large_MinimumResolution" 
                         VerticalAlignment="Top" Width="136"/&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button_Step1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Display the initial Map.MinimumResolution value.
              Label_Initial_MinimumResolution.Content = Map1.MinimumResolution;
            }
            
            private void Button_Step2_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Set the Map.MinimumResolution value to a higher number that the default.
              Map2.MinimumResolution = 0.00017;
              Label_Set_Large_MinimumResolution.Content = Map2.MinimumResolution;
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button_Step1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              ' Display the initial Map.MinimumResolution value.
              Label_Initial_MinimumResolution.Content = Map1.MinimumResolution
            End Sub
            
            Private Sub Button_Step2_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              ' Set the Map.MinimumResolution value to a higher number that the default.
              Map2.MinimumResolution = 0.00017
              Label_Set_Large_MinimumResolution.Content = Map2.MinimumResolution
            End Sub
            </code>
            </example>
            <seealso cref="P:ESRI.ArcGIS.Client.Map.Resolution"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Map.MaximumResolution"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.ZoomFactor">
            <summary>
            Gets or sets how much the map zooms based upon various user interactions.
            </summary>
            <remarks>
            <para>
            Depending on the ArcGIS API SDK, the user interaction that triggers a zoom consists of:
            </para>
            <para>
            <b>ArcGIS API for Silverlight</b> and <b>ArcGIS API for WPF:</b> 
            </para>
            <list type="bullet">
              <item>Left Mouse Double-click</item>
              <item>Left Mouse Double-click + Shift Key</item>
              <item>Scroll the Mouse Wheel</item>
              <item><b>+</b> Key</item>
              <item><b>-</b> Key</item>
              <item>Double-tap Gesture</item>
            </list>
            <para><br/></para>
            <para>
            <b>ArcGIS API for Windows Phone:</b> 
            </para>
            <list type="bullet">
              <item>Double-tap Gesture</item>
            </list>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.ZoomDuration">
            <summary>
            Gets or sets the speed of the zoom animation.
            </summary>
            <remarks>
            <para>Set to 00:00:00 to disable zoom animation.</para>
            <para><c>Setting Zoom duration in xaml:</c>
            <code>
            &lt;esri:Map ZoomDuration=&quot;00:00:00.75&quot;&gt;
            &lt;/esri:Map&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.PanDuration">
            <summary>
            Gets or sets the speed of the pan animation
            </summary>
            <remarks>
            <para>
            Set to 00:00:00 to disable pan animation.
            </para>
            <para><c>Setting Pan duration in xaml:</c>
            <code>
            &lt;esri:Map PanDuration=&quot;00:00:00.75&quot;&gt;
            &lt;/esri:Map&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.Rotation">
            <summary>
            Gets or sets the rotation of the Layers within the Map Control.
            </summary>
            <remarks>
            <para>
            It is the Layers within the Map Control and not the Map Control itself that is rotated. The point of 
            Rotation occurs using the center of the 
            <see cref="P:ESRI.ArcGIS.Client.Map.Extent">Map.Extent</see>. The default Rotation value is 0. Rotation 
            values of 180 or -180 is the same as flipping the contents of the Map upside down. The Rotation value 
            of 0 and 360 result in the same Map orientation (the default).
            </para>
            <para>
            Rotation values that are positive are moved in the clock-wise direction. See the following screen shot:
            </para>
            <para>
              <img border="0" alt="Examples of positive Map.Rotation values." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.Rotation1.png"/>
            </para>
            <para>
            Rotation values that are negative are moved in the counter-clock-wise direction. See the following screen shot:
            </para>
            <para>
              <img border="0" alt="Examples of negative Map.Rotation values." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.Rotation2.png"/>
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
              
              &lt;!--
              Bind the Value from the Slider to the Map's RotationProperty.
              This will update the Map's Rotation value automatically as the Slider moves.
              
              Set the initial Extent of the Map (the African Continent).
              --&gt;
              &lt;esri:Map Name="Map1" Background="White" Height="300" Width="300" Margin="50,85,0,0"  
                    HorizontalAlignment="left" VerticalAlignment="Top" 
                    Rotation="{Binding ElementName=Slider1, Path=Value}" Extent="-34.45,-46.05,71.01,59.41"&gt;
                
                &lt;!--
                Create a circle geometric object and use it to Clip the viewable extent of the Map control.
                --&gt;
                &lt;esri:Map.Clip&gt;
                  &lt;EllipseGeometry Center="150,150" RadiusX="150" RadiusY="150"/&gt;
                &lt;/esri:Map.Clip&gt;
                
                &lt;!--
                Add an ArcGISTiledMapsServiceLayer to the Map.
                --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer 
                      Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                        
              &lt;/esri:Map&gt;
                      
              &lt;!--
              Define the Slider's Minimum and Maximum values. 
              This will define the upper and lower constraints for the Map's Rotation.
              --&gt;
              &lt;Slider Name="Slider1" Height="23" Width="300" Margin="50,61,0,0"  
                      HorizontalAlignment="Left" VerticalAlignment="Top"  
                      Minimum="-360" Maximum="360"/&gt;
                      
              &lt;sdk:Label Name="Label1" Content="Rotation:" Height="28" Margin="49,38,0,0" 
                         HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="24" FontFamily="Arial" /&gt;
                      
              &lt;!--
              Bind the Value from the Slider to the TextBlock's TextProperty.
              This will update the TextBlocks Text value automatically as the Slider moves.
              --&gt;
              &lt;TextBlock Name="TextBlock1" Text="{Binding ElementName=Slider1, Path=Value}" Height="23" Margin="195,39,0,0"  
                         HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="24" FontFamily="Arial" /&gt;
              
            &lt;/Grid&gt;
            </code>
                
            <code title="Example CS1" description="" lang="CS">
            private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
            {
              
              // The following controls were pre-defined in the XAML:
              // ----------------------------------------------------
              //
              //&lt;esri:Map Name="Map1" Background="White" Height="300" Width="300" Margin="50,85,0,0"  
              //          HorizontalAlignment="left" VerticalAlignment="Top" /&gt;
              //&lt;Slider Name="Slider1" Height="23" Width="300" Margin="50,61,0,0"  
              //        HorizontalAlignment="Left" VerticalAlignment="Top"  /&gt;
              //&lt;sdk:Label Name="Label1" Content="Rotation:" Height="28" Margin="49,38,0,0" 
              //           HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="24" FontFamily="Arial" /&gt;
              //&lt;TextBlock Name="TextBlock1" Text="0" Height="23" Margin="195,39,0,0"  
              //           HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="24" FontFamily="Arial" /&gt;
              
              // Clear out any existing layers.
              Map1.Layers.Clear();
              
              // Add an ArcGISTiledMapsServiceLayer to the Map.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              Map1.Layers.Add(myArcGISTiledMapServiceLayer);
              
              // Set the initial Extent of the Map (the African Continent).
              ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope = new ESRI.ArcGIS.Client.Geometry.Envelope();
              myEnvelope.XMin = -34.45;
              myEnvelope.YMin = -46.05;
              myEnvelope.XMax = 71.01;
              myEnvelope.YMax = 59.41;
              Map1.Extent = myEnvelope;
              
              // Create a circle geometric object and use it to Clip the viewable extent of the Map control.
              System.Windows.Media.EllipseGeometry myEllipse = new System.Windows.Media.EllipseGeometry();
              myEllipse.Center = new System.Windows.Point(150, 150);
              myEllipse.RadiusX = 150;
              myEllipse.RadiusY = 150;
              Map1.Clip = myEllipse;
              
              // Define the Slider's Minimum and Maximum values. 
              // This will define the upper and lower constraints for the Map's Rotation.
              Slider1.Minimum = -360;
              Slider1.Maximum = 360;
              
              // Bind the Value from the Slider to the Map's RotationProperty.
              // This will update the Map's Rotation value automatically as the Slider moves.
              System.Windows.Data.Binding myBinding2 = new System.Windows.Data.Binding("Value");
              myBinding2.Mode = System.Windows.Data.BindingMode.OneWay;
              myBinding2.ElementName = "Slider1";
              Map1.SetBinding(ESRI.ArcGIS.Client.Map.RotationProperty, myBinding2);
              
              // Bind the Value from the Slider to the TextBlock's TextProperty.
              // This will update the TextBlocks Text value automatically as the Slider moves.
              System.Windows.Data.Binding myBinding3 = new System.Windows.Data.Binding("Value");
              myBinding3.Mode = System.Windows.Data.BindingMode.OneWay;
              myBinding3.ElementName = "Slider1";
              TextBlock1.SetBinding(TextBlock.TextProperty, myBinding3);
              
            }
            </code>
                
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
              
              ' The following controls were pre-defined in the XAML:
              ' ----------------------------------------------------
              '
              '&lt;esri:Map Name="Map1" Background="White" Height="300" Width="300" Margin="50,85,0,0"  
              '        ///     HorizontalAlignment="left" VerticalAlignment="Top" /&gt;
              '&lt;Slider Name="Slider1" Height="23" Width="300" Margin="50,61,0,0"  
              '        ///   HorizontalAlignment="Left" VerticalAlignment="Top"  /&gt;
              '&lt;sdk:Label Name="Label1" Content="Rotation:" Height="28" Margin="49,38,0,0" 
              '        ///      HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="24" FontFamily="Arial" /&gt;
              '&lt;TextBlock Name="TextBlock1" Text="0" Height="23" Margin="195,39,0,0"  
              '        ///      HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="24" FontFamily="Arial" /&gt;
              
              ' Clear out any existing layers.
              Map1.Layers.Clear()
              
              ' Add an ArcGISTiledMapsServiceLayer to the Map.
              Dim myArcGISTiledMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              Map1.Layers.Add(myArcGISTiledMapServiceLayer)
              
              ' Set the initial Extent of the Map (the African Continent).
              Dim myEnvelope As New ESRI.ArcGIS.Client.Geometry.Envelope
              myEnvelope.XMin = -34.45
              myEnvelope.YMin = -46.05
              myEnvelope.XMax = 71.01
              myEnvelope.YMax = 59.41
              Map1.Extent = myEnvelope
              
              ' Create a circle geometric object and use it to Clip the viewable extent of the Map control.
              Dim myEllipse As New System.Windows.Media.EllipseGeometry
              myEllipse.Center = New System.Windows.Point(150, 150)
              myEllipse.RadiusX = 150
              myEllipse.RadiusY = 150
              Map1.Clip = myEllipse
              
              ' Define the Slider's Minimum and Maximum values. 
              ' This will define the upper and lower constraints for the Map's Rotation.
              Slider1.Minimum = -360
              Slider1.Maximum = 360
              
              ' Bind the Value from the Slider to the Map's RotationProperty.
              ' This will update the Map's Rotation value automatically as the Slider moves.
              Dim myBinding2 As System.Windows.Data.Binding = New System.Windows.Data.Binding("Value")
              myBinding2.Mode = System.Windows.Data.BindingMode.OneWay
              myBinding2.ElementName = "Slider1"
              Map1.SetBinding(ESRI.ArcGIS.Client.Map.RotationProperty, myBinding2)
              
              ' Bind the Value from the Slider to the TextBlock's TextProperty.
              ' This will update the TextBlocks Text value automatically as the Slider moves.
              Dim myBinding3 As System.Windows.Data.Binding = New System.Windows.Data.Binding("Value")
              myBinding3.Mode = System.Windows.Data.BindingMode.OneWay
              myBinding3.ElementName = "Slider1"
              TextBlock1.SetBinding(TextBlock.TextProperty, myBinding3)
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.SnapToLevels">
            <summary>
            Gets or sets whether zooming will snap to scale levels if the map 
            contains cached layers.
            </summary>
            <remarks>
            SnapToLevels is off by default and will allow you to zoom to any
            <see cref="P:ESRI.ArcGIS.Client.Map.Resolution"/>. Tiled layers will automatically interpolate
            images when displaying layers at resolutions in between levels.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.IsLogoVisible">
            <summary>
            Gets or sets the whether the ESRI logo is displayed on the map. The default is True, meaning the logo is visible.
            </summary>
            <remarks>
            <para>
            If the Map contains Microsoft Bing layers, a Bing Maps logo will also be displayed. The IsLogoVisible also 
            controls the visibility of the Bing logo, just like the ESRI logo. For more information about developing with 
            Bing maps see the 
            <a href="http://msdn.microsoft.com/en-us/library/cc980922.aspx" target="_blank">Bing Maps SOAP Services</a> 
            for more information.
            </para>
            <para>
            The following screen shot shows two Map controls, one with the IsLogoVisible = True (the default) and the 
            other with the IsLogoVisible = False (no logo being shown).
            </para>
            <para>
              <img border="0" alt="Comparison of two Map Controls showing the IsLogoVisble being true and false." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.IsLogoVisible.png"/>
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
                    
              &lt;!--
              Add an ArcGISTiledMapsServiceLayer to the Map.
              Set the IsLogoVisible = False, meaning the logo will not display.
              --&gt;
              &lt;esri:Map Name="Map1" Height="300" Width="300" HorizontalAlignment="Left" VerticalAlignment="Top"
                    IsLogoVisible="False"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
              &lt;/esri:Map&gt;
                      
              &lt;!--
              Display the Map's IsLogoVisible Property in a TextBlock.
              --&gt;
              &lt;TextBlock Name="TextBlock_IsLogoVisible" Height="23" HorizontalAlignment="Left" Margin="306,12,0,0"  
                         Text="{Binding ElementName=Map1, Path=IsLogoVisible}" VerticalAlignment="Top" /&gt;
            &lt;/Grid&gt;
            </code>
                
            <code title="Example CS1" description="" lang="CS">
            // A Map Control (named myMap) was previously added in to the project either in XAML or code-behind.
            
            public void SetLogoVisibleFalse(ESRI.ArcGIS.Client.Map myMap)
            {
              
              // Clear out any existing layers.
              myMap.Layers.Clear();
              
              // Add an ArcGISTiledMapsServiceLayer to the Map.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              myMap.Layers.Add(myArcGISTiledMapServiceLayer);
              
              // Hide the Map Logo.
              myMap.IsLogoVisible = false;
              
            }
            
            public void GetIsLogoVisible(ESRI.ArcGIS.Client.Map myMap)
            {
              
              // IsLogoVisible (Read/Write)
              bool myBoolean = myMap.IsLogoVisible;
              string myString = null;
              if (myBoolean == true)
              {
                myString = "The Map logo is visible.";
              }
              else
              {
                myString = "The Map logo is invisible.";
              }
              System.Windows.MessageBox.Show(myString);
              
            }
            </code>
                
            <code title="Example VB1" description="" lang="VB.NET">
            ' A Map Control (named myMap) was previously added in to the project either in XAML or code-behind.
            
            Public Sub SetLogoVisibleFalse(ByVal myMap As ESRI.ArcGIS.Client.Map)
              
              ' Clear out any existing layers.
              myMap.Layers.Clear()
              
              ' Add an ArcGISTiledMapsServiceLayer to the Map.
              Dim myArcGISTiledMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              myMap.Layers.Add(myArcGISTiledMapServiceLayer)
              
              ' Hide the Map Logo.
              myMap.IsLogoVisible = False
              
            End Sub
            
            Public Sub GetIsLogoVisible(ByVal myMap As ESRI.ArcGIS.Client.Map)
              
              ' IsLogoVisible (Read/Write)
              Dim myBoolean As Boolean = myMap.IsLogoVisible
              Dim myString As String = Nothing
              If myBoolean = True Then
                myString = "The Map logo is visible."
              Else
                myString = "The Map logo is invisible."
              End If
              System.Windows.MessageBox.Show(myString)
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.SpatialReference">
            <summary>
            Gets the spatial reference of the Map Class. Note: this Property is ReadOnly.
            </summary>
            <remarks>
            <para>
            The spatial reference is a combination of an ellipsoid, datum, and a coordinate system used to display 
            geographic data of the three dimensional Earth on a two dimensional surface (such as a piece of paper 
            of computer monitor). A good article for describing how a spatial reference works can be found 
            <a href="http://www.sharpgis.net/post/2007/05/Spatial-references2c-coordinate-systems2c-projections2c-datums2c-ellipsoids-e28093-confusing.aspx" target="_blank">here</a>.
            </para>
            <para>
            The SpatialReference is determined by the first layer in the Map that has this property set. When more 
            than one layer is added to a Map, all subsequent layers (if they support re-projection on-the-fly from 
            ArcGIS Server) are re-projected to the same SpatialReference as the first layer so that the spatial 
            data overlays properly. The following diagram shows for each layer type whether its SpatialReference can 
            be re-projected or not:
            </para>
            <para>
              <img border="0" alt="SpatialReference projection status for various layer types." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.SpatialReference.png"/>
            </para>
            <para>
            The SpatialReference of the Map can be overridden (meaning that you can set the Map.SpatialReference) by 
            explicitly setting the <see cref="P:ESRI.ArcGIS.Client.Map.Extent">Map.Extent</see> Property with an 
            Envelope that has an <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">Envelope.SpatialReference</see> 
            defined. Initializing a Map’s SpatialReference via the Map.Extent Property has to be done before any layers 
            will be added to the Map. Once the SpatialReference of a Map has been set and the layers have been loaded, 
            the SpatialReference can no longer be changed. If you need to change SpatialReference on the fly, you can 
            instead create a new Map instance, move the layers to this Map, and replace the previous Map instance.
            </para>
            <para>
            Tiled map services (specifically: 
            <see cref="T:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer">ArcGISTiledMapServiceLayer</see> and 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer">Client.Toolkit.DataSources.OpenStreetMapLayer</see>) 
            do not support on-the-fly re-projection, and will not be displayed if the Map.SpatialReference does not match the 
            tiled map service SpatialReference.  Since tiled map services are typically the first layer in a Map to serve as 
            a base layer for other layers to draw on top of, the tiled map service layer often becomes the default 
            SpatialReference for the Map.
            </para>
            <para>
            If a layer is added to the Map and that layer’s SpatialReference does not match the Map.SpatialReference and 
            it is not possible for that layer to be re-projected on the fly, then that layer will not display in the Map. 
            </para>
            <para>
            A listing of the well-known SpatialReference WKID Integer and WKT String values are available for 
            <a href="http://help.arcgis.com/en/webapi/javascript/arcgis/help/jshelp/pcs.htm" target="_blank">Projected Coordinate Systems</a> 
            and <a href="http://help.arcgis.com/en/webapi/javascript/arcgis/help/jshelp/gcs.htm" target="_blank">Geographic Coordinate Systems</a>.
            </para>
            <para>
            <b>Performance Tip:</b> By default, the Map Control will not render until all layers have been initialized. This 
            process ensures that the Map will start up at the full Extent of all layers and use the preferred SpatialReference 
            discovered at runtime.  However, if you have many layers in your Map or if one layer takes a while to initialize, 
            users may have wait a significant amount of time to see the first Map. To improve startup time of the Map Control 
            define the initial <see cref="P:ESRI.ArcGIS.Client.Map.Extent">Map.Extent</see> including its SpatialReference. 
            Then the Map will not need to discover this information at runtime and as a result individual layers will start 
            loading as soon as they initialize.
            </para>
            <para>
            The following screen shot shows three different Map Controls that have the same layers added to each Map but 
            have dramatically different drawing results because of having different Map.SpatialReference values set. 
            Each Map has its Extent set to approximately to the same geographic area of coverage given the different 
            SpatialReference’s of the layers. The layers being added to each Map Control, in drawing order, are:
            </para>
            <list type="number">
            <item>ArcGISTiledMapServiceLayer with a SpatialReference WKID = 4326</item>
            <item>ArcGISDynamicMapServiceLayer with a SpatialReference WKID = 4269</item>
            <item>ArcGISDynamicMapServiceLayer with a SpatialReference WKID = 102113</item>
            </list>
            <para>
            Map1 displays all three layers without any problem. The ArcGISTiledMapServiceLayer (1) automatically sets the 
            default Map.SpatialReference (WKID = 4326) value and the other layers (2 and 3) have their SpatialReference 
            re-projected on-the-fly by ArcGIS Server.<br></br>
            Map2 only displays layers 2 and 3 (the ArcGISDynamicMapServiceLayer’s) because the Map.SpatialReference 
            (WKID = 4269) has been set manually to something that is different than what the 
            ArcGISTiledMapServiceLayer.SpatialReference is.<br></br>
            Similarly, Map3 only displays layers 2 and 3 (the ArcGISDynamicMapServiceLayer’s) because the Map.SpatialReference 
            (WKID = 102113) has been set manually to something that is different than what the 
            ArcGISTiledMapServiceLayer.SpatialReference is.<br></br>
            The screen shot matches the code examples provided in this document.<br></br>
            </para>
            <para>
              <img border="0" alt="Example of three different Map.SpatialReference for the same layers." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Map.SpatialRefernce2.png"/>
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
            	       
              &lt;!--
              Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's
              Layers Collection is on the bottom and the other Layers are added on the top. 
              The ArcGISTiledMapServiceLayer.SpatialReference.WKID = 4326.
            	  
              IMPORTANT:
              No SpatialReference will be explicitly set via code-behind. The SpatialReference of the Map will automatically
              default to the ArcGISTiledMapServiceLayer.
            	  
              Zoom to a specific extent
            	  
              Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 4269.
              Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4326
            	  
              Add a second ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 102113.
              Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4326
              --&gt;
              &lt;esri:Map Background="White" Margin="12,238,538,12" Name="map1" Height="250" Width="250"&gt;
                &lt;esri:Map.Extent &gt;
                  &lt;esri:Envelope XMin="-96.96" YMin="40.53" XMax="-96.38" YMax="41.11"/&gt;
                &lt;/esri:Map.Extent&gt;
                &lt;esri:LayerCollection&gt;
                  &lt;esri:ArcGISTiledMapServiceLayer Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                  &lt;esri:ArcGISDynamicMapServiceLayer Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer"/&gt;
                  &lt;esri:ArcGISDynamicMapServiceLayer Url="http://serverapps.esri.com/ArcGIS/rest/services/Crime2008/MapServer"/&gt;
                &lt;/esri:LayerCollection&gt;
              &lt;/esri:Map&gt;
            	  
              &lt;!--
              Manually change the Map.SpatialReference to WKID = 4269 by setting an initial Map.Extent where
              the Envelope has a defined SpatialReference.
            	  
              Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's
              Layers Collection is on the bottom and the other Layers are added on the top.
              The ArcGISTiledMapServiceLayer.SpatialReference.WKID = 4326.
            	  
              IMPORTANT:
              Because the myArcGISTiledMapServiceLayer is a tiled layer it cannot be re-projected. This means that even
              though the myArcGISTiledMapServiceLayer is added as a layer to the map, it will not display.
            	  
              Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 4269.
              Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4269
            	  
              Add a second ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 102113.
              Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4269
              --&gt;
              &lt;esri:Map Background="White" Margin="276,238,274,12" Name="map2" Height="250" Width="250"&gt;
                &lt;esri:Map.Extent &gt;
                  &lt;esri:Envelope XMin="-96.96" YMin="40.53" XMax="-96.38" YMax="41.11"&gt;
                    &lt;esri:Envelope.SpatialReference&gt;
                      &lt;esri:SpatialReference WKID="4269"/&gt;
                    &lt;/esri:Envelope.SpatialReference&gt;
                  &lt;/esri:Envelope&gt;
                &lt;/esri:Map.Extent&gt;
                &lt;esri:LayerCollection&gt;
                  &lt;esri:ArcGISTiledMapServiceLayer Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                  &lt;esri:ArcGISDynamicMapServiceLayer Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer"/&gt;
                  &lt;esri:ArcGISDynamicMapServiceLayer Url="http://serverapps.esri.com/ArcGIS/rest/services/Crime2008/MapServer"/&gt;
                &lt;/esri:LayerCollection&gt;
              &lt;/esri:Map&gt;
            	          
              &lt;!--
              Manually change the Map.SpatialReference to WKID = 102113 by setting an intial Map.Extent where
              the Envelope has a defined SpatialReference.
            	          
              Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's
              Layers Collection is on the bottom and the other Layers are added on the top.
              The ArcGISTiledMapServiceLayer.SpatialReference.WKID = 4326.
            	  
              IMPORTANT:
              Because the myArcGISTiledMapServiceLayer is a tiled layer it cannot be re-projected. This means tha even
              though the myArcGISTiledMapServiceLayer is added as a layer to the map, it will not display.
            	          
              Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 4269.
              Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4326
            	  
              Add a second ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 102113.
              Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4326
              --&gt;
              &lt;esri:Map Background="White" Height="250" Margin="540,238,10,12" Name="map3" Width="250"&gt;
                &lt;esri:Map.Extent &gt;
                  &lt;esri:Envelope XMin="-10797321" YMin="4950149" XMax="-10734765" YMax="5012706"&gt;
                    &lt;esri:Envelope.SpatialReference&gt;
                      &lt;esri:SpatialReference WKID="102113"/&gt;
                    &lt;/esri:Envelope.SpatialReference&gt;
                  &lt;/esri:Envelope&gt;
                &lt;/esri:Map.Extent&gt;
                &lt;esri:LayerCollection&gt;
                  &lt;esri:ArcGISTiledMapServiceLayer Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                  &lt;esri:ArcGISDynamicMapServiceLayer Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer"/&gt;
                  &lt;esri:ArcGISDynamicMapServiceLayer Url="http://serverapps.esri.com/ArcGIS/rest/services/Crime2008/MapServer"/&gt;
                &lt;/esri:LayerCollection&gt;
              &lt;/esri:Map&gt;
            	  
            &lt;/Grid&gt;
            </code>
                
            <code title="Example CS1" description="" lang="CS">
            public void DrawWKID4326(ESRI.ArcGIS.Client.Map myMap)
            {
            	  
              // Clear out any existing layers
              myMap.Layers.Clear();
            	  
              // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's
              // Layers Collection is on the bottom and the other Layers are added on the top. 
              // The ArcGISTiledMapServiceLayer.SpatialReference.WKID = 4326.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              myMap.Layers.Add(myArcGISTiledMapServiceLayer1);
            	  
              // IMPORTANT:
              // No SpatialReference will be explicitly set via code-behind. The SpatialReference of the Map will automatically
              // default to the ArcGISTiledMapServiceLayer.
            	  
              // Zoom to a specific extent
              ESRI.ArcGIS.Client.Geometry.Envelope forcedEnvelope = new ESRI.ArcGIS.Client.Geometry.Envelope(-96.96, 40.53, -96.38, 41.11);
              myMap.Extent = forcedEnvelope;
            	  
              // Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 4269.
              // Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4326
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer();
              myArcGISDynamicMapServiceLayer1.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer";
              myMap.Layers.Add(myArcGISDynamicMapServiceLayer1);
            	  
              // Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 102113.
              // Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4326
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer();
              myArcGISDynamicMapServiceLayer2.Url = "http://serverapps.esri.com/ArcGIS/rest/services/Crime2008/MapServer";
              myMap.Layers.Add(myArcGISDynamicMapServiceLayer2);
            	  
            }
            	  
            public void DrawWKID4269(ESRI.ArcGIS.Client.Map myMap)
            {
            	  
              // Clear out any existing layers
              myMap.Layers.Clear();
            	  
              // Manually change the Map.SpatialReference to WKID = 4269 by setting an initial Map.Extent where
              // the Envelope has a defined SpatialReference.
              ESRI.ArcGIS.Client.Geometry.SpatialReference forcedSpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(4269);
              ESRI.ArcGIS.Client.Geometry.Envelope forcedEnvelope = new ESRI.ArcGIS.Client.Geometry.Envelope(-96.96, 40.53, -96.38, 41.11);
              forcedEnvelope.SpatialReference = forcedSpatialReference;
              myMap.Extent = forcedEnvelope;
            	  
              // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's
              // Layers Collection is on the bottom and the other Layers are added on the top.
              // The ArcGISTiledMapServiceLayer.SpatialReference.WKID = 4326.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              myMap.Layers.Add(myArcGISTiledMapServiceLayer1);
            	  
              // IMPORTANT:
              // Because the myArcGISTiledMapServiceLayer is a tiled layer it cannot be re-projected. This means that even
              // though the myArcGISTiledMapServiceLayer is added as a layer to the map, it will not display.
            	  
              // Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 4269.
              // Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4269
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer();
              myArcGISDynamicMapServiceLayer1.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer";
              myMap.Layers.Add(myArcGISDynamicMapServiceLayer1);
            	  
              // Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 102113.
              // Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4269
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer();
              myArcGISDynamicMapServiceLayer2.Url = "http://serverapps.esri.com/ArcGIS/rest/services/Crime2008/MapServer";
              myMap.Layers.Add(myArcGISDynamicMapServiceLayer2);
            	  
            }
            	  
            public void DrawWKID102113(ESRI.ArcGIS.Client.Map myMap)
            {
            	  
              // Clear out any existing layers
              myMap.Layers.Clear();
            	  
              // Manually change the Map.SpatialReference to WKID = 102113 by setting an initial Map.Extent where
              // the Envelope has a defined SpatialReference.
              ESRI.ArcGIS.Client.Geometry.SpatialReference forcedSpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(102113);
              ESRI.ArcGIS.Client.Geometry.Envelope forcedEnvelope = new ESRI.ArcGIS.Client.Geometry.Envelope(-10797321, 4950149, -10734765, 5012706);
              forcedEnvelope.SpatialReference = forcedSpatialReference;
              myMap.Extent = forcedEnvelope;
            	  
              // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's
              // Layers Collection is on the bottom and the other Layers are added on the top.
              // The ArcGISTiledMapServiceLayer.SpatialReference.WKID = 4326.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              myMap.Layers.Add(myArcGISTiledMapServiceLayer1);
            	  
              // IMPORTANT:
              // Because the myArcGISTiledMapServiceLayer is a tiled layer it cannot be re-projected. This means that even
              // though the myArcGISTiledMapServiceLayer is added as a layer to the map, it will not display.
            	  
              // Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 4269.
              // Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 102113
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer();
              myArcGISDynamicMapServiceLayer1.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer";
              myMap.Layers.Add(myArcGISDynamicMapServiceLayer1);
            	  
              // Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 102113.
              // Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 102113
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer();
              myArcGISDynamicMapServiceLayer2.Url = "http://serverapps.esri.com/ArcGIS/rest/services/Crime2008/MapServer";
              myMap.Layers.Add(myArcGISDynamicMapServiceLayer2);
            	  
            }
            </code>
                
            <code title="Example VB1" description="" lang="VB.NET">
            Public Sub DrawWKID4326(ByVal myMap As ESRI.ArcGIS.Client.Map)
            	  
              ' Clear out any existing layers
              myMap.Layers.Clear()
            	  
              ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's
              ' Layers Collection is on the bottom and the other Layers are added on the top. 
              ' The ArcGISTiledMapServiceLayer.SpatialReference.WKID = 4326.
              Dim myArcGISTiledMapServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              myMap.Layers.Add(myArcGISTiledMapServiceLayer1)
            	  
              ' IMPORTANT:
              ' No SpatialReference will be explicitly set via code-behind. The SpatialReference of the Map will automatically
              ' default to the ArcGISTiledMapServiceLayer.
            	  
              ' Zoom to a specific extent
              Dim forcedEnvelope As New ESRI.ArcGIS.Client.Geometry.Envelope(-96.96, 40.53, -96.38, 41.11)
              myMap.Extent = forcedEnvelope
            	  
              ' Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 4269.
              ' Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4326
              Dim myArcGISDynamicMapServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer1.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer"
              myMap.Layers.Add(myArcGISDynamicMapServiceLayer1)
            	  
              ' Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 102113.
              ' Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4326
              Dim myArcGISDynamicMapServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer2.Url = "http://serverapps.esri.com/ArcGIS/rest/services/Crime2008/MapServer"
              myMap.Layers.Add(myArcGISDynamicMapServiceLayer2)
            	  
            End Sub
            	  
            Public Sub DrawWKID4269(ByVal myMap As ESRI.ArcGIS.Client.Map)
            	  
              ' Clear out any existing layers
              myMap.Layers.Clear()
            	  
              ' Manually change the Map.SpatialReference to WKID = 4269 by setting an initial Map.Extent where
              ' the Envelope has a defined SpatialReference.
              Dim forcedSpatialReference As New ESRI.ArcGIS.Client.Geometry.SpatialReference(4269)
              Dim forcedEnvelope As New ESRI.ArcGIS.Client.Geometry.Envelope(-96.96, 40.53, -96.38, 41.11)
              forcedEnvelope.SpatialReference = forcedSpatialReference
              myMap.Extent = forcedEnvelope
            	  
              ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's
              ' Layers Collection is on the bottom and the other Layers are added on the top.
              ' The ArcGISTiledMapServiceLayer.SpatialReference.WKID = 4326.
              Dim myArcGISTiledMapServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              myMap.Layers.Add(myArcGISTiledMapServiceLayer1)
            	  
              ' IMPORTANT:
              ' Because the myArcGISTiledMapServiceLayer is a tiled layer it cannot be re-projected. This means that even
              ' though the myArcGISTiledMapServiceLayer is added as a layer to the map, it will not display.
            	  
              ' Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 4269.
              ' Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4269
              Dim myArcGISDynamicMapServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer1.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer"
              myMap.Layers.Add(myArcGISDynamicMapServiceLayer1)
            	  
              ' Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 102113.
              ' Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 4269
              Dim myArcGISDynamicMapServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer2.Url = "http://serverapps.esri.com/ArcGIS/rest/services/Crime2008/MapServer"
              myMap.Layers.Add(myArcGISDynamicMapServiceLayer2)
            	  
            End Sub
            	  
            Public Sub DrawWKID102113(ByVal myMap As ESRI.ArcGIS.Client.Map)
            	  
              ' Clear out any existing layers
              myMap.Layers.Clear()
            	  
              ' Manually change the Map.SpatialReference to WKID = 102113 by setting an intial Map.Extent where
              ' the Envelope has a defined SpatialReference.
              Dim forcedSpatialReference As New ESRI.ArcGIS.Client.Geometry.SpatialReference(102113)
              Dim forcedEnvelope As New ESRI.ArcGIS.Client.Geometry.Envelope(-10797321, 4950149, -10734765, 5012706)
              forcedEnvelope.SpatialReference = forcedSpatialReference
              myMap.Extent = forcedEnvelope
            	  
              ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's
              ' Layers Collection is on the bottom and the other Layers are added on the top.
              ' The ArcGISTiledMapServiceLayer.SpatialReference.WKID = 4326.
              Dim myArcGISTiledMapServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              myMap.Layers.Add(myArcGISTiledMapServiceLayer1)
            	  
              ' IMPORTANT:
              ' Because the myArcGISTiledMapServiceLayer is a tiled layer it cannot be re-projected. This means tha even
              ' though the myArcGISTiledMapServiceLayer is added as a layer to the map, it will not display.
            	  
              ' Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 4269.
              ' Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 102113
              Dim myArcGISDynamicMapServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer1.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer"
              myMap.Layers.Add(myArcGISDynamicMapServiceLayer1)
            	  
              ' Add a ArcGISDynamicMapServiceLayer with an initial SpatialReference.WKID = 102113.
              ' Note: ArcGIS Server will automatically re-project the ArcGISDynamicMapServiceLayer.SpatialReference.WKID to 102113
              Dim myArcGISDynamicMapServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer2.Url = "http://serverapps.esri.com/ArcGIS/rest/services/Crime2008/MapServer"
              myMap.Layers.Add(myArcGISDynamicMapServiceLayer2)
            	  
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.Extent">
            <summary>
            Get or set the extent that layers are viewed at in the Map Control.
            </summary>
            <remarks>
            <para>
            If no layer has been added to the Map then the Extent will be Nothing/null.
            </para>
            <para>
            The order of the parameters in the string for the Map.Extent of XAML is: "XMin, YMin, XMax, YMax". In the 
            following XAML code fragment the Envelope properties for setting the Extent are XMin=-130, YMin=5, XMax=-70, 
            YMax=65:<br></br>
              &lt;esri:Map Name="Map1" Extent="-130,5,-70,65" /&gt;
            </para>
            <para>
            When setting the Extent Property prior to the adding layers to the Map, you can specify an Envelope 
            as the Extent. However, after the Map has loaded, the 
            <see cref="P:ESRI.ArcGIS.Client.Map.SpatialReference">Map.SpatialReference</see> must match the 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">Envelope.SpatialReference</see>. To see a code 
            example of how to set the SpatialReference of a Map by setting the 
            <see cref="P:ESRI.ArcGIS.Client.Map.Extent">Map.Extent</see> Property see the 
            <see cref="P:ESRI.ArcGIS.Client.Map.SpatialReference">Map.SpatialReference</see> documentation.
            </para>
            <para>
            To automatically preserve the Extent of the Map as the size of the Map Control changes (for instance: resizing 
            the browser window and having the Map Control adjust it size accordingly) consider using the 
            <see cref="T:ESRI.ArcGIS.Client.Behaviors.MaintainExtentBehavior">Client.Behaviors.MaintainExtentBehavior</see> Class.
            </para>
            <para>
            To see a practical example of using the getter for the Extent Property to zoom in and center the layers in a Map 
            based upon a user click of the mouse, see the 
            <see cref="M:ESRI.ArcGIS.Client.Map.ZoomToResolution(System.Double,ESRI.ArcGIS.Client.Geometry.MapPoint)">ZoomToResolution(Double, MapPoint)</see> Method.
            </para>
            <para>
            An example using the Extent of a Layer to adjust the Map.Extent can be found by in the 
            <see cref="M:ESRI.ArcGIS.Client.Map.ZoomTo(ESRI.ArcGIS.Client.Geometry.Geometry)">Map.ZoomTo</see> Method documentation.
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
              
              &lt;!--
              Add an ArcGISTiledMapsServiceLayer to the Map.
              Set the initial Extent of the Map (Continental US).
              --&gt;
              &lt;esri:Map Name="Map1" Height="300" Width="300" HorizontalAlignment="Left" VerticalAlignment="Top"
                    Extent="-130,5,-70,65"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
              &lt;/esri:Map&gt;
              
              &lt;!--
              Display the Map's Extent Properties in TextBlocks.
              --&gt;
              &lt;TextBlock Name="TextBlock_XMin" Height="23" HorizontalAlignment="Left" Margin="306,42,0,0"  
                         Text="{Binding ElementName=Map1, Path=Extent.XMin}" VerticalAlignment="Top" /&gt;
              &lt;TextBlock Name="TextBlock_YMin" Height="23" HorizontalAlignment="Left" Margin="306,63,0,0"  
                         Text="{Binding ElementName=Map1, Path=Extent.YMin}" VerticalAlignment="Top" /&gt;
              &lt;TextBlock Name="TextBlock_XMax" Height="23" HorizontalAlignment="Left" Margin="306,83,0,0"  
                         Text="{Binding ElementName=Map1, Path=Extent.XMax}" VerticalAlignment="Top" /&gt;
              &lt;TextBlock Name="TextBlock_YMax" Height="23" HorizontalAlignment="Left" Margin="306,101,0,0"  
                         Text="{Binding ElementName=Map1, Path=Extent.YMax}" VerticalAlignment="Top" /&gt;
             &lt;/Grid&gt;
            </code>
                
            <code title="Example CS1" description="" lang="CS">
            // A Map Control (named myMap) was previously added in to the project either in XAML or code-behind.
            
            public void SetExtent(ESRI.ArcGIS.Client.Map myMap)
            {
              
              // Clear out any existing layers.
              myMap.Layers.Clear();
              
              // Add an ArcGISTiledMapsServiceLayer to the Map.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              myMap.Layers.Add(myArcGISTiledMapServiceLayer);
              
              // Set the initial Extent of the Map (Continental US).
              ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope = new ESRI.ArcGIS.Client.Geometry.Envelope();
              myEnvelope.XMin = -130;
              myEnvelope.YMin = 5;
              myEnvelope.XMax = -70;
              myEnvelope.YMax = 65;
              myMap.Extent = myEnvelope;
              
            }
              
            public void GetExtent(ESRI.ArcGIS.Client.Map mymap)
            {
              
              // Extent (Read/Write)
              // Returns Nothing/null if no layers added to Map.
              ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope = new ESRI.ArcGIS.Client.Geometry.Envelope();
              myEnvelope = mymap.Extent;
              
              // Return the Map.Extent in a MessageBox
              string myString = null;
              if (myEnvelope != null)
              {
                  myString = "The Map.Extent is:" + System.Environment.NewLine + "XMin: " + mymap.Extent.XMin.ToString() + System.Environment.NewLine + "YMin: " + mymap.Extent.YMin.ToString() + System.Environment.NewLine + "XMax: " + mymap.Extent.XMax.ToString() + System.Environment.NewLine + "YMax:" + mymap.Extent.YMax.ToString();
              }
              else
              {
                  myString = "No Map.Extent set.";
              }
              System.Windows.MessageBox.Show(myString);
            }
            </code>
                
            <code title="Example VB1" description="" lang="VB.NET">
            ' A Map Control (named myMap) was previously added in to the project either in XAML or code-behind.
            
            Public Sub SetExtent(ByVal myMap As ESRI.ArcGIS.Client.Map)
              
              ' Clear out any existing layers.
              myMap.Layers.Clear()
              
              ' Add an ArcGISTiledMapsServiceLayer to the Map.
              Dim myArcGISTiledMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              myMap.Layers.Add(myArcGISTiledMapServiceLayer)
              
              ' Set the initial Extent of the Map (Continental US).
              Dim myEnvelope As New ESRI.ArcGIS.Client.Geometry.Envelope
              myEnvelope.XMin = -130
              myEnvelope.YMin = 5
              myEnvelope.XMax = -70
              myEnvelope.YMax = 65
              myMap.Extent = myEnvelope
              
            End Sub
              
            Public Sub GetExtent(ByVal mymap As ESRI.ArcGIS.Client.Map)
              
              ' Extent (Read/Write)
              ' Returns Nothing/null if no layers added to Map.
              Dim myEnvelope As New ESRI.ArcGIS.Client.Geometry.Envelope
              myEnvelope = mymap.Extent
              
              ' Return the Map.Extent in a MessageBox
              Dim myString As String = Nothing
              If myEnvelope IsNot Nothing Then
                  myString = "The Map.Extent is:" + vbCrLf + _
                  "XMin: " + mymap.Extent.XMin.ToString + vbCrLf + _
                  "YMin: " + mymap.Extent.YMin.ToString + vbCrLf + _
                  "XMax: " + mymap.Extent.XMax.ToString + vbCrLf + _
                  "YMax:" + mymap.Extent.YMax.ToString
              Else
                  myString = "No Map.Extent set."
              End If
              System.Windows.MessageBox.Show(mystring)
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.TimeExtent">
            <summary>
            Gets or sets the time extent to limit the data in.
            </summary>
            <remarks>This property only applies if the service supports time data and the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent"/> is populated.</remarks>
            <value>The time interval.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.WrapAround">
            <summary>
            Gets or sets a value indicating whether the map supports unbounded
            pan to the left and right.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
            <remarks>
            The map only supports wrap around when using WebMercator or WGS84 geographic (SRID 4326)
            projections. This property is ignored when using other spatial references.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.WrapAroundIsActive">
            <summary>
            Gets a value indicating whether the map is currently in WrapAround mode.
            </summary>
            <value><c>true</c> if the map's <see cref="P:ESRI.ArcGIS.Client.Map.WrapAround"/> property is <c>true</c> and the spatial reference supports Wrap Around; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Map.MouseEventArgs">
            <summary>
            Mouse event arguments
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.MouseEventArgs.MapPoint">
            <summary>
            Gets or sets the point on the map where the event was raised
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.MouseEventArgs.ScreenPoint">
            <summary>
            Gets or sets the screen point where the event was raised
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.MouseEventArgs.WheelDelta">
            <summary>
            Gets or sets the amount the mouse wheel was scrolled
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.MouseEventArgs.Handled">
            <summary>
            Gets or sets whether this event should continue to bubble.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Map.MapGestureEventArgs">
            <summary>
            Gesture event argument for touch gesture events.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.MapGestureEventArgs.DirectlyOver(System.Double,System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.GraphicsLayer})">
            <summary>
            Gets all graphics in the the provided <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>s that
            is under the gesture location.
            </summary>
            <param name="toleranceInPixels">The tolerance in pixels.</param>
            <param name="layers">GraphicsLayers to perform the hit test on.
            If a null value is specified, all graphics layers in the map is
            used.</param>
            <returns>Graphics under the specified point</returns>
            <remarks>
            Graphics are returned top-down with the topmost graphic returned first.
            </remarks>
            <seealso cref="M:ESRI.ArcGIS.Client.GraphicsLayer.FindGraphicsInHostCoordinates(System.Windows.Point)"/>
            <seealso cref="M:ESRI.ArcGIS.Client.GraphicsLayer.FindGraphicsInHostCoordinates(System.Windows.Rect)"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Map.MapGestureEventArgs.GetPosition(System.Windows.UIElement)">
            <summary>
            Returns the position of the mouse pointer relative to the specified element.
            </summary>
            <param name="relativeTo">The element to use as the frame of reference
            for calculating the position of the mouse pointer.</param>
            <returns>The x- and y-coordinates of the mouse pointer position 
            relative to the specified object.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.MapGestureEventArgs.Gesture">
            <summary>
            Gets the gesture type.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.MapGestureEventArgs.MapPoint">
            <summary>
            Gets the location on the map where the event was raised
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.MapGestureEventArgs.Handled">
            <summary>
            Gets whether this event should continue to bubble.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.MapGestureEventArgs.Translate">
            <summary>
            Gets the delta translation.
            </summary>
            <remarks>
            This value is only set if the user is dragging.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Map.MapGestureEventArgs.Scale">
            <summary>
            Gets the delta scale.
            </summary>
            <remarks>
            This value is only set if the user is doing a pinch or stretch.
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Map.RotationChangedEventHandler">
            <summary>
            Rotation Changed event handler
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol">
            <summary>
            Simple marker symbol
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.MarkerSymbol">
            <summary>
            Point Marker Symbol class
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.Symbol">
            <summary>
            Abstract Symbol class used by all Symbols
            </summary>
            <remarks>
            <para>
            The Symbol object is used to defined how to render a <see cref="T:ESRI.ArcGIS.Client.Graphic"/>
            in a <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>. The symbol mainly consists of a 
            <see cref="P:ESRI.ArcGIS.Client.Symbols.Symbol.ControlTemplate"/> and optionally a set of properties that can
            be bound into the template. A <see cref="T:ESRI.ArcGIS.Client.Graphic"/>'s <see cref="P:ESRI.ArcGIS.Client.Graphic.Geometry"/>
            type must match the symbol type. Ie. a <see cref="T:ESRI.ArcGIS.Client.Symbols.MarkerSymbol"/> for a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint"/> or 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.MultiPoint"/>, <see cref="T:ESRI.ArcGIS.Client.Symbols.FillSymbol"/> 
            for a <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/> and <see cref="T:ESRI.ArcGIS.Client.Symbols.LineSymbol"/> 
            for a <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline"/>.
            </para>
            <para><B>Custom templates:</B> Generally when you use custom templates
            you should be using the base <see cref="T:ESRI.ArcGIS.Client.Symbols.MarkerSymbol"/>, <see cref="T:ESRI.ArcGIS.Client.Symbols.FillSymbol"/>
            and <see cref="T:ESRI.ArcGIS.Client.Symbols.LineSymbol"/> types, and refrain from using the Simple* sub types
            such as <see cref="T:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol"/>, <see cref="T:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol"/>,
            and <see cref="T:ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol"/>.
            </para>
            <para>
            <see cref="T:ESRI.ArcGIS.Client.Symbols.FillSymbol"/> and <see cref="T:ESRI.ArcGIS.Client.Symbols.LineSymbol"/> are required to 
            have a <see cref="T:System.Windows.Shapes.Path"/> element with the name 
            "Element" at the root of the template. <see cref="T:ESRI.ArcGIS.Client.Symbols.MarkerSymbol"/> templates 
            however can be any type of <see cref="T:System.Windows.UIElement"/>, however to achieve
            the best performance when rendering many Graphics, it is best to have
            as few <see cref="T:System.Windows.UIElement"/>s in the template as possible, and try
            to share resources across multiple Graphics that uses the same symbol 
            (ie. share the same Brush in a static resource rather than create one 
            inside the template).
            </para>
            <para>
            <B>Example: Custom <see cref="T:ESRI.ArcGIS.Client.Symbols.MarkerSymbol"/> template:</B> The below
            example creates a square marker symbol with rounded corners 20x20 pixels.
            We use the <see cref="P:ESRI.ArcGIS.Client.Symbols.MarkerSymbol.OffsetX"/> and <see cref="P:ESRI.ArcGIS.Client.Symbols.MarkerSymbol.OffsetY"/>
            properties to center the symbol on top of the Graphic.<br/>
            <code lang="XAML">
            &lt;esriSymbols:MarkerSymbol OffsetX="10" OffsetY="10"&gt;
              &lt;esriSymbols:MarkerSymbol.ControlTemplate&gt;
                &lt;ControlTemplate&gt;
                  &lt;Border Width="20" Height="20" CornerRadius="3" 
                          BorderBrush="Black" BorderThickness="1" 
                          Background="Blue"&gt;
                    &lt;Image Source="myImage.png" /&gt;
                  &lt;/Border&gt;
                &lt;/ControlTemplate&gt;
              &lt;/esriSymbols:MarkerSymbol.ControlTemplate&gt;
            &lt;/esriSymbols:MarkerSymbol&gt;
            </code>
            </para>
            <para><B>Animating symbols using Visual States:</B> The control template 
            has two <see cref="T:System.Windows.VisualStateGroup"/>s that can be used in the custom 
            template. These <see cref="T:System.Windows.Media.Animation.Storyboard"/> 
            animations are automatically triggered when the user mouses over the 
            graphic or changes the <see cref="P:ESRI.ArcGIS.Client.Graphic.Selected"/> property.
            <b>Note:</b> The XAML System.Windows.VisualStateManager Class was newly added in the .NET Framework v4.0. If 
            you are running the .NET Framework v3.5 then you can download and Reference the 
            <a href="http://wpf.codeplex.com" target="_blank">WPFToolkit</a> on Codeplex to take advantage of
            the VisualStateManager Class.
            </para>
            <list type="table">  
            <listheader><term>Visual State Group</term><description>Visual States</description></listheader>  
            <item><term>CommonStates</term><description>Normal, MouseOver</description></item> 
            <item><term>SelectionStates</term><description>Unselected, Selected</description></item> 
            </list>
            <para>
            <B>Example: MarkerSymbol that becomes bigger when the user mouse-overs it:</B><br/>
            <code lang="XAML">
            &lt;ControlTemplate&gt;
              &lt;Ellipse x:Name="ellipse"
                     RenderTransformOrigin="0.5,0.5" 
                     Fill="{Binding Symbol.Color}"
                     Width="{Binding Symbol.Size}"
                     Height="{Binding Symbol.Size}" &gt;
                &lt;VisualStateManager.VisualStateGroups&gt;
                  &lt;VisualStateGroup x:Name="CommonStates"&gt;
                    &lt;VisualState x:Name="Normal"&gt;
                      &lt;Storyboard&gt;
                        &lt;DoubleAnimation BeginTime="00:00:00" Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="1" Duration="0:0:0.1" /&gt;
                        &lt;DoubleAnimation BeginTime="00:00:00" Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="1" Duration="0:0:0.1" /&gt;
                      &lt;/Storyboard&gt;
                    &lt;/VisualState&gt;
                    &lt;VisualState x:Name="MouseOver"&gt;
                      &lt;Storyboard&gt;
                        &lt;DoubleAnimation BeginTime="00:00:00" Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="1.25" Duration="0:0:0.1" /&gt;
                        &lt;DoubleAnimation BeginTime="00:00:00" Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="1.25" Duration="0:0:0.1" /&gt;
                      &lt;/Storyboard&gt;
                    &lt;/VisualState&gt;
                  &lt;/VisualStateGroup&gt;
                &lt;/VisualStateManager.VisualStateGroups&gt;
                &lt;Ellipse.RenderTransform&gt;
                  &lt;ScaleTransform ScaleX="1" ScaleY="1" /&gt;
                &lt;/Ellipse.RenderTransform&gt;
              &lt;/Ellipse&gt;
            &lt;/ControlTemplate&gt;
            </code>
            <B>Example: FillSymbol that changes it's fill color when it becomes selected:</B><br/>
            <code lang="XAML">
            &lt;ControlTemplate&gt;
              &lt;Path x:Name="Element"
                         Stroke="Black"
                         StrokeStartLineCap="Round"
                         StrokeThickness="2"
                         StrokeLineJoin="Round"
                         StrokeEndLineCap="Round"
                         Fill="Blue"
                &lt;VisualStateManager.VisualStateGroups&gt;
                  &lt;VisualStateGroup x:Name="SelectionStates"&gt;
                    &lt;VisualState x:Name="Unselected" /&gt;
                    &lt;VisualState x:Name="Selected"&gt;
                      &lt;Storyboard&gt;
                        &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetName="Element"
                                                   Storyboard.TargetProperty="Fill"&gt;
                          &lt;DiscreteObjectKeyFrame KeyTime="0:0:0"&gt;
                            &lt;DiscreteObjectKeyFrame.Value&gt;
                              &lt;SolidColorBrush Color="Cyan" /&gt;
                            &lt;/DiscreteObjectKeyFrame.Value&gt;
                          &lt;/DiscreteObjectKeyFrame&gt;
                        &lt;/ObjectAnimationUsingKeyFrames&gt;
                      &lt;/Storyboard&gt;
                    &lt;/VisualState&gt;
                  &lt;/VisualStateGroup&gt;
                &lt;/VisualStateManager.VisualStateGroups&gt;
              &lt;/Path&gt;        
            &lt;/ControlTemplate&gt;
            </code>
            </para>
            </remarks>
            <seealso cref="T:ESRI.ArcGIS.Client.Symbols.FillSymbol"/>
            <seealso cref="T:ESRI.ArcGIS.Client.Symbols.LineSymbol"/>
            <seealso cref="T:ESRI.ArcGIS.Client.Symbols.MarkerSymbol"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.Symbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Symbols.Symbol"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.Symbol.ControlTemplateProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.Symbol.ControlTemplate"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.Symbol.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.Symbol.FromJson(System.String)">
            <summary>
            Creates a Symbol from a string in JSON format.
            </summary>
            <param name="json">The Symbol JSON.</param>
            <returns>The deserialized Symbol.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.Symbol.ControlTemplate">
            <summary>
            Gets or sets the control template used for this symbol.
            </summary>
            <value>The control template.</value>
            <remarks>
            <para>The control template has two <see cref="T:System.Windows.VisualStateGroup"/>s
            that can be used in the custom template:
            </para>
            <list type="table">  
            <listheader><term>Command</term><description>Description</description></listheader>  
            <item><term>CommonStates</term><description>Normal and MouseOver</description></item> 
            <item><term>SelectionStates</term><description>Unselected and Selected</description></item> 
            </list>
            <para>
            Symbols used for Polygons and Polylines are required to contain a 
            Path element with the name "Element".
            </para>
            </remarks>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Symbols.Symbol.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.MarkerSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Symbols.MarkerSymbol"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.MarkerSymbol.OffsetXProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.MarkerSymbol.OffsetX"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.MarkerSymbol.OffsetYProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.MarkerSymbol.OffsetY"/> dependency property.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.MarkerSymbol.OffsetX">
            <summary>
            Gets or sets the horizontal offset of centering the symbol.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.MarkerSymbol.OffsetY">
            <summary>
            Gets or sets the vertical offset of centering the symbol.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.IJsonSerializable">
            <summary>
            An interface for serializing an object to JSON.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.IJsonSerializable.ToJson">
            <summary>
            Serializes the calling object to JSON
            </summary>
            <returns>
            A JSON string representation of the calling object
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.ColorProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.Color"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.StyleProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.Style"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SizeProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.Size"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.ToJson">
            <summary>
            Serializes the simple marker symbol to JSON
            </summary>
            <returns>
            A JSON string representation of the simple marker symbol.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.OffsetX">
            <summary>
            Gets or sets the horizontal offset of centering the symbol.
            </summary>
            <remarks>Setting the <see cref="P:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.OffsetX"/> property is not allowed on the SimpleMarkerSymbol sub class.</remarks>
            <value></value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.OffsetY">
            <summary>
            Gets or sets the vertical offset of centering the symbol.
            </summary>
            <remarks>Setting the <see cref="P:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.OffsetY"/> property is not allowed on the SimpleMarkerSymbol sub class.</remarks>
            <value></value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.Style">
            <summary>
            Gets or sets the symbol style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.Size">
            <summary>
            Size of the marker in pixels.
            <br/>
            This property can be used as the source for data binding.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle">
            <summary>
            <see cref="T:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol"/> style
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Cross">
            <summary>
            Cross
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Diamond">
            <summary>
            Diamond
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Triangle">
            <summary>
            Triangle
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.MouseWheelHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer">
            <summary>Tiled ArcGIS REST map service layer.</summary>
            <remarks>
            <para>
            Allows you to work with a cached map service resource exposed by the 
            ArcGIS Server REST API (available in ArcGIS Server 9.3 and above). A
            cached service accesses pre-created tiles from a cache instead of 
            dynamically rendering images. 
            </para>
            <para>
            The projection of the <see cref="T:ESRI.ArcGIS.Client.Map"/> is determined 
            by the first visible layer with a <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference"/> 
            defined. If the <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference"/> of the 
            <see cref="T:ESRI.ArcGIS.Client.Map"/> is different than 
            a Tiled Layer, the Tiled Layer will not be displayed.
            </para>
            <para>
            XAML usage of ArcGISTiledMapServiceLayer:<br/>
            <code lang="XAML">
            &lt;esri:Map&gt;
              &lt;esri:ArcGISTiledMapServiceLayer ID="MyTiledLayer" 
                     Url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer" /&gt;
            &lt;/esri:Map&gt;
            </code>
            </para>
            <para>
            A call to the ArcGISTiledMapServiceLayer is Asynchronous. As a result, this means that you cannot obtain 
            valid Read (VB.NET) or get (C#) Property values until information has been returned from ArcGIS 
            Server to the Client application. You can safely obtain valid Read/get Property information in the 
            Initialized, LegendChanged, PropertyChanged, TileLoaded, and TileLoading Events or from a function/sub/method 
            that occurs after these Events fire. If you try to obtain Read/get Property information before these Events 
            fire you will obtain invalid or null/Nothing information for the particular Property in question.
            </para>
            <para>
            <b>Distributing load to multiple domains or servers:</b><br/>
            By default most browsers only make two requests to a single
            domain at a time. This can adversely impact the amount of time it takes to  
            load a lot of image tiles from the same server. To resolve this you can
            configure your ArcGIS REST web server to work on multiple subdomains or 
            host the ArcGIS REST web services on multiple web servers.
            This will enable the browser to overcome the two-requests-per-domain limitation.
            From SL version 2.2, the ArcGISTiledMapServiceLayer supports multiple subdomains provided that the map service supports it as well (arcgis.com or ArcGIS server from version 10.1 supports it).
            With previous versions, the ArcGISTiledMapServiceLayer does not support multiple subdomains, but
            it can easily be extended to support it by creating a subclass and overriding
            the <see cref="M:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.GetTileUrl(System.Int32,System.Int32,System.Int32)"/> method. In the
            example below this is accomplished by replacing the leading "http://www."
            with several subdomains.
            <code lang="CS">
            public class MultiDomainArcGISTiledMapServiceLayer : ArcGISTiledMapServiceLayer
            {
              private static string[] subDomains = { "http://sub1.","http://sub2.","http://sub3." };
              public override string GetTileUrl(int level, int row, int col)
              {
                // Select a subdomain based on level/row/column so that it will always
                // be the same for a specific tile. Multiple subdomains allow the user
                // to load more tiles simultanously. To take advantage of the browser cache
                // the following expression also makes sure that a specific tile will always 
                // hit the same subdomain.
                string subdomain = subDomains[(level + col + row) % subDomains.Length];
                string url = base.GetTileUrl(level, row, col);
                return url.Replace("http://www.", subdomain);
              }
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.TiledMapServiceLayer">
            <summary>
            Abstract tiled/cached map service layer class
            </summary>
            <remarks>
            <para>
            Implement this class if you want to create a custom tiled layer where
            the cached images can be referenced by a URL.
            </para>
            <para>
            As a minimum this layer must implement <see cref="M:ESRI.ArcGIS.Client.TiledMapServiceLayer.GetTileUrl(System.Int32,System.Int32,System.Int32)"/>
            and set the <see cref="P:ESRI.ArcGIS.Client.Layer.FullExtent"/> to the extent 
            of the layer. The FullExtent should include a default SpatialReference for 
            the layer. The map uses this to determine when to draw the layer. Lastly
            the <see cref="P:ESRI.ArcGIS.Client.TiledLayer.TileInfo"/> should be set with tile 
            information about the tiles in the map service.
            </para>
            <para>
            <b>Example: Custom Tiled Layer using <a href="http://www.openstreetmap.org/">OpenStreetMap</a> tiles:</b>
            <code lang="CS">
            // Please see the OpenStreetMap terms of use before using this layer.
            public class OpenStreetMapLayer : TiledMapServiceLayer
            {
              private static string[] subDomains = { "a", "b", "c" };
              private const string baseUrl = "http://{0}.tile.openstreetmap.org/{1}/{2}/{3}.png";
              public override void Initialize()
              {
                this.FullExtent = new ESRI.ArcGIS.Client.Geometry.Envelope(-20037508.3427892, -20037508.3427892, 20037508.3427892, 20037508.3427892)
                {
                  SpatialReference = new SpatialReference(102113)
                };
                // This layer's spatial reference
                this.SpatialReference = new SpatialReference(102113);
                // Set up tile information. Each tile is 256x256px, 19 levels.
                this.TileInfo = new TileInfo()
                {
                  Height = 256,
                  Width = 256,
                  Origin = new MapPoint(-cornerCoordinate, cornerCoordinate) { SpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(WKID) },
                  Lods = new Lod[19]
                };
                // Set the resolutions for each level. Each level is half the resolution of the previous one.
                double resolution = cornerCoordinate * 2 / 256;
                for (int i = 0; i &lt; TileInfo.Lods.Length; i++)
                {
                  TileInfo.Lods[i] = new Lod() { Resolution = resolution };
                  resolution /= 2;
                }
                // Call base initialize to raise the initialization event
                base.Initialize();
              }
            	
              public override string GetTileUrl(int level, int row, int col)
              {
                // Select a subdomain based on level/row/column so that it will always
                // be the same for a specific tile. Multiple subdomains allows the user
                // to load more tiles simultanously. To take advantage of the browser cache
                // the following expression also makes sure that a specific tile will always 
                // hit the same subdomain.
                string subdomain = subDomains[(level + col + row) % subDomains.Length];
                return string.Format(baseUrl, subdomain, level, col, row);
              }
            }
            </code>
            </para>
            </remarks>
            <seealso cref="T:ESRI.ArcGIS.Client.TiledLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.DynamicLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.DynamicMapServiceLayer"/>
        </member>
        <member name="T:ESRI.ArcGIS.Client.TiledLayer">
            <summary>
            Abstract tiled/cached map service layer class
            </summary>
            <remarks>
            <para>
            Implement this class if you want to create a custom tiled layer where
            the cached images cannot be referenced by a simple URL.
            </para>
            <para>
            As a minimum this layer must implement <see cref="M:ESRI.ArcGIS.Client.TiledMapServiceLayer.GetTileUrl(System.Int32,System.Int32,System.Int32)"/>
            and set the <see cref="P:ESRI.ArcGIS.Client.Layer.FullExtent"/> to the extent 
            of the layer. The FullExtent should include a default SpatialReference for 
            the layer. The map uses this to determine when to draw the layer. Lastly
            the <see cref="P:ESRI.ArcGIS.Client.TiledLayer.TileInfo"/> should be set with tile 
            information about the tiles in the map service.
            </para>
            <para>
            If your images can be referenced by a simple <see cref="T:System.Uri"/>, you
            should instead implement <see cref="T:ESRI.ArcGIS.Client.TiledMapServiceLayer"/>.
            </para>
            </remarks>
            <seealso cref="T:ESRI.ArcGIS.Client.TiledMapServiceLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.DynamicLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.DynamicMapServiceLayer"/>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Layer">
            <summary>
            This is the base class for all geographic data that can be added to the 
            <see cref="T:ESRI.ArcGIS.Client.Map">Map</see> Control.
            </summary>
            <remarks>
            <para>
            A Layer is a representation of geographic data portrayed using symbols and text labels. Multiple 
            Layers can be ‘stacked’ on top of each other to enhance the information displayed for making 
            meaningful decisions. Layers are displayed visually in the Map Control. Layers are drawn bottom 
            to top so the first one in the <see cref="T:ESRI.ArcGIS.Client.LayerCollection">LayerCollection</see> 
            is drawn first (on the bottom) and each subsequent layer is drawn on top of it, in the order listed. 
            See the following image for a visual example:
            </para>
            <para>
            <img border="0" alt="Visual representation of layer order in a map." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Layer2.png"/>
            </para>
            <para>
            The first Layer with a valid <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> 
            defines the <see cref="P:ESRI.ArcGIS.Client.Map.SpatialReference">Map.SpatialReference</see>. 
            </para>
            <para>
            If a Layer fails to initialize due to some problem, the 
            <see cref="E:ESRI.ArcGIS.Client.Layer.InitializationFailed">InitializationFailed</see> Event will be raised. It 
            is a good coding practice to provide the user with a graceful exception in the InitializedFailed Event by 
            either stopping the application with a message or letting the user know that one or more Layers are currently 
            unavailable. Otherwise, if no code is provided in the IntializationFailed Event a general application exception 
            will be thrown which could lead to a less than desirable user experience. Some common reasons for a problem with 
            a Layer include: the server that is returning Layer information is down, an incorrect endpoint URL for the Layer 
            was specified, the site that hosts the service needs a cross-site policy file (clientaccesspolicy.xml or 
            crossdomain.xml), the service is secured and requires a token or credentials, etc.
            </para>
            <para>
            A Layer can only be instantiated on the UI Thread.
            </para>
            <para>
            There are several layer types that are supported by the SDK. All of the supported layer types are based upon 
            the parent (or base) Layer Class. This means that all child layers that are based upon the parent Layer Class 
            inherit all of the functionality of the parent.  This inheritance hierarchy can extend multiple levels to create 
            layers that have different types of functionality which serve specific purposes. Most ArcGIS developers will 
            consume the ‘younger’ child layers in the inheritance hierarchy as this requires the least amount of custom 
            coding. The following simplified set of Class diagrams display the inheritance hierarchy for various layers with 
            the most common ones that developers use being highlighted in yellow which are hyperlinked to the appropriate 
            API Reference documentation.
            </para>
            <para>
            <img usemap="#layermap" border="0" alt="Hyperlink mappings to useful layer types." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Layer1.png"/>
            <map name="layermap">
            <area shape="rect" coords="30,81,409,101" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.html"/>
            <area shape="rect" coords="31,195,365,215" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.ArcGISImageServiceLayer.html"/>
            <area shape="rect" coords="28,309,380,330" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.html"/>
            <area shape="rect" coords="11,378,260,397" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.GraphicsLayer.html"/>
            <area shape="rect" coords="19,467,262,486" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.FeatureLayer.html"/>
            <area shape="rect" coords="12,536,253,555" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.ElementLayer.html"/>
            <area shape="rect" coords="28,651,369,670" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client~ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.html"/>
            <area shape="rect" coords="481,78,725,98" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client.Bing~ESRI.ArcGIS.Client.Bing.TileLayer.html"/>
            <area shape="rect" coords="481,190,871,210" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client.Toolkit.DataSources~ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer.html"/>
            <area shape="rect" coords="482,303,846,322" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client.Toolkit.DataSources~ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer.html"/>
            <area shape="rect" coords="474,392,872,411" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client.Toolkit.DataSources~ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer.html"/>
            <area shape="rect" coords="482,504,930,522" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client.Toolkit.DataSources~ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer.html"/>
            <area shape="rect" coords="481,614,849,633" href="http://help.arcgis.com/en/webapi/silverlight/apiref/ESRI.ArcGIS.Client.Toolkit.DataSources~ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer.html"/>
            </map>
            </para>
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer">ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer</see> 
            is a dynamic ArcGIS REST image service layer that allows you to work a with map service resource exposed by the 
            ArcGIS Server REST API (available in ArcGIS Server 9.3 and above). A dynamic map service generates images on the 
            fly. The background color for an ArcGISDynamicMapServiceLayer will always be transparent.
            </para>
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.ArcGISImageServiceLayer">ESRI.ArcGIS.Client.ArcGISImageServiceLayer</see> is 
            a dynamic ArcGIS REST image service layer that allows you to work with an Image Service resource exposed by the 
            ArcGIS Server REST API (available in ArcGIS Server 9.3 and above). Image Service is new in ArcGIS 9.3 and is 
            optimized for delivering raw or finished imagery that can be RGB, panchromatic, multispectral, or elevation data 
            stored in a geodatabase or file system. Data sources for Image Services can be raster datasets, in formats such 
            as TIFF, MrSID, IMAGINE (IMG), or JPEG2000, as well as raster mosaics.
            </para>
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer">ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer</see> 
            is a cached ArcGIS REST map service layer that allows you to work with a cached map service resource exposed by 
            the ArcGIS Server REST API (available in ArcGIS Server 9.3 and above). A cached service accesses pre-created 
            tiles from a cache instead of dynamically rendering images.
            </para>
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer">ESRI.ArcGIS.Client.GraphicsLayer</see> is client side layer that 
            renders vector based <see cref="T:ESRI.ArcGIS.Client.Graphic">Graphic</see> objects stored in a 
            <see cref="T:ESRI.ArcGIS.Client.GraphicCollection">GraphicCollection</see> using custom symbols. The Graphic objects 
            that are in a GraphicsLayer have their geometries provided by actions such as 
            <a href="javascript:ApiToConcept('01660000001t000000', '01n70000001s000000', '011v00000016000000')" target="_top">executing a query</a> or 
            <a href="javascript:ApiToConcept('01660000000s000000', '01n700000011000000', '011v00000019000000')" target="_top">drawing a shape</a> on 
            the Map. To add a Graphic to a GraphicsLayer, you must:
            </para>
            <list type="bullet">
            <item>Retrieve the Graphics layer to add the Graphic to</item>
            <item>Create or retrieve a Graphic</item>
            <item>Set the Graphic's Geometry, if this hasn't been done for you</item>
            <item>Apply the Symbol to the Graphic</item>
            <item>Add the Graphic to the Graphics layer</item>
            </list>
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.FeatureLayer">ESRI.ArcGIS.Client.FeatureLayer</see> is a special type of GraphicsLayer 
            that allows you to display feature Graphics without writing any managed .NET code (i.e. code-behind). The conceptual
            document 
            <a href="javascript:ApiToConcept('016600000015000000', '01n70000000p000000', '011v00000006000000')" target="_top">creating a feature layer</a> 
            provides useful information. Like a GraphicsLayer, a FeatureLayer contains and displays Graphic objects on a Map. 
            But unlike a GraphicsLayer, a FeatureLayer has several properties that enable unique functionality:
            </para>
            <list type="bullet">
            <item><b>Url</b> - Address of a Map service layer. Feature layers are automatically populated with features from this layer.</item>
            <item><b>Where</b> - Query that defines which features in the specified layer are displayed</item>
            <item><b>FeatureSymbol</b> - Symbol that is applied to all the Graphics in the layer</item>
            <item><b>ClusterFeatures</b> - Boolean that enables clustering of point features</item>
            </list>
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.ElementLayer">ESRI.ArcGIS.Client.ElementLayer</see> is a client side layer that allows 
            putting System.Windows.UIElement objects on the Map Control at specific geographic locations. UIElements are things 
            like: Buttons, Textboxes, Labels, TextBlocks, Rectangle, etc. If the Envelope of the UIElement object is set to a one 
            dimensional point then the UIElement will not scale as users zoom in or out of the map. If the Envelope of the 
            UIElement object is set to a two dimensional shape (i.e. it has width and height) then the UIElement will scale in 
            size as users zoom in or out on the map.
            </para>
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer">ESRI.ArcGIS.Client.Tasks.GPResultImageLayer</see> is a 
            dynamic image layer that is generated by ArcGIS Server as a result of a Geoprocessing task. The rendering of the 
            image is provided by the ArcGIS Server MapServer when more that 500 features are returned. If less that 500 features 
            are returned from the Geoprocessing task then the developer is responsible for writing code to display the features 
            using a GraphicsLayer. The GPResultImageLayer requires using code-behind to be used.
            </para>
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.Bing.TileLayer">ESRI.ArcGIS.Client.Bing.TileLayer</see> is a tiled image map 
            service layer that allows you to work with a cached map service resource exposed by Microsoft’s Bing services. The 
            Bing.TileLayer uses a set of SOAP proxies and value object types rather than REST. The ArcGIS API provides a set 
            of implementation classes which utilize the proxies and value objects internally. The SOAP types must be public 
            due to .NET Framework requirements; however detailed library reference documentation is not included in this help 
            system. See the 
            <a href="http://msdn.microsoft.com/en-us/library/cc980922.aspx" target="_blank">Bing Maps Web Services SDK</a> 
            for more information. Use of Bing services requires that you generate and provide a token when utilizing 
            ESRI.ArcGIS.Client.Bing components.
            </para>
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer">ESRI.ArcGIS.Client.Toolkit.DataSources.GeoRssLayer</see> 
            is a type of GraphicsLayer where geometries are returned via a
            <a href="http://www.georss.org/simple" target="_blank">GeoRSS-Simple</a> 
            data feed. Geometries are returned in Geographic WGS84 SpatialReference. If you are displaying the feed on top of 
            a map in a different projection, they must be re-projected manually when the graphics collection gets features 
            added. The Graphic objects will not have a symbol associated with them. You should specify a Renderer on this 
            layer, or manually assign symbols to the Graphics when the GraphicsCollection gets features added. To have the 
            GeoRssLayer update for tracking real-time events, client side coding using the Update Method is required. 
            </para>
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer">ESRI.ArcGIS.Client.Toolkit.DataSources.KmlLayer</see> 
            is a type of GraphicsLayer where geometries are returned via an XML based syntax. The source of the KmlLayer can come 
            from either a KML or KMZ file or service. KMZ is a ZIP version of a KML file. KML is an open source specification that 
            is promoted by Google.
            </para>
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer">ESRI.ArcGIS.Client.Toolkit.DataSources.HeatMapLayer</see> 
            is a client side generated bitmap layer that is derived from point Geometry objects. The bitmap displays a ‘heat map’ 
            color image (ranging from blue to red to yellow) that demonstrates the spatial intensity of a set of points 
            (HeatMapPoints). The color blue means less spatial intensity of the points. The color red means a moderate clustering 
            of points. The color yellow means a significant cluster of points. The Intensity Property defines the size of the 
            cells in a matrix used to calculate density. An Intensity of 1 shows all of the HeatMapPoints individually. Each 
            bitmap that is generated is based upon current extent of the map for those points that fall within that extent. The 
            HeatMapLayer is not to be used for statistical analysis (the algorithm is unpublished); its purpose is to provide 
            visual clustering trends for points at a given scale. The input point geometries typically come from GeoRSSLayer 
            feeds, a FeatureLayer, a GraphicsLayer, or from user defined points (XAML or code-behind).
            </para>
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer">ESRI.ArcGIS.Client.Toolkit.DataSources.OpenStreetMapLayer</see> 
            is a cached image service that is available from <a href="http://www.openstreetmap.org" target="_blank">OpenStreetMap</a> 
            organization. The OpenStreetMap organization hosts a free editable map of the world that is open to the public to edit 
            and use. There are four different OpenStreetMapLayer Styles supported: Mapnik, Osmarenderer, Cycle Map, and NoName. The 
            projection of the OpenStreetMap data uses the WGS 84 datum and latitude/longitude as the coordinate system.
            </para> 
            <para>
            An <see cref="T:ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer">ESRI.ArcGIS.Client.Toolkit.DataSources.WmsLayer</see> 
            is a dynamic REST image service layer that conforms to the 
            <a href="http://www.opengeospatial.org" target="_blank">Open GIS Consortium (OGC)</a> 
            standard. WMS stands for Web Map Service and provides a HTTP interface for requesting geo-registered map images from 
            one or more distributed geospatial databases. ArcGIS Server has the ability to expose WMS data which can be consumed 
            by the WmsLayer. As of the the 2.1 version of this SDK, the WMS versions supported are 1.1.1 and 1.3.
            </para>
            </remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Layer.OpacityProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Layer.Opacity"/> dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Layer.VisibleProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Layer.Visible"/> dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Layer.MinimumResolutionProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Layer.MinimumResolution"/> dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Layer.MaximumResolutionProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Layer.MaximumResolution"/> dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Layer.IDProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Layer.ID"/> dependency property
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Layer.Cancel">
            <summary>
            Stops loading of any pending images
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Layer.OnMapChanged(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.Map)">
            <summary>
            Override to know when a layer's <see cref="P:ESRI.ArcGIS.Client.Layer.Map"/> property changes.
            </summary>
            <param name="oldValue">Old map</param>
            <param name="newValue">New map</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Layer.Draw(ESRI.ArcGIS.Client.Geometry.Envelope,System.Double,ESRI.ArcGIS.Client.Geometry.MapPoint,System.Boolean,System.Boolean)">
            <summary>
            Performs an update of the layer
            </summary>
            <param name="extent">Extent to draw</param>
            <param name="resolution">Resolution to draw at</param>
            <param name="canvasOrigin">Origin of the canvas</param>
            <param name="useTransitions">Whether smooth transitions should be used, like fading in the images</param>
            <param name="isContinuous">if set to <c>true</c> is continuous draw.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Layer.Initialize">
            <summary>
            Initializes the resource.
            </summary>
            <remarks>
            <para>Override this method if your resource requires asyncronous requests to initialize,
            and call the base method when initialization is completed.</para>
            <para>Upon completion of initialization, check the <see cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/> for any possible errors.</para>
            </remarks>
            <seealso cref="E:ESRI.ArcGIS.Client.Layer.Initialized"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Layer.OnInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Layer.Initialized"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Layer.OnInitializationFailed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Layer.InitializationFailed"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Layer.OnProgress(System.Int32)">
            <summary>
            Raises the progress event
            </summary>
            <param name="progress">Progress percentage between 0 and 100</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Layer.EffectProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Layer.Effect"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Layer.OnLayerChanged">
            <summary>
            Notifies the map that the layer has changed and requires a redraw.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Layer.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Layer.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Layer.ToBitmap">
            <summary>
            Renders the layer to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/>. 
            </summary>
            <returns>A WriteableBitmap instance of the layer's current state on the map.</returns>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Layer.Initialized">
            <summary>
            Raised when the layer has been initialized
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Layer.InitializationFailed">
            <summary>
            Raised when the layer has been initialized and encountered a problem.
            </summary>
            <remarks>
            If a layer fails to initialize (server is down, incorrect endpoint etc), and you don't
            handle the <see cref="E:ESRI.ArcGIS.Client.Layer.InitializationFailed"/> event, an unhandled exception will be thrown.
            </remarks>
            <seealso cref="E:ESRI.ArcGIS.Client.Layer.Initialized"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Layer.Progress">
            <summary>
            OnDrawBegin raised when the layers download progress changes
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Layer.LayerChanged">
            <summary>
            Raised when the properties of the layer has changed, required rerendering
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.FullExtent">
            <summary>
            The full extent of the layer
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.ContinuousDraw">
            <summary>
            Gets a value indicating whether the layer will draw while panning
            </summary>
            <value><c>true</c> if continuous draw; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.Opacity">
            <summary>
            Gets or sets the layer opacity
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.MinimumResolution">
            <summary>
            Gets or sets the minimum resolution (map units per pixel) where this layer is visible.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.MaximumResolution">
            <summary>
            Gets or sets the maximum resolution (map units per pixel) where this layer is visible.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.ID">
            <summary>
            Gets or sets the layer ID
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.IsInitialized">
            <summary>
            Returns true if the layer has been initialized.
            </summary>
            <seealso cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.SpatialReference">
            <summary>
            Gets the default spatial reference of the layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.InitializationFailure">
            <summary>
            Gets or sets the initialization failure if the initialization failed.
            </summary>
            <value>The initialization failure.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.Visible">
            <summary>
            Gets or sets the visibility of the layer
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.Map">
            <summary>
            Gets the map this layer belongs to if any.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.Canvas">
            <summary>
            Holds a reference to the canvas to draw on
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Layer.Effect">
            <summary>
            Gets or sets the pixel shader effect to use for rendering this <see cref="T:ESRI.ArcGIS.Client.Layer"/>.
            </summary>
            <value>
            The pixel shader effect to use for rendering this <see cref="T:ESRI.ArcGIS.Client.Layer"/>.
            The default is null (no effects).
            </value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Layer.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Layer.ProgressHandler">
            <summary>
            Load Progress event handler
            </summary>
            <param name="sender">Layer raising the event</param>
            <param name="args">Progress event argument</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Layer.LayerChangedHandler">
            <summary>
            Layer changed event handler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TiledLayer.GetTileSource(System.Int32,System.Int32,System.Int32,System.Action{System.Windows.Media.ImageSource})">
            <summary>
            Gets the source image to display in the tiled layer. Override this to generate
            or modify images.
            </summary>
            <param name="level">Layer level</param>
            <param name="row">Tile row</param>
            <param name="col">Tile column</param>
            <param name="onComplete">The method to call completion.</param>
            <seealso cref="M:ESRI.ArcGIS.Client.TiledMapServiceLayer.GetTileUrl(System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TiledLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.TiledMapServiceLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TiledLayer.Draw(ESRI.ArcGIS.Client.Geometry.Envelope,System.Double,ESRI.ArcGIS.Client.Geometry.MapPoint,System.Boolean,System.Boolean)">
            <summary>
            Performs an update of the layer
            </summary>
            <param name="extent">Extent to draw</param>
            <param name="resolution">Resolution to draw at</param>
            <param name="canvasOrigin">Origin of the canvas</param>
            <param name="useTransitions">Whether smooth transitions should be used, like fading in the images</param>
            <param name="isContinuous">if set to <c>true</c> is continuous draw.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TiledLayer.Cancel">
            <summary>
            Stops loading of any pending tiles
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TiledLayer.Refresh">
            <summary>
            Clears all tiles from the layer and redraws it.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TiledLayer.getLevelByNearestPixelsize(System.Double)">
            <summary>
            Gets the level that closets matches a given horizontal pixelsize.
            </summary>
            <param name="resolution">PixelSize resolution to match to.</param>
            <returns>Level index.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TiledLayer.tileDownload_DownloadProgressChanged(System.Object,System.Net.DownloadProgressChangedEventArgs)">
            <summary>
            Handles the DownloadProgressChanged event as an image tile is downloaded from the server.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Net.DownloadProgressChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TiledLayer.img_ImageFailed(System.Object,System.Windows.ExceptionRoutedEventArgs)">
            <summary>
            Handles the ImageFailed event for tiles if an image couldn't load the image data.
            This is not a download failed event, but raised if the image stream is not a valid image.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.ExceptionRoutedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TiledLayer.getTileSpanWithin(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32)">
            <summary>
            Gets the tile span that fully covers an envelope.
            </summary>
            <param name="envelope">Envelope the returned tilespan should cover</param>
            <param name="level">Level</param>
            <returns>Array as [startColumn,startRow,endColumn,endRow]</returns>
            <remarks>
            <para>The given envelope will be reduced if if only partially intersects the extent of this resource.</para>
            <para>Returns [0,0,-1,-1] if the envelope doesn't intersect the datasource.</para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TiledLayer.TileInfo">
            <summary>
            Gets or sets the tiling scheme.
            </summary>
            <value>The tile info.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TiledLayer.ContinuousDraw">
            <summary>
            Gets a value indicating whether the layer will draw while panning
            </summary>
            <value><c>true</c> if continuous draw; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.TiledLayer.TileLoaded">
            <summary>
            Occurs when a tile has been loaded.
            </summary>
            <remarks>
            <para>This event is only fired if the tile is being downloaded over an http(s) connection.
            If the image data is readily available when returned from the <see cref="M:ESRI.ArcGIS.Client.TiledLayer.GetTileSource(System.Int32,System.Int32,System.Int32,System.Action{System.Windows.Media.ImageSource})"/>
            method, only the <see cref="E:ESRI.ArcGIS.Client.TiledLayer.TileLoading"/> event will trigger.
            </para>
            <para>
            In order to use the TileLoaded Event in Silverlight you must elevate the trust settings of the application. 
            If you do not elevate the trust settings for Silverlight you will not be able to set breakpoints in Visual 
            Studio for debugging or have those blocks of code execute. By elevating the trust settings you are no 
            longer able to run the application an internet browser. These trust settings do not need to be elevated 
            for WPF and Windows Phone 7 applications as they already have their trust privileges elevated and work by 
            default for the TileLoaded Event.
            </para>
            <para>
            To elevate the trust in a Visual Studio Silverlight project to use an 'Out-of-Browser' host, open the Project 
            Properties tab and check on the 'Enable running application out of the browser' checkbox. This will enable 
            the 'Out-of-Browser Settings...' button. Then click the 'Out-of-Browser...' button and when the 
            'Out-of-Browser Settings' dialog opens, check on the 'Require elevated trust when running outside the 
            browser' checkbox. You can specify a different 'Window Style' if desired for the 'Out-of-Browser' 
            application. Click the OK button to close the 'Out-of-Browser Settings' dialog and save the changes. 
            See the following screen shots:
            </para>
            <para>
            <img border="0" alt="Modifying the trust settings for a Silverlight application in Visual Studio part1." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TileLayer.TileLoaded1.png"/>
            </para>
            <para>
            <img border="0" alt="Modifying the trust settings for a Silverlight application in Visual Studio part2." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TileLayer.TileLoaded2.png"/>
            </para>
            <para>
            <b>Note:</b>
            When you make changes to Visual Studio to run the Silverlight application in 'Out-of-Browser' mode, the 
            startup project for the solution file changes from the 'Web' project to the core project. If you desire 
            to go back to using an internet browser to host the Silverlight Application and not use the functionality 
            of the TiledLoaded Event, you need to un-check the 'Enable running application out of the browser' checkbox 
            and perform one additional step. The additional step involves opening the Visual Studio Solution Explorer 
            tab, right clicking on the 'Web' version of the application and choosing the 'Set at StartUp Project' from 
            the context menu. See the following screen shot:
            </para>
            <para>
            <img border="0" alt="Un-doing the out-of-browser mode." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TileLayer.TileLoaded3.png"/>
            </para>
            <para>
            If you do not perform this additional step when you try to run the Silverlight application back in the 
            internet browser, the Map Control will contain an error similar to the following: "Invalid URI scheme 
            'file://' for map control. Control must be hosted in a HTTP(S) website." and the Address bar of the 
            internet browser will be trying to point to a specific file (like: C:\...) rather than a web site 
            (like: http://...). Unfortunately, Visual Studio does not perform this additional step as of version 
            2010 and it must be performed manually. See the following screen shot:
            </para>
            <para>
            <img border="0" alt="Invalid URI scheme 'file://' for map control, Error." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TileLayer.TileLoaded4.png"/>
            </para>
            </remarks>
        </member>
        <member name="E:ESRI.ArcGIS.Client.TiledLayer.TileLoading">
            <summary>
            Occurs when a tile is about to load.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.TiledLayer.DistanceTile">
            <summary>
            Class used for sorting tiles based on a distance
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs">
            <summary>
            Event Arguments for the <see cref="E:ESRI.ArcGIS.Client.TiledLayer.TileLoaded"/> and <see cref="E:ESRI.ArcGIS.Client.TiledLayer.TileLoading"/> event.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs.Level">
            <summary>
            Gets the tile level.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs.Row">
            <summary>
            Gets the tile row.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs.Column">
            <summary>
            Gets the tile column.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs.ImageSource">
            <summary>
            Gets or sets the tile image source. You can set this in the
            event handler to intercept and modify tiles.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs.ImageStream">
            <summary>
            Gets the tile image stream.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs.Error">
            <summary>
            Gets the error loading tile if a problem occured accessing the tile.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TiledMapServiceLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.TiledMapServiceLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TiledMapServiceLayer.GetTileUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a URL to the specified tile
            </summary>
            <param name="level">Layer level</param>
            <param name="row">Tile row</param>
            <param name="col">Tile column</param>
            <returns>URL to the tile image</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TiledMapServiceLayer.GetTileSource(System.Int32,System.Int32,System.Int32,System.Action{System.Windows.Media.ImageSource})">
            <summary>
            Gets the tile source.
            </summary>
            <param name="level">The level.</param>
            <param name="row">The row.</param>
            <param name="col">The col.</param>
            <param name="onComplete">The on complete.</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ILegendSupport">
            <summary>
            Interface to implement by layers or renderers supporting legend.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ILegendSupport.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of a layer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> object.
            This object represents the legend of the map service layer and can contains a collection of LayerLegendInfos
            and/or a collection of LegendItemInfos.
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="E:ESRI.ArcGIS.Client.ILegendSupport.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ISublayerVisibilitySupport">
            <summary>
            Interface to implement by layers supporting the management of sublayers visibility.
            </summary>
            <remarks>
            When using this interface, a layer is displayed if its ascendants and itself are visible.
            Note that the <see cref="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.VisibleLayers"/> property uses another logic : if a layer is visible, all its children are displayed whatever the visibility of theirs ascendants.
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ISublayerVisibilitySupport.GetLayerVisibility(System.Int32)">
            <summary>
            Gets the sublayer visibility.
            </summary>
            <param name="layerID">The sub layer ID.</param>
            <returns>The sublayer visibility</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ISublayerVisibilitySupport.SetLayerVisibility(System.Int32,System.Boolean)">
            <summary>
            Sets the sublayer visibility.
            </summary>
            <param name="layerID">The sub layer ID.</param>
            <param name="visibility">The sublayer visibility</param>
        </member>
        <member name="E:ESRI.ArcGIS.Client.ISublayerVisibilitySupport.VisibilityChanged">
            <summary>
            Occurs when the visibility of sublayers changed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.IAttribution">
            <summary>
            Interface to implement by layers supporting attribution.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.IAttribution.AttributionTemplate">
            <summary>
            Gets or sets the attribution template.
            </summary>
            <value>The attribution template.</value>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.#cctor">
            <summary>
            Initializes the <see cref="T:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.GetDetails(System.Int32,System.Action{ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo,System.Exception})">
            <summary>
            Gets the sub layer or table details.
            </summary>
            <param name="id">The sub layer or table  id.</param>
            <param name="onCompleted">The method to call when details of the sub layer or table is retrieved.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.GetAllDetails(System.Action{System.Collections.Generic.IDictionary{System.Int32,ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo},System.Exception})">
            <summary>
            Gets all details for sub layers or tables.
            </summary>
            <param name="onCompleted">The method to call when details of the sub layer or table is retrieved.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.Initialize">
            <summary>
            Initializes the resource. Override this method if your resource requires
            asynchronous requests to initialize, then call the base method when initialization is
            completed.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.GetTileUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a URL to the specific tile in an ArcGISTiledMapServiceLayer.
            </summary>
            <remarks>
            <para>
            A ArcGISTiledMapServiceLayer is made up of multiple tiles (or images) that are automatically put together in 
            a mosaic for display in a Map Control. The tiles are pre-generated on an ArcGIS Server and can 
            be accessed individually via a URL. In order to access the URL for a specific tile it is 
            required to know the Level, Row, and Column information. 
            </para>
            <para>
            A programmatic way to determine the various Level, Row, and Column information can be obtained by writing some 
            code-behind logic in the 
            <see cref="E:ESRI.ArcGIS.Client.TiledLayer.TileLoading">ArcGISTiledMapServiceLayer.TileLoading</see> Event 
            (see the code example in this document).
            </para>
            <para>
            If the <see cref="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.ProxyURL">ProxyURL</see> 
            Property has been set to create the ArcGISTiledMapServiceLayer, then the output return string of the GetTileUrl 
            Method will have that ProxyURL value inserted at the beginning.
            </para>
            <para>
            <b>Note:</b> Using Methods are only available in code-behind. You cannot use a Method via XAML.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            After the ArcGISTiledMapServiceLayer loads in the Map Control, the ListBox will be populated with all 
            the combinations of 'Level, Row, and Column' tiles that make up the initial extent of the 
            ArcGISTiledMapServiceLayer image service. Click on any of the combinations in the Listbox and that 
            particular tile will be displayed in an Image Control as well as the Url for that image.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Displaying individual tile images and their URL values for an ArcGISTiledMapServiceLayer." src=" C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISTiledMapServiceLayer.GetTileUrl.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="78" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="640" 
                 TextWrapping="Wrap" Text="After the ArcGISTiledMapServiceLayer loads in the Map Control, the ListBox will be 
                 populated with all the combinations of 'Level, Row, and Column' tiles that make up the initial extent of the 
                 ArcGISTiledMapServiceLayer image service. Click on any of the combinations in the Listbox and that particular 
                 tile will be displayed in an Image Control as well as the Url for that image." /&gt;
              
              &lt;!-- The Map Control. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="33,160,0,0" Name="Label_MapControl" 
                       VerticalAlignment="Top" Width="120" Content="Map Control:"/&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="32,180,0,0" Name="Map1" 
                      VerticalAlignment="Top" WrapAround="True" Height="320" Width="600"&gt;
                &lt;esri:Map.Layers&gt;
                  &lt;esri:LayerCollection&gt;
                  
                    &lt;!-- 
                    Add a ArcGISTiledMapServiceLayer. The InitializationFailed Event is used to notify the user in case the 
                    ArcGISTiledMapServiceLayer service is down. The TileLoading Event provides details about individual tiles 
                    in the ArcGISTiledMapServiceLayer service that is necessary to get the input parameters (Level, Row, Column) 
                    of the ArcGISTiledMapServiceLayer.GetTileUrl Method. 
                    --&gt;
                    &lt;esri:ArcGISTiledMapServiceLayer ID="myArcGISTiledMapServiceLayer" 
                                                     Url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
                                                     InitializationFailed="ArcGISTiledMapServiceLayer_InitializationFailed"
                                                     TileLoading="ArcGISTiledMapServiceLayer_TileLoading"/&gt;
                    
                  &lt;/esri:LayerCollection&gt;
                &lt;/esri:Map.Layers&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- ListBox results. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="33,512,0,0" Name="Label_ListBox1" 
                       VerticalAlignment="Top" Width="194" Content="ListBox Control:"/&gt;
              &lt;ListBox Height="93" HorizontalAlignment="Left" Margin="33,526,0,0" Name="ListBox1" 
                     VerticalAlignment="Top" Width="194" SelectionChanged="ListBox1_SelectionChanged"/&gt;
              
              &lt;!-- TiledLayer.TileLoadEventsArgs. Level, Row, and Column. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="239,510,0,0" Name="Label_TileLoadEventArgs" 
                       VerticalAlignment="Top" Width="120" Content="TileLoadEventArgs:"/&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="239,542,0,0" Name="Label_Level" 
                       VerticalAlignment="Top" Width="48" Content="Level:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="293,536,0,0" Name="TextBox_Level" 
                     VerticalAlignment="Top" Width="52" /&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="239,569,0,0" Name="Label_Row" 
                         VerticalAlignment="Top" Width="48" Content="Row:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="293,566,0,0" Name="TextBox_Row" 
                     VerticalAlignment="Top" Width="51" /&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="239,602,0,0" Name="Label_Column" 
                       VerticalAlignment="Top" Width="48" Content="Column:" /&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="293,596,0,0" Name="TextBox_Column" 
                     VerticalAlignment="Top" Width="52" /&gt;
              
              &lt;!-- ArcGISTiledMapServiceLayer.GetTileUrl results. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="32,631,0,0" Name="Label_GetTileUrl" 
                       VerticalAlignment="Top" Width="344" Content="ArcGISTiledMapServiceLayer.GetTileUrl:"/&gt;
              &lt;TextBox Height="124" HorizontalAlignment="Left" Margin="32,648,0,0" Name="TextBox_GetTileUrl" 
                     VerticalAlignment="Top" Width="344" TextWrapping="Wrap"/&gt;
              
              &lt;!-- Image Control results. --&gt;
              &lt;sdk:Label Height="28" HorizontalAlignment="Left" Margin="384,508,0,0" Name="Label_ImageControl1" 
                       VerticalAlignment="Top" Width="198" Content="Image Control:"/&gt;
              &lt;Image Height="250" HorizontalAlignment="Left" Margin="382,522,0,0" Name="Image1" 
                   Stretch="Fill" VerticalAlignment="Top" Width="250" /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void ArcGISTiledMapServiceLayer_InitializationFailed(object sender, System.EventArgs e)
            {
              // Notify the user if there is a failure with the WMTS service.
              ESRI.ArcGIS.Client.Layer aLayer = (ESRI.ArcGIS.Client.Layer)sender;
              MessageBox.Show(aLayer.InitializationFailure.Message);
            }
            
            private void ArcGISTiledMapServiceLayer_TileLoading(object sender, ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs e)
            {
              // This Event will fire for each tile that is loaded in the Map Control. For instance, if it takes 4 tiled images
              // to render the Map Control completely, then this Event will fire 4 times. As you Zoom In or Pan around to other
              // geographic areas in the Map, this Event will continue to fire until all of the tiles have been processed. 
              
              // The e argument of the Event returns a TileLoadEventArgs object.
              ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs myTileLoadEventArgs = e;
              
              // Get the Tile's Level, Row, and Column Properties
              int myLevel = myTileLoadEventArgs.Level;
              int myRow = myTileLoadEventArgs.Row;
              int myColumn = myTileLoadEventArgs.Column;
              
              // Generate a string that is comma delimited with the Level, Row, and Column values and add them to a Listbox.
              string myString = myLevel.ToString() + "," + myRow.ToString() + "," + myColumn.ToString();
              
              // Do not add any duplicates.
              if (! (ListBox1.Items.Contains(myString)))
              {
                ListBox1.Items.Add(myString);
              }
            }
            
            private void ListBox1_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
            {
              // Get the SelectedItem from the Listbox and parse out the Level, Row, and Column arguments necessary to 
              // obtain the Url for a specific tile.
              string theConcatenatedString = ListBox1.SelectedItem;
              string[] theParts = theConcatenatedString.Split(',');
              int theLevel = Convert.ToInt32(theParts[0]);
              int theRow = Convert.ToInt32(theParts[1]);
              int theColumn = Convert.ToInt32(theParts[2]);
              
              // Update the Level, Row, and Column information in the TextBoxes for ease of viewing.
              TextBox_Level.Text = theLevel.ToString();
              TextBox_Row.Text = theRow.ToString();
              TextBox_Column.Text = theColumn.ToString();
              
              // Get the ArcGISTiledMapServiceLayer. 
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer theArcGISTiledMapServiceLayer = Map1.Layers["myArcGISTiledMapServiceLayer"];
              
              // Obtain a specific tile Url from the ArcGISTiledMapServiceLayer using the three arguments for the GetTileUrl Method.
              string theGetTileUrl = theArcGISTiledMapServiceLayer.GetTileUrl(theLevel, theRow, theColumn);
              TextBox_GetTileUrl.Text = theGetTileUrl;
              
              // Only process valid restults. 
              if (theGetTileUrl != null)
              {
                // Set the specific tile's Url as the Image's Source. 
                Uri myUri = new Uri(theGetTileUrl);
                Image1.Source = new Imaging.BitmapImage(myUri);
              }
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub ArcGISTiledMapServiceLayer_InitializationFailed(ByVal sender As System.Object, ByVal e As System.EventArgs)
              
              ' Notify the user if there is a failure with the WMTS service.
              Dim aLayer As ESRI.ArcGIS.Client.Layer = sender
              MessageBox.Show(aLayer.InitializationFailure.Message)
              
            End Sub
            
            Private Sub ArcGISTiledMapServiceLayer_TileLoading(ByVal sender As System.Object, ByVal e As ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs)
              
              ' This Event will fire for each tile that is loaded in the Map Control. For instance, if it takes 4 tiled images
              ' to render the Map Control completely, then this Event will fire 4 times. As you Zoom In or Pan around to other
             ' geographic areas in the Map, this Event will continue to fire until all of the tiles have been processed. 
              
              ' The e argument of the Event returns a TileLoadEventArgs object.
              Dim myTileLoadEventArgs As ESRI.ArcGIS.Client.TiledLayer.TileLoadEventArgs = e
              
              ' Get the Tile's Level, Row, and Column Properties
              Dim myLevel As Integer = myTileLoadEventArgs.Level
              Dim myRow As Integer = myTileLoadEventArgs.Row
              Dim myColumn As Integer = myTileLoadEventArgs.Column
              
              ' Generate a string that is comma delimited with the Level, Row, and Column values and add them to a Listbox.
              Dim myString As String = myLevel.ToString + "," + myRow.ToString + "," + myColumn.ToString
              
              ' Do not add any duplicates.
              If Not ListBox1.Items.Contains(myString) Then
                ListBox1.Items.Add(myString)
              End If
              
            End Sub
            
            Private Sub ListBox1_SelectionChanged(ByVal sender As System.Object, ByVal e As System.Windows.Controls.SelectionChangedEventArgs)
              
              ' Get the SelectedItem from the Listbox and parse out the Level, Row, and Column arguments necessary to 
              ' obtain the Url for a specific tile.
              Dim theConcatenatedString As String = ListBox1.SelectedItem
              Dim theParts As String() = Split(theConcatenatedString, ",")
              Dim theLevel As Integer = CInt(theParts(0))
              Dim theRow As Integer = CInt(theParts(1))
              Dim theColumn As Integer = CInt(theParts(2))
              
              ' Update the Level, Row, and Column information in the TextBoxes for ease of viewing.
              TextBox_Level.Text = theLevel.ToString
              TextBox_Row.Text = theRow.ToString
              TextBox_Column.Text = theColumn.ToString
              
              ' Get the ArcGISTiledMapServiceLayer. 
              Dim theArcGISTiledMapServiceLayer As ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer = Map1.Layers("myArcGISTiledMapServiceLayer")
              
              ' Obtain a specific tile Url from the ArcGISTiledMapServiceLayer using the three arguments for the GetTileUrl Method.
              Dim theGetTileUrl As String = theArcGISTiledMapServiceLayer.GetTileUrl(theLevel, theRow, theColumn)
              TextBox_GetTileUrl.Text = theGetTileUrl
              
              ' Only process valid restults. 
              If theGetTileUrl IsNot Nothing Then
                
                ' Set the specific tile's Url as the Image's Source. 
                Dim myUri As New Uri(theGetTileUrl)
                Image1.Source = New Imaging.BitmapImage(myUri)
                
              End If
              
            End Sub
            </code>
            </example>
            <param name="level">Layer level</param>
            <param name="row">Tile row</param>
            <param name="col">Tile column</param>
            <returns>URL to the tile image</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of the layer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> object.
            This object represents the legend of the map service layer and contains a collection of LayerLegendInfos (one by sublayer)
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.GetLayerVisibility(System.Int32)">
            <summary>
            Gets the sub-layer visibility.
            </summary>
            <remarks>For a tiled map service, the sublayer visibilities can't be changed so this method returns always the default visibility.</remarks>
            <param name="layerID">The sub-layer ID.</param>
            <returns>The sub-layer visibility</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.SetLayerVisibility(System.Int32,System.Boolean)">
            <summary>
            Sets the sublayer visibility.
            </summary>
            <remarks>For a tiled map service, the sublayer visibilities can't be changed, so this method is doing nothing.</remarks>
            <param name="layerID">The sublayer ID.</param>
            <param name="visible">The sublayer visibility.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer._layerTree">
            <summary>
             Helper object to manage the conversion between the 2 visibility logics.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.Url">
            <summary>Gets or sets the URL to a tiled ArcGIS REST map service.</summary>
            <example>
            <code lang="XAML">
            &lt;esri:ArcGISTiledMapServiceLayer 
                   Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer" /&gt;
            </code>
            </example>
            <remarks>
            The URL defines the REST endpoint to an ArcGIS Server cached (tiled) map service.
            Use the 
            <a href="javascript:ApiToConcept('01660000001w000000', '01n700000004000000', '011v00000007000000')" target="_top">Services Directory</a> 
            application
            available with REST services on any ArcGIS Server site to discover the URL.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.ProxyURL">
            <summary>
            Gets or sets the URL to proxy the request through.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.Layers">
            <summary>Gets the sub-layers in a tiled map service.</summary>
            <value>Array of LayerInfo.</value>
            <remarks>
            Each LayerInfo will provide the default visibility, unique ID, name and a set of
            sub-layer ids (if present).
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.Token">
            <summary>Gets or sets the token for accessing a secure ArcGIS Server service.</summary>
            <example>
            <code lang="XAML">
            &lt;esri:ArcGISTiledMapServiceLayer 
                   Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer" 
                   Token="RlesXs-ILOaJghxIjn1rO0XYrAtTLrevRw1otuXyXP6e4sDefKrZcgJfq74KB7aQ" /&gt;
            </code>
            </example>
            <remarks>
            ArcGIS Server services may be secured using token authentication. Use 
            <a href="javascript:ApiToConcept('01660000001w000000', '01n700000004000000', '011v00000007000000')" target="_top">Services Directory</a> 
            to determine if a service requires a
            token to be used. A token is an encrypted string generated by a token service on the
            same ArcGIS Server site and the secured service. The token service can be accessed in a
            browser via the Get Token link in Services Explorer or by navigating to the main token
            service page (e.g. 
            <a href="http://www.example.com/ArcGIS/tokens/gettoken.html">http://www.example.com/ArcGIS/tokens/gettoken.html</a>).
            See the discussion topic on 
            <a href="javascript:ApiToConcept('016600000022000000', '01n700000022000000', '011v0000000n000000')" target="_top">secure services</a> 
            for more info.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.InitialExtent">
            <summary>
            The initial extent reported by the service.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.Units">
            <summary>
            The map units this layer uses for its default spatial reference.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.MapName">
            <summary>Gets the name of the map as reported by the service.</summary>
            <value>The map name.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.Description">
            <summary>
            Gets the description information of an ArcGIS Server based ArcGISTiledMapServiceLayer web service.
            </summary>
            <remarks>
            <para>
            When authoring an ArcGISTiledMapServiceLayer in ArcMap to publish an ArcGIS Server web service, the 
            Description information is set in the <b> Description </b> section on the <b>General</b> tab of the 
            <b>Data Frame Properties</b> dialog. See the following ArcMap screen shot:
            </para>
            <para>
            <img border="0" alt="Setting the ArcGISTiledMapServiceLayer.Description in Description section of the Data Frame Properties dialog of ArcMap." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISTiledMapServiceLayer.Description1.png"/>
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            When the ArcGISTiledMapServiceLayer Initializes the Description will be automatically populated in the TextBlock.
            <para>
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Showing the Description of an ArcGISTiledMapServiceLayer." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISTiledMapServiceLayer.Description2.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map Control. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="0,180,0,0" Name="Map1" 
                      VerticalAlignment="Top" Height="300" Width="400" Extent="-83.32,42.58,-83.29,42.61" &gt;
              
                &lt;!-- Define an ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer 
                      Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/TaxParcel/AssessorsBasemap/MapServer"
                      Initialized="ArcGISTiledMapServiceLayer_Initialized"/&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- Description (Read Only). --&gt;
              &lt;sdk:Label Height="24" HorizontalAlignment="Left" Margin="0,88,0,0" Name="Label_Description" 
                         VerticalAlignment="Top" Width="120" Content="Description:"/&gt;
              &lt;TextBox Height="69" HorizontalAlignment="Left" Margin="0,105,0,0" Name="TextBox_Description" 
                       VerticalAlignment="Top" Width="400" TextWrapping="Wrap" /&gt;
              
              &lt;!-- 
              As an alternative you could bind the ArcGISTiledMapServiceLayer.Description directly to the
              TextBox.Text Property and not need to put any code in the code-behind for the 
              ArcGISTiledMapServiceLayer.Initialized Event.
              --&gt;
              &lt;!--&lt;TextBox Height="69" HorizontalAlignment="Left" Margin="0,105,0,0" Name="TextBox_Description" TextWrapping="Wrap"
                       VerticalAlignment="Top" Width="400" Text="{Binding ElementName=Map1, Path=Layers[0].Descripton}"/&gt;--&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="52" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="400" 
                   TextWrapping="Wrap" Text="When the ArcGISTiledMapServiceLayer Initializes the Description
                   will be automatically populated in the TextBlock." /&gt;
                  
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void ArcGISTiledMapServiceLayer_Initialized(object sender, System.EventArgs e)
            {
              // Get the first layer in the Map. 
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer = null;
              myArcGISTiledMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer)(Map1.Layers[0]);
              
              // Description (Read Only).
              // NOTE: The Description information is set in the Description section on the General tab of the Data Frame 
              // Properties dialog in ArcMap.
              TextBox_Description.Text = myArcGISTiledMapServiceLayer.Description;
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub ArcGISTiledMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
              
              ' Get the first layer in the Map. 
              Dim myArcGISTiledMapServiceLayer As ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer = CType(Map1.Layers.Item(0), ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer)
              
              ' Description (Read Only).
              ' NOTE: The Description information is set in the Description section on the General tab of the Data Frame 
              ' Properties dialog in ArcMap.
              TextBox_Description.Text = myArcGISTiledMapServiceLayer.Description
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.ServiceDescription">
            <summary>Gets the description reported by the service.</summary>
            <value>The service description.</value>
            <remarks>The service description is defined for the map service.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.CopyrightText">
            <summary>
            Gets the copyright text information of an ArcGIS Server based ArcGISTiledMapServiceLayer web service.
            </summary>
            <remarks>
            <para>
            When authoring an ArcGISTiledMapServiceLayer in ArcMap to publish an ArcGIS Server web service, the 
            CopyrightText information is set in the <b>Credits</b> section on the <b>General</b> tab of the 
            <b>Data Frame Properties</b> dialog. See the following ArcMap screen shot:
            </para>
            <para>
            <img border="0" alt="Setting the ArcGISTiledMapServiceLayer.CopyrightText in Credits section of the Data Frame Properties dialog of ArcMap." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISTiledMapServiceLayer.CopyrightText1.png"/>
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            When the ArcGISTiledMapServiceLayer Initializes the CopyrightText will be automatically populated 
            in the TextBlock.
            <para>
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Showing the CopyrightText of an ArcGISTiledMapServiceLayer." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISTiledMapServiceLayer.CopyrightText2.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map Control. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="0,180,0,0" Name="Map1" 
                      VerticalAlignment="Top" Height="300" Width="400" &gt;
              
                &lt;!-- Define an ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer 
                      Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/TaxParcel/AssessorsBasemap/MapServer"
                      Initialized="ArcGISTiledMapServiceLayer_Initialized"/&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- CopyrightText (Read Only). --&gt;
              &lt;sdk:Label Height="24" HorizontalAlignment="Left" Margin="0,88,0,0" Name="Label_CopyrightText" 
                         VerticalAlignment="Top" Width="120" Content="CopyrightText:"/&gt;
              &lt;TextBox Height="69" HorizontalAlignment="Left" Margin="0,105,0,0" Name="TextBox_CopyrightText" 
                       VerticalAlignment="Top" Width="400" TextWrapping="Wrap" /&gt;
              
              &lt;!-- 
              As an alternative you could bind the ArcGISTiledMapServiceLayer.CopyrightText directly to the
              TextBox.Text Property and not need to put any code in the code-behind for the 
              ArcGISDynamicMapServiceLayer.Initialized Event.
              --&gt;
              &lt;!--&lt;TextBox Height="69" HorizontalAlignment="Left" Margin="0,105,0,0" Name="TextBox_CopyrightText" TextWrapping="Wrap"
                       VerticalAlignment="Top" Width="400" Text="{Binding ElementName=Map1, Path=Layers[0].CopyrightText}"/&gt;--&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="52" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="400" 
                   TextWrapping="Wrap" Text="When the ArcGISTiledMapServiceLayer Initializes the CopyrightText
                   will be automatically populated in the TextBlock." /&gt;
                  
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void ArcGISTiledMapServiceLayer_Initialized(object sender, System.EventArgs e)
            {
              // Get the first layer in the Map. 
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer = null;
              myArcGISTiledMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer)(Map1.Layers[0]);
              
              // CopyrightText (Read Only).
              // NOTE: The CopyrightText information is set in the Credits section on the General tab of the Data Frame 
              // Properties dialog in ArcMap.
              TextBox_CopyrightText.Text = myArcGISTiledMapServiceLayer.CopyrightText;
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub ArcGISTiledMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
              
              ' Get the first layer in the Map. 
              Dim myArcGISTiledMapServiceLayer As ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer = CType(Map1.Layers.Item(0), ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer)
              
              ' CopyrightText (Read Only).
              ' NOTE: The CopyrightText information is set in the Credits section on the General tab of the Data Frame 
              ' Properties dialog in ArcMap.
              TextBox_CopyrightText.Text = myArcGISTiledMapServiceLayer.CopyrightText
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.Version">
            <summary>
            Gets the version of ArcGIS Server where the map service is published.
            </summary>
            <remarks>Examples are 9.3, 9.31, 10, 10.01.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.Capabilities">
            <summary>
            Obtains the type of ArcGIS Server 'map service' capabilities for the ArcGISTiledMapServiceLayer.
            </summary>
            <remarks>
            <para>
            The possible 'map service' capabilities string values that can be returned in the IEnumerable collection are:
            </para>
            <list type="bullet">
              <item>Map</item>
              <item>Query</item>
              <item>Data</item>
            </list>
            <para>
            The IEnumerable String values listed above as a result of the Capabilities Property are only available for 
            ArcGIS Server version 10.0 and higher. Using the Capabilities Property request on ArcGIS Server 9.31 and 
            earlier will return and IEnumerable(Of String).Count = 0.
            </para>
            <para>
            For each 'map service' capability there are often one or more 'map service' operations that can be 
            performed. Each capability and their operations are listed in the following table:  
            </para>
            <list type="table">  
            <listheader><command_map>Map</command_map><command_query>Query</command_query><command_data>Data</command_data></listheader>  
            <item><command_map>ComputeDistance</command_map><command_query>GetSQLSyntaxInfo</command_query><command_data>Find</command_data></item>
            <item><command_map>ComputeScale</command_map><command_query>Identify</command_query><command_data>QueryFeatureData</command_data></item>
            <item><command_map>ExportMapImage</command_map><command_query>QueryFeatureCount</command_query><command_data></command_data></item>
            <item><command_map>FromMapPoints</command_map><command_query>QueryFeatureIDs</command_query><command_data></command_data></item>
            <item><command_map>GetCacheName</command_map><command_query>QueryHyperlinks</command_query><command_data></command_data></item>
            <item><command_map>GetDefaultMapName</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>GetDocumentInfo</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>GetLayerTile</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>GetLegendInfo</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>GetMapCount</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>GetMapName</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>GetMapTile</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>GetServerInfo</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>GetSupportedImageReturnType</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>GetTileCacheInfo</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>GetVirtualCacheDirectory</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>HasLayerCache</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>HasSingleFusedMapCache</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>IsFixedScaleMap</command_map><command_query></command_query><command_data></command_data></item>
            <item><command_map>ToMapPoints</command_map><command_query></command_query><command_data></command_data></item>
            </list>
            <para>
            More details about ArcGIS Server capabilities can be found in the 
            <a href="http://help.arcgis.com/en/arcgisserver/10.0/help/arcgis_server_dotnet_help/index.html#//009300000069000000.htm" target="_blank">Tuning and configuring services</a> 
            documentation.
            </para>
            <para>
            Discovering the specific 'map service' operation that is available for the ArcGISTiledMapServiceLayer can be 
            found by opening the 
            <a href="javascript:ApiToConcept('01660000001w000000', '01n700000004000000', '011v00000007000000')" target="_top">Services Directory</a> 
            for an ArcGIS 
            Server site. To do this copy the 
            <see cref="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.Url">ArcGISTiledMapServiceLayer.Url</see> Property 
            into the address bar of a web browser and then scroll to the bottom of the returned web page and look for 
            the <b>Supported Operations</b> section. See the following screen shot:
            </para>
            <para>
            <img border="0" alt="Discovering what 'Supported Operations' are available in a map service." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISTiledMapServiceLayer.Capabilities.png"/>
            </para>
            </remarks>
            <example>
            <code title="Example CS1" description="" lang="CS">
            public void GetCapabilities()
            {
              
              // Get the ArcGIS Server service capabilities for the ArcGISTiledMapServiceLayer.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer)map1.Layers["myArcGISTiledMapServiceLayer"];
              IEnumerable&lt;string&gt; myCapabilities = myArcGISTiledMapServiceLayer.Capabilities;
                          
              // Get the Count of the capabilities to see if we are using ArcGIS Server 10.0 and forward.
              if (myCapabilities.Count() &gt; 0)
              {
                
                // Display the capabilities in a MessageBox.
                System.Text.StringBuilder myMessage = new System.Text.StringBuilder();
                myMessage.Append("The Capabilities of the ArcGISTiledMapServiceLayer are:" + System.Environment.NewLine);
                
                foreach (string myCapability in myCapabilities)
                {
                  myMessage.Append(myCapability + System.Environment.NewLine);
                }
                
                MessageBox.Show(myMessage.ToString());
                
              }
              else
              {
                
                // Obtaining the listing of capabilities is not available for ArcGIS Server 9.31 and earlier.
                MessageBox.Show("The Count of the Capabilities Property = 0. Must be ArcGIS Server version 9.31 or earlier.");
                
              }
              
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Public Sub GetCapabilities()
            
              ' Get the ArcGIS Server service capabilities for the ArcGISTiledMapServiceLayer.
              Dim myArcGISTiledMapServiceLayer As ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer = Map1.Layers("myArcGISTiledMapServiceLayer")
              Dim myCapabilities As IEnumerable(Of String) = myArcGISTiledMapServiceLayer.Capabilities
              
              ' Get the Count of the capabilities to see if we are using ArcGIS Server 10.0 and forward.
              If myCapabilities.Count &gt; 0 Then
                
                ' Display the capabilities in a MessageBox.
                Dim myMessage As New System.Text.StringBuilder
                myMessage.Append("The Capabilities of the ArcGISTiledMapServiceLayer are:" + vbCrLf)
                
                Dim myCapability As String = Nothing
                For Each myCapability In myCapabilities
                  myMessage.Append(myCapability + vbCrLf)
                Next
                
                MessageBox.Show(myMessage.ToString)
                
              Else
                
                ' Obtaining the listing of capabilities is not available for ArcGIS Server 9.31 and earlier.
                MessageBox.Show("The Count of the Capabilities Property = 0. Must be ArcGIS Server version 9.31 or earlier.")
            
              End If
            
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.Tables">
            <summary>
            Gets or sets the list of tables associated with the map service.
            </summary>
            <value>The tables.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed.
            </summary>
            <remarks>
            Actually, for this kind of layer, the legend never changes.
            </remarks>
        </member>
        <member name="E:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.VisibilityChanged">
            <summary>
            Occurs when the visibility of sublayers changed.
            </summary>
            <remarks>As the sublayer visibilities of a tiled map service cant' be changed, this event is never used
            but needs to be there for implementing ISublayerVisibilitySupport.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.AttributionTemplate">
            <summary>
            Gets the attribution template of an ArcGIS Server based ArcGISTiledMapServiceLayer web service.
            </summary>
            <remarks>
            <para>
            The AttributionTemplate Property returns a 
            <a href="http://msdn.microsoft.com/en-us/library/ms589297(v=VS.95).aspx" target="_blank">DataTemplate</a> 
            that allows for the display of the 
            <see cref="P:ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer.CopyrightText">ArcGISTiledMapServiceLayer.CopyrightText</see> 
            information. 
            </para>
            <para>
            The typical use case is to use an 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.Attribution">ESRI Attribution Control</see> where the 
            <see cref="P:ESRI.ArcGIS.Client.Map.Layers">Map.Layers</see> Property is bound to the 
            <see cref="M:ESRI.ArcGIS.Client.Toolkit.Attribution.Layers">Attribution.Layers</see> Property. This will enable 
            the display of the CopyrightText information about various layers in a nicely formatted output with minimal 
            programming effort. The ease of use for this use case becomes readily apparent when there are multiple 
            layers with CopyrightText information that need to be displayed and only a single binding needs to take 
            place. <b>Note:</b> All layers that have an AttributionTemplate Property have the 
            <see cref="T:ESRI.ArcGIS.Client.IAttribution">IAttribution</see> Interface implemented. 
            </para>
            <para>
            The AttributionTemplate is read-only and is only useful to display the CopyrightText information. It is 
            not possible to set the CopyrightText information on the client side nor is it possible to change the 
            internals of the DataTemplate obtained by the AttributionTemplate. 
            </para>
            <para>
            Any Control that has a <b>ContentTemplate</b> Property can display the information contained in the 
            AttributionTemplate. These Controls can have their base Properties modified to alter the appearance of the 
            CopyrightText information being displayed (i.e. FontSize, Foreground, etc.). When multiple layers have 
            CopyrightText information that needs attributed, it takes more complex programming logic to display the 
            information; consider using the ESRI Attribution Control instead.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            Click the 'Display Copyright and AttributionTemplate Information' Button to display CopyrightText 
            information in various controls. The purpose is to demonstrate what is contained in the 
            AttributionTemplate is the same as the CopyrightText.
            <para>
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Showing the CopyrightText of an ArcGISTiledMapServiceLayer." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISTiledMapServiceLayer.AttributionTemplate1.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map Control. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="0,180,0,0" Name="Map1" 
                      VerticalAlignment="Top" Height="300" Width="400" &gt;
              
                &lt;!-- Define an ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer 
                      Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/PublicSafety/PublicSafetyBasemap/MapServer" /&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- 
              Add a Button to display ArcGISTiledMapServiceLayer CopyrightText and AttributeTemplate
              Property information. Both Properties display the same information. 
              --&gt;
              &lt;Button Content="Display Copyright and AttributionTemplate Information" Height="23" 
                      HorizontalAlignment="Left" Margin="12,151,0,0" Width="763" VerticalAlignment="Top" 
                      Name="ButtonAttributionTemplate" Click="ButtonAttributionTemplate_Click"/&gt;
              
            
              &lt;!-- A TextBox --&gt;
              &lt;sdk:Label Height="24" HorizontalAlignment="Left" Margin="406,179,0,0" Name="Label_CopyrightText" 
                         VerticalAlignment="Top" Width="350" Content="TextBox:"/&gt;
              &lt;TextBox Height="50" HorizontalAlignment="Left" Margin="406,200,0,0" Name="TextBox1" 
                       VerticalAlignment="Top" Width="350" TextWrapping="Wrap" /&gt;
              
              &lt;!-- ESRI Attribution Control  --&gt;
              &lt;sdk:Label Height="24" HorizontalAlignment="Left" Margin="406,265,0,0" Name="Label_Attribution" 
                         VerticalAlignment="Top" Width="346" Content="ESRI Attribution Control:"/&gt;
              &lt;esri:Attribution HorizontalAlignment="Left" Margin="406,285,0,0" Name="Attribution1" 
                                 VerticalAlignment="Top" Height="50" Width="350" /&gt;
              
              &lt;!-- A ContentControl --&gt;
              &lt;sdk:Label Height="24" HorizontalAlignment="Left" Margin="405,341,0,0" Name="Label_ContentControl" 
                         VerticalAlignment="Top" Width="346" Content="Content Control:"/&gt;
              &lt;ContentControl Height="30" HorizontalAlignment="Left" Margin="405,361,0,0" 
                              Name="ContentControl1" VerticalAlignment="Top" Width="351" 
                              FontSize="10"  Foreground="Green" /&gt;
              
              &lt;!-- A Button --&gt;
              &lt;sdk:Label Height="24" HorizontalAlignment="Left" Margin="405,405,0,0" Name="Label_Button" 
                         VerticalAlignment="Top" Width="346" Content="Button:"/&gt;
              &lt;Button Height="51" HorizontalAlignment="Left" Margin="405,429,0,0" 
                      Name="Button1" VerticalAlignment="Top" Width="351" FontFamily="Webdings" /&gt;
              
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="52" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="756" TextWrapping="Wrap" 
                   Text="Click the 'Display Copyright and AttributionTemplate Information' Button to display CopyrightText information 
                         in various controls. The purpose is to demonstrate what is contained in the AttributionTemplate is the
                         same as the CopyrightText." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void ButtonAttributionTemplate_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Get the ArcGISTiledMapServiceLayer.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer = null;
              myArcGISTiledMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer)(Map1.Layers[0]);
              
              // Display the ArcGISTiledMapServiceLayer.CopyrightText in a TextBox.
              TextBox1.Text = myArcGISTiledMapServiceLayer.CopyrightText;
              
              // Display the ArcGISTiledMapServiceLayer.CopyrightText information via the ESRI Attribution Control.
              Attribution1.Layers = Map1.Layers;
              
              // Display the ArcGISTiledMapServiceLayer.CopyrightText information via a Microsoft ContentControl.
              ContentControl1.ContentTemplate = myArcGISTiledMapServiceLayer.AttributionTemplate;
              ContentControl1.Content = myArcGISTiledMapServiceLayer;
              
              // Display the ArcGISTiledMapServiceLayer.CopyrightText information via a Button.
              Button1.ContentTemplate = myArcGISTiledMapServiceLayer.AttributionTemplate;
              Button1.Content = myArcGISTiledMapServiceLayer;
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub ButtonAttributionTemplate_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Get the ArcGISTiledMapServiceLayer.
              Dim myArcGISTiledMapServiceLayer As ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer = CType(Map1.Layers.Item(0), ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer)
              
              ' Display the ArcGISTiledMapServiceLayer.CopyrightText in a TextBox.
              TextBox1.Text = myArcGISTiledMapServiceLayer.CopyrightText
              
              ' Display the ArcGISTiledMapServiceLayer.CopyrightText information via the ESRI Attribution Control.
              Attribution1.Layers = Map1.Layers
              
              ' Display the ArcGISTiledMapServiceLayer.CopyrightText information via a Microsoft ContentControl.
              ContentControl1.ContentTemplate = myArcGISTiledMapServiceLayer.AttributionTemplate
              ContentControl1.Content = myArcGISTiledMapServiceLayer
              
              ' Display the ArcGISTiledMapServiceLayer.CopyrightText information via a Button.
              Button1.ContentTemplate = myArcGISTiledMapServiceLayer.AttributionTemplate
              Button1.Content = myArcGISTiledMapServiceLayer
              
            End Sub
            </code>
            </example>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer">
            <summary>
            Dynamic ArcGIS REST map service layer.
            </summary>
            <remarks>
            <para>
            Allows working with a dynamic map service resource exposed by the ArcGIS Server REST API (available in 
            ArcGIS Server 9.3 and above). A dynamic map service generates images on the fly. 
            </para>
            <para>
            The background color for an ArcGISDynamicMapServiceLayer will always be transparent when the 
            <see cref="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.ImageFormat">ImageFormat</see> is
            set to use a lossless data compression such as PNG.
            </para>
            </remarks>
            <example>
            	<code title="Example XAML1" description="" lang="XAML">
                &lt;StackPanel Name="StackPanel1" Height="400" Width="400" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" &gt;
                    &lt;esri:Map Background="White" Name="Map1" Height="200" Width="400"&gt;
                         &lt;!-- Define an ArcGISDynamicMapServiceLayer. --&gt;
                         &lt;esri:ArcGISDynamicMapServiceLayer 
                              Url="http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer" /&gt;
                    &lt;/esri:Map&gt;
                &lt;/StackPanel&gt;
                </code>
                
                <code title="Example CS1" description="" lang="CS">
            	private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
            	{
            	     
            	  // Create an ArcGISDynamicServiceLayer. The Map1 object (a Map class) was previously defined in XAML.
            	  ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = new ArcGISDynamicMapServiceLayer();
            	 
                  // Add an ArcGISDynamicMapServiceLayer.
            	  myArcGISDynamicMapServiceLayer.Url = "http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer";
            	  
            	  myArcGISDynamicMapServiceLayer.Initialized += new EventHandler&lt;EventArgs&gt;(ArcGISDynamicMapServiceLayer_Initialized);
            	  Map1.Layers.Add(myArcGISDynamicMapServiceLayer);
            	  
            	}
            	
            	private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
            	{
            	  // Use the various ArcGISDynamicMapServiceLayer properties in this method. 
            	}
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
            	Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
            	
            	  ' Create an ArcGISDynamicServiceLayer. The Map1 object (a Map class) was previously defined in XAML.
            	  Dim myArcGISDynamicMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
            	 
                  ' Add an ArcGISDynamicMapServiceLayer.
            	  myArcGISDynamicMapServiceLayer.Url = "http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer"
            	  
            	  AddHandler myArcGISDynamicMapServiceLayer.Initialized, AddressOf ArcGISDynamicMapServiceLayer_Initialized
            	  Map1.Layers.Add(myArcGISDynamicMapServiceLayer)
            	  
            	End Sub
            	
            	Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
            	  ' Use the various ArcGISDynamicMapServiceLayer properties in this method. 
            	End Sub
                </code>
            </example>
        </member>
        <member name="T:ESRI.ArcGIS.Client.DynamicMapServiceLayer">
            <summary>
            Abstract dynamic map service layer class
            </summary>
            <remarks>
            <para>Implement this class if you want to create a custom dynamic layer where
            the generated image can be reached by a URL to a service of file hosted
            online. Note that if you want to manipulate the image, generate it on the 
            client or manually handle download of the image you should instead implement
            <see cref="T:ESRI.ArcGIS.Client.DynamicLayer"/>.</para>
            <para>
            As a minimum this layer must implement <see cref="M:ESRI.ArcGIS.Client.DynamicMapServiceLayer.GetUrl(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,ESRI.ArcGIS.Client.DynamicMapServiceLayer.OnUrlComplete)"/>
            and set the <see cref="P:ESRI.ArcGIS.Client.Layer.FullExtent"/> to the extent 
            of the layer. The FullExtent should include a default SpatialReference for 
            the layer. The map uses this to determine when to draw the layer.
            </para>
            <para>
            When overriding <see cref="M:ESRI.ArcGIS.Client.Layer.Initialize"/> you should
            always call base.Initialize(). If you require doing an asynchronous request
            (ie download metadata about the service), you should call base.Initialize() 
            after the processing has completed. The Map wil not render the layer until 
            Initialize has been called. If an error occurs in initialization set the 
            <see cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/> property with the exception
            and still call base.Initialize() afterwards.
            </para>
            <para>
            Creating a dynamic layer using a simple map rendering webservice:<br/>
            <code lang="CS">
            public class MyLayer : DynamicMapServiceLayer
            {
              public override void Initialize()
              {
                this.FullExtent = new Envelope(-180,-90,180,80) { SpatialReference = new SpatialReference(4326) };
                this.SpatialReference = new SpatialReference(4326);
                base.Initialize();
              }
              public override void GetUrl(Envelope extent, int width, int height, OnUrlComplete onComplete)
              {
                if (extent.SpatialReference != null &amp;&amp; extent.SpatialReference.WKID != 4326)
                  throw new NotSupportedException("SRID not supported");
                onComplete(string.Format(CultureInfo.InvariantCulture, "http://myserver/service.ashx?box={0},{1},{2},{3}&amp;w={4}&amp;h={5}",
                  extent.XMin, extent.YMin, extent.XMax, extent.YMax, width, height),
                  width, height, extent);
              }
            }
            </code>
            </para>
            </remarks>
            <seealso cref="T:ESRI.ArcGIS.Client.DynamicLayer"/>
        </member>
        <member name="T:ESRI.ArcGIS.Client.DynamicLayer">
             <summary>
            Abstract dynamic layer class
             </summary>
             <remarks>
             <para>Implement this class if you want to create a custom dynamic layer and want
             to manage the creation, manipulation or download of the source bitmap 
             data yourself. Note that if you only need to generate a URL to an image
             you should instead implement <see cref="T:ESRI.ArcGIS.Client.DynamicMapServiceLayer"/>. That
             layer type automatically takes care of downloading the image based on a 
             URL string.</para>
             <para>
             As a minimum this layer must implement <see cref="M:ESRI.ArcGIS.Client.DynamicMapServiceLayer.GetSource(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,ESRI.ArcGIS.Client.DynamicLayer.OnImageComplete)"/>
             and set the <see cref="P:ESRI.ArcGIS.Client.Layer.FullExtent"/> to the extent 
             of the layer. The FullExtent should include a default SpatialReference for 
             the layer. The map uses this to determine when to draw the layer.
             </para>
             <para>
             If you want to report image generation progress to the Map, call
             <see cref="M:ESRI.ArcGIS.Client.DynamicLayer.OnProgress(System.Int32)"/> with a progress completion percentage value 
             between 0 to 100.
             </para>
             <para>
             If possible also override <see cref="M:ESRI.ArcGIS.Client.DynamicLayer.Cancel"/>. This is
             called if the last request for an image has become outdated before
             the image was generated and is no longer needed. If you perform heavy
             image processing in a background thread, this thread should be stopped
             when Cancel is called. Similar if there's an ongoing download in progress
             this should likewise be cancelled.
             </para>
             </remarks>
             <seealso cref="T:ESRI.ArcGIS.Client.DynamicMapServiceLayer"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DynamicLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.DynamicLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DynamicLayer.Refresh">
            <summary>
            Refreshes the dynamic layer.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DynamicLayer.OnMapChanged(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.Map)">
            <summary>
            Override to know when a layer's <see cref="T:ESRI.ArcGIS.Client.Map"/> property changes.
            </summary>
            <param name="oldValue">Old map</param>
            <param name="newValue">New map</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DynamicLayer.Cancel">
            <summary>
            Stops loading of any pending images.
            </summary>
            <remarks>Override this method to stop ongoing generation or download of images.</remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DynamicLayer.Draw(ESRI.ArcGIS.Client.Geometry.Envelope,System.Double,ESRI.ArcGIS.Client.Geometry.MapPoint,System.Boolean,System.Boolean)">
            <summary>
            Performs an update of the layer
            </summary>
            <param name="extent">Extent to draw</param>
            <param name="resolution">Resolution to draw at</param>
            <param name="canvasOrigin">Origin of the canvas</param>
            <param name="useTransitions">Whether smooth transitions should be used, like fading in the images</param>
            <param name="isContinuous">if set to <c>true</c> is continuous draw.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DynamicLayer.GetSource(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,ESRI.ArcGIS.Client.DynamicLayer.OnImageComplete)">
            <summary>
            Gets the source image to display in the dynamic layer. Override this to generate
            or modify images.
            </summary>
            <param name="extent">The extent of the image being requested.</param>
            <param name="width">The width of the image being requested.</param>
            <param name="height">The height of the image being requested.</param>
            <param name="onComplete">The method to call when the image is ready.</param>
            <seealso cref="M:ESRI.ArcGIS.Client.DynamicLayer.OnProgress(System.Int32)"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DynamicLayer.OnProgress(System.Int32)">
            <summary>
            Raises the progress event
            </summary>
            <remarks>
            <para>When <see cref="M:ESRI.ArcGIS.Client.DynamicLayer.GetSource(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,ESRI.ArcGIS.Client.DynamicLayer.OnImageComplete)"/> is called, the progress event is automatically raised with value '0',
            and when the image is returned, the progress event is again raised with value 100.
            Raise the progress event to fire progress events in between 0 and 100, for instance
            to report the progress of a download, image generation etc.</para>
            <para>If the returned image from GetSource is a <see cref="T:System.Windows.Media.Imaging.BitmapImage"/> with a URL source,
            the progress event is automatically tracked, and there is no need to raise the progress event.</para>
            </remarks>
            <see cref="M:ESRI.ArcGIS.Client.DynamicLayer.GetSource(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,ESRI.ArcGIS.Client.DynamicLayer.OnImageComplete)"/>
            <see cref="E:ESRI.ArcGIS.Client.Layer.Progress"/>
            <param name="progress">Progress percentage between 0 and 100</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.DynamicLayer.OnImageComplete">
            <summary>
            Get image source complete EventHandler
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DynamicMapServiceLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.DynamicMapServiceLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DynamicMapServiceLayer.GetUrl(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,ESRI.ArcGIS.Client.DynamicMapServiceLayer.OnUrlComplete)">
            <summary>
            Gets the URL.
            </summary>
            <param name="extent">The extent.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="onComplete">The handler to invoke when the URL is returned.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DynamicMapServiceLayer.GetSource(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,ESRI.ArcGIS.Client.DynamicLayer.OnImageComplete)">
            <summary>
            Gets the source image to display in the dynamic layer. Override this to generate
            or modify images.
            </summary>
            <param name="extent">The extent of the image being request.</param>
            <param name="width">The width of the image being request.</param>
            <param name="height">The height of the image being request.</param>
            <param name="onComplete">The method to call when the image is ready.</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.DynamicMapServiceLayer.OnUrlComplete">
            <summary>
            Get URL complete EventHandler
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.#cctor">
            <summary>
            Initializes the <see cref="T:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.GetDetails(System.Int32,System.Action{ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo,System.Exception})">
            <summary>
            Gets the sub layer or table details.
            </summary>
            <param name="id">The sub layer or table  id.</param>
            <param name="onCompleted">The method to call when details of the sub layer or table is retrieved.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.GetAllDetails(System.Action{System.Collections.Generic.IDictionary{System.Int32,ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo},System.Exception})">
            <summary>
            Gets all details for sub layers or tables.
            </summary>
            <param name="onCompleted">The method to call when details of the sub layer or table is retrieved.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.GetUrl(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,ESRI.ArcGIS.Client.DynamicMapServiceLayer.OnUrlComplete)">
            <summary>
            Gets the URL that references the map image.
            </summary>
            <param name="extent">The map extent in map units.</param>
            <param name="width">The map width in pixels.</param>
            <param name="height">The map height in pixels.</param>
            <param name="onComplete">The method to delegate to when the map image is generated.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.GetSource(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,ESRI.ArcGIS.Client.DynamicLayer.OnImageComplete)">
            <summary>
            Gets the source image to display in the dynamic layer. Override this to generate
            or modify images.
            </summary>
            <param name="extent">The extent of the image being request.</param>
            <param name="width">The width of the image being request.</param>
            <param name="height">The height of the image being request.</param>
            <param name="onComplete">The method to call when the image is ready.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.Cancel">
            <summary>
            Stops loading of any pending images.
            </summary>
            <remarks>Override this method to stop ongoing generation or download of images.</remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.Initialize">
            <summary>
            Initializes the resource.
            Override this method if your resource requires asynchronous requests to initialize,
            and call the base method when initialization is complete.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.TimeIntervalProperty">
            <summary>
            Identifies the TimeInterval dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.UrlProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.Url"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerTimeOptionsProperty">
            <summary>
            Dependency property for LayerTimeOptions for data binding.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of the layer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> object.
            This object represents the legend of the map service layer and contains a collection of LayerLegendInfos (one by sublayer)
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.GetLayerVisibility(System.Int32)">
            <summary>
            Gets the sub-layer visibility.
            </summary>
            <param name="layerID">The sub-layer ID.</param>
            <returns>The sub-layer visibility</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.SetLayerVisibility(System.Int32,System.Boolean)">
            <summary>
            Sets the sublayer visibility.
            </summary>
            <param name="layerID">The sublayer ID.</param>
            <param name="visible">The sublayer visibility.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer._layerTree">
            <summary>
             Helper object to manage the conversion between the 2 visibility logics.
             This object stores the visibilities set by using <see cref="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.SetLayerVisibility(System.Int32,System.Boolean)"/>.
             If the property <see cref="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.VisibleLayers"/> is set, this object is reset with the value coming from VisibleLayers (with all group layers set to visible). 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.FullExtent">
            <summary>
            The full extent of the layer
            </summary>
            <value></value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.VisibleLayers">
             <summary>
             Gets or sets the sub-layers that are visible in an ArcGISDynamicMapServiceLayer.
             </summary>
             <seealso cref="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.Layers"/>
             <value>Integer array containing sub-layer ids.</value>
             <remarks>
             <para>
             To set visiblility of an ArcGISDynamicMapServiceLayer when a Silverlight application first loads, define 
             the VisibleLayers Property during the <see cref="E:ESRI.ArcGIS.Client.Layer.Initialized">Initialized Event.</see>
             </para>
             <para>
             The screenshot corresponds to the code example in this document. The Url for the ArcGISDynamicMapServiceLayer 
             was "http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer" 
             and was zoomed into the state of Florida.
             </para>
             <para>
             <img border="0" alt="Example of setting the VisibleLayers Property." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.VisibleLayers.png"/>
             </para>
             </remarks>
             <example>
                 
             	<code title="Example CS1" description="" lang="CS">
                 private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
                 {
                   // The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_VisibleLayers 
                   // (a TextBlock object) were defined previously in the XAML or code-behind.
                   
                   // Get the first layer in the LayerInfo collection. 
                   ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers[0];
                   
                   // VisibleLayers (Read/Write)
                   // ========================== 
                   
                   // In this example there are three sub-layers (0, 1, 2) that are turned on by default for the 
                   // myArcGISDynamicMapServiceLayer. 
                   
                   // Uncomment the next two lines of code to set only the 2nd and 3rd sub-layers to be visible.
                   //int[] myVisibleLayers2 = { 1, 2 }; 
                   //myArcGISDynamicMapServiceLayer.VisibleLayers = myVisibleLayers2;
                   
                   // Display which sub-layers (via their index number) are visible in a TextBlock.
                   int[] myVisibleLayers = myArcGISDynamicMapServiceLayer.VisibleLayers;
                   if (myVisibleLayers != null)
                   {
                     string myVisibleLayersText = "Number VisibleLayers: " + myVisibleLayers.Length.ToString();
                     string myVisibleLayersText2 = "";
                     int I2 = 0;
                     for (I2 = 0; I2 &lt; myVisibleLayers.Length; I2++)
                     {
                       myVisibleLayersText2 = myVisibleLayersText2 + " " + myVisibleLayers[I2].ToString();
                     }
                     TextBlock_VisibleLayers.Text = myVisibleLayersText + ". VisibleLayers ID's: " + myVisibleLayersText2;
                   }
                   else
                   {
                     TextBlock_VisibleLayers.Text = "[VisibleLayers not set - Meaning all layers are visible.]";
                   }
                   
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
            
                   ' The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_VisibleLayers 
                   ' (a TextBlock object) were defined previously in the XAML or code-behind.
                   
                   ' Get the first layer in the LayerInfo collection. 
                   Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer = Map1.Layers.Item(0)
                   
                   ' VisibleLayers (Read/Write)
                   ' ==========================
            
                   ' In this example there are three sub-layers (0, 1, 2) that are turned on by default for the 
                   ' myArcGISDynamicMapServiceLayer. 
            
                   ' Uncomment the next two lines of code to set only the 2nd and 3rd sub-layers to be visible.
                   'Dim myVisibleLayers2() As Integer = {1, 2}
                   'myArcGISDynamicMapServiceLayer.VisibleLayers = myVisibleLayers2
            
                   ' Display which sub-layers (via their index number) are visible in a TextBlock.
                   Dim myVisibleLayers() As Integer = myArcGISDynamicMapServiceLayer.VisibleLayers
                   If myVisibleLayers IsNot Nothing Then
                     Dim myVisibleLayersText As String = "Number VisibleLayers: " + myVisibleLayers.Length.ToString
                     Dim myVisibleLayersText2 As String = ""
                     Dim I2 As Integer
                     For I2 = 0 To myVisibleLayers.Length - 1
                       myVisibleLayersText2 = myVisibleLayersText2 + " " + myVisibleLayers(I2).ToString
                     Next
                     TextBlock_VisibleLayers.Text = myVisibleLayersText + ". VisibleLayers ID's: " + myVisibleLayersText2
                   Else
                     TextBlock_VisibleLayers.Text = "[VisibleLayers not set - Meaning all layers are visible.]"
                   End If
                   
                 End Sub
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.InitialExtent">
            <summary>
            The initial extent reported by the ArcGISDynamicServiceLayer.
            </summary>
            <example>
            	<code title="Example XAML1" description="" lang="XAML">
                &lt;StackPanel Name="StackPanel1" Height="400" Width="400" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" &gt;
                    &lt;esri:Map Background="White" Name="Map1" Height="200" Width="400"&gt;
                    
                         &lt;!-- Define an ArcGISDynamicMapServiceLayer. --&gt;
                         &lt;esri:ArcGISDynamicMapServiceLayer 
                              Url="http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer" /&gt;
                              
                    &lt;/esri:Map&gt;
                    
                    &lt;!-- InitialExtent Property (Read Only) --&gt;
                    &lt;TextBlock Height="23" HorizontalAlignment="Left" Margin="128,97,0,0" Name="TextBlock_InitialExtent_XMax" 
                               Text="{Binding ElementName=Map1, Path=Layers[0].InitialExtent.XMax, StringFormat=\{0:F3\}}" 
                               VerticalAlignment="Top" Width="58" /&gt;
                    &lt;TextBlock Height="23" HorizontalAlignment="Left" Margin="192,97,0,0" Name="TextBlock_InitialExtent_XMin" 
                               Text="{Binding ElementName=Map1, Path=Layers[0].InitialExtent.XMin, StringFormat=\{0:F3\}}" 
                               VerticalAlignment="Top" Width="58" /&gt;
                    &lt;TextBlock Height="23" HorizontalAlignment="Left" Margin="256,97,0,0" Name="TextBlock_InitialExtent_YMax" 
                               Text="{Binding ElementName=Map1, Path=Layers[0].InitialExtent.YMax, StringFormat=\{0:F3\}}" 
                               VerticalAlignment="Top" Width="58" /&gt;
                    &lt;TextBlock Height="23" HorizontalAlignment="Left" Margin="320,97,0,0" Name="TextBlock_InitialExtent_YMin" 
                               Text="{Binding ElementName=Map1, Path=Layers[0].InitialExtent.YMin, StringFormat=\{0:F3\}}" 
                               VerticalAlignment="Top" Width="58" /&gt;
                &lt;/StackPanel&gt;
                </code>
                
                <code title="Example CS1" description="" lang="CS">
                private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
                {
                    // The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object), TextBlock_InitialExtent_XMax
                    // (a TextBlock object),  TextBlock_InitialExtent_XMin (a TextBlock object), TextBlock_InitialExtent_YMax
                    // (a TextBlock object), and TextBlock_InitialExtent_YMin (a TextBlock object) were defined previously in 
                    // the XAML or code-behind.
                
                    // Get the first layer in the LayerInfo collection. 
                    ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers[0];
                    
                    // InitialExtent (Read Only).
                    ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope = myArcGISDynamicMapServiceLayer.InitialExtent;
                    TextBlock_InitialExtent_XMax.Text = myEnvelope.XMax.ToString();
                    TextBlock_InitialExtent_XMin.Text = myEnvelope.XMin.ToString();
                    TextBlock_InitialExtent_YMax.Text = myEnvelope.YMax.ToString();
                    TextBlock_InitialExtent_YMin.Text = myEnvelope.YMin.ToString();
                }
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
                    ' The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object), TextBlock_InitialExtent_XMax
                    ' (a TextBlock object),  TextBlock_InitialExtent_XMin (a TextBlock object), TextBlock_InitialExtent_YMax
                    ' (a TextBlock object), and TextBlock_InitialExtent_YMin (a TextBlock object) were defined previously in 
                    ' the XAML or code-behind.
                    
                    ' Get the first layer in the LayerInfo collection. 
                    Dim myArcGISDynamicMapServiceLayer As ArcGISDynamicMapServiceLayer = Map1.Layers.Item(0)
                    
                    ' InitialExtent (Read Only).
                    Dim myEnvelope As ESRI.ArcGIS.Client.Geometry.Envelope = myArcGISDynamicMapServiceLayer.InitialExtent
                    TextBlock_InitialExtent_XMax.Text = myEnvelope.XMax.ToString
                    TextBlock_InitialExtent_XMin.Text = myEnvelope.XMin.ToString
                    TextBlock_InitialExtent_YMax.Text = myEnvelope.YMax.ToString
                    TextBlock_InitialExtent_YMin.Text = myEnvelope.YMin.ToString
                End Sub
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.Units">
            <summary>
            The map units the ArcGISDynamicMapServiceLayer uses for its default spatial reference.
            </summary>
            <example>
            	<code title="Example XAML1" description="" lang="XAML">
                &lt;StackPanel Name="StackPanel1" Height="400" Width="400" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" &gt;
                    &lt;esri:Map Background="White" Name="Map1" Height="200" Width="400"&gt;
                    
                         &lt;!-- Define an ArcGISDynamicMapServiceLayer. --&gt;
                         &lt;esri:ArcGISDynamicMapServiceLayer 
                              Url="http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer" /&gt;
                              
                    &lt;/esri:Map&gt;
                    
                    &lt;!-- Units (Read Only). --&gt;
                    &lt;TextBlock Height="22" Name="TextBlock_Units" Text="{Binding ElementName=Map1, Path=Layers[0].Units}" /&gt;
                &lt;/StackPanel&gt;
                </code>
                
                <code title="Example CS1" description="" lang="CS">
                private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
                {
                  // The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_Units
                  // (a TextBlock object) were defined previously in the XAML or code-behind.
                
                  // Get the first layer in the LayerInfo collection. 
                  ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers[0];
                    
                  // Units Property (Read Only)
                  TextBlock_Units.Text = myArcGISDynamicMapServiceLayer.Units;
                }
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
                
                  ' The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_Units
                  ' (a TextBlock object) were defined previously in the XAML or code-behind.
                
                  ' Get the first layer in the LayerInfo collection. 
                  Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer = Map1.Layers.Item(0)
                
                  ' Units Property (Read Only)
                  TextBlock_Units.Text = myArcGISDynamicMapServiceLayer.Units
                
                End Sub
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.Description">
            <summary>
            Gets the description information of an ArcGIS Server based ArcGISDynamicMapServiceLayer web service.
            </summary>
            <remarks>
            <para>
            When authoring an ArcGISDynamicMapServiceLayer in ArcMap to publish an ArcGIS Server web service, the 
            Description information is set in the <b> Description </b> section on the <b>General</b> tab of the 
            <b>Data Frame Properties</b> dialog. See the following ArcMap screen shot:
            </para>
            <para>
            <img border="0" alt="Setting the ArcGISDynamicMapServiceLayer.Description in Description section of the Data Frame Properties dialog of ArcMap." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.Description1.png"/>
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            When the ArcGISDynamicMapServiceLayer Initializes the Description will be automatically populated in the TextBlock.
            <para>
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Showing the Description of an ArcGISDynamicMapServiceLayer." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.Description2.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map Control. Set its Initial Extent to Deleware. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="0,180,0,0" Name="Map1" 
                      VerticalAlignment="Top" Height="300" Width="400" Extent="-76.49,38.33,-74.37,39.92"&gt;
              
                &lt;!-- Define an ArcGISDynamicMapServiceLayer. --&gt;
                &lt;esri:ArcGISDynamicMapServiceLayer 
                      Url="http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer"
                      Initialized="ArcGISDynamicMapServiceLayer_Initialized"/&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- Description (Read Only). --&gt;
              &lt;sdk:Label Height="24" HorizontalAlignment="Left" Margin="0,88,0,0" Name="Label_Description" 
                         VerticalAlignment="Top" Width="120" Content="Description:"/&gt;
              &lt;TextBox Height="69" HorizontalAlignment="Left" Margin="0,105,0,0" Name="TextBox_Description" 
                       VerticalAlignment="Top" Width="400" TextWrapping="Wrap" /&gt;
              
              &lt;!-- 
              As an alternative you could bind the ArcGISDynamicMapServiceLayer.Description directly to the
              TextBox.Text Property and not need to put any code in the code-behind for the 
              ArcGISDynamicMapServiceLayer.Initialized Event.
              --&gt;
              &lt;!--&lt;TextBox Height="69" HorizontalAlignment="Left" Margin="0,105,0,0" Name="TextBox_Description" TextWrapping="Wrap"
                       VerticalAlignment="Top" Width="400" Text="{Binding ElementName=Map1, Path=Layers[0].Descripton}"/&gt;--&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="52" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="400" 
                   TextWrapping="Wrap" Text="When the ArcGISDynamicMapServiceLayer Initializes the Description
                   will be automatically populated in the TextBlock." /&gt;
                  
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
            {
              // Get the first layer in the Map. 
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = null;
              myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)(Map1.Layers[0]);
              
              // Description (Read Only).
              // NOTE: The Description information is set in the Description section on the General tab of the Data Frame 
              // Properties dialog in ArcMap.
              TextBox_Description.Text = myArcGISDynamicMapServiceLayer.Description;
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
              
              ' Get the first layer in the Map. 
              Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer = CType(Map1.Layers.Item(0), ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
              
              ' Description (Read Only).
              ' NOTE: The Description information is set in the Description section on the General tab of the Data Frame 
              ' Properties dialog in ArcMap.
              TextBox_Description.Text = myArcGISDynamicMapServiceLayer.Description
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.ServiceDescription">
            <summary>Gets the service description reported by the ArcGISDynamicMapServiceLayer.</summary>
            <example>
            	<code title="Example XAML1" description="" lang="XAML">
                &lt;StackPanel Name="StackPanel1" Height="400" Width="400" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" &gt;
                    &lt;esri:Map Background="White" Name="Map1" Height="200" Width="400"&gt;
                    
                         &lt;!-- Define an ArcGISDynamicMapServiceLayer. --&gt;
                         &lt;esri:ArcGISDynamicMapServiceLayer 
                              Url="http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer" /&gt;
                              
                    &lt;/esri:Map&gt;
                    
                    &lt;!-- ServiceDescription Property (Read Only). --&gt;
                    &lt;TextBlock Height="22" Name="TextBlock_ServiceDescription" Text="{Binding ElementName=Map1, Path=Layers[0].ServiceDescription}" /&gt;
                &lt;/StackPanel&gt;
                </code>
                
                <code title="Example CS1" description="" lang="CS">
                private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
                {
                    // The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_ServiceDescription
                    // (a TextBlock object) were defined previously in the XAML or code-behind.
                
                    // Get the first layer in the LayerInfo collection. 
                    ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers[0];
                    
                    // ServiceDescription Property (Read Only).
                    TextBlock_ServiceDescription.Text = myArcGISDynamicMapServiceLayer.ServiceDescription;
                }
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
                    ' The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_ServiceDescription
                    ' (a TextBlock object) were defined previously in the XAML or code-behind.
                    
                    ' Get the first layer in the LayerInfo collection. 
                    Dim myArcGISDynamicMapServiceLayer As ArcGISDynamicMapServiceLayer = Map1.Layers.Item(0)
                    
                    ' ServiceDescription Property (Read Only).
                    TextBlock_ServiceDescription.Text = myArcGISDynamicMapServiceLayer.ServiceDescription
                End Sub
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.MapName">
            <summary>Gets the name of the ArcGISDynamicMapServiceLayer hosted by a map service.</summary>
            <remarks>ArcGIS Server REST map services only support the default data frame (map).</remarks>
            <example>
            	<code title="Example XAML1" description="" lang="XAML">
                &lt;StackPanel Name="StackPanel1" Height="400" Width="400" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" &gt;
                    &lt;esri:Map Background="White" Name="Map1" Height="200" Width="400"&gt;
                    
                         &lt;!-- Define an ArcGISDynamicMapServiceLayer. --&gt;
                         &lt;esri:ArcGISDynamicMapServiceLayer 
                              Url="http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer" /&gt;
                              
                    &lt;/esri:Map&gt;
                    
                    &lt;!-- MapName (Read Only). --&gt;
                    &lt;TextBlock Height="22" Name="TextBlock_MapName" Text="{Binding ElementName=Map1, Path=Layers[0].MapName}" /&gt;
                &lt;/StackPanel&gt;
                </code>
                
                <code title="Example CS1" description="" lang="CS">
                private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
                {
                  // The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_MapName
                  // (a TextBlock object) were defined previously in the XAML or code-behind.
                
                  // Get the first layer in the LayerInfo collection. 
                  ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers[0];
                    
                  // MapName Property (Read Only)
                  TextBlock_MapName.Text = myArcGISDynamicMapServiceLayer.MapName;
                }
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
                
                  ' The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_MapName
                  ' (a TextBlock object) were defined previously in the XAML or code-behind.
                
                  ' Get the first layer in the LayerInfo collection. 
                  Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer = Map1.Layers.Item(0)
                
                  ' MapName Property (Read Only)
                  TextBlock_MapName.Text = myArcGISDynamicMapServiceLayer.MapName
                
                End Sub
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.CopyrightText">
            <summary>
            Gets the copyright text information of an ArcGIS Server based ArcGISDynamicMapServiceLayer web service.
            </summary>
            <remarks>
            <para>
            When authoring an ArcGISDynamicMapServiceLayer in ArcMap to publish an ArcGIS Server web service, the 
            CopyrightText information is set in the <b>Credits</b> section on the <b>General</b> tab of the 
            <b>Data Frame Properties</b> dialog. See the following ArcMap screen shot:
            </para>
            <para>
            <img border="0" alt="Setting the ArcGISDynamicMapServiceLayer.CopyrightText in Credits section of the Data Frame Properties dialog of ArcMap." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.CopyrightText1.png"/>
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            When the ArcGISDynamicMapServiceLayer Initializes the CopyrightText will be automatically populated 
            in the TextBlock.
            <para>
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Showing the CopyrightText of an ArcGISDynamicMapServiceLayer." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.CopyrightText2.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map Control. Set its Initial Extent to Iowa. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="0,180,0,0" Name="Map1" 
                      VerticalAlignment="Top" Height="300" Width="400" Extent="-96.89,39.47,-89.91,44.70"&gt;
              
                &lt;!-- Define an ArcGISDynamicMapServiceLayer. --&gt;
                &lt;esri:ArcGISDynamicMapServiceLayer 
                      Url="http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer"
                      Initialized="ArcGISDynamicMapServiceLayer_Initialized"/&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- CopyrightText (Read Only). --&gt;
              &lt;sdk:Label Height="24" HorizontalAlignment="Left" Margin="0,88,0,0" Name="Label_CopyrightText" 
                         VerticalAlignment="Top" Width="120" Content="CopyrightText:"/&gt;
              &lt;TextBox Height="69" HorizontalAlignment="Left" Margin="0,105,0,0" Name="TextBox_CopyrightText" 
                       VerticalAlignment="Top" Width="400" TextWrapping="Wrap" /&gt;
              
              &lt;!-- 
              As an alternative you could bind the ArcGISDynamicMapServiceLayer.CopyrightText directly to the
              TextBox.Text Property and not need to put any code in the code-behind for the 
              ArcGISDynamicMapServiceLayer.Initialized Event.
              --&gt;
              &lt;!--&lt;TextBox Height="69" HorizontalAlignment="Left" Margin="0,105,0,0" Name="TextBox_CopyrightText" TextWrapping="Wrap"
                       VerticalAlignment="Top" Width="400" Text="{Binding ElementName=Map1, Path=Layers[0].CopyrightText}"/&gt;--&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="52" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="400" 
                   TextWrapping="Wrap" Text="When the ArcGISDynamicMapServiceLayer Initializes the CopyrightText
                   will be automatically populated in the TextBlock." /&gt;
                  
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
            {
              // Get the first layer in the Map. 
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = null;
              myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)(Map1.Layers[0]);
              
              // CopyrightText (Read Only).
              // NOTE: The CopyrightText information is set in the Credits section on the General tab of the Data Frame 
              // Properties dialog in ArcMap.
              TextBox_CopyrightText.Text = myArcGISDynamicMapServiceLayer.CopyrightText;
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
              
              ' Get the first layer in the Map. 
              Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer = CType(Map1.Layers.Item(0), ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
              
              ' CopyrightText (Read Only).
              ' NOTE: The CopyrightText information is set in the Credits section on the General tab of the Data Frame 
              ' Properties dialog in ArcMap.
              TextBox_CopyrightText.Text = myArcGISDynamicMapServiceLayer.CopyrightText
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.ESRI#ArcGIS#Client#ITimeAwareLayer#TimeInterval">
            <summary>
            Gets or sets the time interval to limit the data in.
            </summary>
            <remarks>This property only applies if the service supports time data and the <see cref="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.TimeExtent"/> is populated.</remarks>
            <value>The time interval.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.TimeExtent">
             <summary>
             Gets the valid TimeExtent object for the ArcGISDynamicMapServiceLayer or null/Nothing if this service does
             not support time based queries.
             </summary>
             <remarks>
             <para>
             Only supported for ArcGIS Server from version 10.0 and onward.
             </para>
             <para>
             The TimeExtent Property provides metadata about the layer’s service. If temporal information is available 
             (meaning it is not null/Nothing) for the geographic data in the layer’s service, then developers can take 
             advantage of using the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> Property to 
             display snapshots of the temporal data that cover a specified time period (aka. 
             <see cref="T:ESRI.ArcGIS.Client.TimeExtent">TimeExtent</see>).  Once common use case is to bind a 
             <see cref="T:ESRI.ArcGIS.Client.Toolkit.TimeSlider">TimeSlider</see> Control  with the a 
             <see cref="T:ESRI.ArcGIS.Client.Map">Map</see> Control to provide an interactive user experience of 
             showing how geographic temporal data changes over time. 
             </para>
             </remarks>
             <example>
             	<code title="Example XAML1" description="" lang="XAML">
                 &lt;StackPanel Name="StackPanel1" Height="400" Width="400" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" &gt;
                     &lt;esri:Map Background="White" Name="Map1" Height="200" Width="400"&gt;
                     
                          &lt;!-- Define an ArcGISDynamicMapServiceLayer that has TimeExtent information. --&gt;
                          &lt;esri:ArcGISDynamicMapServiceLayer 
                               Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer" /&gt;
                               
                     &lt;/esri:Map&gt;
                     
                     &lt;!-- TimeExtent Property (Read Only) --&gt;
                     &lt;TextBlock Height="23" Name="TextBlock_TimeExtent" Text="{Binding ElementName=Map1, Path=Layers[0].TimeExtent}" /&gt;
                 &lt;/StackPanel&gt;
                 </code>
                 
                 <code title="Example CS1" description="" lang="CS">
             	private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
             	{
             	     
             	  // Create an ArcGISDynamicServiceLayer. The Map1 object (a Map class) was previously defined in XAML.
             	  ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = new ArcGISDynamicMapServiceLayer();
             	 
                   // Add an ArcGISDynamicMapServiceLayer that has a valid TimeExtent.
             	  myArcGISDynamicMapServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer";
             	  myArcGISDynamicMapServiceLayer.ID = "MyUniqueName";
             	  
             	  myArcGISDynamicMapServiceLayer.Initialized += new EventHandler&lt;EventArgs&gt;(ArcGISDynamicMapServiceLayer_Initialized);
             	  Map1.Layers.Add(myArcGISDynamicMapServiceLayer);
             	  
             	}
             	
             	private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
             	{
             	
             	  // The TextBlock_TimeExtent (a TextBlock object) was defined previously in the XAML.
            
             	  ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers["MyUniqueName"];
             	
             	  // TimeExtent Property (Read Only)
             	  if (myArcGISDynamicMapServiceLayer.TimeExtent != null)
             	  {
             	    TextBlock_TimeExtent.Text = myArcGISDynamicMapServiceLayer.TimeExtent.ToString(); 
             	  }
             	  else
             	  {
             	    TextBlock_TimeExtent.Text = "[NO TimeExtent SERVICE]";
             	  }
             	  
             	}
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
             	Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
             	
             	  ' Create an ArcGISDynamicServiceLayer. The Map1 object (a Map class) was previously defined in XAML.
             	  Dim myArcGISDynamicMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
             	 
                   ' Add an ArcGISDynamicMapServiceLayer that has a valid TimeExtent.
             	  myArcGISDynamicMapServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer"
             	  myArcGISDynamicMapServiceLayer.ID = "MyUniqueName"
             	  
             	  AddHandler myArcGISDynamicMapServiceLayer.Initialized, AddressOf ArcGISDynamicMapServiceLayer_Initialized
             	  Map1.Layers.Add(myArcGISDynamicMapServiceLayer)
             	  
             	End Sub
             	
             	Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
             	
             	  ' The TextBlock_TimeExtent (a TextBlock object) was defined previously in the XAML.
                   
             	  Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer = Map1.Layers("MyUniqueName")
             	
             	  'TimeExtent Property (Read Only)
             	  If myArcGISDynamicMapServiceLayer.TimeExtent IsNot Nothing Then
             	    TextBlock_TimeExtent.Text = myArcGISDynamicMapServiceLayer.TimeExtent.ToString 
             	  Else
             	    TextBlock_TimeExtent.Text = "[NO TimeExtent SERVICE]"
             	  End If
             	
             	End Sub
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.Url">
             <summary>Gets or sets the URL to an ArcGISDynamicMapServiceLayer, non-cached (dynamic), map service.</summary>
             <example>
             	<code lang="XAML">
             		<![CDATA[
             <esri:ArcGISDynamicMapServiceLayer ID="DynamicLayer"
                 Url="http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer" />]]>
             	</code>
             </example>
             <remarks>
             Use the <a href="javascript:ApiToConcept('01660000001w000000', '01n700000004000000', '011v00000007000000')" target="_top">Services Directory</a> application
             available with REST services on any ArcGIS Server site to discover the URL.
             </remarks>
             <example>
             	<code title="Example XAML1" description="" lang="XAML">
                 &lt;StackPanel Name="StackPanel1" Height="400" Width="400" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" &gt;
                     &lt;esri:Map Background="White" Name="Map1" Height="200" Width="400"&gt;
                     
                          &lt;!-- Define an ArcGISDynamicMapServiceLayer. --&gt;
                          &lt;esri:ArcGISDynamicMapServiceLayer 
                               Url="http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer" /&gt;
                               
                     &lt;/esri:Map&gt;
                     
                     &lt;!-- Url Property (Read/Write) --&gt;
                     &lt;TextBlock Height="23" Name="TextBlock_Url" Text="{Binding ElementName=Map1, Path=Layers[0].Url}" /&gt;
                 &lt;/StackPanel&gt;
                 </code>
                 
                 <code title="Example CS1" description="" lang="CS">
             	private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
             	{
             	     
             	  // Create an ArcGISDynamicServiceLayer. The Map1 object (a Map class) was previously defined in XAML.
             	  ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = new ArcGISDynamicMapServiceLayer();
             	 
                   // Add an ArcGISDynamicMapServiceLayer.
             	  myArcGISDynamicMapServiceLayer.Url = "http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer";
             	  myArcGISDynamicMapServiceLayer.ID = "MyUniqueName";
             	  
             	  myArcGISDynamicMapServiceLayer.Initialized += new EventHandler&lt;EventArgs&gt;(ArcGISDynamicMapServiceLayer_Initialized);
             	  Map1.Layers.Add(myArcGISDynamicMapServiceLayer);
             	  
             	}
             	
             	private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
             	{
             	
             	  // The TextBlock_Url (a TextBlock object) was defined previously in the XAML.
            
             	  ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers["MyUniqueName"];
             	
             	  // Url Property (Read/Write)
             	  TextBlock_Url.Text = myArcGISDynamicMapServiceLayer.Url;
             	  
             	}
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
             	Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
             	
             	  ' Create an ArcGISDynamicServiceLayer. The Map1 object (a Map class) was previously defined in XAML.
             	  Dim myArcGISDynamicMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
             	 
                   ' Add an ArcGISDynamicMapServiceLayer.
             	  myArcGISDynamicMapServiceLayer.Url = "http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer"
             	  myArcGISDynamicMapServiceLayer.ID = "MyUniqueName"
             	  
             	  AddHandler myArcGISDynamicMapServiceLayer.Initialized, AddressOf ArcGISDynamicMapServiceLayer_Initialized
             	  Map1.Layers.Add(myArcGISDynamicMapServiceLayer)
             	  
             	End Sub
             	
             	Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
             	
             	  ' The TextBlock_Url (a TextBlock object) was defined previously in the XAML.
                   
             	  Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer = Map1.Layers("MyUniqueName")
             	
             	  'Url Property (Read/Write)
             	  TextBlock_Url.Text = myArcGISDynamicMapServiceLayer.Url
             	
             	End Sub
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.ProxyURL">
            <summary>
            Gets or sets the URL to proxy the request through.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.ImageFormat">
             <summary>Gets or sets the image format used when generating an ArcGISDynamicMapServiceLayer image.</summary>
             <remarks>
             <para>
             The default image format is PNG24. There are four 
             <see cref="T:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.RestImageFormat">ArcGISDynamicMapServiceLayer.RestImageFormat</see> 
             Enumeration values that can be used for the ImageFormat Property, they are:
             </para>
             <list type="bullet">
               <item>PNG24</item>
               <item>JPG</item>
               <item>PNG8</item>
               <item>PNG32</item>
             </list>
             <para>
             The background color for an ArcGISDynamicMapServiceLayer will always be transparent when the ImageFormat is set 
             to use a lossless data compression such as PNG. JPG is considered a lossy data compression and as such will not
             show the background of the layer to be transparent, meaning it will not drape well over other background layers. 
             Theoretical information related to these compression types can be found for the following topics:
             </para>
             <list type="bullet">
             <item><a href="http://en.wikipedia.org/wiki/Lossy_compression" target="_top">Lossy compression</a></item>
             <item><a href="http://en.wikipedia.org/wiki/Lossless_data_compression" target="_top">Lossless data compression</a></item>
             </list>
             </remarks>
             <example>
             	<code title="Example XAML1" description="" lang="XAML">
             	&lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="5,5,5,5" Name="Map1" 
                           VerticalAlignment="Top" Height="200" Width="400" BorderThickness="5" BorderBrush="#FF30EBEB"&gt;
            
                     &lt;!-- Set the ImageFormat to JPG. The default value for the service is PNG24. --&gt;
                     &lt;esri:ArcGISDynamicMapServiceLayer 
                           Url="http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer" 
                           ImageFormat="JPG" /&gt;
                           
                 &lt;/esri:Map&gt;
                 </code>
                 
             	<code title="Example CS1" description="" lang="CS">
                 private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
                 {
                     // The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_ImageFormat
                     // (a TextBlock object) were defined previously in the XAML or code-behind.
                 
                     // Get the first layer in the LayerInfo collection. 
                     ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers[0];
                     
                     // ImageFormat (Read/Write).
                     
                     // Set the .ImageFormat to JPG. The default value for the service is PNG24.
                     myArcGISDynamicMapServiceLayer.ImageFormat = ArcGISDynamicMapServiceLayer.RestImageFormat.JPG;
                     
                     // Get the .ImageFormat property.
                     TextBlock_ImageFormat.Text = myArcGISDynamicMapServiceLayer.ImageFormat.ToString();
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
                     ' The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_ImageFormat
                     ' (a TextBlock object) were defined previously in the XAML or code-behind.
                     
                     ' Get the first layer in the LayerInfo collection. 
                     Dim myArcGISDynamicMapServiceLayer As ArcGISDynamicMapServiceLayer = Map1.Layers.Item(0)
                     
                     ' ImageFormat (Read/Write).
                     
                     ' Set the .ImageFormat to JPG. The default value for the service is PNG24.
                     myArcGISDynamicMapServiceLayer.ImageFormat = ArcGISDynamicMapServiceLayer.RestImageFormat.JPG
                     
                     ' Get the .ImageFormat property.
                     TextBlock_ImageFormat.Text = myArcGISDynamicMapServiceLayer.ImageFormat.ToString
                 End Sub
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.Layers">
            <summary>
            Gets an array of sub-layer information, known as <see cref="T:ESRI.ArcGIS.Client.LayerInfo">LayerInfo</see> 
            objects, in an ArcGISDynamicMapServiceLayer.
            </summary>
            <remarks>
            <para>
            Each <see cref="T:ESRI.ArcGIS.Client.LayerInfo">LayerInfo</see> in the array will provide the default 
            visibility, unique ID, name, min/max scales, and a set of sub-layer IDs (if present).
            </para>
            <para>
            Do not confuse the results of a <see cref="P:ESRI.ArcGIS.Client.Map.Layers">Map.Layers</see> Property (which 
            returns a LayerCollection object) with the ArcGISDynamicMapServicelayer.Layers Property (which return a 
            LayerInfo() object). A <see cref="T:ESRI.ArcGIS.Client.LayerCollection">LayerCollection</see> is an 
            ObservableCollection of <see cref="T:ESRI.ArcGIS.Client.Layer">Layer</see> objects used in displaying
            geographic information via symbols and text.
            </para>
            <para>
            The following screen shot corresponds to the example code in this document. It displays an 
            ArcGISDynamicMapServiceLayer and the asscociated text for interrogating the sub-layer information found
            in the ArcGISDynamicMapServiceLayer.Layers Property.
            </para>
            <para>
            <img border="0" alt="Interrogating the sub-layer information of an ArcGISDynamicMapServiceLayer.Layers Property." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.Layers.png"/>
            </para>
            </remarks>
            <example>
            	<code title="Example XAML1" description="" lang="XAML">
                &lt;StackPanel Name="StackPanel1" Height="400" Width="400" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" &gt;
                    &lt;esri:Map Background="White" Name="Map1" Height="200" Width="400"&gt;
                    
                         &lt;!-- Define an ArcGISDynamicMapServiceLayer. --&gt;
                         &lt;esri:ArcGISDynamicMapServiceLayer 
                              Url="http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer" /&gt;
                              
                    &lt;/esri:Map&gt;
                    
                    &lt;!-- Layers Property (Read Only) --&gt;
                    &lt;!-- Get the name of the first sub-layer in the in the ArcGISDynamicMapServiceLayer --&gt;
                    &lt;TextBlock Height="23" Name="TextBlock_Layers" Text="{Binding ElementName=Map1, Path=Layers[0].Layers[0].Name}" /&gt;
                &lt;/StackPanel&gt;
                </code>
                
                <code title="Example CS1" description="" lang="CS">
            	private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
            	{
            	     
            	  // Create an ArcGISDynamicServiceLayer. The Map1 object (a Map class) was previously defined in XAML.
            	  ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = new ArcGISDynamicMapServiceLayer();
            	
            	  myArcGISDynamicMapServiceLayer.Url = "http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer";
            	  myArcGISDynamicMapServiceLayer.ID = "MyUniqueName";
            	  
            	  myArcGISDynamicMapServiceLayer.Initialized += new EventHandler&lt;EventArgs&gt;(ArcGISDynamicMapServiceLayer_Initialized);
            	  Map1.Layers.Add(myArcGISDynamicMapServiceLayer);
            	  
            	}
            	
            	private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
            	{
            	
            	  // The TextBlock_Layers (a TextBlock object) was defined previously in the XAML.
            	  ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers["MyUniqueName"];
            	
            	  // Layers (Read Only)
            	  // Display the number of sub-layers and each sub-layer name in a textblock.
            	  ESRI.ArcGIS.Client.LayerInfo[] myLayerInfo = myArcGISDynamicMapServiceLayer.Layers;
            	  string myLayersText = "Number of sub-layers: " + myLayerInfo.Length.ToString();
            	  string myLayerstext2 = "";
            	  if (myLayerInfo.Length &gt; 0)
            	  {
            	    int i = 0;
            	    for (i = 0; i  &lt; myLayerInfo.Length; i++)
            	    {
            	      myLayerstext2 = myLayerstext2 + " " + myLayerInfo[i].Name;
            	    }
            	  }
            	  TextBlock_Layers.Text = myLayersText + ". Sub-layer Name's: " + myLayerstext2;
            	  
            	}
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
            	Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
            	
            	  ' Create an ArcGISDynamicServiceLayer. The Map1 object (a Map class) was previously defined in XAML.
            	  Dim myArcGISDynamicMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
            	 
            	  myArcGISDynamicMapServiceLayer.Url = "http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer"
            	  myArcGISDynamicMapServiceLayer.ID = "MyUniqueName"
            	  
            	  AddHandler myArcGISDynamicMapServiceLayer.Initialized, AddressOf ArcGISDynamicMapServiceLayer_Initialized
            	  Map1.Layers.Add(myArcGISDynamicMapServiceLayer)
            	  
            	End Sub
            	
            	Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
            	
            	  ' The TextBlock_Layers (a TextBlock object) was defined previously in the XAML.
            	  Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer = Map1.Layers("MyUniqueName")
            	
            	  'Layers (Read Only)
            	  'Display the number of sub-layers and each sub-layer name in a textblock.
            	  Dim myLayerInfo() As ESRI.ArcGIS.Client.LayerInfo = myArcGISDynamicMapServiceLayer.Layers
            	  Dim myLayersText As String = "Number of sub-layers: " + myLayerInfo.Length.ToString
            	  Dim myLayerstext2 As String = ""
            	
            	  If myLayerInfo.Length &gt; 0 Then
            	    Dim i As Integer
            	    For i = 0 To myLayerInfo.Length - 1
            	      myLayerstext2 = myLayerstext2 + " " + myLayerInfo(i).Name
            	    Next
            	  End If
            	
            	  TextBlock_Layers.Text = myLayersText + ". Sub-layer Name's: " + myLayerstext2
            	
            	End Sub
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.DisableClientCaching">
             <summary>Disables caching an ArcGISDynamicMapServiceLayer image on the client.</summary>
             <remarks>
             <para>
             The default value is false. If true, adds a timestamp parameter ("_ts") to the REST request to prevent 
             loading a map image from the browser's cache.
             </para>
             </remarks>
             <example>
             	<code title="Example XAML1" description="" lang="XAML">
             	&lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="5,5,5,5" Name="Map1" 
                           VerticalAlignment="Top" Height="200" Width="400" BorderThickness="5" BorderBrush="#FF30EBEB"&gt;
            
                     &lt;!-- Set the DisableClientCaching to true. The default value for the service is false. --&gt;
                     &lt;esri:ArcGISDynamicMapServiceLayer 
                           Url="http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer" 
                           DisableClientCaching="True" /&gt;
                           
                 &lt;/esri:Map&gt;
                 </code>
                 
             	<code title="Example CS1" description="" lang="CS">
                 private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
                 {
                     // The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_DisableClientCaching
                     // (a TextBlock object) were defined previously in the XAML or code-behind.
                 
                     // Get the first layer in the LayerInfo collection. 
                     ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers[0];
                     
                     // DisableClientCaching (Read/Write).
                     
                     // Set the .DisableClientCaching to true. The default value for the service is false.
                     myArcGISDynamicMapServiceLayer.DisableClientCaching = true;
            
                     // Get the .DisableClientCashing property.
                     TextBlock_DisableClientCaching.Text = myArcGISDynamicMapServiceLayer.DisableClientCaching.ToString();
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
                     ' The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_DisableClientCaching
                     ' (a TextBlock object) were defined previously in the XAML or code-behind.
                     
                     ' Get the first layer in the LayerInfo collection. 
                     Dim myArcGISDynamicMapServiceLayer As ArcGISDynamicMapServiceLayer = Map1.Layers.Item(0)
                     
                     ' DisableClientCaching (Read/Write).
                     
                     ' Set the .DisableClientCaching to true. The default value for the service is false.
                     myArcGISDynamicMapServiceLayer.DisableClientCaching = True
                     
                     ' Get the .DisableClientCashing property.
                     TextBlock_DisableClientCaching.Text = myArcGISDynamicMapServiceLayer.DisableClientCaching.ToString
                 End Sub
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.Token">
            <summary>Gets or sets the token for accessing a secure ArcGIS service.</summary>
            <value>The token.</value>
            <remarks>
            ArcGIS Server services may be secured using token authentication. Use 
            <a href="javascript:ApiToConcept('01660000001w000000', '01n700000004000000', '011v00000007000000')" target="_top">Services Directory</a> 
            to determine if a service requires a
            token to be used. A token is an encrypted string generated by a token service on the
            same ArcGIS Server site and the secured service. The token service can be accessed in a
            browser via the Get Token link in Services Explorer or by navigating to the main token
            service page (e.g. 
            <a href="http://www.example.com/ArcGIS/tokens/gettoken.html">http://www.example.com/ArcGIS/tokens/gettoken.html</a>).
            See the discussion topic on 
            <a href="javascript:ApiToConcept('016600000022000000', '01n700000022000000', '011v0000000n000000')" target="_top">secure services</a> 
            for more info.
            </remarks>
            <example>
            	<code lang="XAML">
            		<![CDATA[
            <esri:ArcGISDynamicMapServiceLayer ID="DynamicLayer"
                Url="http://serverapps.esri.com/ArcGIS/rest/services/California/MapServer" 
                Token="T2ILopZdSMylbhKIysHa-8YgBVNPjRHsK-Kw3VoQS2RUQ0UpUAj30vGfT92YlEue" />]]>
            	</code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerDefinitions">
             <summary>
             An ObservableCollection of <see cref="T:ESRI.ArcGIS.Client.LayerDefinition">LayerDefinition</see> objects that 
             allow filtering of features for individual layers in an ArcGISDynamicMapServiceLayer.
             </summary>
             <remarks>
             <para>
             Definition expressions for particular LayerID in the LayerDefinition class that are currently not 
             visible will be ignored by the server.
             </para>
             <para>
             When the LayerDefinitions Property is not set, all features are returned.
             </para>
             <para>
             A LayerDefinition of <b>1=1</b> returns all features.  
             </para>
             <para>
             For a LayerDefinition that contains an apostrophe embedeed within an esriFieldTypeString, escape the
             apostrophe with a second apostrophe. Example: <b>Name = 'Billy ''O Donald'</b>.
             </para>
             <para>
             For a LayerDefinition that is based upon a numeric value (i.e. esriFieldTypeDouble, esriFieldTypeInt, etc.) 
             when performing a 'less than' (i.e. the &lt; character) operation in XAML, make sure and escape the syntax
             with the characters &amp;lt;. Example: <b>Cost &amp;lt; 100</b>.
             </para>
             <para>
             For ArcGISDynamicMapServiceLayers that are served up by ArcGIS Server 10 and above, it is possible to 
             use Time as part of a DATE LayerDefintion. Example: <b>Birthday &gt; DATE '1/15/2008 18:30:00'</b> or 
             <b>Observation1 = DATE '12/27/2008 03:15:00'</b>. For ArcGISDynamicMapServiceLayers that are 
             served up by ArcGIS 9.31 and earlier, Time portions of DATE LayerDefinitions are not supported. Use the 
             following syntax instead: <b>Birthday &gt; DATE '1/15/2008'</b> or <b>Observation1 = DATE '12/27/2008'</b>.
             </para>
             <para>
             <b>TIP:</b> One way to speed up development time in determining the correct LayerDefinition syntax 
             for the ObservableCollections(Of LayerDefinitions) is to use Query functionality for the web 
             service in a web browser.  The way you do this is via the following steps:
             </para>
             <para>
             1. Copy the ArcGISDynamicMapServiceLayer.URL property into the address bar of the web browser and 
             then click on the hyperlink for the specific LayerID you want to perform a Query on. See the 
             following screen shot:
             <img border="0" alt="Use the ArcGISDynamicMapServiceLayer.URL property in the address bar of the web browser." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.LayerDefinitions1.png"/>
             </para>
             <para>
             2. For the specific ArcGISDynamicMapServiceLayer, scroll to the bottom of the web page and click on 
             the Query hyperlink. See the following screen shot:
             <img border="0" alt="Click on the Query hyperlink in the web browser." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.LayerDefinitions2.png"/>
             </para>
             3. Specify the LayerDefinition.Definition syntax you want to test in the Where textbox and click 
             either of the Query buttons. Look at the bottom of the page to see if any records have been 
             returned (# results) to know if your LayerDefintion.Definition syntax is correct. See the following 
             screen shot:
             <img border="0" alt="Use the Where textbox to specify various syntaxes to seehow many records are returned." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.LayerDefinitions3.png"/>
             <para>
             </para>
             </remarks>
             <example>
             <para>
             <b>How to use:</b> The following screenshot corresponds example code in this document where various 
             LayerDefinitions are applied to an ArcGISDynamicMapServiceLayer showing earthquakes since 1970. Copy 
             the XAML and/or desired code-behind into your project and adjust accordingly. 
             </para>
             <para>
             The XAML code in this example showing how to use a LayerDefinition can be used independently of the 
             code-behind (C# or VB.NET) to demonstrate the functionality. In order to use the code-behind to show 
             how a LayerDefinition works, make sure to comment out the usage of the LayerDefinition syntax in XAML. 
             </para>
             <para>
             <img border="0" alt="Example LayerDefinitions and their results." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.LayerDefinitions.png"/>
             </para>
             	<code title="Example XAML1" description="" lang="XAML">
                 &lt;StackPanel Name="StackPanel1" Height="400" Width="400" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" &gt;
                     &lt;esri:Map Background="White" Name="Map1" Height="200" Width="400"&gt;
                          
                          &lt;!-- Set the LayerDefinition for the ArcGISDynamicMapServiceLayer. --&gt;
                          &lt;!-- By default no LayerDefinition is set unless explicitly set on the server. --&gt;
                          &lt;esri:ArcGISDynamicMapServiceLayer 
                               Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer" /&gt;
                               &lt;esri:ArcGISDynamicMapServiceLayer.LayerDefinitions&gt;
                                   
                                   &lt;!-- LayerID="0" is the Earthquakes1970 layer. The Definition only displays earth quakes that have a
                                           Magnitude greater than 6. The field Magnitude is of type esriFieldTypeDouble. --&gt;
                                   &lt;esri:LayerDefinition LayerID="0" Definition="Magnitude &gt; 6" /&gt;
                                   
                                   &lt;!-- LayerID="0" is the Earthquakes1970 layer. The Definition only displays earth quakes that have a
                                           Magnitude greater than 3 and less than 6. The field Magnitude is of type esriFieldTypeDouble. --&gt;
                                   &lt;!-- &lt;esri:LayerDefinition LayerID="0" Definition="Magnitude &gt; 3 AND Magnitude &amp;lt; 6" /&gt; --&gt;
                                   
                                   &lt;!-- Another example where the Name of the earth quake event is to contains the letters 'CHINA'.
                                           Note: the Definition is case sensitive. The field Name is of type esriFieldTypeString. --&gt;
                                   &lt;!-- &lt;esri:LayerDefinition LayerID="0" Definition="Name LIKE '%CHINA%'" /&gt; --&gt;
                                   
                                   &lt;!-- Another example where the Name of the earth quake event is exactly matches the letters 'VENEZUELA'.
                                           Note: the Definition is case sensitive. The field Name is of type esriFieldTypeString. --&gt;
                                   &lt;!-- &lt;esri:LayerDefinition LayerID="0" Definition="Name = 'VENEZUELA'" /&gt; --&gt;
                                   
                                   &lt;!-- Another example where the earth quake events are displayed if they occured after January 15, 2000. 
                                           The field Date_ is of type esriFieldTypeDate. --&gt;
                                   &lt;!-- &lt;esri:LayerDefinition LayerID="0" Definition="Date_ &gt; DATE '1/15/2000'" /&gt;--&gt;
                                 
                               &lt;/esri:ArcGISDynamicMapServiceLayer.LayerDefinitions&gt;
                          &lt;/esri:ArcGISDynamicMapServiceLayer&gt;
                     &lt;/esri:Map&gt;
                     
                     &lt;!-- LayerDefinitions Property (Read) --&gt;
                     &lt;TextBlock Height="23" Name="TextBlock_LayerDefinitions" 
                         Text="{Binding ElementName=Map1, Path=Layers[0].LayerDefinitions[0].Definition}" /&gt;
                 &lt;/StackPanel&gt;
                 </code>
                 
                 <code title="Example CS1" description="" lang="CS">
                 private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
                 {
                     
                     // The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_LayerDefinitions
                     // (a TextBlock object) were defined previously in the XAML or code-behind.
                     
                     // Get the first layer in the LayerInfo collection. 
                     ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers[0];
            
                     // LayerDefinition (Read/Write)
                     
                     // This is how to set (i.e. Write) a LayerDefinition.
                     // --------------------------------------------------
                     // Set the .LayerDefinition for the .LayerID = 0 (the Earthquakes1970 layer). By default no LayerDefinition 
                     // is set unless explicitly set on the server.
                     ESRI.ArcGIS.Client.LayerDefinition myDefinition = new ESRI.ArcGIS.Client.LayerDefinition();
                     myDefinition.LayerID = 0;
                     
                     // The Definition only displays earth quakes that have a Magnitude greater than 6. 
                     // The field Magnitude is of type esriFieldTypeDouble.
                     myDefinition.Definition = "Magnitude &gt; 6";
                     
                     // The Definition only displays earth quakes that have a Magnitude greater than 3 and less that 6. 
                     // The field Magnitude is of type esriFieldTypeDouble.
                     // myDefinition.Definition = "Magnitude &gt; 3 AND Magnitude &lt; 6";
             
                     // Another example where the Name of the earth quake event is to contains the letters 'CHINA'.
                     // Note: the Definition is case sensitive. The field Name is of type esriFieldTypeString.
                     //myDefinition.Definition = "Name LIKE '%CHINA%'";
                     
                     // Another example where the Name of the earth quake event is exactly matches the letters 'VENEZUELA'.
                     // Note: the Definition is case sensitive. The field Name is of type esriFieldTypeString.
                     //myDefinition.Definition = "Name = 'VENEZUELA'";
                     
                     // Another example where the earth quake events are displayed if they occured after January 15, 2000. 
                     // The field Date_ is of type esriFieldTypeDate.
                     //myDefinition.Definition = "Date_ &gt; DATE '1/15/2000'";
                     
                     // Create an ObservableCollection and add the .Definition to it.
                     System.Collections.ObjectModel.ObservableCollection&lt;LayerDefinition&gt; myObservableCollection2 = 
                        new System.Collections.ObjectModel.ObservableCollection&lt;LayerDefinition&gt;();
                     myObservableCollection2.Add(myDefinition);
                     
                     // Apply the custom LayerDefinition
                     myArcGISDynamicMapServiceLayer.LayerDefinitions = myObservableCollection2;
                     
                     
                     // This is how to get (i.e. Read) a LayerDefiniton.
                     // The TextBlock_LayerDefinitions (a TextBlock object) was previously set in XAML or code-behind.
                     // ----------------------------------------------------------------------------------------------
                     // Get the existing LayerDefinitions collection.
                     System.Collections.ObjectModel.ObservableCollection&lt;LayerDefinition&gt; myObservableCollection = 
                         myArcGISDynamicMapServiceLayer.LayerDefinitions;
                                 
                     if (myObservableCollection.Count &gt; 0)
                     {
                         // Get the first LayerDefinition 
                         ESRI.ArcGIS.Client.LayerDefinition myLayerDefinition = myObservableCollection[0];
                         
                         // Display some textual information about the LayerDefinition.
                         TextBlock_LayerDefinitions.Text = "For Layer: " + myLayerDefinition.LayerID.ToString() + 
                             ". The Defintion is: " + myLayerDefinition.Definition;
                     }
                     else
                     {
                         TextBlock_LayerDefinitions.Text = "[NO LayerDefinitions SET]";
                     }
                     
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub ArcGISDynamicMapServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
                     
                     ' The myArcGISDynamicMapServiceLayer (an ArcGISDynamicServiceLayer object) and TextBlock_LayerDefinitions
                     ' (a TextBlock object) were defined previously in the XAML or code-behind.
                     
                     ' Get the first layer in the LayerInfo collection. 
                     Dim myArcGISDynamicMapServiceLayer As ArcGISDynamicMapServiceLayer = Map1.Layers.Item(0)
                     
                     ' LayerDefinition (Read/Write)
                     
                     ' This is how to set (i.e. Write) a LayerDefinition.
                     ' --------------------------------------------------
                     
                     ' Set the .LayerDefinition for the .LayerID = 0 (the Earthquakes1970 layer). By default no LayerDefinition 
                     ' is set unless explicitly set on the server.
                     Dim myDefinition As New ESRI.ArcGIS.Client.LayerDefinition
                     myDefinition.LayerID = 0
                     
                     ' The Definition only displays earth quakes that have a Magnitude greater than 6. 
                     ' The field Magnitude is of type esriFieldTypeDouble.
                     myDefinition.Definition = "Magnitude &gt; 6"
                     
                     ' The Definition only displays earth quakes that have a Magnitude greater than 3 and less than 6. 
                     ' The field Magnitude is of type esriFieldTypeDouble.
                     'myDefinition.Definition = "Magnitude &gt; 3 AND Magnitude &lt; 6"
             
                     ' Another example where the Name of the earth quake event is to contains the letters 'CHINA'.
                     ' Note: the Definition is case sensitive. The field Name is of type esriFieldTypeString.
                     'myDefinition.Definition = "Name LIKE '%CHINA%'"
                     
                     ' Another example where the Name of the earth quake event is exactly matches the letters 'VENEZUELA'.
                     ' Note: the Definition is case sensitive. The field Name is of type esriFieldTypeString.
                     'myDefinition.Definition = "Name = 'VENEZUELA'"
                     
                     ' Another example where the earth quake events are displayed if they occured after January 15, 2000. 
                     ' The field Date_ is of type esriFieldTypeDate.
                     'myDefinition.Definition = "Date_ &gt; DATE '1/15/2000'"
                      
                     ' Create an ObservableCollection and add the .Definition to it.
                     Dim myObservableCollection2 As New System.Collections.ObjectModel.ObservableCollection(Of LayerDefinition)
                     myObservableCollection2.Add(myDefinition)
                     
                     ' Apply the custom LayerDefinition
                     myArcGISDynamicMapServiceLayer.LayerDefinitions = myObservableCollection2
                     
                     
                     ' This is how to get (i.e. Read) a LayerDefiniton.
                     ' The TextBlock_LayerDefinitions (a TextBlock object) was previously set in XAML or code-behind.
                     ' ----------------------------------------------------------------------------------------------
                     ' Get the existing LayerDefinitions collection.
                     Dim myObservableCollection As System.Collections.ObjectModel.ObservableCollection(Of LayerDefinition) = _
                         myArcGISDynamicMapServiceLayer.LayerDefinitions
                     
                     If myObservableCollection.Count &gt; 0 Then
                     
                         ' Get the first LayerDefinition 
                         Dim myLayerDefinition As LayerDefinition = myObservableCollection.Item(0)
                         
                         ' Display some textual information about the LayerDefinition.
                         TextBlock_LayerDefinitions.Text = "For Layer: " + myLayerDefinition.LayerID.ToString + _
                             ". The Defintion is: " + myLayerDefinition.Definition
                     Else
                         TextBlock_LayerDefinitions.Text = "[NO LayerDefinitions SET]"
                     End If
                     
                 End Sub
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.Version">
            <summary>
            Gets the version of ArcGIS Server where the map service is published.
            </summary>
            <remarks>Examples are 9.3, 9.31, 10, 10.01.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.Tables">
            <summary>
            Gets or sets the list of tables associated with the map service.
            </summary>
            <value>The tables.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.Capabilities">
            <summary>
            Capabilities of the map service.
            </summary>
            <remarks>
            Possible values are <c>Map</c>, <c>Query</c> and <c>Data</c>. Only
            available if the map service is published using ArcGIS Server version 
            10 or greater.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerTimeOptions">
            <summary>
            Get or sets the <see cref="T:ESRI.ArcGIS.Client.Tasks.TimeOption">TimeOption</see> objects in a 
            <see cref="T:ESRI.ArcGIS.Client.LayerTimeOptionCollection">LayerTimeOptionCollection</see> for each 
            sub-layer in an ArcGISDynamicMapServiceLayer.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ESRI.ArcGIS.Client.Tasks.TimeOption">TimeOption</see> object indicates whether or 
            not the sub-layer of an ArcGISDynamicMapServiceLayer should use the 
            <see cref="T:ESRI.ArcGIS.Client.TimeExtent">TimeExtent</see> specified by the time parameter or not (see 
            <see cref="M:ESRI.ArcGIS.Client.Tasks.TimeOption.UseTime">TimeOption.UseTime</see> and
            <see cref="T:ESRI.ArcGIS.Client.LayerTimeOptionCollection">LayerTimeOptionCollection</see>), 
            whether to draw the layer features cumulatively or not (see 
            <see cref="M:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeDataCumulative">TimeOption.TimeDataCumulative</see>), 
            and if any time offsets will be used for the layer (see 
            <see cref="M:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeOffset">TimeOption.TimeOffset</see>).
            </para>
            <para>
            Using the Read/Get of the LayerTimeOptions Property returns null/Nothing unless it has been explicitly 
            set by the developer (it is not automatically set as Property in the ArcGIS Server web service for the 
            ArcGISDynamicMapServiceLayer). Developers need to create a new 
            <see cref="T:ESRI.ArcGIS.Client.LayerTimeOptionCollection">LayerTimeOptionCollection</see>, add the 
            TimeOption object(s) to it, and then set the new LayerTimeOptionCollection to the 
            LayerTimeOptions Property. An ArcGISDynamicMapServiceLayer can have multiple TimeOption objects; one for 
            each sub-layer in the ArcGISDynamicMapServiceLayer.
            </para>
            <para>
            It is the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> that controls what features 
            are displayed based upon the temporal information in the ArcGISDynamicMapServiceLayer. The 
            Map.TimeExtent acts as to limit the features displayed based upon the window-of-time specified by 
            the <see cref="P:ESRI.ArcGIS.Client.TimeExtent.Start">TimeExtent.Start</see> and 
            <see cref="P:ESRI.ArcGIS.Client.TimeExtent.End">TimeExtent.End</see>. One analogy you can think of is that 
            the Map.TimeExtent is like a window in a house. Depending on the size of the window, allows how much you 
            can see outside (i.e. the features in the ArcGISDynamicMapServiceLayer). See the visual analogy depiction.
            </para>
            <para>
            <img border="0" alt="Analogy of how the Map.TimeExtent limits the temporal features being displayed in a layer is like looking out a window only allow certain visual images to be seen based upon the size of the window." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.LayerTimeOptions.WindowOfTimeAnalogy.png"/>
            </para>
            <para>
            The <see cref="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerDefinitions">ArcGISDynamicMapServiceLayer.LayerDefinitions</see> 
            take precedence over other data restriction techniques like those of the LayerTimeOptions. In other words, 
            the ArcGISDynamicMapServiceLayer.LayerDefinitions acts to limit the data in the 
            ArcGISDynamciMapServiceLayer that the LayerTimeOptions can operate on.
            </para>
            <para>
            If the <see cref="M:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeDataCumulative">TimeOption.TimeDataCumulative</see> 
            = True then the data in the ArcGISDynamicMapServiceLayer returned is based upon the TimeExtent.Start of 
            the REST service. If the TimeOption.TimeDataCumulative = False then the data in the 
            ArcGISDynamicMapServiceLayer returned is based upon TimeExtent.Start of the Map Control.
            </para>
            <para>
            If the <see cref="M:ESRI.ArcGIS.Client.Tasks.TimeOption.UseTime">TimeOption.UseTime</see> = True then 
            the data in the ArcGISDynamicMapServiceLayer returned is based upon occurrences between the 
            TimeExtent.Start and TimeExtent.End of the Map Control. If the TimeOption.UseTime 
            = False then time based queries are disabled for the ArcGISDynamicMapServiceLayer (meaning all of the 
            records will be returned subject to any LayerDefinitons that may be set).
            </para>
            <para>
            The <see cref="M:ESRI.ArcGIS.Client.Tasks.TimeOption.LayerId">TimeOption.LayerId</see> is a String. 
            Developers should cast the <see cref="P:ESRI.ArcGIS.Client.LayerInfo.ID">ArcGISDynamicMapServiceLayer.Layers.ID</see> 
            (an Integer) to a String when setting the TimeOption.LayerId.
            </para>
            <para>
            Normally the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> determines what features 
            will be displayed for a time-enabled ArcGISDynamicMapServiceLayer. The 
            <see cref="M:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeOffset">TimeOption.TimeOffset</see> is a special case 
            where the features that are returned will be offset from what is specified in the Map.TimeExtent 
            by the TimeOffset amount based upon specific 
            <see cref="M:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeOffsetUnit">TimeOption.TimeOffsetUnit</see> denomination. 
            Negative TimeOffset values are possible for returning features of previous times to the currently set 
            Map.TimeExtent.
            </para>
            <para>
            <b>NOTE:</b> A change was made to ArcGIS Server 10.02 (i.e. 10.0 Service Pack 2) and subsequents future versions 
            that impacts what is needed to draw ALL features 
            in an ArcGISDynamicMapServiceLayer that is time-enabled. Prior to ArcGIS Server 10.02, it was required in order 
            to see the ALL features for a time-enabled  ArcGISDynamicMapServiceLayer in a Map Control to either:<br/>
            (1) set the Map.TimeExtent to a valid time that covered the features in the ArcGISDynamicMapServiceLayer<br/>
            OR<br/>
            (2) if no Map.TimeExtent was set on the Map Control, then each TimeOption for the sub-layer of the 
            ArcGISDynamicMapServiceLayer needs to have the TimeOption.UseTime Property set to False.<br/>
            As of ArcGIS Sever 10.02 and higher, the time-enabled ArcGISDynamicMapServiceLayer will automatically show 
            ALL features, even if no Map.TimeExtent is set. See the code example in this document for a demonstration.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            This sample demonstrates a change that was made to ArcGIS Server 10.02 (i.e. 10.0 Service Pack 2) and subsequents 
            future versions that impacts what is needed to draw ALL features in an ArcGISDynamicMapServiceLayer that is 
            time-enabled. Prior to ArcGIS Server 10.02, it was required in order to see the ALL features for a time-enabled 
            ArcGISDynamicMapServiceLayer in a Map Control to either:<br/>
            (1) set the Map.TimeExtent to a valid time that covered the features in the ArcGISDynamicMapServiceLayer<br/>
            OR<br/>
            (2) if no Map.TimeExtent was set on the Map Control, then each TimeOption for the sub-layer of the 
            ArcGISDynamicMapServiceLayer needs to have the TimeOption.UseTime Property set to False.<br/>
            As of ArcGIS Sever 10.02 and higher, the time-enabled ArcGISDynamicMapServiceLayer will automatically show 
            ALL features, even if no Map.TimeExtent is set.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Demonstrating changes that have occured in ArcGIS Server regarding time-enabled ArcGISDynamicMapServiceLayers." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.LayerTimeOptions1.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- Add a Map Control to the application. NOTE: There is NO TimeExtent Property specified! --&gt;
              &lt;esri:Map x:Name="Map1" WrapAround="True" HorizontalAlignment="Left" VerticalAlignment="Top" 
                        Margin="0,238,0,0" Height="350" Width="450" /&gt;
              
              &lt;!-- Add a Legend Control to demonstrate which features belong to which layers. --&gt;
              &lt;esri:Legend x:Name="MyLegend" Margin="456,238,0,0" Map="{Binding ElementName=Map1}" 
                           Height="350" Width="250" VerticalAlignment="Top" HorizontalAlignment="Left"/&gt;
                
              &lt;!-- 
              Add a TextBox for the user to enter a Url for a time-enabled ArcGISDynamicMapServiceLayer and a Button
              for the user to click to add the layer to the Map Control.
              --&gt;
              &lt;sdk:Label Height="16" HorizontalAlignment="Left" Margin="0,184,0,0" Name="Label_Url" 
                         VerticalAlignment="Top" Width="29" Content="Url:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="22,180,0,0" Name="TextBox_Url" VerticalAlignment="Top" 
                       Width="684" 
                       Text="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Petroleum/StantonCountyKSLeases/MapServer"/&gt;
              &lt;Button Name="Button1" Height="23" HorizontalAlignment="Left" Margin="0,209,0,0"  VerticalAlignment="Top" 
                      Width="706" 
                      Click="Button1_Click" Content="Enter a Url for a 'time-enabled' ArcGISDynamicMapServiceLayer and click me."/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="174" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="788" TextWrapping="Wrap" 
               Text="This sample demonstrates a change that was made to ArcGIS Server 10.02 (i.e. 10.0 Service Pack 2) and subsequents 
                     future versions that impacts what is needed to draw ALL features in an ArcGISDynamicMapServiceLayer that is 
                     time-enabled. Prior to ArcGIS Server 10.02, it was required in order to see the ALL features for a time-enabled 
                     ArcGISDynamicMapServiceLayer in a Map Control to either:
                     (1) set the Map.TimeExtent to a valid time that covered the features in the ArcGISDynamicMapServiceLayer
                     OR
                     (2) if no Map.TimeExtent was set on the Map Control, then each TimeOption for the sub-layer of the 
                     ArcGISDynamicMapServiceLayer needs to have the TimeOption.UseTime Property set to False.
                      
                     As of ArcGIS Sever 10.02 and higher, the time-enabled ArcGISDynamicMapServiceLayer will automatically show 
                     ALL features, even if no Map.TimeExtent is set." /&gt;
                     
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Create a new ArcGISDynamicMapServiceLayer using the Url from the TextBox on the UI page.
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = new ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer();
              myArcGISDynamicMapServiceLayer.ID = "myArcGISDynamicMapServiceLayer";
              myArcGISDynamicMapServiceLayer.Url = TextBox_Url.Text;
              
              // Wire-up the Initialized event handler so that Properties can be accessed and changed on the 
              // asynchronous ArcGISDynamicMapServiceLayer.
              myArcGISDynamicMapServiceLayer.Initialized += myArcGISDynamicMapServiceLayer_Initialized;
              
              // Add the ArcGISDynamicMapServiceLayer to the Map which will make the asynchronous call.
              Map1.Layers.Add(myArcGISDynamicMapServiceLayer);
            }
              
            private void myArcGISDynamicMapServiceLayer_Initialized(object sender, EventArgs e)
            {
              // This function demonstrates a change that was made to ArcGIS Server 10.02 (i.e. 10.0 Service Pack 2) and what
              // is needed to draw ALL features in an ArcGISDynamicMapServiceLayer that is time-enabled.
              //
              // Prior to ArcGIS Server 10.02, it was required in order to see the ALL features for a time-enabled 
              // ArcGISDynamicMapServiceLayer in a Map Control to either:
              // (1) set the Map.TimeExtent to a valid time that covered the features in the ArcGISDynamicMapServiceLayer
              // OR
              // (2) if no Map.TimeExtent was set on the Map Control, then each TimeOption for the sub-layer of the 
              // ArcGISDynamicMapServiceLayer needs to have the TimeOption.UseTime Property set to False.
              // 
              // As of ArcGIS Sever 10.02 and higher, the time-enabled ArcGISDynamicMapServiceLayer will automatically show 
              // ALL features, even if no Map.TimeExtent is set.
              
              // Get the ArcGISDynamicMapServiceLayer and the Collection of LayerInfo objects (i.e. the sub-layers).
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)sender;
              ESRI.ArcGIS.Client.LayerInfo[] myLayerInfos = myArcGISDynamicMapServiceLayer.Layers;
              
              // Get the TimeExtent of the ArcGISDynamicMapServiceLayer.
              ESRI.ArcGIS.Client.TimeExtent myTimeExtent = myArcGISDynamicMapServiceLayer.TimeExtent;
              
              if (myTimeExtent != null)
              {
                //We have a time-enabled ArcGISDynamicMapServiceLayer.
                
                // Get the ArcGIS Server version that is serving up the ArcGISDynamicMapServiceLayer.
                double myVersion = myArcGISDynamicMapServiceLayer.Version;
                
                if (myVersion &gt; 10.01)
                {
                  // No need to do anything! The time-enabled ArcGISDynamicMapServiceLayer will draw all
                  // features even though no Map.TimeExtent has been specified.
                }
                else
                {
                  // Since we have an older version of ArcGIS Server, we need to make some adjustments in order to 
                  // show ALL of the features in the time-enabled ArcGISDynamicMapServiceLayer when no Map.TimeExtent
                  // has been specified. Uncomment/Comment out whichever version you want to try (they both produce 
                  // the same results.
                  
                  // Option (1):
                  // =====================================================================================
                  // Set the Map.TimeExtent to that of the ArcGISDynamicMapServiceLayer.TimeExtent.
                  //Map1.TimeExtent = myTimeExtent; 
                  
                  // Option (2):
                  // =====================================================================================
                  // Create a new LayerTimeOptionCollection.
                  ESRI.ArcGIS.Client.LayerTimeOptionCollection myLayerTimeOptionCollection = new ESRI.ArcGIS.Client.LayerTimeOptionCollection();
                  
                  // Loop through each LayerInfo object.
                  foreach (ESRI.ArcGIS.Client.LayerInfo myLayerInfo in myLayerInfos)
                  {
                    // Create a new TimeOption object and set the LayerID and UseTime Properties. Then add the
                    // TimeOption to the LayerTimeOptionCollection.
                    ESRI.ArcGIS.Client.Tasks.TimeOption myTimeOption = new ESRI.ArcGIS.Client.Tasks.TimeOption();
                    myTimeOption.LayerId = Convert.ToString(myLayerInfo.ID);
                    myTimeOption.UseTime = false;
                    myLayerTimeOptionCollection.Add(myTimeOption);
                  }
                  
                  // Set the ArcGISDynamicMapServiceLayer.LayerTimeOptions to the new custom LayerTimeOptionsCollection.
                  myArcGISDynamicMapServiceLayer.LayerTimeOptions = myLayerTimeOptionCollection;
                }
              }
              else
              {
                //We do not have a time-enabled ArcGISDynamicMapServiceLayer. There is nothing to change.
              }
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
            
              ' Create a new ArcGISDynamicMapServiceLayer using the Url from the TextBox on the UI page.
              Dim myArcGISDynamicMapServiceLayer As New ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer.ID = "myArcGISDynamicMapServiceLayer"
              myArcGISDynamicMapServiceLayer.Url = TextBox_Url.Text
              
              ' Wire-up the Initialized event handler so that Properties can be accessed and changed on the 
              ' asynchronous ArcGISDynamicMapServiceLayer.
              AddHandler myArcGISDynamicMapServiceLayer.Initialized, AddressOf myArcGISDynamicMapServiceLayer_Initialized
              
              ' Add the ArcGISDynamicMapServiceLayer to the Map which will make the asynchronous call.
              Map1.Layers.Add(myArcGISDynamicMapServiceLayer)
              
            End Sub
              
            Private Sub myArcGISDynamicMapServiceLayer_Initialized(sender As Object, e As EventArgs)
              
              ' This function demonstrates a change that was made to ArcGIS Server 10.02 (i.e. 10.0 Service Pack 2) and what
              ' is needed to draw ALL features in an ArcGISDynamicMapServiceLayer that is time-enabled.
              '
              ' Prior to ArcGIS Server 10.02, it was required in order to see the ALL features for a time-enabled 
              ' ArcGISDynamicMapServiceLayer in a Map Control to either:
              ' (1) set the Map.TimeExtent to a valid time that covered the features in the ArcGISDynamicMapServiceLayer
              ' OR
              ' (2) if no Map.TimeExtent was set on the Map Control, then each TimeOption for the sub-layer of the 
              ' ArcGISDynamicMapServiceLayer needs to have the TimeOption.UseTime Property set to False.
              ' 
              ' As of ArcGIS Sever 10.02 and higher, the time-enabled ArcGISDynamicMapServiceLayer will automatically show 
              ' ALL features, even if no Map.TimeExtent is set.
              
              ' Get the ArcGISDynamicMapServiceLayer and the Collection of LayerInfo objects (i.e. the sub-layers).
              Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer = CType(sender, ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
              Dim myLayerInfos As ESRI.ArcGIS.Client.LayerInfo() = myArcGISDynamicMapServiceLayer.Layers
               
              ' Get the TimeExtent of the ArcGISDynamicMapServiceLayer.
              Dim myTimeExtent As ESRI.ArcGIS.Client.TimeExtent = myArcGISDynamicMapServiceLayer.TimeExtent
              
              If myTimeExtent IsNot Nothing Then
                'We have a time-enabled ArcGISDynamicMapServiceLayer.
                
                ' Get the ArcGIS Server version that is serving up the ArcGISDynamicMapServiceLayer.
                Dim myVersion As Double = myArcGISDynamicMapServiceLayer.Version
                
                If myVersion &gt; 10.01 Then
                  
                  ' No need to do anything! The time-enabled ArcGISDynamicMapServiceLayer will draw all
                  ' features even though no Map.TimeExtent has been specified.
                  
                Else
                  
                  ' Since we have an older version of ArcGIS Server, we need to make some adjustments in order to 
                  ' show ALL of the features in the time-enabled ArcGISDynamicMapServiceLayer when no Map.TimeExtent
                  ' has been specified. Uncomment/Comment out whichever version you want to try (they both produce 
                  ' the same results.
                  
                  ' Option (1):
                  ' =====================================================================================
                  ' Set the Map.TimeExtent to that of the ArcGISDynamicMapServiceLayer.TimeExtent.
                  'Map1.TimeExtent = myTimeExtent 
                  
                  ' Option (2):
                  ' =====================================================================================
                  ' Create a new LayerTimeOptionCollection.
                  Dim myLayerTimeOptionCollection As New ESRI.ArcGIS.Client.LayerTimeOptionCollection
                  
                  ' Loop through each LayerInfo object.
                  For Each myLayerInfo As ESRI.ArcGIS.Client.LayerInfo In myLayerInfos
                    
                    ' Create a new TimeOption object and set the LayerID and UseTime Properties. Then add the
                    ' TimeOption to the LayerTimeOptionCollection.
                    Dim myTimeOption As New ESRI.ArcGIS.Client.Tasks.TimeOption
                    myTimeOption.LayerId = CStr(myLayerInfo.ID)
                    myTimeOption.UseTime = False
                    myLayerTimeOptionCollection.Add(myTimeOption)
                  Next
                  
                  ' Set the ArcGISDynamicMapServiceLayer.LayerTimeOptions to the new custom LayerTimeOptionsCollection.
                  myArcGISDynamicMapServiceLayer.LayerTimeOptions = myLayerTimeOptionCollection
                  
                End If
                
              Else
                
                'We do not have a time-enabled ArcGISDynamicMapServiceLayer. There is nothing to change.
                
              End If
              
            End Sub
            </code>
            </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed.
            </summary>
            <remarks>
            Actually, for this kind of layer, the legend never changes.
            </remarks>
        </member>
        <member name="E:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.VisibilityChanged">
            <summary>
            Occurs when the visibility of sublayers changed.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.AttributionTemplate">
            <summary>
            Gets the attribution template of an ArcGIS Server based ArcGISDynamicMapServiceLayer web service.
            </summary>
            <remarks>
            <para>
            The AttributionTemplate Property returns a 
            <a href="http://msdn.microsoft.com/en-us/library/ms589297(v=VS.95).aspx" target="_blank">DataTemplate</a> 
            that allows for the display of the 
            <see cref="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.CopyrightText">ArcGISDynamicMapServiceLayer.CopyrightText</see> 
            information. 
            </para>
            <para>
            The typical use case is to use an 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.Attribution">ESRI Attribution Control</see> where the 
            <see cref="P:ESRI.ArcGIS.Client.Map.Layers">Map.Layers</see> Property is bound to the 
            <see cref="M:ESRI.ArcGIS.Client.Toolkit.Attribution.Layers">Attribution.Layers</see> Property. This will enable 
            the display of the CopyrightText information about various layers in a nicely formatted output with minimal 
            programming effort. The ease of use for this use case becomes readily apparent when there are multiple 
            layers with CopyrightText information that need to be displayed and only a single binding needs to take 
            place. <b>Note:</b> All layers that have an AttributionTemplate Property have the 
            <see cref="T:ESRI.ArcGIS.Client.IAttribution">IAttribution</see> Interface implemented. 
            </para>
            <para>
            The AttributionTemplate is read-only and is only useful to display the CopyrightText information. It is 
            not possible to set the CopyrightText information on the client side nor is it possible to change the 
            internals of the DataTemplate obtained by the AttributionTemplate. 
            </para>
            <para>
            Any Control that has a <b>ContentTemplate</b> Property can display the information contained in the 
            AttributionTemplate. These Controls can have their base Properties modified to alter the appearance of the 
            CopyrightText information being displayed (i.e. FontSize, Foreground, etc.). When multiple layers have 
            CopyrightText information that needs attributed, it takes more complex programming logic to display the 
            information; consider using the ESRI Attribution Control instead.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            Click the 'Display Copyright and AttributionTemplate Information' Button to display CopyrightText 
            information in various controls. The purpose is to demonstrate what is contained in the 
            AttributionTemplate is the same as the CopyrightText.
            <para>
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Showing the CopyrightText of an ArcGISDynamicMapServiceLayer." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.AttributionTemplate1.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map Control. Set it's Initial Extent to Texas. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="0,180,0,0" Name="Map1" 
                      VerticalAlignment="Top" Height="300" Width="400" Extent="-107.45,25.62,-92.80,36.60"&gt;
              
                &lt;!-- Define an ArcGISDynamicMapServiceLayer. --&gt;
                &lt;esri:ArcGISDynamicMapServiceLayer 
                      Url="http://sampleserver1.arcgisonline.com:80/arcgis/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer" /&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- 
              Add a Button to display ArcGISDynamicMapServiceLayer CopyrightText and AttributeTemplate
              Property information. Both Properties display the same information. 
              --&gt;
              &lt;Button Content="Display Copyright and AttributionTemplate Information" Height="23" 
                      HorizontalAlignment="Left" Margin="12,151,0,0" Width="763" VerticalAlignment="Top" 
                      Name="ButtonAttributionTemplate" Click="ButtonAttributionTemplate_Click"/&gt;
              
            
              &lt;!-- A TextBox --&gt;
              &lt;sdk:Label Height="24" HorizontalAlignment="Left" Margin="406,179,0,0" Name="Label_CopyrightText" 
                         VerticalAlignment="Top" Width="350" Content="TextBox:"/&gt;
              &lt;TextBox Height="30" HorizontalAlignment="Left" Margin="406,200,0,0" Name="TextBox1" 
                       VerticalAlignment="Top" Width="350" /&gt;
              
              &lt;!-- ESRI Attribution Control  --&gt;
              &lt;sdk:Label Height="24" HorizontalAlignment="Left" Margin="410,256,0,0" Name="Label_Attribution" 
                         VerticalAlignment="Top" Width="346" Content="ESRI Attribution Control:"/&gt;
              &lt;esri:Attribution HorizontalAlignment="Left" Margin="406,279,0,0" Name="Attribution1" 
                                 VerticalAlignment="Top" Height="30" Width="350" /&gt;
              
              &lt;!-- A ContentControl --&gt;
              &lt;sdk:Label Height="24" HorizontalAlignment="Left" Margin="410,341,0,0" Name="Label_ContentControl" 
                         VerticalAlignment="Top" Width="346" Content="Content Control:"/&gt;
              &lt;ContentControl Height="30" HorizontalAlignment="Left" Margin="410,361,0,0" 
                              Name="ContentControl1" VerticalAlignment="Top" Width="346" 
                              FontSize="20"  Foreground="Red" /&gt;
              
              &lt;!-- A Button --&gt;
              &lt;sdk:Label Height="24" HorizontalAlignment="Left" Margin="410,424,0,0" Name="Label_Button" 
                         VerticalAlignment="Top" Width="346" Content="Button:"/&gt;
              &lt;Button Height="30" HorizontalAlignment="Left" Margin="410,448,0,0" 
                      Name="Button1" VerticalAlignment="Top" Width="346" /&gt;
              
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="52" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="756" TextWrapping="Wrap" 
                   Text="Click the 'Display Copyright and AttributionTemplate Information' Button to display CopyrightText information 
                         in various controls. The purpose is to demonstrate what is contained in the AttributionTemplate is the
                         same as the CopyrightText." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void ButtonAttributionTemplate_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Get the ArcGISDynamicMapServiceLayer.
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = null;
              myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)(Map1.Layers[0]);
              
              // Display the ArcGISDynamicMapServiceLayer.CopyrightText in a TextBox.
              TextBox1.Text = myArcGISDynamicMapServiceLayer.CopyrightText;
              
              // Display the ArcGISDynamicMapServiceLayer.CopyrightText information via the ESRI Attribution Control.
              Attribution1.Layers = Map1.Layers;
              
              // Display the ArcGISDynamicMapServiceLayer.CopyrightText information via a Microsoft ContentControl.
              ContentControl1.ContentTemplate = myArcGISDynamicMapServiceLayer.AttributionTemplate;
              ContentControl1.Content = myArcGISDynamicMapServiceLayer;
              
              // Display the ArcGISDynamicMapServiceLayer.CopyrightText information via a Button.
              Button1.ContentTemplate = myArcGISDynamicMapServiceLayer.AttributionTemplate;
              Button1.Content = myArcGISDynamicMapServiceLayer;
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub ButtonAttributionTemplate_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Get the ArcGISDynamicMapServiceLayer.
              Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer = CType(Map1.Layers.Item(0), ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
              
              ' Display the ArcGISDynamicMapServiceLayer.CopyrightText in a TextBox.
              TextBox1.Text = myArcGISDynamicMapServiceLayer.CopyrightText
              
              ' Display the ArcGISDynamicMapServiceLayer.CopyrightText information via the ESRI Attribution Control.
              Attribution1.Layers = Map1.Layers
              
              ' Display the ArcGISDynamicMapServiceLayer.CopyrightText information via a Microsoft ContentControl.
              ContentControl1.ContentTemplate = myArcGISDynamicMapServiceLayer.AttributionTemplate
              ContentControl1.Content = myArcGISDynamicMapServiceLayer
              
              ' Display the ArcGISDynamicMapServiceLayer.CopyrightText information via a Button.
              Button1.ContentTemplate = myArcGISDynamicMapServiceLayer.AttributionTemplate
              Button1.Content = myArcGISDynamicMapServiceLayer
              
            End Sub
            </code>
            </example>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.RestImageFormat">
            <summary>Output image formats supported by ArcGIS map services.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.RestImageFormat.PNG24">
            <summary>24-bit PNG</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.RestImageFormat.JPG">
            <summary>
            JPEG
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.RestImageFormat.PNG8">
            <summary>8-bit PNG</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.RestImageFormat.PNG32">
            <summary>32-bit PNG</summary>
            <remarks>
            Note: Support for the png32 format was added at 9.3.1. This format is only
            available for map services whose supportedImageFormatTypes property includes PNG32
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.StringToInt32ArrayConverter">
            <summary>
            String To Int32 Array Converter
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.StringToInt32ArrayConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="destinationType">The type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.StringToInt32ArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.StringToInt32ArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.StringToInt32ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified value object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
            <exception cref="T:System.NotImplementedException">
            	<see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>  not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="T:ESRI.ArcGIS.Client.LayerDefinition">
            <summary>
            Allows you to filter the features of individual layers in an <see cref="T:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer"/>
            layer map by specifying definition expressions for those layers. 
            </summary>
            <remarks>
            Example:<br/>
            <code>
            &lt;LayerDefinition LayerID="0"&gt;POP2000 &gt; 1000000&lt;/LayerDefinition&gt;
            &lt;LayerDefinition LayerID="1" Definition="AREA &gt; 100000" /&gt;
            </code>
            </remarks>
            <seealso cref="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerDefinitions"/>
            <seealso cref="T:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerDefinition.LayerID">
            <summary>
            Gets or sets the ID of the layer this definition belongs to.
            </summary>
            <value>The layer ID.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerDefinition.Definition">
            <summary>
            Gets or sets the definition string.
            </summary>
            <remarks>
            Example syntax:<br/>
            <code>
            POP2000 > 1000000
            </code>
            </remarks>
            <value>The definition.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Table">
            <summary>
            Represents Table information found in a service layer.
            </summary>	
        </member>
        <member name="P:ESRI.ArcGIS.Client.Table.ID">
            <summary>
            Gets the ID of the table.
            </summary>	
        </member>
        <member name="P:ESRI.ArcGIS.Client.Table.Name">
            <summary>
            Gets the name of the table.
            </summary>		
        </member>
        <member name="T:ESRI.ArcGIS.Client.LayerTimeOptionCollection">
            <summary>
            Collection of <see cref="T:ESRI.ArcGIS.Client.Tasks.TimeOption">TimeOption</see> objects used for 
            each sub-layer of a time-enabled ArcGISDynamicMapServiceLayer.
            </summary>
            <remarks>
            <para>
            Using the Read/Get of the 
            <see cref="P:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerTimeOptions">ArcGISDynamicMapServiceLayer.LayerTimeOptions</see> 
            Property returns null/Nothing unless it has been explicitly set by the developer (it is not automatically 
            set as a Property in the ArcGIS Server web service for the ArcGISDynamicMapServiceLayer). Developers need to 
            create a new LayerTimeOptionCollection, add the <see cref="T:ESRI.ArcGIS.Client.Tasks.TimeOption">TimeOption</see>
            object(s) to it, and then set the new LayerTimeOptionCollection to the ArcGISDynamicMapServiceLayer.LayerTimeOptions 
            Property. An ArcGISDynamicMapServiceLayer can have multiple TimeOption objects; one for 
            each sub-layer in the ArcGISDynamicMapServiceLayer.
            </para>
            <para>
            The TimeOption object indicates whether or not the sub-layer of an ArcGISDynamicMapSericeLayer should use the 
            <see cref="T:ESRI.ArcGIS.Client.TimeExtent">TimeExtent</see> specified by the time parameter or not (see  
            <see cref="M:ESRI.ArcGIS.Client.Tasks.TimeOption.UseTime">TimeOption.UseTime</see>), 
            whether to draw the layer features cumulatively or not (see  
            <see cref="M:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeDataCumulative">TimeOption.TimeDataCumulative</see>), 
            and if any time offsets will be used for the layer (see 
            <see cref="M:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeOffset">TimeOption.TimeOffset</see>).
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            When the application starts a time-enabled ArcGISDynamicMapServiceLayer with two sub-layers is added to the 
            Map Control. Initially the two sub-layers are restricted to only show features that fall within the Map.TimeExtent 
            of Jan. 1, 1945 to Jan. 1, 1960. Click the various 'Sub-layer X: UseTime' CheckBoxes and click the Button to 
            re-render the ArcGISDynamicMapServiceLayer to see the effect of expanding the Map.TimeExtent for a particular 
            sub-layer to that of the TimeExent of the REST service, which is Jan. 1, 1945 to Jan. 1, 2009.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Adjusting the TimeOption.UseTime Properties on a time-enabled ArcGISDynamicMapServiceLayer." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.LayerTimeOptionCollection.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" &gt;
              
              &lt;!-- 
              Add a Map Control zoomed to Stanton County Kansas. An initial Map.TimeExtent is specified from Jan. 1, 
              1945 to Jan. 1, 1960 that restricts the 'window-of-time' for which features are displayed in the
              ArcGISDynamicMapServiceLayer.
              --&gt;
              &lt;esri:Map x:Name="Map1" WrapAround="True" HorizontalAlignment="Left" VerticalAlignment="Top"
                        Margin="12,193,0,0" Height="400" Width="400" Extent="-11364678,4479899,-11291472,4553106" 
                        TimeExtent="1945/01/01 00:00:00 UTC, 1960/01/01 00:00:00 UTC"&gt;
              
                &lt;!-- Add a backdrop ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="BaseLayer"
                              Url="http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer" /&gt;
                
                &lt;!-- Add the ArcGISDynamicMapServiceLayer that is time-enabled. It has two sub-layers. --&gt;
                &lt;esri:ArcGISDynamicMapServiceLayer ID="StantonCountyKSLeases" DisableClientCaching="True"
                      Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Petroleum/StantonCountyKSLeases/MapServer"&gt;
                &lt;/esri:ArcGISDynamicMapServiceLayer&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Legend Control to demonstrate which features belong to which layers. --&gt;
              &lt;esri:Legend x:Name="MyLegend" Margin="418,193,0,0" Map="{Binding ElementName=Map1}" ShowOnlyVisibleLayers="True"
                           Height="400" Width="300" VerticalAlignment="Top" HorizontalAlignment="Left"/&gt;
                  
              &lt;!-- 
              Add two CheckBoxes, one for each sub-layer in the ArcGISDynamicMapServiceLayer, that give the user
              the ability to control the TimeOption.UseTime Property for each sub-layer. Then click the button
              to call code-behind functions to re-render the Map Control.
              --&gt;
              &lt;CheckBox Content="Sub-layer 0: UseTime" HorizontalAlignment="Left" Margin="12,147,0,437" 
                        Name="CheckBox_SubLayer0" IsChecked="True"/&gt;
              &lt;CheckBox Content="Sub-layer 1: UseTime" Height="16" HorizontalAlignment="Left" Margin="12,172,0,0" 
                        Name="CheckBox_SubLayer1" VerticalAlignment="Top" IsChecked="True" /&gt;
              &lt;Button Content="Re-draw the time-enabled ArcGISDynamicMapServiceLayer" Height="41" HorizontalAlignment="Left" 
                      Margin="179,147,0,0" Name="Button1" VerticalAlignment="Top" Width="539" Click="Button1_Click"/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="141" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="788" 
                         TextWrapping="Wrap" Text="When the application starts a time-enabled ArcGISDynamicMapServiceLayer with
                         two sub-layers is added to the Map Control. Initially the two sub-layers are restricted to only show 
                         features that fall within the Map.TimeExtent of Jan. 1, 1945 to Jan. 1, 1960. Click the various 
                         'Sub-layer X: UseTime' CheckBoxes and click the Button to re-render the ArcGISDynamicMapServiceLayer
                         to see the effect of expanding the Map.TimeExtent for a particular sub-layer to that of the TimeExent
                         of the REST service, which is Jan. 1, 1945 to Jan. 1, 2009." /&gt;
                
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Get the ArcGISDynamicMapServiceLayer.
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)(Map1.Layers["StantonCountyKSLeases"]);
              
              // Create a new LayerTimeOptionCollection.
              ESRI.ArcGIS.Client.LayerTimeOptionCollection myLayerTimeOptionCollection = new ESRI.ArcGIS.Client.LayerTimeOptionCollection();
              
              // For sub-layer 0, create a new TimeOption and allow the user to specify what TimeOption.UseTime
              // value they want to set. Then add the TimeOption to the new LayerTimeOptionCollection.
              ESRI.ArcGIS.Client.Tasks.TimeOption myTimeOption_SubLayer0 = new ESRI.ArcGIS.Client.Tasks.TimeOption();
              myTimeOption_SubLayer0.LayerId = "0";
              if (CheckBox_SubLayer0.IsChecked == true)
              {
                myTimeOption_SubLayer0.UseTime = true;
              }
              else if (CheckBox_SubLayer0.IsChecked == false)
              {
                myTimeOption_SubLayer0.UseTime = false;
              }
              myLayerTimeOptionCollection.Add(myTimeOption_SubLayer0);
              
              // For sub-layer 1, create a new TimeOption and allow the user to specify what TimeOption.UseTime
              // value they want to set. Then add the TimeOption to the new LayerTimeOptionCollection.
              ESRI.ArcGIS.Client.Tasks.TimeOption myTimeOption_SubLayer1 = new ESRI.ArcGIS.Client.Tasks.TimeOption();
              myTimeOption_SubLayer1.LayerId = "1";
              if (CheckBox_SubLayer1.IsChecked == true)
              {
                myTimeOption_SubLayer1.UseTime = true;
              }
              else if (CheckBox_SubLayer1.IsChecked == false)
              {
                myTimeOption_SubLayer1.UseTime = false;
              }
              myLayerTimeOptionCollection.Add(myTimeOption_SubLayer1);
              
              // Set the ArcGISDynamicMapServiceLayer.LayerTimeOptions to the new customized LayerTimeOptionCollection.
              myArcGISDynamicMapServiceLayer.LayerTimeOptions = myLayerTimeOptionCollection;
              
              // Refresh the ArcGISDynamicMapServiceLayer so that it re-renders in the Map Control.
              myArcGISDynamicMapServiceLayer.Refresh();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
                
              ' Get the ArcGISDynamicMapServiceLayer.
              Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer = CType(Map1.Layers("StantonCountyKSLeases"), ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
              
              ' Create a new LayerTimeOptionCollection.
              Dim myLayerTimeOptionCollection As New ESRI.ArcGIS.Client.LayerTimeOptionCollection
              
              ' For sub-layer 0, create a new TimeOption and allow the user to specify what TimeOption.UseTime
              ' value they want to set. Then add the TimeOption to the new LayerTimeOptionCollection.
              Dim myTimeOption_SubLayer0 As New ESRI.ArcGIS.Client.Tasks.TimeOption
              myTimeOption_SubLayer0.LayerId = "0"
              If CheckBox_SubLayer0.IsChecked = True Then
                myTimeOption_SubLayer0.UseTime = True
              ElseIf CheckBox_SubLayer0.IsChecked = False Then
                myTimeOption_SubLayer0.UseTime = False
              End If
              myLayerTimeOptionCollection.Add(myTimeOption_SubLayer0)
              
              ' For sub-layer 1, create a new TimeOption and allow the user to specify what TimeOption.UseTime
              ' value they want to set. Then add the TimeOption to the new LayerTimeOptionCollection.
              Dim myTimeOption_SubLayer1 As New ESRI.ArcGIS.Client.Tasks.TimeOption
              myTimeOption_SubLayer1.LayerId = "1"
              If CheckBox_SubLayer1.IsChecked = True Then
                myTimeOption_SubLayer1.UseTime = True
              ElseIf CheckBox_SubLayer1.IsChecked = False Then
                myTimeOption_SubLayer1.UseTime = False
              End If
              myLayerTimeOptionCollection.Add(myTimeOption_SubLayer1)
              
              ' Set the ArcGISDynamicMapServiceLayer.LayerTimeOptions to the new customized LayerTimeOptionCollection.
              myArcGISDynamicMapServiceLayer.LayerTimeOptions = myLayerTimeOptionCollection
              
              ' Refresh the ArcGISDynamicMapServiceLayer so that it re-renders in the Map Control.
              myArcGISDynamicMapServiceLayer.Refresh()
              
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerTimeOptionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.LayerTimeOptionCollection"/> class.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.LayerTree">
            <summary>
            Helper class to convert the visibility of sublayers between 2 logics.
            Logic 1 (REST API) used by VisibleLayers : if a layer is visible --> all its children are displayed whatever the ascendants visibility
            Logic 2 (SOAP API, ISublayerVisibilitySupport interface, DefaultVisibility in LayerInfo, Legend/TOC UI) : a layer is displayed only if itself and its ascendants are visible.
            
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerTree.SetVisibleLayers(System.Int32[])">
            <summary>
            Init the visibility of the layers from the visibleLayers array
            When a layer is in the array visibleLayers, it is visible (whatever the visibility of its parent) and all its descendants are visible
            so in the LayerTree we have to set the visibility for all ascendants and all descendants.
            </summary>
            <param name="visibleLayers">The visible layers.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerTree.GetVisibleLayers">
            <summary>
            Gets the visibleLayers array (logic 1)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerTree.GetLayerVisibility(System.Int32)">
            <summary>
            Gets the layer visibility (logic 2).
            </summary>
            <param name="layerID">The layer ID.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerTree.SetLayerVisibility(System.Int32,System.Boolean)">
            <summary>
            Sets the layer visibility (logic 2).
            </summary>
            <param name="layerID">The layer ID.</param>
            <param name="visible">if set to <c>true</c> [visible].</param>
            <returns></returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Field">
            <summary>
            A field in a layer.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Field.#ctor(System.String,ESRI.ArcGIS.Client.Field.FieldType,System.String,ESRI.ArcGIS.Client.FeatureService.Domain,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Field"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="alias">The alias.</param>
            <param name="domain">The domain.</param>
            <param name="editable">if set to <c>true</c> [editable].</param>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <param name="length">The length.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Field.Name">
            <summary>
            The name of the field.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Field.Type">
            <summary>
            The type of values in the field.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Field.Alias">
            <summary>
            Gets or sets the alias used for this field.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Field.Domain">
            <summary>
            The domain limiting values to a range or a set of codes for the field.  Feature Service layers only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Field.Editable">
            <summary>
            Specifies whether this field is read-only or editable. Feature Service layers only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Field.Nullable">
            <summary>
            Specifies whether this field is required or can be null.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Field.Length">
            <summary>
            Specifies the maximum length of the field
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Field.FieldType">
            <summary>
            Field type
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.Integer">
            <summary>
            <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.SmallInteger">
            <summary>
            <see cref="T:System.Int16"/>.	
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.Double">
            <summary>
            Double-precision floating-point number.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.Single">
            <summary>
            Single-precision floating-point number.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.String">
            <summary>
            Character string.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.Date">
            <summary>
            Date.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.Geometry">
            <summary>
            Geometry.	
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.OID">
            <summary>
            Long Integer representing an object identifier.	
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.Blob">
            <summary>
            Binary Large Object.	
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.GlobalID">
            <summary>
            ESRI Global ID.	
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.Raster">
            <summary>
            Raster.	
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.GUID">
            <summary>
            Globally Unique Identifier.	
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.XML">
            <summary>
            XML Document	
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Field.FieldType.Unknown">
            <summary>
            Unknown field type
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.TimeClassBreaksAger">
            <summary>
            Provides a mechanism to display different symbology for temporal based FeatureLayer data by groupings 
            of time ranges.
            </summary>
            <remarks>
            <para>
            The  TimeClassBreaksAger overrides the default symbology of the 
            <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.ObservationRenderer">ObservationRenderer</see> as the 
            <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> Property of the FeatureLayer changes. 
            Use <see cref="T:ESRI.ArcGIS.Client.TimeClassBreakInfo">TimeClassBreakInfo</see> objects to define groups 
            of temporal windows that will span across the Map.TimeExtent via 
            <see cref="P:ESRI.ArcGIS.Client.TimeClassBreakInfo.MinimumAge">TimeClassBreakInfo.MinimumAge</see> and 
            <see cref="P:ESRI.ArcGIS.Client.TimeClassBreakInfo.MaximumAge">TimeClassBreakInfo.MaximumAge</see> ranges. 
            The symbol defined by the ObservationRenderer is overridden by each TimeClassBreakInfo  object via:
            </para>
            <list type="bullet">
            <item>The ObservationRenderer's Symbol Color &lt;== TimeClassBreakInfo.Color</item>
            <item>The ObservationRenderer's Symbol Size &lt;== TimeClassBreakInfo.Size</item>
            <item>The ObservationRenderer's Symbol visibility &lt;== TimeClassBreakInfo.Opacity</item>
            </list>
            <para>
            If the TimeClassBreakInfo Classes do not completely cover the entire Map.TimeExtent then whatever 
            has been established as the ObservationRenderer will draw for those features.
            </para>
            <para>
            The TimeClassBreaksAger is similar to the 
            <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see> in that groups are 
            defined to render symbology but uses time intervals to override what was established by the 
            ObservationRenderer.
            </para>
            <para>
            Some may find that setting the TimeClassBreakInfo MinimumAge and MaximumAge a little 
            counter-intuitive. The MinimumAge values are the newer temporal observations. The MaximumAge values 
            are the older temporal observations.
            </para>
            <para>
            Make sure that the <see cref="P:ESRI.ArcGIS.Client.TimeClassBreaksAger.Unit">Unit</see> Property 
            corresponds with the appropriate values that are set for the TimeClassBreakInfo MinimumAge and 
            MaximumAge values.
            </para>
            <para>
            The following screen shot depicts two hurricanes (Alberto and Debby) that cover the time period 
            of August 3, 2000 to August 24, 2000. The image shows how the TimeClassBreaksAger can be used to age 
            time based data associated with TemporalRenderer. The default symbol that is specified for the 
            ObservationRenderer is a small black circle. The color and size of the symbology of the two 
            hurricane’s movements change over the time period. For the dates August 24 to August 22 the symbol 
            is a large white circle. For the dates August 22 to August 19 the symbol is a medium blue circle. 
            For the dates August 19 to August 12 the symbol is a small red circle. For remainder of the dates 
            (specifically August 12 to August 3) the ObservationRender is shown.
            </para>
            <para>
            <img border="0" alt="Hurricane Alberto and Debby in the Atlantic Ocean demonstrating the TimeClassBreaksAger." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TimeClassBreaksAger.png"/>
            </para>
            <para>
            To help clarify how the TimeClassBreaksAger and the TimeBreakClassInfo groupings work a visual 
            representation depicting a timeline for the code example is provided here:
            </para>
            <para>
            <img border="0" alt="Graphical timeline showing the TimeClassBreaksAger." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TimeClassBreaksAger2.png"/>
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
              
              &lt;!--
              Display the FeatureLayer in Map2 that has a TemporalRenderer applied:
                      
              Add an ArcGISTiledMapsServiceLayer as a background to the map. The ArcGISTiledMapsServiceLayer 
              layer is first Layer added to the Map's Layers Collection and is drawn on the bottom. A FeatureLayer 
              is then added to the map and draws on top of the background layer.
                      
              Set the Map2 Extent to zoom to the middle of the Atlantic ocean.
                      
              Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
              within the set TimeExtent will then be shown. If no Map TimeExtent is set then only the 
              ObservationRenderer is in effect. If a Map TimeExtent is set then the ObservationRenderer and the 
              TrackRenderer are in effect. In the case of this example the TimeExtent for the hurricane 
              information is shortened to a small temporal window that just covers the time extent necessary to 
              render the two hurricanes (Alberto and Debby) that are returned by the service.
                      
              Manually setting the TimeExtent of the Map2. Could have bound to a TimeSlider for more interactiveness.
              --&gt;
              &lt;esri:Map Background="White" Height="375" HorizontalAlignment="Left" Margin="408,227,0,0" 
                        Name="Map2" VerticalAlignment="Top" Width="375" 
                        Extent="-77.69,-13.88,-11.77,52.03" 
                        TimeExtent="2000/08/03 00:00:01 UTC,2000/08/24 00:00:01 UTC"&gt;
                
                &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer"
                                                 Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                
                  &lt;!--
                  The FeatureLayer contains Hurricane data from NOAA as Markers (aka. Points). 
                              
                  The Where clause is optional. It is necessary when more that 500/1000 records returned. 
                  In ArcGIS Server 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. 
                  In ArcGIS Server 10 the default is 1000. This setting is configurable per map service using 
                  ArcCatalog or ArcGIS Server Manager (on the Parameters tab). 
                              
                  The Where clause gets the temporal observations of two hurricanes (Alberto and Debby).
                              
                  Specify the Outfields Property to specify which Fields are returned on which the TemporalRenderer 
                  TrackIdField can use. Specifying the wildcard (*) character in the Add Property will return all 
                  Fields. 
                  --&gt;
                  &lt;esri:FeatureLayer ID="MyFeatureLayer"
                                     Url="http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0"
                                     Where="EVENTID = 'Alberto' OR EVENTID = 'Debby'"
                                     OutFields="*"&gt;
                    
                    &lt;esri:FeatureLayer.Renderer&gt;
                      
                      &lt;!--
                      Create the TemporalRenderer object. It will use two different Properties 
                      (ObservationRenderer and TrackRenderer) to create the image. 
                                          
                      Specify which TrackIdField (via its string name) the TemporalRenderer will use for 
                      breaking the rendering of the polyline event Symbols into groups. 
                                          
                      Setting the TrackIDField draws polylines in time order for a group of attributes. If 
                      the TrackIDField property is not set and the TrackRenderer is used, then all point 
                      observations will have a polyline connecting them in order of time. This becomes messy 
                      if multiple events are occurring at the same time (i.e. hurricanes) and the linework 
                      would then look like a spider diagram rather than discreet tracks with one per event. 
                      In this example to speed up drawing time and limit the amount of data that is returned, 
                      the FeatureLayer Where clause was used to restrict only two hurricanes (or events) 
                      from displaying. If the FeatureLayer Where clause was commented out, more hurricanes 
                      would be displayed. Having the TrackIdField becomes key to keeping each event separate.
                      --&gt;
                      &lt;esri:TemporalRenderer TrackIdField="EVENTID"&gt;
                        
                        &lt;!--
                        ObservationRenderer Property:
                        Define the default symbology for the FeatureLayer.TemporalRenderer.ObservationRenderer. 
                        Use a SimpleRenderer so that each temporal observation has some type of symbology. If 
                        the default symbol's Style, Color, and Size are not specified, then whatever is defined 
                        by the ArcGIS Server web service will be returned for the symbology of the FeatureLayers 
                        temporal observations. 
                        --&gt;
                        &lt;esri:TemporalRenderer.ObservationRenderer&gt;
                          &lt;esri:SimpleRenderer&gt;
                            &lt;esri:SimpleMarkerSymbol Color="Black" Size="4" Style="Circle"/&gt;
                          &lt;/esri:SimpleRenderer&gt;
                        &lt;/esri:TemporalRenderer.ObservationRenderer&gt;
                        
                        &lt;!--
                        TrackRenderer Property:
                        Define a SimpleRenderer with a SimpleLineSymbol to display each tracked event. The event 
                        will be a yellow line connecting the time-based observations.
                        --&gt;
                        &lt;esri:TemporalRenderer.TrackRenderer&gt;
                          &lt;esri:SimpleRenderer&gt;
                            &lt;esri:SimpleLineSymbol Color="Yellow" Width="1"/&gt;
                          &lt;/esri:SimpleRenderer&gt;
                        &lt;/esri:TemporalRenderer.TrackRenderer&gt;
                        
                        &lt;!--
                        SymbolAger Property:
                        Define a TimeClassBreaksAger to override the default symbology of the ObservationRenderer 
                        as the Map.TimeExtent Property of the FeatureLayer changes. Use TimeClassBreakInfo objects 
                        to define groups of temporal windows that will span across the Map.TimeExtent via 
                        MinimumAge and MaximumAge ranges. The symbol defined by the ObservationRenderer is 
                        overridden by each TimeClassBreakInfo object via:
                        The ObservationRenderer's Symbol Color &lt;== TimeClassBreakInfo.Color
                        The ObservationRenderer's Symbol Size &lt;== TimeClassBreakInfo.Size
                        The ObservationRenderer's Symbol visibility &lt;== TimeClassBreakInfo.Opacity
                                                
                        If the TimeClassBreakInfo Classes do not completely cover the entire Map.TimeExtent then 
                        whatever has been established as the ObservationRenderer will draw for those features.
                                                
                        The TimeClassBreaksAger is similar to the ClassBreaksRenderer in that groups are defined 
                        to render symbology but uses time intervals to override what was established by the 
                        ObservationRenderer.
                                                
                        Some may find that setting the TimeClassBreakInfo .MinimumAge and .MaximumAge a little 
                        counter-intuitive. The MinimumAge values are the newer temporal observations. The 
                        MaximumAge values are the older temporal observations. In this example there are 3 defined 
                        groups to age the data. The 3 groups do not cover the entire temporal span of the data 
                        defined by the Map.TimeExtent. The oldest data observations are not covered by the 3 
                        groups and hence are renderer by what was originally defined in the ObseravtionRenderer.
                                                 
                        Make sure that the TimeClassBreaksAger.Units Property corresponds with the appropriate 
                        values that are set for the TimeClassBreakInfo .MinimumAge and .MaximumAge values.
                        --&gt;
                        &lt;esri:TemporalRenderer.SymbolAger&gt;
                          &lt;esri:TimeClassBreaksAger Unit="Days"&gt;
                          
                          &lt;!--
                          The MinimumAge = 0.0 is equivalent to the date 2000/08/24 00:00:01 UTC
                          The MaximumAge = 2.0 is equivalent to the date 2000/08/22 00:00:01 UTC
                          --&gt;
                          &lt;esri:TimeClassBreakInfo Color="White" Size="10" MinimumAge="0.0" MaximumAge="2.0"/&gt;
                          
                          &lt;!--
                          The MinimumAge = 2.0 is equivalent to the date 2000/08/22 00:00:01 UTC
                          The MaximumAge = 5.0 is equivalent to the date 2000/08/19 00:00:01 UTC
                          --&gt;
                          &lt;esri:TimeClassBreakInfo Color="Blue" Size="7" MinimumAge="2.0" MaximumAge="5.0"/&gt;
                          
                          &lt;!--
                          The MinimumAge = 5.0 is equivalent to the date 2000/08/19 00:00:01 UTC
                          The MaximumAge = 12.0 is equivalent to the date 2000/08/12 00:00:01 UTC
                          --&gt;
                          &lt;esri:TimeClassBreakInfo Color="Red" Size="5" MinimumAge="5.0" MaximumAge="12.0"/&gt;
                          
                          &lt;!--
                          NOTE: For the temporal observations older than 12 days (#8/12/2000 12:00:01 AM#) the 
                          ObservationRenderer is in full effect since no additional TimeClassBreakInfo is 
                          defined to cover the oldest hurricane occurrences.
                          --&gt;
                                            
                        &lt;/esri:TimeClassBreaksAger&gt;
                      &lt;/esri:TemporalRenderer.SymbolAger&gt;
                                              
                    &lt;/esri:TemporalRenderer&gt;
                  &lt;/esri:FeatureLayer.Renderer&gt;
                &lt;/esri:FeatureLayer&gt;
              &lt;/esri:Map&gt;
            &lt;/Grid&gt;
            </code>
                
            <code title="Example CS1" description="" lang="CS">
            public void DrawTimeClassBreaksAger(ESRI.ArcGIS.Client.Map myMap)
            {
              
              // Display the FeatureLayer in myMap that has a TemporalRenderer applied
              // ======================================================================
              
              // Clear out any exiting layers
              myMap.Layers.Clear();
              
              // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
              // Layers Collection is on the bottom and the other Layer is added on the top.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              myMap.Layers.Add(myArcGISTiledMapServiceLayer2);
              
              // Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
              ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer = new ESRI.ArcGIS.Client.FeatureLayer();
              
              // This FeatureLayer contains hurricane data from NOAA. 
              myFeatureLayer.Url = "http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0";
              
              // The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
              // 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
              // default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
              // (on the Parameters tab). 
              // Only two hurricanes (Alberto and Debby) are returned for this Where clause.
              myFeatureLayer.Where = "EVENTID = 'Alberto' OR EVENTID = 'Debby'";
              
              // Specify the Outfields Property to specify which Fields are returned on which the 
              // TemporalRenderer.TrackIDField can use. Specifying the wildcard (*) character in the Add Property 
              // will return all Fields. 
              myFeatureLayer.OutFields.Add("*");
              
              // Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
              // within the set TimeExtent will then be shown. If no Map.TimeExtent is set then only the 
              // ObservationRenderer is in effect. If a Map.TimeExtent is set then the ObservationRenderer and the 
              // TrackRenderer are in effect. In the case of this example the TimeExtent for the hurricane 
              // information is shortened to a small temporal window that just covers the time extent necessary to 
              // render the two hurricanes (Alberto and Debby) that are returned by the service.
              ESRI.ArcGIS.Client.TimeExtent myTimeExtent = new ESRI.ArcGIS.Client.TimeExtent();
              System.DateTime dateStart = DateTime.Parse("8/3/2000 12:00:01 AM"); //Custom Start date/time
              myTimeExtent.Start = dateStart;
              System.DateTime dateEnd = DateTime.Parse("8/24/2000 12:00:01 AM"); //Custom End date/time
              myTimeExtent.End = dateEnd;
              
              // Manually setting the TimeExtent of the myMap. Could have used a TimeSlider for more interactiveness.
              myMap.TimeExtent = myTimeExtent;
              
              // Create the TemporalRenderer object. It will use two different Properties (ObservationRenderer, 
              // and TrackRenderer) to create the image.
              ESRI.ArcGIS.Client.TemporalRenderer myTemporalRenderer = new ESRI.ArcGIS.Client.TemporalRenderer();
              
              
              // Define the default symbology for the FeatureLayer.TemporalRenderer.ObservationRenderer. Use a 
              // SimpleRenderer so that each temporal observation has some type of symbology. If the default symbol's 
              // .Style, .Color, and .Size are not specified, then whatever is defined by the ArcGIS Server web service 
              // will be returned for the symbology of the FeatureLayers temporal observations. 
              ESRI.ArcGIS.Client.SimpleRenderer mySimpleRenderer_ObservationRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              System.Windows.Media.SolidColorBrush mySolidColorBrush = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); //Black
              mySimpleMarkerSymbol.Color = mySolidColorBrush;
              mySimpleMarkerSymbol.Size = 4;
              mySimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle;
              mySimpleRenderer_ObservationRenderer.Symbol = mySimpleMarkerSymbol;
              myTemporalRenderer.ObservationRenderer = mySimpleRenderer_ObservationRenderer;
              
              // TrackRenderer Property:
              // Setting the TrackIDField draws polylines in time order for a group of attributes. If the 
              // TrackIDField property is not set and the TrackRenderer is used, then all point observations 
              // will have a polyline connecting them in order of time. This becomes messy if multiple
              // events are occurring at the same time (i.e. hurricanes) and the linework would then look like 
              // a spider diagram rather than discreet tracks with one per event. In this example to speed up
              // drawing time and limit the amount of data that is returned, the FeatureLayer.Where clause was 
              // used to restrict only two hurricanes (or event) from displaying. If the FeatureLayer.Where 
              // clause was commented out, more hurricanes would be displayed -- having the TrackIdField 
              // becomes key to keeping each event separate.
              myTemporalRenderer.TrackIdField = "EVENTID";
              
              // Define a SimpleRenderer with a SimpleLineSymbol to display each tracked event. The event 
              // will be a yellow line connecting the time-based observations.
              ESRI.ArcGIS.Client.SimpleRenderer mySimpleRenderer_TrackRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
              ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol mySimpleLineSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol();
              System.Windows.Media.SolidColorBrush mySolidColorBrush_TrackRenderer = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)); //Yellow
              mySimpleLineSymbol.Color = mySolidColorBrush_TrackRenderer;
              mySimpleLineSymbol.Width = 1;
              mySimpleRenderer_TrackRenderer.Symbol = mySimpleLineSymbol;
              myTemporalRenderer.TrackRenderer = mySimpleRenderer_TrackRenderer;
              
              
              // Define a TimeClassBreaksAger to override the default symbology of the ObservationRenderer as the 
              // Map.TimeExtent Property of the FeatureLayer changes. Use TimeClassBreakInfo objects to define 
              // groups of temporal windows that will span across the Map.TimeExtent via MinimumAge and MaximumAge 
              // ranges. The symbol defined by the ObservationRenderer is overridden by each TimeClassBreakInfo 
              // object via:
              // The ObservationRenderer's Symbol Color &lt;== TimeClassBreakInfo.Color
              // The ObservationRenderer's Symbol Size &lt;== TimeClassBreakInfo.Size
              // The ObservationRenderer's Symbol visibility &lt;== TimeClassBreakInfo.Opacity
              //
              // If the TimeClassBreakInfo Classes do not completely cover the entire Map.TimeExtent then whatever
              // has been established as the ObservationRenderer will draw for those features.
              //
              // The TimeClassBreaksAger is similar to the ClassBreaksRenderer in that groups are defined to render
              // symbology but uses time intervals to override what was established by the ObservationRenderer.
              //
              // Some may find that setting the TimeClassBreakInfo .MinimumAge and .MaximumAge a little counter-intuitive.
              // The MinimumAge values are the newer temporal observations. The MaximumAge values are the older temporal
              // observations. In this example there are 3 defined groups to age the data. The 3 groups do not cover the 
              // entire temporal span of the data defined by the Map.TimeExtent. The oldest data observations are not 
              // covered by the 3 groups and hence are renderer by what was originally defined in the ObseravtionRenderer.
              // 
              // Make sure that the TimeClassBreaksAger.Units Property corresponds with the appropriate values that are set
              // for the TimeClassBreakInfo .MinimumAge and .MaximumAge values.
              //
              // Uncomment the various TimeClassBreakInfo.Opacity settings to see the different effects.
              
              // Define the TimeClassBreaksAger and set the Units to Days.
              ESRI.ArcGIS.Client.TimeClassBreaksAger myTimeClassBreaksAger = new ESRI.ArcGIS.Client.TimeClassBreaksAger();
              myTimeClassBreaksAger.Unit = ESRI.ArcGIS.Client.TimeUnit.Days;
              
              // 1st grouping. This displays the most recent temporal observations.
              ESRI.ArcGIS.Client.TimeClassBreakInfo myTimeClassBreakInfo1 = new ESRI.ArcGIS.Client.TimeClassBreakInfo();
              myTimeClassBreakInfo1.Color = Color.FromArgb(255, 255, 255, 255); //White
              myTimeClassBreakInfo1.MinimumAge = 0.0; //Equivalent to the date #8/24/2000 12:00:01 AM#
              myTimeClassBreakInfo1.MaximumAge = 2.0; //Equivalent to the date #8/22/2000 12:00:01 AM#
              //myTimeClassBreakInfo1.Opacity = 1 '1 = completely visible, 0 = invisible
              myTimeClassBreakInfo1.Size = 10;
              myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo1);
              
              // 2nd grouping. This displays slightly older temporal observations.
              ESRI.ArcGIS.Client.TimeClassBreakInfo myTimeClassBreakInfo2 = new ESRI.ArcGIS.Client.TimeClassBreakInfo();
              myTimeClassBreakInfo2.Color = Color.FromArgb(255, 0, 0, 255); //Blue
              myTimeClassBreakInfo2.MinimumAge = 2.0; //Equivalent to the date #8/22/2000 12:00:01 AM#
              myTimeClassBreakInfo2.MaximumAge = 5.0; //Equivalent to the date #8/19/2000 12:00:01 AM#
              //myTimeClassBreakInfo2.Opacity = 0.5 '1 = completely visible, 0 = invisible
              myTimeClassBreakInfo2.Size = 7;
              myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo2);
              
              // 3rd grouping. This displays the even older temporal observations.
              ESRI.ArcGIS.Client.TimeClassBreakInfo myTimeClassBreakInfo3 = new ESRI.ArcGIS.Client.TimeClassBreakInfo();
              myTimeClassBreakInfo3.Color = Color.FromArgb(255, 255, 0, 0); //Red
              myTimeClassBreakInfo3.MinimumAge = 5.0; //Equivalent to the date #8/19/2000 12:00:01 AM#
              myTimeClassBreakInfo3.MaximumAge = 12.0; //Equivalent to the date #8/12/2000 12:00:01 AM#
              //myTimeClassBreakInfo3.Opacity = 0.1 '1 = completely visible, 0 = invisible
              myTimeClassBreakInfo3.Size = 5;
              myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo3);
              
              // NOTE: For the temporal observations older than 12 days (#8/12/2000 12:00:01 AM#) the 
              // ObservationRenderer is in full effect since no additional TimeClassBreakInfo is defined
              // to cover the oldest hurricane occurrences.
              
              // Set the TimeClassBreaksAger as the TemporalRenderer.SymbolAger
              myTemporalRenderer.SymbolAger = myTimeClassBreaksAger;
              
              // Apply the TemporalRenderer as the Renderer of the FeatureLayer.
              myFeatureLayer.Renderer = myTemporalRenderer;
              
              // Add the myFeatureLayer to the myMap Layer Collection. 
              myMap.Layers.Add(myFeatureLayer);
              
              // Zoom to the middle of the Atlantic ocean.
              ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope2 = new ESRI.ArcGIS.Client.Geometry.Envelope();
              myEnvelope2.XMin = -77.69;
              myEnvelope2.YMin = -13.88;
              myEnvelope2.XMax = -11.77;
              myEnvelope2.YMax = 52.03;
              myMap.Extent = myEnvelope2;
              
            }
            </code>
                
            <code title="Example VB1" description="" lang="VB.NET">
            Public Sub DrawTimeClassBreaksAger(ByVal myMap As ESRI.ArcGIS.Client.Map)
              
              ' Display the FeatureLayer in myMap that has a TemporalRenderer applied
              ' ======================================================================
              
              ' Clear out any exiting layers
              myMap.Layers.Clear()
              
              ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
              ' Layers Collection is on the bottom and the other Layer is added on the top.
              Dim myArcGISTiledMapServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              myMap.Layers.Add(myArcGISTiledMapServiceLayer2)
              
              ' Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
              Dim myFeatureLayer As New ESRI.ArcGIS.Client.FeatureLayer
              
              ' This FeatureLayer contains hurricane data from NOAA. 
              myFeatureLayer.Url = "http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0"
              
              ' The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
              ' 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
              ' default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
              ' (on the Parameters tab). 
              ' Only two hurricanes (Alberto and Debby) are returned for this Where clause.
              myFeatureLayer.Where = "EVENTID = 'Alberto' OR EVENTID = 'Debby'"
              
              ' Specify the Outfields Property to specify which Fields are returned on which the 
              ' TemporalRenderer.TrackIDField can use. Specifying the wildcard (*) character in the Add Property 
              ' will return all Fields. 
              myFeatureLayer.OutFields.Add("*")
              
              ' Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
              ' within the set TimeExtent will then be shown. If no Map.TimeExtent is set then only the 
              ' ObservationRenderer is in effect. If a Map.TimeExtent is set then the ObservationRenderer and the 
              ' TrackRenderer are in effect. In the case of this example the TimeExtent for the hurricane 
              ' information is shortened to a small temporal window that just covers the time extent necessary to 
              ' render the four hurricanes (Alberto and Debby) that are returned by the service.
              Dim myTimeExtent As New ESRI.ArcGIS.Client.TimeExtent
              Dim dateStart As Date = #8/3/2000 12:00:01 AM# 'Custom Start date/time
              myTimeExtent.Start = dateStart
              Dim dateEnd As Date = #8/24/2000 12:00:01 AM# 'Custom End date/time
              myTimeExtent.End = dateEnd
              
              ' Manually setting the TimeExtent of the myMap. Could have used a TimeSlider for more interactiveness.
              myMap.TimeExtent = myTimeExtent
              
              ' Create the TemporalRenderer object. It will use two different Properties (ObservationRenderer, 
              ' and TrackRenderer) to create the image.
              Dim myTemporalRenderer As New ESRI.ArcGIS.Client.TemporalRenderer
              
              
              ' Define the default symbology for the FeatureLayer.TemporalRenderer.ObservationRenderer. Use a 
              ' SimpleRenderer so that each temporal observation has some type of symbology. If the default symbol's 
              ' .Style, .Color, and .Size are not specified, then whatever is defined by the ArcGIS Server web service 
              ' will be returned for the symbology of the FeatureLayers temporal observations. 
              Dim mySimpleRenderer_ObservationRenderer As New ESRI.ArcGIS.Client.SimpleRenderer
              Dim mySimpleMarkerSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              Dim mySolidColorBrush As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) 'Black
              mySimpleMarkerSymbol.Color = mySolidColorBrush
              mySimpleMarkerSymbol.Size = 4
              mySimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle
              mySimpleRenderer_ObservationRenderer.Symbol = mySimpleMarkerSymbol
              myTemporalRenderer.ObservationRenderer = mySimpleRenderer_ObservationRenderer
              
              ' TrackRenderer Property:
              ' Setting the TrackIDField draws polylines in time order for a group of attributes. If the 
              ' TrackIDField property is not set and the TrackRenderer is used, then all point observations 
              ' will have a polyline connecting them in order of time. This becomes messy if multiple
              ' events are occurring at the same time (i.e. hurricanes) and the linework would then look like 
              ' a spider diagram rather than discreet tracks with one per event. In this example to speed up
              ' drawing time and limit the amount of data that is returned, the FeatureLayer.Where clause was 
              ' used to restrict only two hurricanes (or event) from displaying. If the FeatureLayer.Where 
              ' clause was commented out, more hurricanes would be displayed -- having the TrackIdField 
              ' becomes key to keeping each event separate.
              myTemporalRenderer.TrackIdField = "EVENTID"
              
              ' Define a SimpleRenderer with a SimpleLineSymbol to display each tracked event. The event 
              ' will be a yellow line connecting the time-based observations.
              Dim mySimpleRenderer_TrackRenderer As New ESRI.ArcGIS.Client.SimpleRenderer
              Dim mySimpleLineSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol
              Dim mySolidColorBrush_TrackRenderer As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)) 'Yellow
              mySimpleLineSymbol.Color = mySolidColorBrush_TrackRenderer
              mySimpleLineSymbol.Width = 1
              mySimpleRenderer_TrackRenderer.Symbol = mySimpleLineSymbol
              myTemporalRenderer.TrackRenderer = mySimpleRenderer_TrackRenderer
              
              
              ' Define a TimeClassBreaksAger to override the default symbology of the ObservationRenderer as the 
              ' Map.TimeExtent Property of the FeatureLayer changes. Use TimeClassBreakInfo objects to define 
              ' groups of temporal windows that will span across the Map.TimeExtent via MinimumAge and MaximumAge 
              ' ranges. The symbol defined by the ObservationRenderer is overridden by each TimeClassBreakInfo 
              ' object via:
              ' The ObservationRenderer's Symbol Color &lt;== TimeClassBreakInfo.Color
              ' The ObservationRenderer's Symbol Size &lt;== TimeClassBreakInfo.Size
              ' The ObservationRenderer's Symbol visibility &lt;== TimeClassBreakInfo.Opacity
              '
              ' If the TimeClassBreakInfo Classes do not completely cover the entire Map.TimeExtent then whatever
              ' has been established as the ObservationRenderer will draw for those features.
              '
              ' The TimeClassBreaksAger is similar to the ClassBreaksRenderer in that groups are defined to render
              ' symbology but uses time intervals to override what was established by the ObservationRenderer.
              '
              ' Some may find that setting the TimeClassBreakInfo .MinimumAge and .MaximumAge a little counter-intuitive.
              ' The MinimumAge values are the newer temporal observations. The MaximumAge values are the older temporal
              ' observations. In this example there are 3 defined groups to age the data. The 3 groups do not cover the 
              ' entire temporal span of the data defined by the Map.TimeExtent. The oldest data observations are not 
              ' covered by the 3 groups and hence are renderer by what was originally defined in the ObseravtionRenderer.
              ' 
              ' Make sure that the TimeClassBreaksAger.Units Property corresponds with the appropriate values that are set
              ' for the TimeClassBreakInfo .MinimumAge and .MaximumAge values.
              '
              ' Uncomment the various TimeClassBreakInfo.Opacity settings to see the different effects.
              
              ' Define the TimeClassBreaksAger and set the Units to Days.
              Dim myTimeClassBreaksAger As New ESRI.ArcGIS.Client.TimeClassBreaksAger
              myTimeClassBreaksAger.Unit = ESRI.ArcGIS.Client.TimeUnit.Days
              
              ' 1st grouping. This displays the most recent temporal observations.
              Dim myTimeClassBreakInfo1 As New ESRI.ArcGIS.Client.TimeClassBreakInfo
              myTimeClassBreakInfo1.Color = Color.FromArgb(255, 255, 255, 255) 'White
              myTimeClassBreakInfo1.MinimumAge = 0.0 'Equivalent to the date #8/24/2000 12:00:01 AM#
              myTimeClassBreakInfo1.MaximumAge = 2.0 'Equivalent to the date #8/22/2000 12:00:01 AM#
              'myTimeClassBreakInfo1.Opacity = 1 '1 = completely visible, 0 = invisible
              myTimeClassBreakInfo1.Size = 10
              myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo1)
              
              ' 2nd grouping. This displays slightly older temporal observations.
              Dim myTimeClassBreakInfo2 As New ESRI.ArcGIS.Client.TimeClassBreakInfo
              myTimeClassBreakInfo2.Color = Color.FromArgb(255, 0, 0, 255) 'Blue
              myTimeClassBreakInfo2.MinimumAge = 2.0 'Equivalent to the date #8/22/2000 12:00:01 AM#
              myTimeClassBreakInfo2.MaximumAge = 5.0 'Equivalent to the date #8/19/2000 12:00:01 AM#
              'myTimeClassBreakInfo2.Opacity = 0.5 '1 = completely visible, 0 = invisible
              myTimeClassBreakInfo2.Size = 7
              myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo2)
              
              ' 3rd grouping. This displays the even older temporal observations.
              Dim myTimeClassBreakInfo3 As New ESRI.ArcGIS.Client.TimeClassBreakInfo
              myTimeClassBreakInfo3.Color = Color.FromArgb(255, 255, 0, 0) 'Red
              myTimeClassBreakInfo3.MinimumAge = 5.0 'Equivalent to the date #8/19/2000 12:00:01 AM#
              myTimeClassBreakInfo3.MaximumAge = 12.0 'Equivalent to the date #8/12/2000 12:00:01 AM#
              'myTimeClassBreakInfo3.Opacity = 0.1 '1 = completely visible, 0 = invisible
              myTimeClassBreakInfo3.Size = 5
              myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo3)
              
              ' NOTE: For the temporal observations older than 12 days (#8/12/2000 12:00:01 AM#) the 
              ' ObservationRenderer is in full effect since no additional TimeClassBreakInfo is defined
              ' to cover the oldest hurricane occurrences.
              
              ' Set the TimeClassBreaksAger as the TemporalRenderer.SymbolAger
              myTemporalRenderer.SymbolAger = myTimeClassBreaksAger
              
              ' Apply the TemporalRenderer as the Renderer of the FeatureLayer.
              myFeatureLayer.Renderer = myTemporalRenderer
              
              ' Add the myFeatureLayer to the myMap Layer Collection. 
              myMap.Layers.Add(myFeatureLayer)
              
              ' Zoom to the middle of the Atlantic ocean.
              Dim myEnvelope2 As New ESRI.ArcGIS.Client.Geometry.Envelope
              myEnvelope2.XMin = -77.69
              myEnvelope2.YMin = -13.88
              myEnvelope2.XMax = -11.77
              myEnvelope2.YMax = 52.03
              myMap.Extent = myEnvelope2
              
            End Sub
            </code>
            </example>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.ISymbolInterpolator">
            <summary>
            An interface for generating <see cref="T:ESRI.ArcGIS.Client.Symbols.Symbol"/>s used to represent the interpolation 
            (i.e. a gradual change) of features across a Map.TimeExtent for a FeatureLayer.
            </summary>
            <seealso cref="T:ESRI.ArcGIS.Client.RampInterpolator"/>
            <seealso cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger"/>
            <remarks>
            <para>
            There are two Classes that implement the ISymbolInterpolator Interface that are used to graduate the symbology 
            across a time span, they are: the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and the 
            <see cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger">TimeClassBreaksAger</see>. See these two classes for code 
            examples and further description.
            </para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.ISymbolInterpolator.GetInterpolatedSymbol(ESRI.ArcGIS.Client.Symbols.Symbol,ESRI.ArcGIS.Client.Graphic,System.Double,System.Double,System.Double)">
            <summary>
            Gets the interpolated symbol.
            </summary>
            <param name="symbol">The symbol to interpolate.</param>
            <param name="graphic">The graphic/feature being rendered.</param>
            <param name="startValue">The start value.</param>
            <param name="endValue">The end value.</param>
            <param name="objectValue">The object value.</param> 
            <returns>Interpolated symbol</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TimeClassBreaksAger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TimeClassBreaksAger.GetInterpolatedSymbol(ESRI.ArcGIS.Client.Symbols.Symbol,ESRI.ArcGIS.Client.Graphic,System.Double,System.Double,System.Double)">
            <summary>
            Gets the interpolated symbol.
            </summary>
            <param name="symbol">The symbol to interpolate.</param>
            <param name="graphic">The graphic/feature being rendered.</param>
            <param name="startValue">The start value in Ticks.</param>
            <param name="endValue">The end value in Ticks.</param>
            <param name="objectValue">The object value in Ticks.</param>
            <returns>Interpolated symbol</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TimeClassBreaksAger.TimeClasses">
            <summary>
            Gets the collection of <see cref="T:ESRI.ArcGIS.Client.TimeClassBreakInfo"/> objects which define each temporal grouping of 
            features that will have their symbology overridden.
            </summary>
            <remarks>
            <para>
            If it is desired to categorically age the rendering of temporal data by using the 
            <see cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger">TimeClassBreaksAger</see> Class as the 
            <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.SymbolAger">TemporalRenderer.SymbolAger</see> Property, 
            there should be 2 or more <see cref="T:ESRI.ArcGIS.Client.TimeClassBreakInfo">TimeClassBreakInfo</see> 
            Classes (meaning temporal classification or grouping) to delineate the aging symbology. If aging 
            temporal data is not needed use the 
            <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.ObservationRenderer">TemporalRenderer.ObservationRenderer</see> 
            and do not set the TemporalRenderer.SymbolAger. 
            </para>
            <para>
            When a TimeClassBreaksAger object is created the ObservableCollection (Of TimeClassBreakInfo) object 
            is also created that is accessible from the TimeClasses Property. Although the TimeClasses Property is 
            ReadOnly, meaning you can only get the ObservableCollection (Of TimeClassBreakInfo) object, you can 
            use its Members to like: Add, Clear, Remove, etc. to define how the TimeClassBreaksAger behaves.
            </para>
            <para>
            To see a full example of how to set and use the TimeClasses Property review the 
            <see cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger">TimeClassBreaksAger</see> Class documentation.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TimeClassBreaksAger.Unit">
            <summary>
            Gets or sets the type of <see cref="T:ESRI.ArcGIS.Client.TimeUnit">TimeUnit</see> for which the 
            <see cref="P:ESRI.ArcGIS.Client.TimeClassBreakInfo.MinimumAge">TimeClassBreakInfo.MinimumAge</see> and 
            <see cref="P:ESRI.ArcGIS.Client.TimeClassBreakInfo.MaximumAge">TimeClassBreakInfo.MaximumAge</see> Properties 
            use to define temporal groupings for aging the symbology of features.
            </summary>
            <remarks>
            <para>
            If the Unit Property is not set explicitly in either the code-behind or XAML, then whatever is provided 
            by the ArcGIS Server web service for the temporal dataset will be in used. If creating a custom 
            TimeClassBreaksAger, it is a good programming practice to set the appropriate Unit Property. 
            </para>
            <para>
            The TimeUnit is an Enumeration and has the following possibilities:
            </para>
            <list type="bullet">
            <item>Days</item>
            <item>Hours</item>
            <item>Milliseconds</item>
            <item>Minutes</item>
            <item>Months</item>
            <item>Seconds</item>
            <item>Weeks</item>
            <item>Years</item>
            </list>
            <para>
            To see a full example of how to set and use the Unit Property review the 
            <see cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger">TimeClassBreaksAger</see> Class documentation.
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;!--
            The following two XAML code blocks provide equivalent functionality in applying
            a TimeClassBreaksAger as a TemporalRenderer.SymbolAger. The difference between 
            the two XAML code blocks is in specifying the TimeClassBreaksAger.Unit Property 
            and how that affects creating TimeClassBreakInfo groupings that use of the 
            MimimumAge and MaximumAge values.
            The Map.TimeExtent.Start = 2000/08/03 00:00:01 UTC and the 
            Map.TimeExtent.End = 2000/08/24 00:00:01 UTC
            --&gt;
            
            &lt;!-- Hours version --&gt;
            &lt;esri:TemporalRenderer.SymbolAger&gt;
              &lt;esri:TimeClassBreaksAger Unit="Hours"&gt;
                 
                &lt;!--
                The MinimumAge = 0.0 is equivalent to the date 2000/08/24 00:00:01 UTC
                The MaximumAge = 48.0 is equivalent to the date 2000/08/22 00:00:01 UTC
                --&gt;
                &lt;esri:TimeClassBreakInfo Color="White" Size="10" MinimumAge="0.0" MaximumAge="48.0"/&gt;
                      
                &lt;!--
                The MinimumAge = 48.0 is equivalent to the date 2000/08/22 00:00:01 UTC
                The MaximumAge = 120.0 is equivalent to the date 2000/08/19 00:00:01 UTC
                --&gt;
                &lt;esri:TimeClassBreakInfo Color="Blue" Size="7" MinimumAge="48.0" MaximumAge="120.0"/&gt;
                
                &lt;!--
                The MinimumAge = 120.0 is equivalent to the date 2000/08/19 00:00:01 UTC
                The MaximumAge = 288.0 is equivalent to the date 2000/08/12 00:00:01 UTC
                --&gt;
                &lt;esri:TimeClassBreakInfo Color="Red" Size="5" MinimumAge="120.0" MaximumAge="288.0"/&gt;
                
              &lt;/esri:TimeClassBreaksAger&gt;
            &lt;/esri:TemporalRenderer.SymbolAger&gt;
            
            &lt;!-- Days version --&gt;
            &lt;esri:TemporalRenderer.SymbolAger&gt;
              &lt;esri:TimeClassBreaksAger Unit="Days"&gt;
                 
                &lt;!--
                The MinimumAge = 0.0 is equivalent to the date 2000/08/24 00:00:01 UTC
                The MaximumAge = 2.0 is equivalent to the date 2000/08/22 00:00:01 UTC
                --&gt;
                &lt;esri:TimeClassBreakInfo Color="White" Size="10" MinimumAge="0.0" MaximumAge="2.0"/&gt;
                
                &lt;!--
                The MinimumAge = 2.0 is equivalent to the date 2000/08/22 00:00:01 UTC
                The MaximumAge = 5.0 is equivalent to the date 2000/08/19 00:00:01 UTC
                --&gt;
                &lt;esri:TimeClassBreakInfo Color="Blue" Size="7" MinimumAge="2.0" MaximumAge="5.0"/&gt;
                  
                &lt;!--
                The MinimumAge = 5.0 is equivalent to the date 2000/08/19 00:00:01 UTC
                The MaximumAge = 12.0 is equivalent to the date 2000/08/12 00:00:01 UTC
                --&gt;
                &lt;esri:TimeClassBreakInfo Color="Red" Size="5" MinimumAge="5.0" MaximumAge="12.0"/&gt;
                    
              &lt;/esri:TimeClassBreaksAger&gt;
            &lt;/esri:TemporalRenderer.SymbolAger&gt;
            </code>
            
            <code title="Example CS1" description="" lang="CS">
            // The following two functions (HoursVersion and DaysVersion) provide equivalent functionality in applying
            // a TimeClassBreaksAger as a TemporalRenderer.SymbolAger. The difference between the two functions is in
            // specifying the TimeClassBreaksAger.Unit Property and how that affects creating TimeClassBreakInfo 
            // groupings that use of the MimimumAge and MaximumAge values.
            // The Map.TimeExtent.Start = #8/3/2000 12:00:01 AM# and the Map.TimeExtent.End = #8/24/2000 12:00:01 AM#
            
            
            public void HoursVersion(ESRI.ArcGIS.Client.TemporalRenderer myTemporalRenderer)
            {
            
              // Define the TimeClassBreaksAger and set the Units to Hours.
            ESRI.ArcGIS.Client.TimeClassBreaksAger myTimeClassBreaksAger = new ESRI.ArcGIS.Client.TimeClassBreaksAger();
            myTimeClassBreaksAger.Unit = ESRI.ArcGIS.Client.TimeUnit.Hours;
            
            // 1st grouping. This displays the most recent temporal observations.
            ESRI.ArcGIS.Client.TimeClassBreakInfo myTimeClassBreakInfo1 = new ESRI.ArcGIS.Client.TimeClassBreakInfo();
            myTimeClassBreakInfo1.Color = Color.FromArgb(255, 255, 255, 255); //White
            myTimeClassBreakInfo1.MinimumAge = 0.0; //Equivalent to the date #8/24/2000 12:00:01 AM#
            myTimeClassBreakInfo1.MaximumAge = 48.0; //Equivalent to the date #8/22/2000 12:00:01 AM#
            myTimeClassBreakInfo1.Size = 10;
            myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo1);
            
            // 2nd grouping. This displays slightly older temporal observations.
            ESRI.ArcGIS.Client.TimeClassBreakInfo myTimeClassBreakInfo2 = new ESRI.ArcGIS.Client.TimeClassBreakInfo();
            myTimeClassBreakInfo2.Color = Color.FromArgb(255, 0, 0, 255); //Blue
            myTimeClassBreakInfo2.MinimumAge = 48.0; //Equivalent to the date #8/22/2000 12:00:01 AM#
            myTimeClassBreakInfo2.MaximumAge = 120.0; //Equivalent to the date #8/19/2000 12:00:01 AM#
            myTimeClassBreakInfo2.Size = 7;
            myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo2);
            
            // 3rd grouping. This displays the even older temporal observations.
            ESRI.ArcGIS.Client.TimeClassBreakInfo myTimeClassBreakInfo3 = new ESRI.ArcGIS.Client.TimeClassBreakInfo();
            myTimeClassBreakInfo3.Color = Color.FromArgb(255, 255, 0, 0); //Red
            myTimeClassBreakInfo3.MinimumAge = 120.0; //Equivalent to the date #8/19/2000 12:00:01 AM#
            myTimeClassBreakInfo3.MaximumAge = 288.0; //Equivalent to the date #8/12/2000 12:00:01 AM#
            myTimeClassBreakInfo3.Size = 5;
            myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo3);
            
            // Set the TimeClassBreaksAger as the TemporalRenderer.SymbolAger
            myTemporalRenderer.SymbolAger = myTimeClassBreaksAger;
            
            }
            
            public void DaysVerson(ESRI.ArcGIS.Client.TemporalRenderer myTemporalRenderer)
            {
            
            // Define the TimeClassBreaksAger and set the Units to Days.
            ESRI.ArcGIS.Client.TimeClassBreaksAger myTimeClassBreaksAger = new ESRI.ArcGIS.Client.TimeClassBreaksAger();
            myTimeClassBreaksAger.Unit = ESRI.ArcGIS.Client.TimeUnit.Days;
            
            // 1st grouping. This displays the most recent temporal observations.
            ESRI.ArcGIS.Client.TimeClassBreakInfo myTimeClassBreakInfo1 = new ESRI.ArcGIS.Client.TimeClassBreakInfo();
            myTimeClassBreakInfo1.Color = Color.FromArgb(255, 255, 255, 255); //White
            myTimeClassBreakInfo1.MinimumAge = 0.0; //Equivalent to the date #8/24/2000 12:00:01 AM#
            myTimeClassBreakInfo1.MaximumAge = 2.0; //Equivalent to the date #8/22/2000 12:00:01 AM#
            myTimeClassBreakInfo1.Size = 10;
            myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo1);
            
            // 2nd grouping. This displays slightly older temporal observations.
            ESRI.ArcGIS.Client.TimeClassBreakInfo myTimeClassBreakInfo2 = new ESRI.ArcGIS.Client.TimeClassBreakInfo();
            myTimeClassBreakInfo2.Color = Color.FromArgb(255, 0, 0, 255); //Blue
            myTimeClassBreakInfo2.MinimumAge = 2.0; //Equivalent to the date #8/22/2000 12:00:01 AM#
            myTimeClassBreakInfo2.MaximumAge = 5.0; //Equivalent to the date #8/19/2000 12:00:01 AM#
            myTimeClassBreakInfo2.Size = 7;
            myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo2);
            
            // 3rd grouping. This displays the even older temporal observations.
            ESRI.ArcGIS.Client.TimeClassBreakInfo myTimeClassBreakInfo3 = new ESRI.ArcGIS.Client.TimeClassBreakInfo();
            myTimeClassBreakInfo3.Color = Color.FromArgb(255, 255, 0, 0); //Red
            myTimeClassBreakInfo3.MinimumAge = 5.0; //Equivalent to the date #8/19/2000 12:00:01 AM#
            myTimeClassBreakInfo3.MaximumAge = 12.0; //Equivalent to the date #8/12/2000 12:00:01 AM#
            myTimeClassBreakInfo3.Size = 5;
            myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo3);
            
            // Set the TimeClassBreaksAger as the TemporalRenderer.SymbolAger
            myTemporalRenderer.SymbolAger = myTimeClassBreaksAger;
            
            }
            </code>
                
            <code title="Example VB1" description="" lang="VB.NET">
            ' The following two functions (HoursVersion and DaysVersion) provide equivalent functionality in applying
            ' a TimeClassBreaksAger as a TemporalRenderer.SymbolAger. The difference between the two functions is in
            ' specifying the TimeClassBreaksAger.Unit Property and how that affects creating TimeClassBreakInfo 
            ' groupings that use of the MimimumAge and MaximumAge values. 
            ' The Map.TimeExtent.Start = #8/3/2000 12:00:01 AM# and the Map.TimeExtent.End = #8/24/2000 12:00:01 AM#
            
            
            Public Sub HoursVersion(ByVal myTemporalRenderer As ESRI.ArcGIS.Client.TemporalRenderer)
            
              ' Define the TimeClassBreaksAger and set the Units to Hours.
              Dim myTimeClassBreaksAger As New ESRI.ArcGIS.Client.TimeClassBreaksAger
              myTimeClassBreaksAger.Unit = ESRI.ArcGIS.Client.TimeUnit.Hours
              
              ' 1st grouping. This displays the most recent temporal observations.
              Dim myTimeClassBreakInfo1 As New ESRI.ArcGIS.Client.TimeClassBreakInfo
              myTimeClassBreakInfo1.Color = Color.FromArgb(255, 255, 255, 255) 'White
              myTimeClassBreakInfo1.MinimumAge = 0.0 'Equivalent to the date #8/24/2000 12:00:01 AM#
              myTimeClassBreakInfo1.MaximumAge = 48.0 'Equivalent to the date #8/22/2000 12:00:01 AM#
              myTimeClassBreakInfo1.Size = 10
              myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo1)
              
              ' 2nd grouping. This displays slightly older temporal observations.
              Dim myTimeClassBreakInfo2 As New ESRI.ArcGIS.Client.TimeClassBreakInfo
              myTimeClassBreakInfo2.Color = Color.FromArgb(255, 0, 0, 255) 'Blue
              myTimeClassBreakInfo2.MinimumAge = 48.0 'Equivalent to the date #8/22/2000 12:00:01 AM#
              myTimeClassBreakInfo2.MaximumAge = 120.0 'Equivalent to the date #8/19/2000 12:00:01 AM#
              myTimeClassBreakInfo2.Size = 7
              myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo2)
              
              ' 3rd grouping. This displays the even older temporal observations.
              Dim myTimeClassBreakInfo3 As New ESRI.ArcGIS.Client.TimeClassBreakInfo
              myTimeClassBreakInfo3.Color = Color.FromArgb(255, 255, 0, 0) 'Red
              myTimeClassBreakInfo3.MinimumAge = 120.0 'Equivalent to the date #8/19/2000 12:00:01 AM#
              myTimeClassBreakInfo3.MaximumAge = 288.0 'Equivalent to the date #8/12/2000 12:00:01 AM#
              myTimeClassBreakInfo3.Size = 5
              myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo3)
              
              ' Set the TimeClassBreaksAger as the TemporalRenderer.SymbolAger
              myTemporalRenderer.SymbolAger = myTimeClassBreaksAger
              
            End Sub
              
            Public Sub DaysVerson(ByVal myTemporalRenderer As ESRI.ArcGIS.Client.TemporalRenderer)
              
              ' Define the TimeClassBreaksAger and set the Units to Days.
              Dim myTimeClassBreaksAger As New ESRI.ArcGIS.Client.TimeClassBreaksAger
              myTimeClassBreaksAger.Unit = ESRI.ArcGIS.Client.TimeUnit.Days
              
              ' 1st grouping. This displays the most recent temporal observations.
              Dim myTimeClassBreakInfo1 As New ESRI.ArcGIS.Client.TimeClassBreakInfo
              myTimeClassBreakInfo1.Color = Color.FromArgb(255, 255, 255, 255) 'White
              myTimeClassBreakInfo1.MinimumAge = 0.0 'Equivalent to the date #8/24/2000 12:00:01 AM#
              myTimeClassBreakInfo1.MaximumAge = 2.0 'Equivalent to the date #8/22/2000 12:00:01 AM#
              myTimeClassBreakInfo1.Size = 10
              myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo1)
              
              ' 2nd grouping. This displays slightly older temporal observations.
              Dim myTimeClassBreakInfo2 As New ESRI.ArcGIS.Client.TimeClassBreakInfo
              myTimeClassBreakInfo2.Color = Color.FromArgb(255, 0, 0, 255) 'Blue
              myTimeClassBreakInfo2.MinimumAge = 2.0 'Equivalent to the date #8/22/2000 12:00:01 AM#
              myTimeClassBreakInfo2.MaximumAge = 5.0 'Equivalent to the date #8/19/2000 12:00:01 AM#
              myTimeClassBreakInfo2.Size = 7
              myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo2)
              
              ' 3rd grouping. This displays the even older temporal observations.
              Dim myTimeClassBreakInfo3 As New ESRI.ArcGIS.Client.TimeClassBreakInfo
              myTimeClassBreakInfo3.Color = Color.FromArgb(255, 255, 0, 0) 'Red
              myTimeClassBreakInfo3.MinimumAge = 5.0 'Equivalent to the date #8/19/2000 12:00:01 AM#
              myTimeClassBreakInfo3.MaximumAge = 12.0 'Equivalent to the date #8/12/2000 12:00:01 AM#
              myTimeClassBreakInfo3.Size = 5
              myTimeClassBreaksAger.TimeClasses.Add(myTimeClassBreakInfo3)
              
              ' Set the TimeClassBreaksAger as the TemporalRenderer.SymbolAger
              myTemporalRenderer.SymbolAger = myTimeClassBreaksAger
              
            End Sub
            </code>
            </example>
        </member>
        <member name="T:ESRI.ArcGIS.Client.TimeClassBreakInfo">
            <summary>
            TimeClassBreakInfo for the <see cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TimeClassBreakInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.TimeClassBreakInfo"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TimeClassBreakInfo.MinimumAge">
            <summary>
            Gets or sets the minimum age in the units of the <see cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger"/>.
            </summary>
            <value>The minimum age.</value>
            <seealso cref="P:ESRI.ArcGIS.Client.TimeClassBreaksAger.Unit"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TimeClassBreakInfo.MaximumAge">
            <summary>
            Gets or sets the maximum age in the units of the <see cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger"/>.
            </summary>
            <value>The maximum age.</value>
            <seealso cref="P:ESRI.ArcGIS.Client.TimeClassBreaksAger.Unit"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TimeClassBreakInfo.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TimeClassBreakInfo.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TimeClassBreakInfo.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
            <value>The opacity.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Editing.Reshape">
            <summary>
            Enables reshaping graphics using a polyline.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Editing.GeometryServiceTool">
            <summary>
            Base class for geometry service tools.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Editing.EditTool">
            <summary>
            Base class for edit tools.  Only one edit tool is active on a map at any time.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.EditTool.OnIsEnabledChanged">
            <summary>
            When Is Enabled is changed, makes sure that any other verb acting on the map is disabled.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditTool.Map">
            <summary>
            The Map control
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditTool.Continuous">
            <summary>
            Whether the tool is in continuous mode.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditTool.IsEnabled">
            <summary>
            Whether the tool is enabled.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.GeometryServiceTool.SetDrawMode">
            <summary>
            Sets draw mode depending on its freehand value
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.GeometryServiceTool.Restart">
            <summary>
            Enables draw with new properties
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.GeometryServiceTool.Layers">
            <summary>
            Gets or sets the layers.
            </summary>
            <value>The layers.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.GeometryServiceTool.GeometryServiceUrl">
            <summary>
            Gets or sets the url to the geometry service.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.GeometryServiceTool.ProxyUrl">
            <summary>
            Gets or sets the proxy URL.
            </summary>
            <value>The proxy URL.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.GeometryServiceTool.Freehand">
            <summary>
            Whether the polyline is drawn freehand.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.GeometryServiceTool.AutoSelect">
            <summary>
            Whether selection is done automatically before geometry service action.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Reshape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Reshape.OnIsEnabledChanged">
            <summary>
            Overrides to enable verb
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Reshape.SetDrawMode">
            <summary>
            Overrides to set draw mode for reshape
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Reshape.Execute(ESRI.ArcGIS.Client.GraphicsLayer,System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.Polyline)">
            <summary>
            Executes reshape on the graphics to reshape using polyline reshaper.
            </summary>
            <param name="layer">Graphics layer that contains graphics to reshape</param>
            <param name="toReshape">Graphics to reshape</param>
            <param name="reshaper">Polyline to reshape with</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Reshape.Execute(ESRI.ArcGIS.Client.Geometry.Polyline)">
            <summary>
            Executes reshape on all selected graphics using polyline reshaper.
            </summary>
            <param name="reshaper">Geometry to reshape with</param>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FeatureService.Editing.Reshape.ReshapeCompleted">
            <summary>
            Occurs when reshape has completed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyResult">
            <summary>
            A result from executing the IdentifyTask.
            </summary>	
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyResult.deserializedJson(System.String)">
            <summary>
            Deserializeds the json.
            </summary>
            <param name="json">The json.</param>
            <returns>Returns an IdentifyImageResult object that contains the 
            response form the identify task. </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyResult.ObjectID">
            <summary>
            Gets the object ID.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyResult.Name">
            <summary>
            Gets the name.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyResult.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyResult.Location">
            <summary>
            Gets the location.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyResult.Properties">
            <summary>
            Gets the properties.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyResult.CatalogItems">
            <summary>
            Gets the catalog items.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyResult.CatalogItemVisibilities">
            <summary>
            Gets the catalog item visibility.
            </summary>		
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPDataFile">
            <summary>
            A data file input to a geoprocessing task.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPDataFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPDataFile"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="url">The URL to the location of the input data file.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPDataFile.ToJson">
            <summary>
            Serializes the parameter to JSON.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPDataFile.Url">
            <summary>
            The URL to the location of the input data file.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GeneralizeParameters">
            <summary>
            Parameters contains additional properties 
            that defines how the generalize task will be preformed.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeneralizeParameters.MaxDeviation">
            <summary>
            Gets or sets the tolerance used to determine if 
            vertices should be preserved in the output.
            </summary>
            <value>The max deviation.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeneralizeParameters.DeviationUnit">
            <summary>
            Gets or sets the unit of distance used for 
            MaxDeviation.
            </summary>
            <value>The deviation unit.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.FindResult">
            <summary>
            A result from the executing the FindTask.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindResult.LayerId">
            <summary>
            The layer id of the FindResult.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindResult.LayerName">
            <summary>
            The layer name of the FindResult.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindResult.DisplayFieldName">
            <summary>
            The display field name of the FindResult.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindResult.FoundFieldName">
            <summary>
            The found field name of the FindResult.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindResult.Value">
            <summary>
            The value of the FindResult.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindResult.Feature">
            <summary>
            The feature of the FindResult.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.FindParameters">
            <summary>
            The parameters used to execute the FindTask.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FindParameters.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindParameters.SearchText">
            <summary>
            The search string. This is the text that is searched across the 
            layers and the fields that the user specifies.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindParameters.Contains">
            <summary>
            If false, the operation searches for an exact match of the 
            searchText string. An exact match is case sensitive. Otherwise, it 
            searches for a value that contains the searchText provided. This 
            search is not case sensitive. The default is true.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindParameters.SearchFields">
            <summary>
            The names of the fields to search. If none are specified, all fields 
            are searched.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindParameters.SpatialReferenceWKID">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the FindParameters.SpatialReference property.
            </para>
            <para>
            The well-known ID of the spatial reference of the output geometries. If not specified, the output geometries are 
            returned in the spatial reference of the map.
            </para>
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindParameters.SpatialReference">
            <summary>
            The spatial reference of the input and output geometries as well as 
            the mapExtent. If sr is not specified, the geometry and the 
            mapExtent are assumed to be in the spatial reference of the map, 
            and the output geometries are also in the spatial reference of the 
            map. The SpatialReference supports wkid as well as wkt for custom
            spatial references.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindParameters.ReturnGeometry">
            <summary>
            If true, each feature returned includes the geometry. Since the 
            geometry makes up a significant portion of the result, only use when 
            you plan to use the geometry of the feature, for example, to include 
            them on a map. By default, this is true.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindParameters.LayerIds">
            <summary>
            Required. The layers to perform the find operation on.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindParameters.LayerDefinitions">
            <summary>
            Collection of layer definition expressions that allows you to filter 
            the features of individual layers in the exported map image. 
            Definition expressions for layers that are currently not visible 
            will be ignored by the server.
            </summary>
            <value>The layer definitions.</value>
            <see cref="T:ESRI.ArcGIS.Client.LayerDefinition"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindParameters.MaxAllowableOffset">
            <summary>
            This option can be used to specify the maximum allowable offset to 
            be used for generalizing geometries returned by the find operation.
            </summary>
            <value>The max allowable offset.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.Polygon">
            <summary>
            A collection of Rings used to represent a Polygon <see cref="T:ESRI.ArcGIS.Client.Geometry.Geometry"/>.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.Geometry">
            <summary>
            Abstract Geometry class provides a base class for objects that define geometric shapes. 
            Geometry objects can be used for clipping regions and as geometry definitions for rendering two-dimensional graphic data.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.Geometry"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geometry.raiseGeometryChanged">
            <summary>
            Raises the geometry changed event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geometry.Clone(ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Creates a deep clone of the current Object.
            </summary>
            <returns>Returns a deep clone of the current Object.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geometry.NormalizeCentralMeridian(ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Normalizes geometry to stay within a -180 to 180 degree extent, for geometries in Geographic WGS84 (4326) and WebMercator.
            </summary>
            <param name="g"></param>
            <returns>
            Normalized geometry.
            </returns>
            <remarks>
            Note that an <see cref="T:ESRI.ArcGIS.Client.Geometry.Envelope"/> that crosses the antimeridian might return as a <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/>.
            Polygons and lines will be split along the anti-merididian.
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geometry.GetScale(System.Double,ESRI.ArcGIS.Client.Geometry.SpatialReference,System.Double)">
            <summary>
            Gets the scale.
            </summary>
            <param name="unitsPerPixel">Units per pixel (resolution).</param>
            <param name="spatialReference">Spatial reference.</param>
            <param name="pixelsPerInch">Pixels per inch (dpi).</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geometry.GetScale(System.Double,System.Double,System.Double)">
            <summary>
            Gets the scale.
            </summary>
            <param name="unitsPerPixel">Units per pixel (resolution).</param>
            <param name="metersPerUnit">Meters per unit.</param>
            <param name="pixelsPerInch">Pixels per inch (dpi).</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geometry.QuickLookup(System.Int32,System.Int32,System.Int32)">
            <summary>
            Recursive O(Log n) lookup of wkid unit 
            </summary>
            <param name="wkid"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Geometry.Extent">
            <summary>
            Gets the minimum enclosing <see cref="T:ESRI.ArcGIS.Client.Geometry.Envelope"/> of the instance
            </summary>
            <returns>Envelope</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Geometry.SpatialReference">
            <summary>
            Gets or sets the spatial reference.
            </summary>
            <value>The spatial reference.</value>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Polygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Polygon.Clone">
            <summary>
            Creates a deep clone of the current Object.
            </summary>
            <returns>Returns a deep clone of the current Object.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Polygon.Rings">
            <summary>
            Gets or sets the rings.
            </summary>
            <value>The rings.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Polygon.Extent">
            <summary>
            Gets the minimum enclosing envelope of the instance
            </summary>
            <returns>Envelope</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.EnvelopeConverter">
            <summary>
             Provides a way of converting <see cref="T:ESRI.ArcGIS.Client.Geometry.Envelope"/> to and from a string representation, as well
             as for accessing standard values and subproperties.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.EnvelopeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.EnvelopeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type,
            using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to.</param>
            <returns>Returns whether this converter can convert the object to the specified type.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.EnvelopeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.EnvelopeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null.</exception>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.TextSymbol">
            <summary>
            Text Marker Symbol
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.TextSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Symbols.TextSymbol"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.TextSymbol.TextProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.TextSymbol.Text"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.TextSymbol.FontFamilyProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.TextSymbol.FontFamily"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.TextSymbol.FontSizeProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.TextSymbol.FontSize"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.TextSymbol.ForegroundProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.TextSymbol.Foreground"/> dependency property.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.TextSymbol.Text">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.TextSymbol.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.TextSymbol.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.TextSymbol.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.FillSymbol">
            <summary>
            BAse class for symbols used with <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/> objects
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.FillSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Symbols.FillSymbol"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.FillSymbol.BorderThicknessProperty">
            <summary>
            Identifies the border thickness dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.FillSymbol.BorderBrushProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.FillSymbol.BorderBrush"/> dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.FillSymbol.FillProperty">
            <summary>
            Identifies the Fill Brush dependency property
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.FillSymbol.BorderThickness">
            <summary>
            Gets or sets the border thickness of the Geometry
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.FillSymbol.BorderBrush">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.FillSymbol.Fill">
            <summary>
            Gets or sets the fill <see cref="T:System.Windows.Media.Brush"/>.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Services.LOD">
            <summary>
            An ArcGISTiledMapServiceLayer has a number of LODs (Levels of Detail). Each LOD corresponds to a map at a given scale or resolution. LOD has no constructor. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.LOD.Level">
            <summary>
            ID for each level. The top most level is 0. The ID is returned in Map.getLevel() and set in Map.setLevel().
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.LOD.Resolution">
            <summary>
            Resolution in map units of each pixel in a tile for each level.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.LOD.Scale">
            <summary>
            Scale for each level.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.IRenderer">
            <summary>
            IRenderer interface for generating <see cref="T:ESRI.ArcGIS.Client.Symbols.Symbol"/>s based on the graphic.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.IRenderer.GetSymbol(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Gets a symbol based on a graphic.
            </summary>
            <param name="graphic">The graphic.</param>
            <returns>Symbol</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Renderer">
            <summary>
            This static class is used to create a Renderer from a string in JSON format.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Renderer.FromJson(System.String)">
            <summary>
            Creates a Renderer from a string in JSON format.
            </summary>
            <param name="json">The Renderer JSON.</param>
            <returns>The deserialized Renderer.</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Graphic">
            <summary>
            A visual element that typically represents geographic data used for rendering in a 
            <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer">GraphicsLayer</see> of the Map Control.
            </summary>
            <remarks>
            <para>
            Graphics are added dynamically to the Map, at runtime, in the ESRI based Client Silverlight/WPF/Windows 
            Phone application. Graphic objects can be created in XAML or code-behind (or a combination of both). 
            </para>
            <para>
            There are several ways to add a Graphic object to a GraphicsLayer, including:
            <list type="bullet">
              <item>Explicitly defining each Graphic in XAML (see the code example for the 
              <see cref="P:ESRI.ArcGIS.Client.Graphic.Symbol">Graphic.Symbol</see> Property)</item>
              <item>Explicitly defining each Graphic in code-behind (see the code example in this document)</item>
              <item>From the result of a Task (Query, Identify, Find, Address locator, Geometry, Geoprocessing, 
              and Route)(see the code example for the 
              <see cref="P:ESRI.ArcGIS.Client.Graphic.Attributes">Graphic.Attributes</see> Property)</item>
              <item>From performing the Draw of a shape interactively by the user on the Map</item>
              <item>Loading from a file on the local hard drive (see the code example for the 
              Graphic.MapTip Property)</item>
              <item>From a custom web service</item>
            </list>
            </para>
            <para>
            Add the GraphicsLayer below (i.e. after) other Layers so the Graphics display on top.
            </para>
            <para>
            If declaring a GraphicsLayer in XAML, provide an <b>ID</b> attribute in order to use it in the code-behind.
            </para>
            <para>
            In order to display a Graphic on the Map, a Symbol must be associated with each Graphic. A Graphic’s 
            <see cref="P:ESRI.ArcGIS.Client.Graphic.Geometry">Geometry</see> Property must match the Symbol type. 
            This means a <see cref="T:ESRI.ArcGIS.Client.Symbols.MarkerSymbol"> MarkerSymbol</see> for a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint">MapPoint</see> or 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.MultiPoint">MultiPoint</see>, 
            <see cref="T:ESRI.ArcGIS.Client.Symbols.FillSymbol">FillSymbol</see> for a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon">Polygon</see>, and 
            <see cref="T:ESRI.ArcGIS.Client.Symbols.LineSymbol">LineSymbol</see> for a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline">Polyline</see>. 
            </para>
            <para>
            It is a good practice to provide a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> for the 
            Geometry that is applied to the Graphic. Some operations like the various Geometry service functions 
            must have a valid SpatialReference in order to work.
            </para>
            <para>
            <b>Special consideration for Graphics based upon Polygon geometries:</b> In order to have the correct 
            exterior <see cref="P:ESRI.ArcGIS.Client.Symbols.FillSymbol.BorderBrush">FillSymbol.BorderBrush</see> 
            Symbology associated with a Polygon Graphic, it is important that the 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.PointCollection">PointCollection</see> of MapPoints 
            that are used to define the <see cref="P:ESRI.ArcGIS.Client.Geometry.Polygon.Rings">Rings</see> for a 
            Polygon close back on itself. This means that the first and last MapPoint vertices must have the same 
            coordinate values. If the first and last MapPoint vertices are not the same the Polygon graphic will 
            close back on itself automatically but the ending segment will not have any symbology for the exterior 
            BorderBrush displayed. See the following screen shot for a visual example:
            </para>
            <para>
            <img border="0" alt="Demonstrating both an improperly and properly closed Polygon Ring Graphic." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic_UnclosedGraphicPolygon.png"/>
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click on the different RadioButtons (Point, Polyline, and Polygon) to draw Graphics generated in 
            code-behind on the Map Control.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Demonstrating drawing Graphic objects from code-behind." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="40" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="436" 
                         TextWrapping="Wrap" Margin="2,9,0,0" 
                         Text="Click on the different RadioButtons (Point, Polyline, and Polygon) to draw Graphics 
                         generated in code-behind on the Map Control." /&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapeServiceLayer. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,107,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="483" &gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                               Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer" /&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Add three RadioButtons that use the same Click Event handlers to draw Point, Polyline, and Polygon
                   Graphics on the Map control in the code-behind. Each RadioButton has a 'Tag' attribute set that 
                   will be used to decide which Geometry type to draw. --&gt;
              &lt;RadioButton Content="Point" Height="16" HorizontalAlignment="Left" Margin="143,82,0,0" Name="rbPoint" 
                           VerticalAlignment="Top" Tag="Point" Click="rb_Click"/&gt;
              &lt;RadioButton Content="Polyline" Height="16" HorizontalAlignment="Left" Margin="202,82,0,0" Name="rbPolyline" 
                           VerticalAlignment="Top" Tag="Polyline" Click="rb_Click"/&gt;
              &lt;RadioButton Content="Polygon" Height="16" HorizontalAlignment="Left" Margin="273,82,0,0" Name="rbPolygon" 
                           VerticalAlignment="Top" Tag="Polygon" Click="rb_Click"/&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void rb_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              
              // Cast the sender object to a RadioButton.
              System.Windows.Controls.RadioButton aRadioButton = (System.Windows.Controls.RadioButton)sender;
              
              // Get the Tag Property (a String) of the RadioButton that was set in XAML. Possible options for the Tag
              // Property are: "Point", "Polyline", and "Polygon".
              string aGraphicType = (string)aRadioButton.Tag;
              
              // Remove any existing GraphicsLayer objects that are in the Map. This allows the user to choose the
              // different RadioButtons over and over.
              if (Map1.Layers.Count &gt; 1)
              {
                Map1.Layers.RemoveAt(1);
              }
              
              // Create a new instance of the GraphicsLayer object 
              ESRI.ArcGIS.Client.GraphicsLayer myGraphicsLayer = new ESRI.ArcGIS.Client.GraphicsLayer();
              
              // Call the function that generates a single Graphic based upon the type the user wants to create using 
              // the RadioButton Tag and add it to the GraphicsLayer.
              myGraphicsLayer.Graphics.Add(GetAGraphicFromStaticSource(aGraphicType));
              
              // Add the GraphicsLayer to the Layers collection of the Map (this will automatically cause a refresh of the Map). 
              Map1.Layers.Add(myGraphicsLayer);
              
            }
            
            public ESRI.ArcGIS.Client.Graphic GetAGraphicFromStaticSource(string aGraphicType)
            {
              
              // Create a new instance of one Graphic.
              ESRI.ArcGIS.Client.Graphic aGraphic = new ESRI.ArcGIS.Client.Graphic();
              
              // Generate a single Graphic based upon the user-specified type to be created. 
              if (aGraphicType == "Point")
              {
                
                // Create a SpatialReference for the Graphic.
                ESRI.ArcGIS.Client.Geometry.SpatialReference aSpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(102100);
                
                // Create a MapPoint object and set its SpatialReference and coordinate (X,Y) information. Note: Point 
                // Graphics are known as MapPoint objects.
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint = new ESRI.ArcGIS.Client.Geometry.MapPoint();
                aMapPoint.SpatialReference = aSpatialReference;
                aMapPoint.X = -12455356.2;
                aMapPoint.Y = 4978700.31;
                
                // Create a new instance of a SimpleMarkerSymbol and set its Color, Style, and Size Properties.
                ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol aSimpleMarkerySymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
                aSimpleMarkerySymbol.Color = new System.Windows.Media.SolidColorBrush(Colors.Red);
                aSimpleMarkerySymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle;
                aSimpleMarkerySymbol.Size = 10;
                
                // Apply the Graphic's Geometry and Symbol Properties.
                aGraphic.Geometry = (ESRI.ArcGIS.Client.Geometry.Geometry)aMapPoint;
                aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)aSimpleMarkerySymbol;
                
              }
              else if (aGraphicType == "Polyline")
              {
                
                // Create a SpatialReference for the Graphic. 
                ESRI.ArcGIS.Client.Geometry.SpatialReference aSpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(102100);
                
                // Create a series of MapPoint objects and set its SpatialReference and coordinate (X,Y) information. 
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint1 = new ESRI.ArcGIS.Client.Geometry.MapPoint(-7356594.25, 4752385.95, aSpatialReference);
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint2 = new ESRI.ArcGIS.Client.Geometry.MapPoint(-5468910.57, 1875915.58, aSpatialReference);
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint3 = new ESRI.ArcGIS.Client.Geometry.MapPoint(-1558708.66, -326382.05, aSpatialReference);
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint4 = new ESRI.ArcGIS.Client.Geometry.MapPoint(-4614958.43, -4191639.11, aSpatialReference);
                
                // Add the MapPoint objects into a new instance of a PointCollection.
                ESRI.ArcGIS.Client.Geometry.PointCollection aPointCollection = new ESRI.ArcGIS.Client.Geometry.PointCollection();
                aPointCollection.Add(aMapPoint1);
                aPointCollection.Add(aMapPoint2);
                aPointCollection.Add(aMapPoint3);
                aPointCollection.Add(aMapPoint4);
                
                // The PointCollection needs to be added to a new instance of an ObservableCollection.
                System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt; anObservableCollection = new System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt;();
                anObservableCollection.Add(aPointCollection);
                
                // Create a new instance of a Polyline object and set the Paths and SpatialReference Properties.
                ESRI.ArcGIS.Client.Geometry.Polyline aPolyline = new ESRI.ArcGIS.Client.Geometry.Polyline();
                aPolyline.Paths = anObservableCollection;
                aPolyline.SpatialReference = aSpatialReference;
                
                // Create a new instance of a SimpleLineSymbol and set its Color, Style, and Width Properties.
                ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol aSimpleLineSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol();
                aSimpleLineSymbol.Color = new System.Windows.Media.SolidColorBrush(Colors.Blue);
                aSimpleLineSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Solid;
                aSimpleLineSymbol.Width = 7;
                
                // Apply the Graphic's Geometry and Symbol Properties.
                aGraphic.Geometry = (ESRI.ArcGIS.Client.Geometry.Geometry)aPolyline;
                aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)aSimpleLineSymbol;
                
              }
              else if (aGraphicType == "Polygon")
              {
                
                // Create a SpatialReference for the Graphic.
                ESRI.ArcGIS.Client.Geometry.SpatialReference aSpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(102100);
                
                // Create a series of MapPoint objects and set its SpatialReference and coordinate (X,Y) information. 
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint1 = new ESRI.ArcGIS.Client.Geometry.MapPoint(3654893.89, 7718746.02, aSpatialReference);
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint2 = new ESRI.ArcGIS.Client.Geometry.MapPoint(1317761.71, 1741081.03, aSpatialReference);
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint3 = new ESRI.ArcGIS.Client.Geometry.MapPoint(12913532.9, -2528679.68, aSpatialReference);
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint4 = new ESRI.ArcGIS.Client.Geometry.MapPoint(14351768.09, 7359187.21, aSpatialReference);
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint5 = new ESRI.ArcGIS.Client.Geometry.MapPoint(6801033.36, 10325547.3, aSpatialReference);
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint6 = new ESRI.ArcGIS.Client.Geometry.MapPoint(3654893.89, 7718746.02, aSpatialReference);
                
                // Add the MapPoint objects into a new instance of a PointCollection.
                // Note: Polygons must close back on itself (i.e. the first and last MapPoint must have the same coordinates).
                // If the first and last MapPoint coorindates are not the same, the Polygon will it close back on itself 
                // automatically but the ending segment will not have any symbology for the exterior BorderBrush displayed.
                ESRI.ArcGIS.Client.Geometry.PointCollection aPointCollection = new ESRI.ArcGIS.Client.Geometry.PointCollection();
                aPointCollection.Add(aMapPoint1);
                aPointCollection.Add(aMapPoint2);
                aPointCollection.Add(aMapPoint3);
                aPointCollection.Add(aMapPoint4);
                aPointCollection.Add(aMapPoint5);
                aPointCollection.Add(aMapPoint6); //Comment out add the last vertex to see some interesting symbolization behavior.
                
                // The PointCollection needs to be added to a new instance of an ObservableCollection.
                System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt; anObservableCollection = new System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt;();
                anObservableCollection.Add(aPointCollection);
                
                // Create a new instance of a Polygon object and set the Rings and SpatialReference Properties.
                ESRI.ArcGIS.Client.Geometry.Polygon aPolygon = new ESRI.ArcGIS.Client.Geometry.Polygon();
                aPolygon.Rings = anObservableCollection;
                aPolygon.SpatialReference = aSpatialReference;
                
                // Create a new instance of a SimpleFillSymbol and set its Color, BorderBrush, and BorderThickness Properties.
                ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol aSimpleFillSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
                aSimpleFillSymbol.Fill = new System.Windows.Media.SolidColorBrush(Colors.Green);
                aSimpleFillSymbol.BorderBrush = new System.Windows.Media.SolidColorBrush(Colors.Yellow);
                aSimpleFillSymbol.BorderThickness = 5;
                
                // Apply the Graphic's Geometry and Symbol Properties.
                aGraphic.Geometry = (ESRI.ArcGIS.Client.Geometry.Geometry)aPolygon;
                aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)aSimpleFillSymbol;
                
              }
              
              // Return the created Graphic. 
              return aGraphic;
              
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub rb_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Cast the sender object to a RadioButton.
              Dim aRadioButton As System.Windows.Controls.RadioButton = CType(sender, System.Windows.Controls.RadioButton)
              
              ' Get the Tag Property (a String) of the RadioButton that was set in XAML. Possible options for the Tag
              ' Property are: "Point", "Polyline", and "Polygon".
              Dim aGraphicType As String = aRadioButton.Tag
              
              ' Remove any existing GraphicsLayer objects that are in the Map. This allows the user to choose the
              ' different RadioButtons over and over.
              If Map1.Layers.Count &gt; 1 Then
                Map1.Layers.RemoveAt(1)
              End If
              
              ' Create a new instance of the GraphicsLayer object 
              Dim myGraphicsLayer As New ESRI.ArcGIS.Client.GraphicsLayer
              
              ' Call the function that generates a single Graphic based upon the type the user wants to create using 
              ' the RadioButton Tag and add it to the GraphicsLayer.
              myGraphicsLayer.Graphics.Add(GetAGraphicFromStaticSource(aGraphicType))
              
              ' Add the GraphicsLayer to the Layers collection of the Map (this will automatically cause a refresh of the Map). 
              Map1.Layers.Add(myGraphicsLayer)
              
            End Sub
            
            Public Function GetAGraphicFromStaticSource(ByVal aGraphicType As String) As ESRI.ArcGIS.Client.Graphic
              
              ' Create a new instance of one Graphic.
              Dim aGraphic As New ESRI.ArcGIS.Client.Graphic
              
              ' Generate a single Graphic based upon the user-specified type to be created. 
              If aGraphicType = "Point" Then
              
                ' Create a SpatialReference for the Graphic.
                Dim aSpatialReference As New ESRI.ArcGIS.Client.Geometry.SpatialReference(102100)
                
                ' Create a MapPoint object and set its SpatialReference and coordinate (X,Y) information. Note: Point 
                ' Graphics are known as MapPoint objects.
                Dim aMapPoint As New ESRI.ArcGIS.Client.Geometry.MapPoint
                aMapPoint.SpatialReference = aSpatialReference
                aMapPoint.X = -12455356.2
                aMapPoint.Y = 4978700.31
                
                ' Create a new instance of a SimpleMarkerSymbol and set its Color, Style, and Size Properties.
                Dim aSimpleMarkerySymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
                aSimpleMarkerySymbol.Color = New System.Windows.Media.SolidColorBrush(Colors.Red)
                aSimpleMarkerySymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle
                aSimpleMarkerySymbol.Size = 10
                
                ' Apply the Graphic's Geometry and Symbol Properties.
                aGraphic.Geometry = CType(aMapPoint, ESRI.ArcGIS.Client.Geometry.Geometry)
                aGraphic.Symbol = CType(aSimpleMarkerySymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                
              ElseIf aGraphicType = "Polyline" Then
                
                ' Create a SpatialReference for the Graphic. 
                Dim aSpatialReference As New ESRI.ArcGIS.Client.Geometry.SpatialReference(102100)
                
                ' Create a series of MapPoint objects and set its SpatialReference and coordinate (X,Y) information. 
                Dim aMapPoint1 As New ESRI.ArcGIS.Client.Geometry.MapPoint(-7356594.25, 4752385.95, aSpatialReference)
                Dim aMapPoint2 As New ESRI.ArcGIS.Client.Geometry.MapPoint(-5468910.57, 1875915.58, aSpatialReference)
                Dim aMapPoint3 As New ESRI.ArcGIS.Client.Geometry.MapPoint(-1558708.66, -326382.05, aSpatialReference)
                Dim aMapPoint4 As New ESRI.ArcGIS.Client.Geometry.MapPoint(-4614958.43, -4191639.11, aSpatialReference)
                
                ' Add the MapPoint objects into a new instance of a PointCollection.
                Dim aPointCollection As New ESRI.ArcGIS.Client.Geometry.PointCollection
                aPointCollection.Add(aMapPoint1)
                aPointCollection.Add(aMapPoint2)
                aPointCollection.Add(aMapPoint3)
                aPointCollection.Add(aMapPoint4)
                
                ' The PointCollection needs to be added to a new instance of an ObservableCollection.
                Dim anObservableCollection As New System.Collections.ObjectModel.ObservableCollection(Of ESRI.ArcGIS.Client.Geometry.PointCollection)
                anObservableCollection.Add(aPointCollection)
                
                ' Create a new instance of a Polyline object and set the Paths and SpatialReference Properties.
                Dim aPolyline As New ESRI.ArcGIS.Client.Geometry.Polyline
                aPolyline.Paths = anObservableCollection
                aPolyline.SpatialReference = aSpatialReference
                
                ' Create a new instance of a SimpleLineSymbol and set its Color, Style, and Width Properties.
                Dim aSimpleLineSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol
                aSimpleLineSymbol.Color = New System.Windows.Media.SolidColorBrush(Colors.Blue)
                aSimpleLineSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Solid
                aSimpleLineSymbol.Width = 7
                
                ' Apply the Graphic's Geometry and Symbol Properties.
                aGraphic.Geometry = CType(aPolyline, ESRI.ArcGIS.Client.Geometry.Geometry)
                aGraphic.Symbol = CType(aSimpleLineSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                
              ElseIf aGraphicType = "Polygon" Then
                
                ' Create a SpatialReference for the Graphic.
                Dim aSpatialReference As New ESRI.ArcGIS.Client.Geometry.SpatialReference(102100)
                
                ' Create a series of MapPoint objects and set its SpatialReference and coordinate (X,Y) information. 
                Dim aMapPoint1 As New ESRI.ArcGIS.Client.Geometry.MapPoint(3654893.89, 7718746.02, aSpatialReference)
                Dim aMapPoint2 As New ESRI.ArcGIS.Client.Geometry.MapPoint(1317761.71, 1741081.03, aSpatialReference)
                Dim aMapPoint3 As New ESRI.ArcGIS.Client.Geometry.MapPoint(12913532.9, -2528679.68, aSpatialReference)
                Dim aMapPoint4 As New ESRI.ArcGIS.Client.Geometry.MapPoint(14351768.09, 7359187.21, aSpatialReference)
                Dim aMapPoint5 As New ESRI.ArcGIS.Client.Geometry.MapPoint(6801033.36, 10325547.3, aSpatialReference)
                Dim aMapPoint6 As New ESRI.ArcGIS.Client.Geometry.MapPoint(3654893.89, 7718746.02, aSpatialReference)
                
                ' Add the MapPoint objects into a new instance of a PointCollection.
                ' Note: Polygons must close back on itself (i.e. the first and last MapPoint must have the same coordinates).
                ' If the first and last MapPoint coorindates are not the same, the Polygon will it close back on itself 
                ' automatically but the ending segment will not have any symbology for the exterior BorderBrush displayed.
                Dim aPointCollection As New ESRI.ArcGIS.Client.Geometry.PointCollection
                aPointCollection.Add(aMapPoint1)
                aPointCollection.Add(aMapPoint2)
                aPointCollection.Add(aMapPoint3)
                aPointCollection.Add(aMapPoint4)
                aPointCollection.Add(aMapPoint5)
                aPointCollection.Add(aMapPoint6) 'Comment out add the last vertex to see some interesting symbolization behavior.
                
                ' The PointCollection needs to be added to a new instance of an ObservableCollection.
                Dim anObservableCollection As New System.Collections.ObjectModel.ObservableCollection(Of ESRI.ArcGIS.Client.Geometry.PointCollection)
                anObservableCollection.Add(aPointCollection)
                
                ' Create a new instance of a Polygon object and set the Rings and SpatialReference Properties.
                Dim aPolygon As New ESRI.ArcGIS.Client.Geometry.Polygon
                aPolygon.Rings = anObservableCollection
                aPolygon.SpatialReference = aSpatialReference
                
                ' Create a new instance of a SimpleFillSymbol and set its Color, BorderBrush, and BorderThickness Properties.
                Dim aSimpleFillSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
                aSimpleFillSymbol.Fill = New System.Windows.Media.SolidColorBrush(Colors.Green)
                aSimpleFillSymbol.BorderBrush = New System.Windows.Media.SolidColorBrush(Colors.Yellow)
                aSimpleFillSymbol.BorderThickness = 5
                
                ' Apply the Graphic's Geometry and Symbol Properties.
                aGraphic.Geometry = CType(aPolygon, ESRI.ArcGIS.Client.Geometry.Geometry)
                aGraphic.Symbol = CType(aSimpleFillSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                
              End If
              
              ' Return the created Graphic. 
              Return aGraphic
              
            End Function
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Graphic"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphic.raiseGeometryInstanceChanged(ESRI.ArcGIS.Client.Graphic.GeometryInstanceChangeEventArgs)">
            <summary>
            Raises the geometry instance changed event.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Graphic.SelectedProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Graphic.Selected"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphic.Select">
            <summary>
            Sets the Graphics Selected state to selected (or True).
            </summary>
            <remarks>
            <para>
            By default a Graphic is not selected (i.e. Selected = False). If a Graphic is selected the 
            Selected Property will be True.
            </para>
            <para>
            The Symbol of a Graphic does not automatically change according to the Graphic’s Selected 
            status. Custom code in either the XAML or code-behind is required to change the Symbol of the 
            Graphic when the Graphic’s Selected status changes.  
            </para>
            <para>
            There are several ways to select a Graphic using visual interaction with the Map Control; some 
            examples are:
            <list type="bullet">
              <item>As a result of a Geometry service (see the code example in this document – this example 
              uses the VisualStateManager to switch selected symbologies)</item>
              <item>
              Via the XAML System.Windows.VisualStateManager 
              <see cref="P:ESRI.ArcGIS.Client.Graphic.Selected">Graphic.Selected</see> Property) (see 
              another VisualStateManager code example in the 
              <see cref="P:ESRI.ArcGIS.Client.Graphic.Selected">Graphic.Selected</see> Property). 
              <b>Note:</b> The VisualStateManager Class was newly added in the .NET Framework v4.0. If you are 
              running the .NET Framework v3.5 then you can download and Reference the 
              <a href="http://wpf.codeplex.com" target="_blank">WPFToolkit</a> on Codeplex to take advantage of
              the VisualStateManager Class.
              </item>
              <item>By iterating over the GraphicsCollection (see the code example in the 
              <see cref="M:ESRI.ArcGIS.Client.Graphic.UnSelect">Graphic.UnSelect</see> Method)</item>
              <item>Using the Editor Class (see the interactive SDK sample 
              <a href="http://help.arcgis.com/en/webapi/silverlight/samples/start.htm#EditToolsAutoSave" target="_top">Edit Tools - Auto Save</a>)</item>
            </list>
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click on the Polygon Graphics with the left mouse button while holding down the ALT key 
            in the Map Control to change the Selection value and Symbology. A GeometryService.IntersectAsync 
            is used to see if the MapPoint where the mouse click occurred falls within any polygon Graphics 
            in the GraphicsLayer. If there is an intersection the Graphics is selected. The XAML 
            VisualStateManager in the FillSymbol's ControlTemplate performs the work for swapping the 
            symbology for selected Graphics.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Selecting and deselecting Graphics using the Select and UnSelect Methods." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.Select.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- 
              Define a FillSymbol in the Resources section of the XAML file. The FillSymbol uses a ControlTemplate
              to define two VisualStateGroups which automatically switch symbology on the GraphicsLayer depending 
              on whether individual Graphic objects are selected or not. Also define a SpatialReference for using
              best practices when adding Graphics to the GraphicsLayer.
              --&gt;
              &lt;Grid.Resources&gt;
                &lt;esriSymbols:FillSymbol x:Key="SelectFillSymbol"&gt;
                  &lt;esriSymbols:FillSymbol.ControlTemplate&gt;
                    &lt;ControlTemplate&gt;
                      
                      &lt;!-- 
                      Provide the default look of the FillSymbol for the polygon Graphic (a solid blue fill with 
                      black edges). 
                      --&gt;
                      &lt;Path x:Name="Element" Stroke="Black" StrokeStartLineCap="Round" StrokeThickness="5"
                            StrokeLineJoin="Round" StrokeEndLineCap="Round" Fill="Blue"&gt;
                      
                        &lt;!-- 
                        Learn more about the VisualStateManager in the MSDN document:
                        http://msdn.microsoft.com/en-us/library/system.windows.controls.controltemplate(v=VS.95).aspx 
                        Note: The VisualStateManager Class was newly added in the .NET Framework v4.0. If you are 
                        running the .NET Framework v3.5 then you can download and Reference the WPFToolkit on 
                        Codeplex (http://wpf.codeplex.com) to take advantage of the VisualStateManager Class.
                        --&gt;
                        &lt;VisualStateManager.VisualStateGroups&gt;
                          
                          &lt;VisualStateGroup x:Name="SelectionStates"&gt;
                            
                            &lt;!--
                            By specifying an empty Unselected state, unselecting the graphic will set the
                            values back to their original value. The use of a Duration and Storyboard provides  
                            a smooth transition back. Note that it take 0 seconds for the Graphic to be
                            selected and .5 seconds to go back to the original state.
                            --&gt;
                            &lt;VisualState x:Name="Unselected" &gt;
                              &lt;Storyboard&gt;
                                
                                &lt;!-- 
                                Note how the To="Blue" Attribute matches the default Fill Attribute value of
                                the Path x:Name="Element" for defining the Polygon's Symbology.
                                --&gt;
                                &lt;ColorAnimation Storyboard.TargetName="Element" To="Blue"  Duration="00:00:00.50"
                                                Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)"/&gt;
                              &lt;/Storyboard&gt;
                            &lt;/VisualState&gt;
                            
                            &lt;VisualState x:Name="Selected"&gt;
                              &lt;Storyboard&gt;
                                 
                                &lt;!-- 
                                The To="Yellow" Attribute will become the Fill Atrribute value for the Selected state
                                of the Path x:Name="Element" for defining the Polygon's Symbology.
                                --&gt;
                                &lt;ColorAnimation Storyboard.TargetName="Element" To="Yellow" Duration="00:00:00.00"
                                                Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)"/&gt;
                              &lt;/Storyboard&gt;
                            &lt;/VisualState&gt;
                            
                          &lt;/VisualStateGroup&gt;
                          
                        &lt;/VisualStateManager.VisualStateGroups&gt;
                        
                      &lt;/Path&gt;
                      
                    &lt;/ControlTemplate&gt;
                  &lt;/esriSymbols:FillSymbol.ControlTemplate&gt;
                &lt;/esriSymbols:FillSymbol&gt;
                
                &lt;!-- 
                Define a SpatialReference object that has the same WKID as the ArcGISTiledMapServiceLayer in
                the Map. This will allow for the Graphics in the GraphicsLayer to line up properly. 
                --&gt;
                &lt;esri:SpatialReference x:Key="theSpatialReference" WKID="4326"/&gt;
                
              &lt;/Grid.Resources&gt;
              
              &lt;!-- 
              Add a Map control with an ArcGISTiledMapServiceLayer and a GraphicsLayer. The GraphicsLayer will
              contain several Graphics based upon Polygon geometries and using the SelectFillSymbol for the 
              symbolization. By default the Graphics are not selected. The MouseClick Event on the 
              Map has been specified to wire-up code-behind functionality.
              --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,150,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="483"  MouseClick="Map1_MouseClick"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                         Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                 
                &lt;esri:GraphicsLayer ID="MyGraphicsLayer" &gt;
                
                  &lt;esri:GraphicsLayer.Graphics&gt;
                    
                    &lt;!-- 
                    Define several Polygon based Graphics using the StaticResources for the Symbol and SpatialReference.
                    --&gt;
                    &lt;esri:Graphic Symbol="{StaticResource SelectFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="15" Y="-20" /&gt;
                            &lt;esri:MapPoint X="28" Y="-7" /&gt;
                            &lt;esri:MapPoint X="53" Y="-17" /&gt;
                            &lt;esri:MapPoint X="42" Y="-43" /&gt;
                            &lt;esri:MapPoint X="13" Y="-63" /&gt;
                            &lt;esri:MapPoint X="17" Y="-46" /&gt;
                            &lt;esri:MapPoint X="15" Y="-20" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource SelectFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="12" Y="20" /&gt;
                            &lt;esri:MapPoint X="32" Y="17" /&gt;
                            &lt;esri:MapPoint X="67" Y="35" /&gt;
                            &lt;esri:MapPoint X="11" Y="46" /&gt;
                            &lt;esri:MapPoint X="12" Y="20" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource SelectFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="15" Y="17" /&gt;
                            &lt;esri:MapPoint X="50" Y="5" /&gt;
                            &lt;esri:MapPoint X="-40" Y="8" /&gt;
                            &lt;esri:MapPoint X="-18" Y="18" /&gt;
                            &lt;esri:MapPoint X="15" Y="17" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                  &lt;/esri:GraphicsLayer.Graphics&gt;
                &lt;/esri:GraphicsLayer&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="132" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" 
                       Width="578" TextWrapping="Wrap" Margin="12,12,0,0" 
                       Text="Click on the Polygon Graphics with the left mouse button while holding down the Alt key in 
                       the Map Control to change the Selection value and Symbology. A GeometryService.IntersectAsync is 
                       used to see if the MapPoint where the mouse click occurred falls within any polygon Graphics in 
                       the GraphicsLayer. If there is an intersection the Graphics is selected. The XAML 
                       VisualStateManager in the FillSymbol's ControlTemplate performs the work for swapping the 
                       symbology for selected Graphics." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            // Note: The over use of Global variables is never a good programming practice. But in the case of 
            // Asynchronous programming it sometimes becomes an evil necessity. The following three Global 
            // (aka. Member) variables are used as part of the events in Asynchronous web service calls to 
            // ArcGIS Server.
            private ESRI.ArcGIS.Client.Tasks.GeometryService _GeometryService;
            private ESRI.ArcGIS.Client.Geometry.Geometry _aMapPointGeometry;
            private ESRI.ArcGIS.Client.GraphicCollection _theGraphicsCollection;
              
            private void Map1_MouseClick(object sender, ESRI.ArcGIS.Client.Map.MouseEventArgs e)
            {
              // This event fires when the user left clicks with the mouse in the Map control. If the user is holding
              // down the Alt key when the mouse is clicked: (1) a MapPoint is created from the mouse click location, 
              // (2) the GraphicsLayer is retrieved from XAML, (3) the Asynchronous events are wired-up, and (4) the
              // first Asynchronous event is fired. If a user clicks over a Graphic it will be selected/unselected.
              
              // Get the ModifierKeys that are currently depressed (options include: None, Alt, Control, Shift, 
              // Windows, and Apple).
              ModifierKeys theKey = Keyboard.Modifiers;
              
              // Check to ensure that only the Alt key is being depressed.
              if (theKey == ModifierKeys.Alt)
              {
                
                // Get the current Map Resolution. 
                double currentResolution = Map1.Resolution;
                
                // e.MapPoint is where the user clicked on the Map. Create a MapPoint and get its Geometry. 
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint = e.MapPoint;
                _aMapPointGeometry = (ESRI.ArcGIS.Client.Geometry.Geometry)aMapPoint;
                
                // Obtain the GraphicsLayer that was defined in XAML.
                ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = null;
                theGraphicsLayer = (ESRI.ArcGIS.Client.GraphicsLayer)(Map1.Layers["MyGraphicsLayer"]);
                _theGraphicsCollection = theGraphicsLayer.Graphics;
                
                // Define a GeometryService and add the Asynchronous event handlers.
                _GeometryService = new ESRI.ArcGIS.Client.Tasks.GeometryService("http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer");
                _GeometryService.SimplifyCompleted += GeometryService_SimplifyCompleted;
                _GeometryService.IntersectCompleted += GeometryService_IntersectCompleted;
                _GeometryService.Failed += GeometryService_Failed;
                
                // Call simplify operation to correct orientation of rings in a polygon (clockwise = ring, 
                // counterclockwise = hole).
                _GeometryService.SimplifyAsync(_theGraphicsCollection);
                
                // Special Note:
                // When you call a GeometryService, the Geometry of the objects being passed into the various 
                // functions must have a valid SpatialReference set or else you wil get an Argument Exception
                // error. In this code example the SpatialReference for the Graphics in the GraphicsLayer was
                // define in XAML. The following is example syntax of the error message that could result if
                // your Graphics do not have a valid SpatialReference defined:
                // "Value cannot be null. Parameter(Name) : Geometry.SpatialReference()"
              }
            }
            
            private void GeometryService_SimplifyCompleted(object sender, ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs e)
            {
              // This event fires as a result of altering the given geometries (polygons in this case) to make 
              // their definitions topologically legal with respect to their geometry type.
              
              // Now call the IntersectAsync Geometry service which will determine if the MapPoint that was
              // created from the user mouse click falls inside of any Polygon Graphics in the GraphicsCollection
              // of the GraphicsLayer.
              _GeometryService.IntersectAsync(_theGraphicsCollection, _aMapPointGeometry);
            }
            
            private void GeometryService_IntersectCompleted(object sender, ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs e)
            {
              // This event constructs the set-theoretic intersection between an collection of geometries and 
              // another geometry. 
              
              // Loop through all of the returned Graphics. e.Results is a List(Of Graphics).
              for (int i = 0; i &lt;= (e.Results.Count - 1); i++)
              {
                // Only process Graphics with a valid Extent (i.e. not empty). Only those Graphics that 
                // not have a valid Extent are the ones where an Intersection has occured!
                if (e.Results[i].Geometry.Extent != null)
                {
                  // Alternate between setting the Graphic's Select/UnSelected Methods to True/False 
                  // depending on where the user clicks it with the Alt + left mouse button. The 
                  // transitioning from one Symbol to another on the Graphic based upon its selected 
                  // state is exclusively handled in XAML using the VisualStateManager Class.
                  if (_theGraphicsCollection[i].Selected == true)
                  {
                    _theGraphicsCollection[i].UnSelect();
                  }
                  else if (_theGraphicsCollection[i].Selected == false)
                  {
                    _theGraphicsCollection[i].Select();
                  }
                }
              }
            }
            
            private void GeometryService_Failed(object sender, ESRI.ArcGIS.Client.Tasks.TaskFailedEventArgs args)
            {
              // This event is a catch all if something goes wrong with either of the GeometryService 
              // Aysnchronous calls.
              MessageBox.Show("Geometry Service error: " + args.Error.Message);
            }
            </code>	
            <code title="Example VB1" description="" lang="VB.NET">
            ' Note: The over use of Global variables is never a good programming practice. But in the case of 
            ' Asynchronous programming it sometimes becomes an evil necessity. The following three Global 
            ' (aka. Member) variables are used as part of the events in Asynchronous web service calls to 
            ' ArcGIS Server.
            Private _GeometryService As ESRI.ArcGIS.Client.Tasks.GeometryService
            Private _aMapPointGeometry As ESRI.ArcGIS.Client.Geometry.Geometry
            Private _theGraphicsCollection As ESRI.ArcGIS.Client.GraphicCollection
              
            Private Sub Map1_MouseClick(ByVal sender As System.Object, ByVal e As ESRI.ArcGIS.Client.Map.MouseEventArgs)
              
              ' This event fires when the user left clicks with the mouse in the Map control. If the user is holding
              ' down the Alt key when the mouse is clicked: (1) a MapPoint is created from the mouse click location, 
              ' (2) the GraphicsLayer is retrieved from XAML, (3) the Asynchronous events are wired-up, and (4) the
              ' first Asynchronous event is fired. If a user clicks over a Graphic it will be selected/unselected.
               
              ' Get the ModifierKeys that are currently depressed (options include: None, Alt, Control, Shift, 
              ' Windows, and Apple).
              Dim theKey As ModifierKeys = Keyboard.Modifiers
              
              ' Check to ensure that only the Alt key is being depressed.
              If theKey = ModifierKeys.Alt Then
                
                ' Get the current Map Resolution. 
                Dim currentResolution As Double = Map1.Resolution
                  
                ' e.MapPoint is where the user clicked on the Map. Create a MapPoint and get its Geometry. 
                Dim aMapPoint As ESRI.ArcGIS.Client.Geometry.MapPoint = e.MapPoint
                _aMapPointGeometry = CType(aMapPoint, ESRI.ArcGIS.Client.Geometry.Geometry)
                
                ' Obtain the GraphicsLayer that was defined in XAML.
                Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer
                theGraphicsLayer = CType(Map1.Layers("MyGraphicsLayer"), ESRI.ArcGIS.Client.GraphicsLayer)
                _theGraphicsCollection = theGraphicsLayer.Graphics
                
                ' Define a GeometryService and add the Asynchronous event handlers.
                _GeometryService = New ESRI.ArcGIS.Client.Tasks.GeometryService("http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer")
                AddHandler _GeometryService.SimplifyCompleted, AddressOf GeometryService_SimplifyCompleted
                AddHandler _GeometryService.IntersectCompleted, AddressOf GeometryService_IntersectCompleted
                AddHandler _GeometryService.Failed, AddressOf GeometryService_Failed
                
                ' Call simplify operation to correct orientation of rings in a polygon (clockwise = ring, 
                ' counterclockwise = hole).
                _GeometryService.SimplifyAsync(_theGraphicsCollection)
                
                ' Special Note:
                ' When you call a GeometryService, the Geometry of the objects being passed into the various 
                ' functions must have a valid SpatialReference set or else you wil get an Argument Exception
                ' error. In this code example the SpatialReference for the Graphics in the GraphicsLayer was
                ' define in XAML. The following is example syntax of the error message that could result if
                ' your Graphics do not have a valid SpatialReference defined:
                ' "Value cannot be null. Parameter(Name) : Geometry.SpatialReference()"
                
              End If
              
            End Sub
            
            Private Sub GeometryService_SimplifyCompleted(ByVal sender As Object, ByVal e As ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)
              
              ' This event fires as a result of altering the given geometries (polygons in this case) to make 
              ' their definitions topologically legal with respect to their geometry type.
                
              ' Now call the IntersectAsync Geometry service which will determine if the MapPoint that was
              ' created from the user mouse click falls inside of any Polygon Graphics in the GraphicsCollection
              ' of the GraphicsLayer.
              _GeometryService.IntersectAsync(_theGraphicsCollection, _aMapPointGeometry)
              
            End Sub
            
            Private Sub GeometryService_IntersectCompleted(ByVal sender As Object, ByVal e As ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)
              
              ' This event constructs the set-theoretic intersection between an collection of geometries and 
              ' another geometry. 
              
              ' Loop through all of the returned Graphics. e.Results is a List(Of Graphics).
              For i As Integer = 0 To (e.Results.Count - 1)
                
                ' Only process Graphics with a valid Extent (i.e. not empty). Only those Graphics that 
                ' not have a valid Extent are the ones where an Intersection has occured!
                If e.Results.Item(i).Geometry.Extent IsNot Nothing Then
                  
                  ' Alternate between setting the Graphic's Select/UnSelected Methods to True/False 
                  ' depending on where the user clicks it with the Alt + left mouse button. The 
                  ' transitioning from one Symbol to another on the Graphic based upon its selected 
                  ' state is exclusively handled in XAML using the VisualStateManager Class.
                  If _theGraphicsCollection.Item(i).Selected = True Then
                    _theGraphicsCollection.Item(i).UnSelect()
                  ElseIf _theGraphicsCollection.Item(i).Selected = False Then
                    _theGraphicsCollection.Item(i).Select()
                  End If
                  
                End If
                
              Next
              
            End Sub
              
            Private Sub GeometryService_Failed(ByVal sender As Object, ByVal args As ESRI.ArcGIS.Client.Tasks.TaskFailedEventArgs)
              
              ' This event is a catch all if something goes wrong with either of the GeometryService 
              ' Aysnchronous calls.
              MessageBox.Show("Geometry Service error: " + args.Error.Message)
              
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphic.UnSelect">
            <summary>
            Sets the Graphics Selected state to unselected (or False).
            </summary>
            <remarks>
            <para>
            By default a Graphic is not selected (i.e. Selected = False). If a Graphic is selected the 
            Selected Property will be True.
            </para>
            <para>
            The Symbol of a Graphic does not automatically change according to the Graphic’s Selected 
            status. Custom code in either the XAML or code-behind is required to change the Symbol of the 
            Graphic when the Graphic’s Selected status changes.  
            </para>
            <para>
            There are several ways to select a Graphic using visual interaction with the Map Control; some 
            examples are:
            <list type="bullet">
              <item>As a result of a Geometry service (see the code example in the 
              <see cref="M:ESRI.ArcGIS.Client.Graphic.Select">Graphic.Select</see> Method)</item>
              <item>Via the XAML System.Windows.VisualStateManager 
              <see cref="P:ESRI.ArcGIS.Client.Graphic.Selected">Graphic.Selected</see> Property). This method 
              is often preferred because of its high performance.</item>
              <item>By iterating over the GraphicsCollection (see the code example in this document)</item>
              <item>Using the Editor Class (see the interactive SDK sample 
              <a href="http://help.arcgis.com/en/webapi/silverlight/samples/start.htm#EditToolsAutoSave" target="_top">Edit Tools - Auto Save</a>)</item>
            </list>
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click on the polygon Graphics with the left mouse button in the Map Control to change their 
            selection value using the Select and UnSelect Methods. When a Graphic has been selected, a 
            function will iterate over all the Graphics in the GraphicsLayer and render the symbology 
            according to the selected value.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Selecting and deselecting Graphics using the Select and UnSelect Methods." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.UnSelect.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!--
              Define a two SimpleFillSymbol objects in the Resources section of the XAML file. Also define a 
              SpatialReference for using best practices when adding Graphics to the GraphicsLayer.
              --&gt;
              &lt;Grid.Resources&gt;
                 
                &lt;!--
                RedFillSymbol is the default for the polygon Graphic symbolization. CyanFillSimbol will be used to 
                denote a selected polygon Graphic.
                --&gt;
                &lt;esri:SimpleFillSymbol x:Key="RedFillSymbol" Fill="#66FF0000" BorderBrush="Red" BorderThickness="2" /&gt;
                &lt;esri:SimpleFillSymbol x:Key="CyanFillSymbol" Fill="Cyan" BorderBrush="Cyan" BorderThickness="2" /&gt;
                
                &lt;!-- 
                Define a SpatialReference object that has the same WKID as the ArcGISTiledMapServiceLayer in
                the Map. This will allow for the Graphics in the GraphicsLayer to line up properly. 
                --&gt;
                &lt;esri:SpatialReference x:Key="theSpatialReference" WKID="4326"/&gt;
                  
              &lt;/Grid.Resources&gt;
                
              &lt;!-- 
              Add a Map control with an ArcGISTiledMapServiceLayer and a GraphicsLayer. The GraphicsLayer will
              contain a few Graphics based upon polygon geometries and using the RedFillSymbol for the 
              symbolization. By default the Graphics are not selected. The MouseLeftButtonDown Event on the 
              GraphicsLayer has been specified to wire-up code-behind functionality. Set the Map.Extent to that
              of an area where the sample Graphics are located.
              --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,150,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="483" Extent="8.96,-63.28,178.76,48.51"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                           Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                
                &lt;esri:GraphicsLayer ID="MyGraphicsLayer" MouseLeftButtonDown="GraphicsLayer_MouseLeftButtonDown"&gt;
                
                  &lt;esri:GraphicsLayer.Graphics&gt;
                  
                    &lt;!-- 
                    Define a few polygon Graphics using the StaticResources for the Symbol and SpatialReference.
                    --&gt;
                    &lt;esri:Graphic Symbol="{StaticResource RedFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="110.039" Y="-20.303" /&gt;
                            &lt;esri:MapPoint X="132.539" Y="-7.0137" /&gt;
                            &lt;esri:MapPoint X="153.281" Y="-13.923" /&gt;
                            &lt;esri:MapPoint X="162.773" Y="-35.174" /&gt;
                            &lt;esri:MapPoint X="133.594" Y="-43.180" /&gt;
                            &lt;esri:MapPoint X="111.797" Y="-36.032" /&gt;
                            &lt;esri:MapPoint X="110.039" Y="-20.303" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="110.039" Y="20.303" /&gt;
                            &lt;esri:MapPoint X="132.539" Y="7.0137" /&gt;
                            &lt;esri:MapPoint X="162.773" Y="35.174" /&gt;
                            &lt;esri:MapPoint X="111.797" Y="36.032" /&gt;
                            &lt;esri:MapPoint X="110.039" Y="20.303" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                  &lt;/esri:GraphicsLayer.Graphics&gt;
                &lt;/esri:GraphicsLayer&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="87" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" 
                       Width="483" TextWrapping="Wrap" Margin="12,12,0,0" 
                       Text="Click on the polygon Graphics with the left mouse button in the Map Control 
                       to change their selection value using the Select and UnSelect Methods. When a 
                       Graphic has been selected, a function will iterate over all the Graphics in the
                       GraphicsLayer and render the symbology according to the selected value." /&gt;
                       
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void GraphicsLayer_MouseLeftButtonDown(object sender, ESRI.ArcGIS.Client.GraphicMouseButtonEventArgs e)
            {
              // This function selects/unselects a Graphic and then renders all the Graphics in the GraphicsLayer
              // based upon their selection value.
              
              // Alternate the selected state of the Graphic using the UnSelect and Select Methods.
              if (e.Graphic.Selected == true)
              {
                e.Graphic.UnSelect();
              }
              else if (e.Graphic.Selected == false)
              {
                e.Graphic.Select();
              }
              
              // Obtain the GraphicsLayer that was defined in XAML.
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = null;
              theGraphicsLayer = (ESRI.ArcGIS.Client.GraphicsLayer)(Map1.Layers["MyGraphicsLayer"]);
              
              // Get the GraphicsCollection from the GraphicsLayer.
              ESRI.ArcGIS.Client.GraphicCollection theGraphicsCollection = theGraphicsLayer.Graphics;
              
              // Render each Graphic in the GraphicsCollection with the appropriate symbology based upon
              // its selected state.
              RenderSelectedGraphicsDifferently(theGraphicsCollection);
            }
            
            public void RenderSelectedGraphicsDifferently(ESRI.ArcGIS.Client.GraphicCollection theGraphicsCollection)
            {
              // This function obtains the polygon fill symbology that was defined in XAML and then renders
              // the correct SimpleFillSymbol depending on each Graphics selection state.
              
              // Get the SimpleFillSymbols for XAML
              ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol theSelectedSimpleFillSymbol = null;
              theSelectedSimpleFillSymbol = (ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol)(LayoutRoot.Resources["CyanFillSymbol"]);
              ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol theUnSelectedSimpleFillSymbol = null;
              theUnSelectedSimpleFillSymbol = (ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol)(LayoutRoot.Resources["RedFillSymbol"]);
              
              // Loop through all the Graphics in the GraphicCollection and render the correct symbology.
              // Note: If there a numerous Graphics this approach may not be efficient. Consider using a
              // VisualStateManager as a more efficient mechanism (see the Graphic.Selected Property code
              // example) to switching symbolgy based upon a selection state.
              foreach (ESRI.ArcGIS.Client.Graphic aGraphic in theGraphicsCollection)
              {
                if (aGraphic.Selected == true)
                {
                  aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)theSelectedSimpleFillSymbol;
                }
                else
                {
                aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)theUnSelectedSimpleFillSymbol;
                }
              }
            }
            </code>	
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub GraphicsLayer_MouseLeftButtonDown(ByVal sender As System.Object, ByVal e As ESRI.ArcGIS.Client.GraphicMouseButtonEventArgs)
              
              ' This function selects/unselects a Graphic and then renders all the Graphics in the GraphicsLayer
              ' based upon their selection value.
              
              ' Alternate the selected state of the Graphic using the UnSelect and Select Methods.
              If e.Graphic.Selected = True Then
                e.Graphic.UnSelect()
              ElseIf e.Graphic.Selected = False Then
                e.Graphic.Select()
              End If
              
              ' Obtain the GraphicsLayer that was defined in XAML.
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer
              theGraphicsLayer = CType(Map1.Layers("MyGraphicsLayer"), ESRI.ArcGIS.Client.GraphicsLayer)
              
              ' Get the GraphicsCollection from the GraphicsLayer.
              Dim theGraphicsCollection As ESRI.ArcGIS.Client.GraphicCollection = theGraphicsLayer.Graphics
              
              ' Render each Graphic in the GraphicsCollection with the appropriate symbology based upon
              ' its selected state.
              RenderSelectedGraphicsDifferently(theGraphicsCollection)
              
            End Sub
            
            Public Sub RenderSelectedGraphicsDifferently(ByVal theGraphicsCollection As ESRI.ArcGIS.Client.GraphicCollection)
              
              ' This function obtains the polygon fill symbology that was defined in XAML and then renders
              ' the correct SimpleFillSymbol depending on each Graphics selection state.
              
              ' Get the SimpleFillSymbols for XAML
              Dim theSelectedSimpleFillSymbol As ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
              theSelectedSimpleFillSymbol = CType(LayoutRoot.Resources("CyanFillSymbol"), ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol)
              Dim theUnSelectedSimpleFillSymbol As ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
              theUnSelectedSimpleFillSymbol = CType(LayoutRoot.Resources("RedFillSymbol"), ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol)
              
              ' Loop through all the Graphics in the GraphicCollection and render the correct symbology.
              ' Note: If there a numerous Graphics this approach may not be efficient. Consider using a
              ' VisualStateManager as a more efficient mechanism (see the Graphic.Selected Property code
              ' example) to switching symbolgy based upon a selection state.
              For Each aGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicsCollection
                If aGraphic.Selected = True Then
                  aGraphic.Symbol = CType(theSelectedSimpleFillSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                Else
                  aGraphic.Symbol = CType(theUnSelectedSimpleFillSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                End If
              Next
              
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphic.SetZIndex(System.Int32)">
            <summary>
            Sets the Z-Index (or stack order) of the Graphic in the GraphicCollection.
            </summary>
            <remarks>
            <para>
            A Z-Index is an internal property of a Graphic in a 
            <see cref="T:ESRI.ArcGIS.Client.GraphicCollection">GraphicCollection</see> that defines the 
            stack order of the Graphic. A Graphic with a higher Z-Index value always draws on top of another 
            Graphic with a lower Z-Index value.
            </para>
            <para>
            By default all Graphic objects in a GraphicCollecton have a Z-Index value of zero (0) unless 
            specifically set in either code-behind or XAML. 
            </para>
            <para>
            If no Z-Index value has ever been set, Graphics are drawn on the Map in the order that they 
            are created in code-behind or XAML. This means the first Graphic in the GraphicCollection 
            is drawn first and the process repeats itself until the last Graphic in the GraphicCollection 
            is draw.
            </para>
            <para>
            Do not confuse the Z-Index with another common GIS term: <b>Z-Value</b>. A Z-Value in an elevation 
            or terrain model means elevation. In other kinds of surface models a Z-Value could represent 
            density or quantify of a particular attribute.  
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the button to draw some Graphics in the Map. The Graphics will have Z-Index values assigned. 
            Each Graphic will be rendered using a TextSymbol that displays its Z-Index value.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Demonstrating changing the Z-Index values to see their effect on display in the Map." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.SetZIndex.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,111,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="483" &gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                         Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer"/&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="64" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" 
                       Width="512" TextWrapping="Wrap" Margin="12,12,0,0" 
                       Text="Click the button to draw some Graphics in the Map. The Graphics will have 
                             Z-Index values assigned. Each Graphic will be rendered using a TextSymbol
                             that displays its Z-Index value." /&gt;
                
              &lt;!-- 
              Add a Button to perform the work. Note: the Click Event handler is wired-up to use 
              code-behind. 
              --&gt;
              &lt;Button Content="Display the Graphics Z-Index values via TextSymbols." Height="23" 
                      HorizontalAlignment="Left" Margin="93,82,0,0" 
                      Name="Button1"  VerticalAlignment="Top" Width="319" Click="Button1_Click"/&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This is the main function will add a new GraphicsLayer to the Map. The GraphicsLayer will contain 
              // Graphics based upon MapPoint geometries. As part of the example code, the Graphics will be assigned
              // Z-Index values. The Z-Index values will be displayed as TextSymbols for ease of viewing.
              
              // Create a new instance of the GraphicsLayer object 
              ESRI.ArcGIS.Client.GraphicsLayer myGraphicsLayer = new ESRI.ArcGIS.Client.GraphicsLayer();
              
              // Add a few graphics to the GraphicsLayer
              myGraphicsLayer.Graphics.Add(MakeGraphic(-7356594.25, 4752385.95, 102100));
              myGraphicsLayer.Graphics.Add(MakeGraphic(5468910.57, 1875915.58, 102100));
              myGraphicsLayer.Graphics.Add(MakeGraphic(-1558708.66, -326382.05, 102100));
              myGraphicsLayer.Graphics.Add(MakeGraphic(8614958.43, -4191639.11, 102100));
              
              // Assign some Z-Index values to the Graphics.
              AssignZIndexValues(myGraphicsLayer);
              
              // Assign a TextSymbol to the Graphics that use the Z-Index values.
              AssignTextSymbol(myGraphicsLayer);
              
              // Add the GraphicsLayer to the Layers collection of the Map (this will automatically cause a refresh 
              // of the Map). 
              Map1.Layers.Add(myGraphicsLayer);
            }
            
            public object MakeGraphic(double X, double Y, int SR)
            {
              // This function constructs a new Graphic. Note: the symbology has not been defined at this point.
              
              // Create a SpatialReference for the Graphic.
              ESRI.ArcGIS.Client.Geometry.SpatialReference aSpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(SR);
              
              // Create a MapPoint object and set its SpatialReference and coordinate (X,Y) information. 
              ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint = new ESRI.ArcGIS.Client.Geometry.MapPoint(X, Y, aSpatialReference);
              
              // Create a new instance of one Graphic and assigen its Geometry.
              ESRI.ArcGIS.Client.Graphic aGraphic = new ESRI.ArcGIS.Client.Graphic();
              aGraphic.Geometry = (ESRI.ArcGIS.Client.Geometry.Geometry)aMapPoint;
              
              // Return the created Graphic.
              return aGraphic;
            }
              
            public void AssignZIndexValues(ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer)
            {
              // This function set the Z Index value in the same order as the Graphics in the GraphicsLayer. 
              
              // Get the GraphicCollection from the GraphicsLayer.
              ESRI.ArcGIS.Client.GraphicCollection theGraphicCollection = theGraphicsLayer.Graphics;
              
              // Create a counter.
              int myindex = 0;
              
              // Loop through each Graphic in the GraphicCollection
              foreach (ESRI.ArcGIS.Client.Graphic aGraphic in theGraphicCollection)
              {
                // Set the Z Index value by the counter.
                aGraphic.SetZIndex(myindex);
                
                // Incriment the counter.
                myindex = myindex + 1;
              }
            }
            
            public void AssignTextSymbol(ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer)
            {
              // This function assigns a TextSymbol to the Graphics in the GraphicsLayer. The TextSymbol.Text
              // Property uses the existing Graphics Z-Index value.
              
              // Get the GraphicCollection from the GraphicsLayer.
              ESRI.ArcGIS.Client.GraphicCollection theGraphicCollection = theGraphicsLayer.Graphics;
              
              // Loop through each Graphic in the GraphicCollection
              foreach (ESRI.ArcGIS.Client.Graphic aGraphic in theGraphicCollection)
              {
                // Create a new TextSymbol and define its look. The strings used to define the FontFamily can be
                // found in the following MSDN documentation:
                // http://msdn.microsoft.com/en-us/library/cc189010(v=VS.95).aspx
                ESRI.ArcGIS.Client.Symbols.TextSymbol aTextSymbol = new ESRI.ArcGIS.Client.Symbols.TextSymbol();
                aTextSymbol.FontFamily = new FontFamily("Arial");
                aTextSymbol.FontSize = 20;
                aTextSymbol.Foreground = new System.Windows.Media.SolidColorBrush(Colors.Red);
                
                // Set the TextSymbol.Text Property to the Z-Index value that was assigend previosuly.
                aTextSymbol.Text = aGraphic.GetZIndex;
                
                // Assign the TextSymbol as the Graphic.Symbol as this was not previously done.
                aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)aTextSymbol;
              }
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' This is the main function will add a new GraphicsLayer to the Map. The GraphicsLayer will contain 
              ' Graphics based upon MapPoint geometries. As part of the example code, the Graphics will be assigned
              ' Z-Index values. The Z-Index values will be displayed as TextSymbols for ease of viewing.
              
              ' Create a new instance of the GraphicsLayer object 
              Dim myGraphicsLayer As New ESRI.ArcGIS.Client.GraphicsLayer
              
              ' Add a few graphics to the GraphicsLayer
              myGraphicsLayer.Graphics.Add(MakeGraphic(-7356594.25, 4752385.95, 102100))
              myGraphicsLayer.Graphics.Add(MakeGraphic(5468910.57, 1875915.58, 102100))
              myGraphicsLayer.Graphics.Add(MakeGraphic(-1558708.66, -326382.05, 102100))
              myGraphicsLayer.Graphics.Add(MakeGraphic(8614958.43, -4191639.11, 102100))
              
              ' Assign some Z-Index values to the Graphics.
              AssignZIndexValues(myGraphicsLayer)
              
              ' Assign a TextSymbol to the Graphics that use the Z-Index values.
              AssignTextSymbol(myGraphicsLayer)
              
              ' Add the GraphicsLayer to the Layers collection of the Map (this will automatically cause a refresh of the Map). 
              Map1.Layers.Add(myGraphicsLayer)
              
            End Sub
              
            Public Function MakeGraphic(ByVal X As Double, ByVal Y As Double, ByVal SR As Integer)
              
              ' This function constructs a new Graphic. Note: the symbology has not been defined at this point.
              
              ' Create a SpatialReference for the Graphic.
              Dim aSpatialReference As New ESRI.ArcGIS.Client.Geometry.SpatialReference(SR)
              
              ' Create a MapPoint object and set its SpatialReference and coordinate (X,Y) information. 
              Dim aMapPoint As New ESRI.ArcGIS.Client.Geometry.MapPoint(X, Y, aSpatialReference)
              
              ' Create a new instance of one Graphic and assigen its Geometry.
              Dim aGraphic As New ESRI.ArcGIS.Client.Graphic
              aGraphic.Geometry = CType(aMapPoint, ESRI.ArcGIS.Client.Geometry.Geometry)
              
              ' Return the created Graphic.
              Return aGraphic
              
            End Function
              
            Public Sub AssignZIndexValues(ByVal theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer)
              
              ' This function set the Z Index value in the same order as the Graphics in the GraphicsLayer. 
              
              ' Get the GraphicCollection from the GraphicsLayer.
              Dim theGraphicCollection As ESRI.ArcGIS.Client.GraphicCollection = theGraphicsLayer.Graphics
              
              ' Create a counter.
              Dim myindex As Integer = 0
              
              ' Loop through each Graphic in the GraphicCollection
              For Each aGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicCollection
                
                ' Set the Z Index value by the counter.
                aGraphic.SetZIndex(myindex)
                
                ' Incriment the counter.
                myindex = myindex + 1
                
              Next
              
            End Sub
              
            Public Sub AssignTextSymbol(ByVal theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer)
              
              ' This function assigns a TextSymbol to the Graphics in the GraphicsLayer. The TextSymbol.Text
              ' Property uses the existing Graphics Z-Index value.
              
              ' Get the GraphicCollection from the GraphicsLayer.
              Dim theGraphicCollection As ESRI.ArcGIS.Client.GraphicCollection = theGraphicsLayer.Graphics
              
              ' Loop through each Graphic in the GraphicCollection
              For Each aGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicCollection
                
                ' Create a new TextSymbol and define its look. The strings used to define the FontFamily can be
                ' found in the following MSDN documentation:
                ' http://msdn.microsoft.com/en-us/library/cc189010(v=VS.95).aspx
                Dim aTextSymbol As New ESRI.ArcGIS.Client.Symbols.TextSymbol
                aTextSymbol.FontFamily = New FontFamily("Arial")
                aTextSymbol.FontSize = 20
                aTextSymbol.Foreground = New System.Windows.Media.SolidColorBrush(Colors.Red)
                
                ' Set the TextSymbol.Text Property to the Z-Index value that was assigend previosuly.
                aTextSymbol.Text = aGraphic.GetZIndex
                
                ' Assign the TextSymbol as the Graphic.Symbol as this was not previously done.
                aGraphic.Symbol = CType(aTextSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                
              Next
              
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphic.GetZIndex">
            <summary>
            Gets the Z-Index (or stack order) of the Graphic in the GraphicCollection.
            </summary>
            <remarks>
            <para>
            A Z-Index is an internal property of a Graphic in a 
            <see cref="T:ESRI.ArcGIS.Client.GraphicCollection">GraphicCollection</see> that defines the 
            stack order of the Graphic. A Graphic with a higher Z-Index value always draws on top of another 
            Graphic with a lower Z-Index value.
            </para>
            <para>
            By default all Graphic objects in a GraphicCollecton have a Z-Index value of zero (0) unless 
            specifically set in either code-behind or XAML. 
            </para>
            <para>
            If no Z-Index value has ever been set, Graphics are drawn on the Map in the order that they 
            are created in code-behind or XAML. This means the first Graphic in the GraphicCollection 
            is drawn first and the process repeats itself until the last Graphic in the GraphicCollection 
            is draw.
            </para>
            <para>
            Do not confuse the Z-Index with another common GIS term: <b>Z-Value</b>. A Z-Value in an elevation 
            or terrain model means elevation. In other kinds of surface models a Z-Value could represent 
            density or quantify of a particular attribute.  
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the two buttons to see how setting Z-Index values changes the Graphics visual appearance 
            on the Map. Move the mouse cursor over some of the Graphics to display a MapTip showing Z-Index 
            values.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Demonstrating changing the Z-Index values to see their effect on display in the Map." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.GetZIndex.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Define some Resources that can be used in other parts of the XAML file. --&gt;
              &lt;Grid.Resources&gt;
                
                &lt;!-- Define a SimpleFillSymbol to use as the initial display of the Graphics on the Map. --&gt;
                &lt;esri:SimpleFillSymbol x:Key="HollowFillSymbol" BorderBrush="black" BorderThickness="2" /&gt;
                  
                &lt;!-- 
                Define a SpatialReference object that has the same WKID as the ArcGISTiledMapServiceLayer in
                the Map. This will allow for the Graphics in the GraphicsLayer to line up properly. 
                 --&gt;
                &lt;esri:SpatialReference x:Key="theSpatialReference" WKID="4326"/&gt;
                  
              &lt;/Grid.Resources&gt;
                
              &lt;!-- 
              Add a Map control with an ArcGISTiledMapServiceLayer and a GraphicsLayer. The GraphicsLayer will
              contain several Graphics based upon Polygon geometries (which use the defined SpatialReference) 
              and using the HollowFillSymbol as the default symbolization. 
              --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,111,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="483" &gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                         Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                  
                &lt;!-- 
                It is important to provide the GraphicsLayer with an 'ID' Attribute so to be able to access it
                in the code-behind file. 
                --&gt;
                &lt;esri:GraphicsLayer ID="MyGraphicsLayer" &gt;
                
                  &lt;esri:GraphicsLayer.Graphics&gt;
                  
                    &lt;!-- 
                    Define several Polygon based Graphics using the StaticResources for the Symbol and SpatialReference.
                    --&gt;
                    &lt;esri:Graphic Symbol="{StaticResource HollowFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="-10" Y="10" /&gt;
                            &lt;esri:MapPoint X="-10" Y="45" /&gt;
                            &lt;esri:MapPoint X="25" Y="30" /&gt;
                            &lt;esri:MapPoint X="-10" Y="10" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource HollowFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="10" Y="10" /&gt;
                            &lt;esri:MapPoint X="10" Y="45" /&gt;
                            &lt;esri:MapPoint X="45" Y="30" /&gt;
                            &lt;esri:MapPoint X="10" Y="10" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource HollowFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="30" Y="10" /&gt;
                            &lt;esri:MapPoint X="30" Y="45" /&gt;
                            &lt;esri:MapPoint X="65" Y="30" /&gt;
                            &lt;esri:MapPoint X="30" Y="10" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource HollowFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="50" Y="10" /&gt;
                            &lt;esri:MapPoint X="50" Y="45" /&gt;
                            &lt;esri:MapPoint X="85" Y="30" /&gt;
                            &lt;esri:MapPoint X="50" Y="10" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                  &lt;/esri:GraphicsLayer.Graphics&gt;
                &lt;/esri:GraphicsLayer&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="64" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" 
                       Width="512" TextWrapping="Wrap" Margin="12,12,0,0" 
                       Text="Click the two buttons to see how setting Z-Index values changes the 
                             Graphics visual appearance on the Map. Move the mouse cursor over 
                             some of the Graphics to display a MapTip showing Z-Index values." /&gt;
                
              &lt;!-- 
              Add two Buttons to perform the work. Note: the Click Event handlers are wired-up to use 
              code-behind. 
              --&gt;
              &lt;Button Content="Set Z-Index left to right" Height="23" HorizontalAlignment="Left" Margin="12,82,0,0" 
                      Name="Button1"  VerticalAlignment="Top" Width="235" Click="Button1_Click"/&gt;
              &lt;Button Content="Set Z-Index right to left" Height="23" HorizontalAlignment="Left" Margin="260,82,0,0" 
                      Name="Button2" VerticalAlignment="Top" Width="235" Click="Button2_Click"/&gt;
                  
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function set the Z Index value in the same order as the Graphics in the GraphicsLayer. A MapTip
              // for the Graphic is set up to display the Z index value. The symbology is modified from the intial
              // setting in XAML.
              
              // Get the GraphcsLayer from what was defined in XAML.
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = Map1.Layers["MyGraphicsLayer"];
              
              // Get the GraphicCollection from the GraphicsLayer.
              ESRI.ArcGIS.Client.GraphicCollection theGraphicCollection = theGraphicsLayer.Graphics;
              
              // Create a counter.
              int myindex = 0;
              
              // Loop through each Graphic in the GraphicCollection
              foreach (ESRI.ArcGIS.Client.Graphic aGraphic in theGraphicCollection)
              {
                // Set the Z Index value by the counter.
                aGraphic.SetZIndex(myindex);
                
                // Incriment the counter.
                myindex = myindex + 1;
                
                // Create a new instance of a SimpleFillSymbol and set its Color, BorderBrush, and BorderThickness 
                // Properties and apply it to the Graphic.
                ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol aSimpleFillSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
                aSimpleFillSymbol.Fill = new System.Windows.Media.SolidColorBrush(Colors.Green);
                aSimpleFillSymbol.BorderBrush = new System.Windows.Media.SolidColorBrush(Colors.Yellow);
                aSimpleFillSymbol.BorderThickness = 5;
                aGraphic.Symbol = aSimpleFillSymbol;
                
                // Set up a simple MapTip for the Graphic to display the Z Index value.
                TextBox aTextBox1 = new TextBox();
                aTextBox1.Text = "Z-Index:" + aGraphic.GetZIndex.ToString();
                aTextBox1.Background = new System.Windows.Media.SolidColorBrush(Colors.Yellow);
                aGraphic.MapTip = aTextBox1;
              }
            }
            
            private void Button2_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function set the Z Index value in the reverse order as the Graphics in the GraphicsLayer. A MapTip
              // for the Graphic is set up to display the Z index value. The symbology is modified from the intial
              // setting in XAML.
              
              // Get the GraphcsLayer from what was defined in XAML.
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = Map1.Layers["MyGraphicsLayer"];
              
              // Get the GraphicCollection from the GraphicsLayer.
              ESRI.ArcGIS.Client.GraphicCollection theGraphicCollection = theGraphicsLayer.Graphics;
              
              // Create a counter. Set it to the count of all the Graphics in the GraphicsCollection - 1.
              int myindex = theGraphicCollection.Count - 1;
              
              // Loop through each Graphic in the GraphicCollection
              foreach (ESRI.ArcGIS.Client.Graphic aGraphic in theGraphicCollection)
              {
                // Set the Z Index value by the counter.
                aGraphic.SetZIndex(myindex);
                
                // Decriment the counter.
                myindex = myindex - 1;
                
                // Create a new instance of a SimpleFillSymbol and set its Color, BorderBrush, and BorderThickness 
                // Properties and apply it to the Graphic.
                ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol aSimpleFillSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
                aSimpleFillSymbol.Fill = new System.Windows.Media.SolidColorBrush(Colors.Red);
                aSimpleFillSymbol.BorderBrush = new System.Windows.Media.SolidColorBrush(Colors.Cyan);
                aSimpleFillSymbol.BorderThickness = 5;
                aGraphic.Symbol = aSimpleFillSymbol;
                
                // Set up a simple MapTip for the Graphic to display the Z Index value.
                TextBox aTextBox1 = new TextBox();
                aTextBox1.Text = "Z-Index:" + aGraphic.GetZIndex.ToString();
                aTextBox1.Background = new System.Windows.Media.SolidColorBrush(Colors.Cyan);
                aGraphic.MapTip = aTextBox1;
              }
            }	
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
                
              ' This function set the Z Index value in the same order as the Graphics in the GraphicsLayer. A MapTip
              ' for the Graphic is set up to display the Z index value. The symbology is modified from the intial
              ' setting in XAML.
                
              ' Get the GraphcsLayer from what was defined in XAML.
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer = Map1.Layers("MyGraphicsLayer")
              
              ' Get the GraphicCollection from the GraphicsLayer.
              Dim theGraphicCollection As ESRI.ArcGIS.Client.GraphicCollection = theGraphicsLayer.Graphics
              
              ' Create a counter.
              Dim myindex As Integer = 0
              
              ' Loop through each Graphic in the GraphicCollection
              For Each aGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicCollection
                
                ' Set the Z Index value by the counter.
                aGraphic.SetZIndex(myindex)
                
                ' Incriment the counter.
                myindex = myindex + 1
                
                ' Create a new instance of a SimpleFillSymbol and set its Color, BorderBrush, and BorderThickness 
                ' Properties and apply it to the Graphic.
                Dim aSimpleFillSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
                aSimpleFillSymbol.Fill = New System.Windows.Media.SolidColorBrush(Colors.Green)
                aSimpleFillSymbol.BorderBrush = New System.Windows.Media.SolidColorBrush(Colors.Yellow)
                aSimpleFillSymbol.BorderThickness = 5
                aGraphic.Symbol = aSimpleFillSymbol
                
                ' Set up a simple MapTip for the Graphic to display the Z Index value.
                Dim aTextBox1 As New TextBox
                aTextBox1.Text = "Z-Index:" + aGraphic.GetZIndex.ToString
                aTextBox1.Background = New System.Windows.Media.SolidColorBrush(Colors.Yellow)
                aGraphic.MapTip = aTextBox1
                
              Next
              
            End Sub
              
            Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' This function set the Z Index value in the reverse order as the Graphics in the GraphicsLayer. A MapTip
              ' for the Graphic is set up to display the Z index value. The symbology is modified from the intial
              ' setting in XAML.
              
              ' Get the GraphcsLayer from what was defined in XAML.
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer = Map1.Layers("MyGraphicsLayer")
              
              ' Get the GraphicCollection from the GraphicsLayer.
              Dim theGraphicCollection As ESRI.ArcGIS.Client.GraphicCollection = theGraphicsLayer.Graphics
              
              ' Create a counter. Set it to the count of all the Graphics in the GraphicCollection - 1.
              Dim myindex As Integer = theGraphicCollection.Count - 1
                
              ' Loop through each Graphic in the GraphicCollection
              For Each aGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicCollection
                
                ' Set the Z Index value by the counter.
                aGraphic.SetZIndex(myindex)
                
                ' Decriment the counter.
                myindex = myindex - 1
                
                ' Create a new instance of a SimpleFillSymbol and set its Color, BorderBrush, and BorderThickness 
                ' Properties and apply it to the Graphic.
                Dim aSimpleFillSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
                aSimpleFillSymbol.Fill = New System.Windows.Media.SolidColorBrush(Colors.Red)
                aSimpleFillSymbol.BorderBrush = New System.Windows.Media.SolidColorBrush(Colors.Cyan)
                aSimpleFillSymbol.BorderThickness = 5
                aGraphic.Symbol = aSimpleFillSymbol
                
                ' Set up a simple MapTip for the Graphic to display the Z Index value.
                Dim aTextBox1 As New TextBox
                aTextBox1.Text = "Z-Index:" + aGraphic.GetZIndex.ToString
                aTextBox1.Background = New System.Windows.Media.SolidColorBrush(Colors.Cyan)
                aGraphic.MapTip = aTextBox1
                
              Next
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphic.Geometry">
            <summary>
            Gets or sets the <see cref="T:ESRI.ArcGIS.Client.Geometry.Geometry">Geometry</see> used 
            for positioning the Graphic in coordinate space.
            </summary>
            <remarks>
            <para>
            In order to display a Graphic on the Map, a Symbol must be associated with each Graphic. A Graphic’s 
            Geometry Property must match the Symbol type. 
            This means a <see cref="T:ESRI.ArcGIS.Client.Symbols.MarkerSymbol"> MarkerSymbol</see> for a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint">MapPoint</see> or 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.MultiPoint">MultiPoint</see>, 
            <see cref="T:ESRI.ArcGIS.Client.Symbols.FillSymbol">FillSymbol</see> for a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon">Polygon</see>, and 
            <see cref="T:ESRI.ArcGIS.Client.Symbols.LineSymbol">LineSymbol</see> for a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline">Polyline</see>. 
            </para>
            <para>
            It is a good practice to provide a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> for the 
            Geometry that is applied to the Graphic. Some operations like the various Geometry service functions 
            must have a valid SpatialReference in order to work.
            </para>
            <para>
            <b>Special consideration for Graphics based upon Polygon geometries:</b> In order to have the correct 
            exterior <see cref="P:ESRI.ArcGIS.Client.Symbols.FillSymbol.BorderBrush">FillSymbol.BorderBrush</see> 
            Symbology associated with a Polygon Graphic, it is important that the 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.PointCollection">PointCollection</see> of MapPoints 
            that are used to define the <see cref="P:ESRI.ArcGIS.Client.Geometry.Polygon.Rings">Rings</see> for a 
            Polygon close back on itself. This means that the first and last MapPoint vertices must have the same 
            coordinate values. If the first and last MapPoint vertices are not the same the Polygon graphic will 
            close back on itself automatically but the ending segment will not have any symbology for the exterior 
            BorderBrush displayed. See the following screen shot for a visual example:
            </para>
            <para>
            <img border="0" alt="Demonstrating both an improperly and properly closed Polygon Ring Graphic." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic_UnclosedGraphicPolygon.png"/>
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the button several times to move the MapPoint Graphics randomly around on the screen. 
            The Graphics were originally defined in XAML and the movement occurs from changing the Graphics 
            Geometry in the code-behind file.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Move Graphics around in the GraphicsLayer via changing its Geometry values." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.Geometry.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Define a SimpleMarkerSymbol and a SpatialReference in the Resources section of the XAML file. --&gt;
              &lt;Grid.Resources&gt;
              
                &lt;!-- 
                Tip: Use x:Key Attribute and not x:Name Attribute for defining the name of the Resources so that
                you can access the Resource in the code-behind file. 
                --&gt;
                
                &lt;!-- The 'RedMarkerSymbol' will be used as the default symbol for the Graphics. --&gt;
                &lt;esri:SimpleMarkerSymbol x:Key="RedMarkerSymbol" Color="Red"/&gt;
                
                &lt;!-- 
                Define a SpatialReference object that has the same WKID as the ArcGISTiledMapServiceLayer in
                the Map. This will allow for the Graphics in the GraphicsLayer to line up properly. 
                --&gt;
                &lt;esri:SpatialReference x:Key="theSpatialReference" WKID="4326"/&gt;
                
              &lt;/Grid.Resources&gt;
              
              &lt;!-- 
              Add a Map control with an ArcGISTiledMapServiceLayer and a GraphicsLayer. The GraphicsLayer will
              contain several Graphics based upon MapPoint geometries (which use the defined SpatialReference) 
              and using the RedMarkerSymbol as the default symbolization. 
              --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="14,94,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="483" &gt;
                      
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                             Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                  
                &lt;!-- 
                It is important to provide the GraphicsLayer with an 'ID' Attribute so to be able to access it
                in the code-behind file. 
                --&gt;
                &lt;esri:GraphicsLayer ID="MyGraphicsLayer" &gt;
                  
                  &lt;esri:GraphicsLayer.Graphics&gt;
                    
                    &lt;!-- Each Graphic added to the GraphicsLayer will have it's symbology and geometry defined. --&gt;
                                
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}"&gt;
                      &lt;esri:MapPoint X="-10" Y="-20" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                      
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}"&gt;
                      &lt;esri:MapPoint X="-5" Y="0" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}"&gt;
                      &lt;esri:MapPoint X="-25" Y="10" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                  &lt;/esri:GraphicsLayer.Graphics&gt;
                &lt;/esri:GraphicsLayer&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button to perform the work. Note the Click Event handler is wired-up to use code-behind. --&gt;
              &lt;Button Content="Move the MapPoint by a random number between (-5 and + 5) in the X and Y directions" 
                      Height="23" HorizontalAlignment="Left" Margin="5,65,0,0" Name="Button1" 
                      VerticalAlignment="Top" Width="499" Click="Button1_Click"/&gt;
                
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="47" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="616" 
                         TextWrapping="Wrap" Margin="12,12,0,0" 
                         Text="Click the button several times to move the MapPoint Graphics randomly around on the screen. 
                         The Graphics were originally defined in XAML and the movement occurs from changing the 
                         Graphics Geometry in the code-behind file." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Move the MapPoint Graphic by a random number between (-5 and + 5) in the X and Y directions
              
              // Obtain the GraphicsLayer that was defined in XAML. 
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = null;
              theGraphicsLayer = (ESRI.ArcGIS.Client.GraphicsLayer)(Map1.Layers["MyGraphicsLayer"]);
               
              // Get the GraphicCollection from the GraphicsLayer
              ESRI.ArcGIS.Client.GraphicCollection theGraphicsCollection = theGraphicsLayer.Graphics;
              
              // Loop through all of the individual Graphic objects in the GraphicsCollection.
              foreach (ESRI.ArcGIS.Client.Graphic aGraphic in theGraphicsCollection)
              {
                // Get the Geometry from the Graphic and cast it to a MapPoint.
                ESRI.ArcGIS.Client.Geometry.MapPoint oldMapPoint = null;
                oldMapPoint = (ESRI.ArcGIS.Client.Geometry.MapPoint)aGraphic.Geometry;
                
                // Generate a random number for the X and Y coordinates (bounded between 0 and 5).
                System.Random aRandom = new System.Random();
                int aRandomNumberX = aRandom.Next(0, 5);
                int aRandomNumberY = aRandom.Next(0, 5);
                
                // Generate a random number for positive and negative values (i.e either -1 or +1)
                float makePositiveorNegative = (float)(Microsoft.VisualBasic.VBMath.Rnd(3));
                int theNegator = 0;
                if (makePositiveorNegative &gt; 0.5)
                {
                  theNegator = 1;
                }
                else
                {
                  theNegator = -1;
                }
                
                // Create a new MapPoint using the cooordinates from the original Graphics MapPoint that
                // is offset by a random number between (-5 and +5)
                ESRI.ArcGIS.Client.Geometry.MapPoint newMapPoint = new ESRI.ArcGIS.Client.Geometry.MapPoint();
                newMapPoint.X = oldMapPoint.X + (theNegator * aRandomNumberX);
                newMapPoint.Y = oldMapPoint.Y + (theNegator * aRandomNumberY);
                
                // Set the Geometry of the Graphic to the new coordinates. By changing the Graphic's Geometry
                // it automatically moves on the Map Control (no Map refresh is required).
                aGraphic.Geometry = newMapPoint;
              }
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Move the MapPoint Graphic by a random number between (-5 and + 5) in the X and Y directions
              
              ' Obtain the GraphicsLayer that was defined in XAML. 
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer
              theGraphicsLayer = CType(Map1.Layers("MyGraphicsLayer"), ESRI.ArcGIS.Client.GraphicsLayer)
              
              ' Get the GraphicCollection from the GraphicsLayer
              Dim theGraphicsCollection As ESRI.ArcGIS.Client.GraphicCollection = theGraphicsLayer.Graphics
              
              ' Loop through all of the individual Graphic objects in the GraphicsCollection.
              Dim aGraphic As ESRI.ArcGIS.Client.Graphic
              For Each aGraphic In theGraphicsCollection
                
                ' Get the Geometry from the Graphic and cast it to a MapPoint.
                Dim oldMapPoint As ESRI.ArcGIS.Client.Geometry.MapPoint
                oldMapPoint = CType(aGraphic.Geometry, ESRI.ArcGIS.Client.Geometry.MapPoint)
                
                ' Generate a random number for the X and Y coordinates (bounded between 0 and 5).
                Dim aRandom As New System.Random
                Dim aRandomNumberX As Integer = aRandom.Next(0, 5)
                Dim aRandomNumberY As Integer = aRandom.Next(0, 5)
                
                ' Generate a random number for positive and negative values (i.e either -1 or +1)
                Dim makePositiveorNegative As Single = Rnd(3)
                Dim theNegator As Integer
                If makePositiveorNegative &gt; 0.5 Then
                  theNegator = 1
                Else
                  theNegator = -1
                End If
                
                ' Create a new MapPoint using the coordinates from the original Graphics MapPoint that
                ' is offset by a random number between (-5 and +5)
                Dim newMapPoint As New ESRI.ArcGIS.Client.Geometry.MapPoint
                newMapPoint.X = oldMapPoint.X + (theNegator * aRandomNumberX)
                newMapPoint.Y = oldMapPoint.Y + (theNegator * aRandomNumberY)
                
                ' Set the Geometry of the Graphic to the new coordinates. By changing the Graphic's Geometry
                ' it automatically moves on the Map Control (no Map refresh is required).
                aGraphic.Geometry = newMapPoint
                
              Next
              
            End Sub
            </code>
            </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Graphic.GeometryInstanceChanged">
            <summary>
            Raised when the geometry instance changes
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphic.Symbol">
            <summary>
            Gets or sets the <see cref="T:ESRI.ArcGIS.Client.Symbols.Symbol">Symbol</see> used for rendering the Graphic.
            </summary>
            <remarks>
            <para>
            In order to display a Graphic on the Map, a Symbol must be associated with each Graphic. A Graphic’s 
            <see cref="P:ESRI.ArcGIS.Client.Graphic.Geometry">Geometry</see> Property must match the Symbol type. 
            This means a <see cref="T:ESRI.ArcGIS.Client.Symbols.MarkerSymbol"> MarkerSymbol</see> for a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint">MapPoint</see> or 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.MultiPoint">MultiPoint</see>, 
            <see cref="T:ESRI.ArcGIS.Client.Symbols.FillSymbol">FillSymbol</see> for a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon">Polygon</see>, and 
            <see cref="T:ESRI.ArcGIS.Client.Symbols.LineSymbol">LineSymbol</see> for a 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline">Polyline</see>. 
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the button to select every other Graphic and then change the Symbol of the selected Graphics to 
            one that was defined in XAML.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Selecting every other Graphic and changing its Symbol." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.Symbol.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Define two SimpleMarkerSymbol's and a SpatialReference in the Resources section of the XAML file. --&gt;
              &lt;Grid.Resources&gt;
              
                &lt;!-- Tip: Use x:Key Attribute and not x:Name Attribute for defining the name of the Resources so that
                     you can access the Resource in the code-behind file. --&gt;
              
                &lt;!-- The 'RedMarkerSymbol' will be used as the default symbol for the Graphics. --&gt;
                &lt;esri:SimpleMarkerSymbol x:Key="RedMarkerSymbol" Color="Red" Size="12" Style="Circle" /&gt;
                
                &lt;!-- The 'SelectedMarkerSymbol' will be used in the code-behind file to change the symbology
                     for the Selected Graphics. --&gt;
                &lt;esri:SimpleMarkerSymbol x:Key="SelectedMarkerSymbol" Color="Black" Size="14" Style="Diamond" /&gt;
                
                &lt;!-- Define a SpatialReference object that has the same WKID as the ArcGISTiledMapServiceLayer in
                     the Map. This will allow for the Graphics in the GraphicsLayer to line up properly. --&gt;
                &lt;esri:SpatialReference x:Key="theSpatialReference" WKID="102100"/&gt;
                
              &lt;/Grid.Resources&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer and a GraphicsLayer. The GraphicsLayer will
                   contain several Graphics based upon MapPoint geometries (which use the defined SpatialReference) 
                   and using the RedMarkerSymbol as the default symbolization. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,108,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="483" &gt;
                    
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                               Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer" /&gt;
                      
                &lt;!-- It is important to provide the GraphicsLayer with an 'ID' Attribute so to be able to access it
                     in the code-behind file. --&gt;
                &lt;esri:GraphicsLayer ID="MyGraphicsLayer" &gt;
                    
                  &lt;esri:GraphicsLayer.Graphics&gt;
                        
                    &lt;!-- Each Graphic added to the GraphicsLayer will have it's symbology and geometry defined. --&gt;
                              
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}" &gt;
                      &lt;esri:MapPoint X="-7356594.25" Y="4752385.95" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}" &gt;
                      &lt;esri:MapPoint X="3654893.89" Y="7718746.02" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}" &gt;
                      &lt;esri:MapPoint X="6801033.36" Y="10325547.30" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}" &gt;
                      &lt;esri:MapPoint X="-5468910.57" Y="1741081.03" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}" &gt;
                      &lt;esri:MapPoint X="-4614958.43" Y="-326382.05" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                  &lt;/esri:GraphicsLayer.Graphics&gt;
                      
                &lt;/esri:GraphicsLayer&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="40" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" 
                         Width="483" TextWrapping="Wrap" Margin="12,12,0,0" 
                         Text="Click the button to select every other Graphic and then change the Symbol of the 
                         selected Graphics to one that was defined in XAML." /&gt;
                
              &lt;!-- Add a button to perform the work. --&gt;
              &lt;Button Content="Select every other Graphic and change its Symbology" Height="23" HorizontalAlignment="Left" 
                      Margin="91,79,0,0" Name="Button1" VerticalAlignment="Top" Width="335" Click="Button1_Click"/&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Obtain the GraphicsLayer that was defined in XAML. 
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = null;
              theGraphicsLayer = (ESRI.ArcGIS.Client.GraphicsLayer)(Map1.Layers["MyGraphicsLayer"]);
              
              // Get the GraphicCollection from the GraphicsLayer
              ESRI.ArcGIS.Client.GraphicCollection theGraphicsCollection = theGraphicsLayer.Graphics;
              
              // Call a function to select every other Graphic
              SelectEveryOtherGraphic(theGraphicsCollection);
              
              // Call a function to change the Symbology of the selected Graphics
              RenderSelectedGraphicsDifferently(theGraphicsCollection);
            }
            
            public void SelectEveryOtherGraphic(ESRI.ArcGIS.Client.GraphicCollection theGraphicsCollection)
            {
              // Select every other Graphic in the GraphicsCollection
              for (int i = 0; i &lt; theGraphicsCollection.Count; i += 2)
                theGraphicsCollection(i).Selected = true;
            }
            
            public void RenderSelectedGraphicsDifferently(ESRI.ArcGIS.Client.GraphicCollection theGraphicsCollection)
            {
              // Render the Selected Graphics in the GraphicsCollection with a different Symbol that was defined in XAML.
              
              // Obtain the SimpleMarkerSymbol that was defined in XAML.
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol theSelectedMarkerSymbol = null;
              theSelectedMarkerSymbol = (ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol)(LayoutRoot.Resources["SelectedMarkerSymbol"]);
              
              // Loop through all of the individual Graphic objects in the GraphicsCollection
              foreach (ESRI.ArcGIS.Client.Graphic aGraphic in theGraphicsCollection)
              {
                // If the Graphic was Selected then change its symbology.
                if (aGraphic.Selected == true)
                {
                  aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)theSelectedMarkerSymbol;
                }
              }
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Obtain the GraphicsLayer that was defined in XAML. 
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer
              theGraphicsLayer = CType(Map1.Layers("MyGraphicsLayer"), ESRI.ArcGIS.Client.GraphicsLayer)
              
              ' Get the GraphicCollection from the GraphicsLayer
              Dim theGraphicsCollection As ESRI.ArcGIS.Client.GraphicCollection = theGraphicsLayer.Graphics
              
              ' Call a function to select every other Graphic
              SelectEveryOtherGraphic(theGraphicsCollection)
              
              ' Call a function to change the Symbology of the selected Graphics
              RenderSelectedGraphicsDifferently(theGraphicsCollection)
              
            End Sub
              
            Public Sub SelectEveryOtherGraphic(ByVal theGraphicsCollection As ESRI.ArcGIS.Client.GraphicCollection)
              
              ' Select every other Graphic in the GraphicsCollection
              For i As Integer = 0 To theGraphicsCollection.Count - 1 Step 2
                theGraphicsCollection(i).Selected = True
              Next i
              
            End Sub
            
            Public Sub RenderSelectedGraphicsDifferently(ByVal theGraphicsCollection As ESRI.ArcGIS.Client.GraphicCollection)
              
              ' Render the Selected Graphics in the GraphicsCollection with a different Symbol that was defined in XAML.
              
              ' Obtain the SimpleMarkerSymbol that was defined in XAML.
              Dim theSelectedMarkerSymbol As ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              theSelectedMarkerSymbol = CType(LayoutRoot.Resources("SelectedMarkerSymbol"), ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol)
              
              ' Loop through all of the individual Graphic objects in the GraphicsCollection
              Dim aGraphic As ESRI.ArcGIS.Client.Graphic
              For Each aGraphic In theGraphicsCollection
                
                ' If the Graphic was Selected then change its symbology.
                If aGraphic.Selected = True Then
                  aGraphic.Symbol = CType(theSelectedMarkerSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                End If
                
              Next
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphic.Attributes">
            <summary>
            Gets or sets the Dictionary that contains attribute information about a Graphic.
            </summary>
            <remarks>
            <para>
            An Attribute is data (typically textual) that describes the geographic characteristics of a feature. 
            There are many useful purposes for having attributes associated with a Graphic, including:
            <list type="bullet">
              <item>
              Provide a basis for performing symbolic rendering. Example: coloring State polygon Graphics 
              differently based upon population (see the code example in this document).
              </item>
              <item>
              Provide information in a MapTip so that users can see information when they hover the 
              mouse/cursor/pointer over the Graphic. (see the Graphic.MapTip for a code example).
              </item>
              <item>
              Provide a source for displaying information in a Table. This is especially helpful when selecting 
              a record in the table automatically highlights the Graphic feature in the Map (see the interactive 
              SDK sample 
              <a href="http://help.arcgis.com/en/webapi/silverlight/samples/start.htm #Find" target="_top">Find</a>). 
              And conversely, selecting a Graphic feature in the Map automatically highlights the attributes for 
              a particular record in the table.
              </item>
              <item>
              Provide a mechanism for selecting/filtering Graphics based upon the result of a Task (Query, 
              Identify, Find, Address locator, Geometry, Geoprocessing, and Route).
              </item>
            </list>
            </para>
            <para>
            Adding new Attribute values to a Graphic is performed in the code-behind (see the code example for 
            Graphic.MapTip). As of the Silverlight version 4 runtime, it is not possible to add Attributes to a
            Graphic in XAML due to the lack of support for the KeyValuePair data types. The Graphic.Attributes
            Property makes use of IDictionary(OF String, Object) which is a type of KeyValuePair. 
            </para>
            <para>
            Attribute information can be provided automatically as part of a returned FeatureSet from a QueryTask 
            operation of an ArcGIS Server map service (see the code example in this document).
            </para>
            <para>
            The Graphic.Attributes gets a ReadOnly IDictionary(Of String, Object) object. This object is used to 
            store the a collection of <b>key/value</b> pairs. The <b>key</b> is the name of the attribute. The 
            <b>value</b> is the attribute information. When a Graphic is created, the IDictionary(Of String, Object) 
            object is also created. Although the Graphic.Attributes Property is ReadOnly, meaning you can only get 
            the IDictionary(Of String, Object) object, you can use the regular IDictionary Members to like: Add, 
            Clear, Remove, etc. to define how the IDictionary behaves. NOTE: You cannot create an new instance 
            of the IDictionary(Of String, Object) object and set it to the Graphics.Attributes Property, use the 
            IDictionary.Add Property instead.
            </para>
            <para>
            <b>Tip:</b> Starting with Silverlight version 4, developers can perform 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.frameworkelement.datacontext(v=vs.95).aspx" target="_blank">DataContext</a> 
            binding directly to Dictionary Keys by specifying the Key name in brackets. Therefore when binding the 
            DataContext of a FrameworkElement to a specific attribute name in the Graphic.Attributes (which is a 
            Dictionary), encase the attribute name in square brackets (i.e. []). Example: 
            <b>&lt;TextBlock Text="{Binding [Age]}" /&gt;</b> or the slightly more verbose version 
            <b>&lt;TextBlock Text="{Binding Path=[Age]}" /&gt;</b>).
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the button to perform a QueryTask web service. The function will iterate over the resulting 
            FeatureSet from the web service to symbolize the Graphics based upon Attribute values. States 
            populations will be displayed in Red (high), Yellow (medium) and Blue (low).
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Draw Graphics symbolized based upon Attribute values from a FeatureData Service" src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.Attributes.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- 
              Add a Map control with an ArcGISTiledMapServiceLayer. Set the Map.Extent to that of the Continental United 
              States using the Spatial Reference WKT of 102100 coordinate values.
              --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,136,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="518" 
                        Extent="-14319453,2145784,-6782898,6772471"&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer"
                               Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer" /&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="72" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="503" 
                         TextWrapping="Wrap" Margin="12,29,0,0" 
                         Text="Click the button to perform a QueryTask web service. The function will iterate over the 
                         resulting FeatureSet from the web service to symbolize the Graphics based upon Attribute
                         values. States populations will be displayed in Red (high), Yellow (medium) and Blue (low)." /&gt;
              
              &lt;!-- Add a Button to perform the work. Note the Click Event handler is wired-up to use code-behind. --&gt;
              &lt;Button Content="Draw Graphics symbolized based upon Attribute values from a FeatureData Service" 
                      Height="23" HorizontalAlignment="Left" Margin="12,107,0,0" Name="Button2" 
                      VerticalAlignment="Top" Width="518" Click="Button2_Click"/&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button2_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function will execute a QueryTask Asynchronously to obtain all of the US States from an ArcGIS Server 
              // web service.
              
              // When performing a ESRI.ArcGIS.Client.Tasks.Query use the Query.Geometry Property for the  web service that 
              // corresponds to the dataset being queried 
              // (i.e. http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/5).
              // In this example, the web service is based upon Spatial Reference WKT of 4269 which uses standard latitude 
              // longitude spherical coordinates (i.e. -180 to 180). 
              // The Query.OutSpatialReference Property defines what the returned FeatureSet from the web service will be in. 
              // In this example the data will be projected to Spatial Reference WKT of 102100 which uses a Web Mercator 
              // Auxiliary Sphere.
              ESRI.ArcGIS.Client.Tasks.Query query = new ESRI.ArcGIS.Client.Tasks.Query() With;
              { 
                .Geometry = new ESRI.ArcGIS.Client.Geometry.Envelope(-180, 0, 0, 90), 
                .OutSpatialReference == Map1.SpatialReference 
              };
              
              // Specify that all of the Attributes from the web service FeatureSet will be returned.
              query.OutFields.Add("*");
              
              // Define the QueryTask by specifying the URL of the FeatureLayer to be queried.
              ESRI.ArcGIS.Client.Tasks.QueryTask queryTask = new ESRI.ArcGIS.Client.Tasks.QueryTask("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/5");
              
              // Wire up an Event Handler that will execute when the Query Task is completed from the web service. 
              queryTask.ExecuteCompleted += StatesGraphicsLayerQueryTask_ExecuteCompleted;
              
              // Execute the QueryTask Asymchronously.
              queryTask.ExecuteAsync(query);
            }
            
            private void StatesGraphicsLayerQueryTask_ExecuteCompleted(object sender, ESRI.ArcGIS.Client.Tasks.QueryEventArgs queryArgs)
            {
              // This function executes after the QueryTask has completed. If there is a valid FeatureSet returned then 
              // symbolize the US States based upon the Attribute of "POP2007" (i.e. Population count for the year 2007).
              
              // Check to ensure we have valid return results.
              if (queryArgs.FeatureSet == null)
              {
              return;
              }
              
              // Obtain a FeatureSet from the queryArgs returned from the web service.
              ESRI.ArcGIS.Client.Tasks.FeatureSet resultFeatureSet = queryArgs.FeatureSet;
              
              // Create three different SimpleFillSymbols to visually display what US States have High, Medium, and
              // Low populations.
              ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol aSimpleFillSymbol_High = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
              System.Windows.Media.SolidColorBrush aSolidColorBrush_Red = new System.Windows.Media.SolidColorBrush(Colors.Red);
              aSolidColorBrush_Red.Opacity = 0.5;
              aSimpleFillSymbol_High.Fill = aSolidColorBrush_Red;
              
              ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol aSimpleFillSymbol_Medium = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
              System.Windows.Media.SolidColorBrush aSolidColorBrush_Yellow = new System.Windows.Media.SolidColorBrush(Colors.Yellow);
              aSolidColorBrush_Yellow.Opacity = 0.5;
              aSimpleFillSymbol_Medium.Fill = aSolidColorBrush_Yellow;
              
              ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol aSimpleFillSymbol_Low = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
              System.Windows.Media.SolidColorBrush aSolidColorBrush_Blue = new System.Windows.Media.SolidColorBrush(Colors.Blue);
              aSolidColorBrush_Blue.Opacity = 0.5;
              aSimpleFillSymbol_Low.Fill = aSolidColorBrush_Blue;
              
              // Create a new GraphicsLayer to add to the Map Control. The individual Graphic objects will come
              // from the returned FeatureSet.
              ESRI.ArcGIS.Client.GraphicsLayer myGraphicsLayer = new ESRI.ArcGIS.Client.GraphicsLayer();
              
              // Ensure the we have a FeatureSet with data.
              if (resultFeatureSet != null &amp; resultFeatureSet.Features.Count > 0)
              {
                // Iterate over each feature (which is a Graphic object) in the FeatureSet.
                foreach (ESRI.ArcGIS.Client.Graphic graphicFeature in resultFeatureSet.Features)
                {
                  // Determine which US State based upon their Attribute "POP2007" value will be assigned a specific 
                  // SimpleFillSymbol. 
                  if (graphicFeature.Attributes["POP2007"] > 15000000)
                  {
                    graphicFeature.Symbol = aSimpleFillSymbol_High as ESRI.ArcGIS.Client.Symbols.Symbol;
                  }
                  else if (graphicFeature.Attributes["POP2007"] > 5000000)
                  {
                    graphicFeature.Symbol = aSimpleFillSymbol_Medium as ESRI.ArcGIS.Client.Symbols.Symbol;
                  }
                  else
                  {
                    graphicFeature.Symbol = aSimpleFillSymbol_Low as ESRI.ArcGIS.Client.Symbols.Symbol;
                  }
                  
                  // // Note: there are numerous graphicFeature.Attribute items that can be used for symbolization.
                  // // As an experiment try uncommenting the next few lines of code to see all of the different 
                  // // types of attribute information available.
                  //Text.StringBuilder myStringBuilderDisplayText = new Text.StringBuilder();
                  //System.Collections.Generic.IDictionary&lt;string, object&gt; allAttributes = graphicFeature.Attributes;
                  //foreach (string oneKey in allAttributes.Keys)
                  //{
                  //  object theValue = allAttributes[oneKey];
                  //  myStringBuilderDisplayText.Append(oneKey + ": " + theValue.ToString() + Environment.NewLine);
                  //}
                  //MessageBox.Show(myStringBuilderDisplayText.ToString());
                  
                  // Add the Graphic to the GraphicsLayer
                  myGraphicsLayer.Graphics.Add(graphicFeature);
                }
              }
              
              // Add the GraphicsLayer to the Map. It will automatically draw, there is not a need for a refresh.
              Map1.Layers.Add(myGraphicsLayer);
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' This function will execute a QueryTask Asynchronously to obtain all of the US States from an ArcGIS Server 
              ' web service.
              
              ' When performing a ESRI.ArcGIS.Client.Tasks.Query use the Query.Geometry Property for the  web service that 
              ' corresponds to the dataset being queried 
              ' (i.e. http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/5).
              ' In this example, the web service is based upon Spatial Reference WKT of 4269 which uses standard latitude 
              ' longitude spherical coordinates (i.e. -180 to 180). 
              ' The Query.OutSpatialReference Property defines what the returned FeatureSet from the web service will be in. 
              ' In this example the data will be projected to Spatial Reference WKT of 102100 which uses a Web Mercator 
              ' Auxiliary Sphere.
              Dim query As New ESRI.ArcGIS.Client.Tasks.Query() With
              {
                .Geometry = New ESRI.ArcGIS.Client.Geometry.Envelope(-180, 0, 0, 90),
                .OutSpatialReference = Map1.SpatialReference
              }
              
              ' Specify that all of the Attributes from the web service FeatureSet will be returned.
              query.OutFields.Add("*")
              
              ' Define the QueryTask by specifying the URL of the FeatureLayer to be queried.
              Dim queryTask As New ESRI.ArcGIS.Client.Tasks.QueryTask("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/5")
              
              ' Wire up an Event Handler that will execute when the Query Task is completed from the web service. 
              AddHandler queryTask.ExecuteCompleted, AddressOf StatesGraphicsLayerQueryTask_ExecuteCompleted
              
              ' Execute the QueryTask Asymchronously.
              queryTask.ExecuteAsync(query)
            End Sub
              
            Private Sub StatesGraphicsLayerQueryTask_ExecuteCompleted(ByVal sender As Object, ByVal queryArgs As ESRI.ArcGIS.Client.Tasks.QueryEventArgs)
              
              ' This function executes after the QueryTask has completed. If there is a valid FeatureSet returned then 
              ' symbolize the US States based upon the Attribute of "POP2007" (i.e. Population count for the year 2007).
              
              ' Check to ensure we have valid return results.
              If queryArgs.FeatureSet Is Nothing Then
                Return
              End If
              
              ' Obtain a FeatureSet from the queryArgs returned from the web service.
              Dim resultFeatureSet As ESRI.ArcGIS.Client.Tasks.FeatureSet = queryArgs.FeatureSet
              
              ' Create three different SimpleFillSymbols to visually display what US States have High, Medium, and
              ' Low populations.
              Dim aSimpleFillSymbol_High As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
              Dim aSolidColorBrush_Red As New System.Windows.Media.SolidColorBrush(Colors.Red)
              aSolidColorBrush_Red.Opacity = 0.5
              aSimpleFillSymbol_High.Fill = aSolidColorBrush_Red
              
              Dim aSimpleFillSymbol_Medium As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
              Dim aSolidColorBrush_Yellow As New System.Windows.Media.SolidColorBrush(Colors.Yellow)
              aSolidColorBrush_Yellow.Opacity = 0.5
              aSimpleFillSymbol_Medium.Fill = aSolidColorBrush_Yellow
              
              Dim aSimpleFillSymbol_Low As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
              Dim aSolidColorBrush_Blue As New System.Windows.Media.SolidColorBrush(Colors.Blue)
              aSolidColorBrush_Blue.Opacity = 0.5
              aSimpleFillSymbol_Low.Fill = aSolidColorBrush_Blue
              
              ' Create a new GraphicsLayer to add to the Map Control. The individual Graphic objects will come
              ' from the returned FeatureSet.
              Dim myGraphicsLayer As New ESRI.ArcGIS.Client.GraphicsLayer
              
              ' Ensure the we have a FeatureSet with data.
              If resultFeatureSet IsNot Nothing AndAlso resultFeatureSet.Features.Count > 0 Then
                
                ' Iterate over each feature (which is a Graphic object) in the FeatureSet.
                For Each graphicFeature As ESRI.ArcGIS.Client.Graphic In resultFeatureSet.Features
                  
                  ' Determine which US State based upon their Attribute "POP2007" value will be assigned a specific 
                  ' SimpleFillSymbol. 
                  If graphicFeature.Attributes.Item("POP2007") > 15000000 Then
                    graphicFeature.Symbol = TryCast(aSimpleFillSymbol_High, ESRI.ArcGIS.Client.Symbols.Symbol)
                  ElseIf graphicFeature.Attributes.Item("POP2007") > 5000000 Then
                    graphicFeature.Symbol = TryCast(aSimpleFillSymbol_Medium, ESRI.ArcGIS.Client.Symbols.Symbol)
                  Else
                    graphicFeature.Symbol = TryCast(aSimpleFillSymbol_Low, ESRI.ArcGIS.Client.Symbols.Symbol)
                  End If
                  
                  '' Note: there are numerous graphicFeature.Attribute items that can be used for symbolization.
                  '' As an experiment try uncommenting the next few lines of code to see all of the different 
                  '' types of attribute information available.
                  'Dim myStringBuilderDisplayText As New Text.StringBuilder
                  'Dim allAttributes As System.Collections.Generic.IDictionary(Of String, Object) = graphicFeature.Attributes
                  'For Each oneKey As String In allAttributes.Keys
                  '  Dim theValue As Object = allAttributes.Item(oneKey)
                  '  myStringBuilderDisplayText.Append(oneKey + ": " + theValue.ToString + vbCrLf)
                  'Next
                  'MessageBox.Show(myStringBuilderDisplayText.ToString)
                  
                  ' Add the Graphic to the GraphicsLayer
                  myGraphicsLayer.Graphics.Add(graphicFeature)
                  
                Next graphicFeature
              End If
              
              ' Add the GraphicsLayer to the Map. It will automatically draw, there is not a need for a refresh.
              Map1.Layers.Add(myGraphicsLayer)
              
            End Sub
            </code>
            </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Graphic.AttributeValueChanged">
            <summary>
            Occurs when an attribute value changes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphic.ElementReference">
            <summary>
            Gets or sets the element reference.
            We use a weak reference so we don't prevent elements removed from the canvas
            to be reclaimed by the GC.
            </summary>
            <value>The element reference.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphic.MapTip">
            <summary>
            Gets or sets the MapTip displayed when the mouse hovers on the Graphic.
            </summary>
            <remarks>
            <para>
            A Graphic.MapTip is a FrameworkElement that displays a visual popup containing information associated 
            with a Graphic. Defining the User Interface (UI) look of the FrameworkElement for a Graphic.MapTip can 
            be done in either XAML (see the code example in this document) or code-behind (see the code example
            for the <see cref="M:ESRI.ArcGIS.Client.Graphic.GetZIndex">Graphic.GetZIndex</see> Method.
            </para>
            <para>
            Use the Graphic.MapTip Property when you want to have control over individual FrameworkElement MapTips 
            look and feel in the GraphicsLayer. Alternatitively, use the 
            <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.MapTip">GraphicsLayer.MapTip</see> Property when you want 
            to have all of the MapTips in the GraphicsLayer have the same FrameworkElement look and feel. 
            </para>
            <para>        
            There are several sources of where the information that is displayed in a Graphic.MapTip can come from:
            <list type="bullet">
            <item>
            The information is stored in the 
            <see cref="P:ESRI.ArcGIS.Client.Graphic.Attributes">Graphic.Attributes</see>
            </item>
            <item>The information is hard coded</item>
            <item>The information is generated on the fly based upon user interaction with the Map</item>
            </list>
            </para>
            <para>
            You can use a binding expression in XAML to bind Graphic.Attributes to the 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.frameworkelement.datacontext(v=vs.95).aspx" target="_blank">DataContext</a> 
            Property of the Graphic. The general usage syntax follows the pattern:<br></br>
            <code lang="XAML">
            &lt;esri:Graphic&gt;
              &lt;esri:Graphic.MapTip&gt;
                &lt;StackPanel Orientation="Horizontal" Background="White"&gt;
                  &lt;TextBlock Text="Feature ID:" /&gt;
                  &lt;TextBlock Text="{Binding [SomeAttributeName]}" /&gt;
                &lt;/StackPanel&gt;
              &lt;/esri:Graphic.MapTip&gt;
            &lt;esri:Graphic&gt;
            </code>
            </para>
            <para>
            <b>Tip:</b> Starting with Silverlight version 4, developers can perform DataContext binding directly to 
            Dictionary Keys by specifying the Key name in brackets. Therefore when binding the DataContext of 
            a Graphic.MapTip to a specific attribute name in the Graphic.Attributes (which is a Dictionary), 
            encase the attribute name in square brackets (i.e. []). Example: 
            <b>&lt;TextBlock Text="{Binding [Age]}" /&gt;</b> or the slightly more verbose version 
            <b>&lt;TextBlock Text="{Binding Path=[Age]}" /&gt;</b>).
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the button to load data in a textfile (.txt) on the local hard drive. A MapTip for each Graphic 
            will be created in the code-behind. Hover over a Graphic to see the MapTip.
            </para>
            <para>
            <b>SPECIAL INSTRUCTIONS:</b> There are two XAML files associated with this code example. The first
            XAML file is used in conjunction with the code-behind (C# or VB.NET) to demonstrate the functionality
            of loading a textfile from disk to create a set of Graphics with MapTips. The second XAML file 
            defines the User Interface (UI) look of the MapTip and is meant to to added to a UserControl that the 
            developers adds to the same project as the other code files. Name the UserControl  
            "MapTip_UserControl.xaml" and copy the contents from the second XAML file into the correct location of
            the UserControl so that the code-behind file can instantiate the UserControl Class correctly.
            </para>
            <para>
            The following screen shots corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Draw Graphics with MapTips from data in a file on disk." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.MapTip2.png"/>
            </para>
            <para>
            <img border="0" alt="The Open dialog pointing to the TestData.txt file containing information to create Graphics." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.MapTip1.png"/>
            </para>
            <para>
            <img border="0" alt="The TestData.txt file contents." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.MapTip3.png"/>
            </para>
            <code title="Example XAML1" description="This file is the first XAML file and is to be used in conjunction with the other C# or VB.NET in this code example." lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,102,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="366" Width="616" &gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                               Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer" /&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button to perform the work. Note the Click Event handler is wired-up to use code-behind. --&gt;
              &lt;Button Content="Draw graphics from data in a file on disk" Height="35" HorizontalAlignment="Left" 
                      Margin="160,61,0,0" Name="Button3"  VerticalAlignment="Top" Width="302" Click="Button1_Click"/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="40" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="616" 
                         TextWrapping="Wrap" Margin="12,12,0,0" 
                         Text="Click the button to load data in a textfile (.txt) on the local hard drive. A MapTip for
                         each Graphic will be created in the code-behind. Hover over a Graphic to see the MapTip." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example XAML2" description="This file is the second XAML file and is to be used for the content of a UserControl named 'MapTip_UserControl.xaml' to define the UI of a MapTip that will be instantiated by the code-behind." lang="XAML">
            &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
              &lt;Border BorderBrush="Green" BorderThickness="10" Name="Border1"&gt;
                &lt;StackPanel &gt;
                  &lt;StackPanel Orientation="Horizontal" Name="StackPanel_Name"&gt;
                    &lt;TextBlock Text="Name: " FontWeight="Bold" FontSize="10" VerticalAlignment="Center"/&gt;
                    &lt;TextBlock Text="{Binding [Name]}" HorizontalAlignment="Left" VerticalAlignment="Center" /&gt;
                  &lt;/StackPanel&gt;
                  &lt;StackPanel Orientation="Horizontal" Name="StackPanel_Age"&gt;
                    &lt;TextBlock Text="Age: " FontWeight="Bold" FontSize="10" VerticalAlignment="Center" /&gt;
                    &lt;TextBlock Text="{Binding [Age]}" HorizontalAlignment="Left" VerticalAlignment="Center" /&gt;
                  &lt;/StackPanel&gt;
                &lt;/StackPanel&gt;
              &lt;/Border&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            // SPECIAL INSTRUCTIONS:
            // This example code reads information from a textfile to display Graphics on the Map. Use a text editor
            // program (like Notepad) to add the following lines into the TestData.txt file and save it in the 
            // \MyDocuments folder. NOTE: REMOVE THE STARTING COMMENT (' or //) BEFORE EACH LINE!
            //
            //-7356594.25,4752385.95,102100,Billy,11
            //-5468910.57,1875915.58,102100,Sue,31
            //-1558708.66,-326382.05,102100,Sam,78
            //-4614958.43,-4191639.11,102100,Kate,44
              
            // A simple Class that will hold all of the information to draw Graphics (with MapTips) on the Map Control.
            public class TestData
            {
              public int X; // X coordinate value
              public int Y; // Y coordinate value
              public int WKID; // The SpatialRefernce.WKID value
              public string Name; // An Attribute for a persons name
              public int Age; // An Attribute for a persons age
            }
            
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              
              // Create a List&lt;TestData&gt; objects that will contain all of the information needed to draw Graphics
              // with MapTips on the Map Control.
              List&lt;TestData&gt; theTestData = new List&lt;TestData&gt;();
              
              // Load the List&lt;TestData&gt; objects from a textfile (.txt) on the local hard drive.
              theTestData = LoadTestData();
              
              // Draw the Graphics (with configured MapTips) on the Map Control. 
              DrawTestData(theTestData);
              
            }
            
            public List&lt;TestData&gt; LoadTestData()
            {
              
              // This function will load data that is in a textfile (.txt) on the local hard drive into a
              // List&lt;TestData&gt; objects.
              
              // Create a new List&lt;TestData&gt;.
              List&lt;TestData&gt; theTestData = new List&lt;TestData&gt;();
              
              // Create an instance of the open file dialog box.
              OpenFileDialog theOpenFileDialog = new OpenFileDialog();
              
              // Set filter options and filter index.
              theOpenFileDialog.Filter = "Text Files (*.txt)|*.txt";
              theOpenFileDialog.FilterIndex = 1;
              
              // Only let the user select one textfile at a time
              theOpenFileDialog.Multiselect = false;
              
              // Call the ShowDialog method to show the dialogbox.
              bool UserClickedOK = theOpenFileDialog.ShowDialog();
              
              // Process input if the user clicked OK.
              if (UserClickedOK == true)
              {
                // Open the selected file to read.
                System.IO.Stream fileStream = theOpenFileDialog.File.OpenRead;
                
                // Use a StreamReader to read the contents of the textfile
                using (System.IO.StreamReader reader = new System.IO.StreamReader(fileStream))
                {
                  // Hold the contents of reading one line from the textfile.
                  string line = null;
                  
                  // Loop through the textfile.
                  do
                  {
                    // Read one line from the StreamReader
                    line = reader.ReadLine();
                    
                    // Only process valid content
                    if (line != null)
                    {
                      // Break (tokenize) the contents of a line of information into a String Array. 
                      string[] parts = line.Split(',');
                      
                      // Create a new instance of one TestData object and populate the various fields.
                      TestData oneRecord = new TestData();
                      oneRecord.X = parts[0];
                      oneRecord.Y = parts[1];
                      oneRecord.WKID = parts[2];
                      oneRecord.Name = parts[3];
                      oneRecord.Age = parts[4];
                      
                      // Add the TestData object to the List(Of TestData).
                      theTestData.Add(oneRecord);
                    }
                  // Break out of the StreamReader if we don't have valid data.
                  } while ( line != null);
                } // Close the Using logic flow.
                // Close the StreamReader.
                fileStream.Close();
              }
              // Return the List&lt;TestData&gt;.
              return theTestData;
            }
            
            public void DrawTestData(List&lt;TestData&gt; theTestData)
            {
              // Loop through all of the List(Of TestData) objects, construct Graphics with Attributes and 
              // MapTips, and add the Graphics to the GraphicsLayer to render on the Map Control.
              
              // Create a new GraphicsLayer to hold the Graphic objects.
              ESRI.ArcGIS.Client.GraphicsLayer myGraphicsLayer = new ESRI.ArcGIS.Client.GraphicsLayer();
              
              // Loop through the List&lt;TestData&gt; objects.
              foreach (TestData oneRecord in theTestData)
              {
                // Construct a new MapPoint geometric object from the TestData .X and .Y fields.
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint = new ESRI.ArcGIS.Client.Geometry.MapPoint();
                aMapPoint.X = oneRecord.X;
                aMapPoint.Y = oneRecord.Y;
                
                // Construct a new SpatialReference object from a TestData.WKID field and use it for the MapPoint.
                ESRI.ArcGIS.Client.Geometry.SpatialReference aSpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(oneRecord.WKID);
                aMapPoint.SpatialReference = aSpatialReference;
                
                // Create SimpleMarkerSymbol for the Graphic's Symbology.
                ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol aSimpleMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
                aSimpleMarkerSymbol.Color = new System.Windows.Media.SolidColorBrush(Colors.Red);
                aSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle;
                aSimpleMarkerSymbol.Size = 10;
                
                // Create a new Graphic object and define its Geometry and Symbol Properties.
                ESRI.ArcGIS.Client.Graphic aGraphic = new ESRI.ArcGIS.Client.Graphic();
                aGraphic.Geometry = (ESRI.ArcGIS.Client.Geometry.Geometry)aMapPoint;
                aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)aSimpleMarkerSymbol;
                
                // Define two Graphic.Attribute Properties from the TestData object. You could have defined more
                // Attributes but this was sufficient for the sample.
                aGraphic.Attributes.Add("Name", oneRecord.Name);
                aGraphic.Attributes.Add("Age", oneRecord.Age);
                
                // Obtain the FrameworkElement that will be used for the setting the Graphic.MapTip Property from a 
                // custom defined UserControl. 
                MapTip_UserControl myMapTip = new MapTip_UserControl();
                
                // Use a couple of different MapTip variations depending on one of the Graphic.Attributes.
                if (aGraphic.Attributes["Age"] &lt; 35)
                {
                    // Use the default custom UserControl's settings 
                    aGraphic.MapTip = myMapTip;
                }
                else
                {
                   // Make some adjustments on the UserControl's settings for a different look 
                   System.Windows.Media.Color myFillColor = Color.FromArgb(255, 0, 0, 0); //Black
                   myMapTip.Border1.BorderBrush = new System.Windows.Media.SolidColorBrush(myFillColor);
                   myMapTip.StackPanel_Name.Orientation = Orientation.Vertical;
                   myMapTip.StackPanel_Age.Orientation = Orientation.Vertical;
                   aGraphic.MapTip = myMapTip;
                 }
                      
                // Add a Graphic to the GraphicsLayer object. 
                myGraphicsLayer.Graphics.Add(aGraphic);
              }
              // Add the GraphicsLayer to the Map's Layers collection. This will automatically draw (no need for a Map refresh).
              Map1.Layers.Add(myGraphicsLayer);
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            ' SPECIAL INSTRUCTIONS:
            ' This example code reads information from a textfile to display Graphics on the Map. Use a text editor
            ' program (like Notepad) to add the following lines into the TestData.txt file and save it in the 
            ' \MyDocuments folder. NOTE: REMOVE THE STARTING COMMENT (' or //) BEFORE EACH LINE!
            '
            '-7356594.25,4752385.95,102100,Billy,11
            '-5468910.57,1875915.58,102100,Sue,31
            '-1558708.66,-326382.05,102100,Sam,78
            '-4614958.43,-4191639.11,102100,Kate,44
            
            ' A simple Class that will hold all of the information to draw Graphics (with MapTips) on the Map Control.
            Public Class TestData
              Public X As Integer ' X coordinate value
              Public Y As Integer ' Y coordinate value
              Public WKID As Integer ' The SpatialRefernce.WKID value
              Public Name As String ' An Attribute for a persons name
              Public Age As Integer ' An Attribute for a persons age
            End Class
            
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Create a List(Of TestData) objects that will contain all of the information needed to draw Graphics
              ' with MapTips on the Map Control.
              Dim theTestData As New List(Of TestData)
              
              ' Load the List(Of TestData) objects from a textfile (.txt) on the local hard drive.
              theTestData = LoadTestData()
              
              ' Draw the Graphics (with configured MapTips) on the Map Control. 
              DrawTestData(theTestData)
              
            End Sub
            
            Public Function LoadTestData() As List(Of TestData)
              
              ' This function will load data that is in a textfile (.txt) on the local hard drive into a
              ' List(Of TestData) objects.
              
              ' Create a new List(Of TestData).
              Dim theTestData As New List(Of TestData)
              
              ' Create an instance of the open file dialog box.
              Dim theOpenFileDialog As OpenFileDialog = New OpenFileDialog
              
              ' Set filter options and filter index.
              theOpenFileDialog.Filter = "Text Files (*.txt)|*.txt"
              theOpenFileDialog.FilterIndex = 1
              
              ' Only let the user select one textfile at a time
              theOpenFileDialog.Multiselect = False
              
              ' Call the ShowDialog method to show the dialogbox.
              Dim UserClickedOK As Boolean = theOpenFileDialog.ShowDialog
              
              ' Process input if the user clicked OK.
              If (UserClickedOK = True) Then
                
                'Open the selected file to read.
                Dim fileStream As System.IO.Stream = theOpenFileDialog.File.OpenRead
                
                ' Use a StreamReader to read the contents of the textfile
                Using reader As New System.IO.StreamReader(fileStream)
                
                  ' Hold the contents of reading one line from the textfile.
                  Dim line As String
                  
                  ' Loop through the textfile.
                  Do
                    
                    ' Read one line from the StreamReader
                    line = reader.ReadLine()
                    
                    ' Only process valid content
                    If line IsNot Nothing Then
                      
                      ' Break (tokenize) the contents of a line of information into a String Array. 
                      Dim parts As String() = Split(line, ",")
                      
                      ' Create a new instance of one TestData object and populate the various fields.
                      Dim oneRecord As New TestData
                      oneRecord.X = parts(0)
                      oneRecord.Y = parts(1)
                      oneRecord.WKID = parts(2)
                      oneRecord.Name = parts(3)
                      oneRecord.Age = parts(4)
                      
                      ' Add the TestData object to the List(Of TestData).
                      theTestData.Add(oneRecord)
                      
                    End If
                    
                    ' Break out of the StreamReader if we don't have valid data.
                  Loop Until line Is Nothing
                  
                End Using ' Close the Using logic flow.
                
                ' Close the StreamReader.
                fileStream.Close()
              End If
              
              ' Return the List(Of TestData).
              Return theTestData
              
            End Function
            
            Public Sub DrawTestData(ByVal theTestData As List(Of TestData))
              
              ' Loop through all of the List(Of TestData) objects, construct Graphics with Attributes and 
              ' MapTips, and add the Graphics to the GraphicsLayer to render on the Map Control.
              
              ' Create a new GraphicsLayer to hold the Graphic objects.
              Dim myGraphicsLayer As New ESRI.ArcGIS.Client.GraphicsLayer
              
              ' Loop through the List(Of TestData) objects.
              Dim oneRecord As TestData
              For Each oneRecord In theTestData
                
                ' Construct a new MapPoint geometric object from the TestData .X and .Y fields.
                Dim aMapPoint As New ESRI.ArcGIS.Client.Geometry.MapPoint
                aMapPoint.X = oneRecord.X
                aMapPoint.Y = oneRecord.Y
                
                ' Construct a new SpatialReference object from a TestData.WKID field and use it for the MapPoint.
                Dim aSpatialReference As New ESRI.ArcGIS.Client.Geometry.SpatialReference(oneRecord.WKID)
                aMapPoint.SpatialReference = aSpatialReference
                
                ' Create SimpleMarkerSymbol for the Graphic's Symbology.
                Dim aSimpleMarkerSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
                aSimpleMarkerSymbol.Color = New System.Windows.Media.SolidColorBrush(Colors.Red)
                aSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle
                aSimpleMarkerSymbol.Size = 10
                
                ' Create a new Graphic object and define its Geometry and Symbol Properties.
                Dim aGraphic As New ESRI.ArcGIS.Client.Graphic
                aGraphic.Geometry = CType(aMapPoint, ESRI.ArcGIS.Client.Geometry.Geometry)
                aGraphic.Symbol = CType(aSimpleMarkerSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                
                ' Define two Graphic.Attribute Properties from the TestData object. You could have defined more
                ' Attributes but this was sufficient for the sample.
                aGraphic.Attributes.Add("Name", oneRecord.Name)
                aGraphic.Attributes.Add("Age", oneRecord.Age)
                
                ' Obtain the FrameworkElement that will be used for the setting the Graphic.MapTip Property from a 
                ' custom defined UserControl. 
                Dim myMapTip As New MapTip_UserControl
                
                ' Use a couple of different MapTip variations depending on one of the Graphic.Attributes.
                If aGraphic.Attributes.Item("Age") &lt; 35 Then
                  ' Use the default custom UserControl's settings 
                  aGraphic.MapTip = myMapTip
                Else
                  ' Make some adjustments on the UserControl's settings for a different look 
                  Dim myFillColor As System.Windows.Media.Color = Color.FromArgb(255, 0, 0, 0) 'Black
                  myMapTip.Border1.BorderBrush = New System.Windows.Media.SolidColorBrush(myFillColor)
                  myMapTip.StackPanel_Name.Orientation = Orientation.Vertical
                  myMapTip.StackPanel_Age.Orientation = Orientation.Vertical
                  aGraphic.MapTip = myMapTip
                End If
                
                ' Add a Graphic to the GraphicsLayer object. 
                myGraphicsLayer.Graphics.Add(aGraphic)
                
              Next
              
              ' Add the GraphicsLayer to the Map's Layers collection. This will automatically draw (no need for a Map refresh).
              Map1.Layers.Add(myGraphicsLayer)
              
            End Sub
            </code>
            </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Graphic.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphic.TimeExtent">
            <summary>
            Gets or sets the time extent (or period of time) for a Graphic.
            </summary>
            <remarks>
            <para>
            A TimeExtent defines the temporal period for which a phenomenon is relevant. A TimeExtent can be relevant 
            for a singular specific instance of time (example: Tuesday February 1, 2011 at 11:30 am) or a window of 
            time (example: Tuesday February 1st 2011 at 11:30 am to Wednesday February 2nd 2011 at 1:30 pm). The 
            Graphic.TimeExtent Property is based on a <see cref="T:ESRI.ArcGIS.Client.TimeExtent">TimeExtent</see> Object 
            and can be constructed via a number of methods/formats using the 
            <a href="http://msdn.microsoft.com/en-us/library/system.datetime(v=VS.95).aspx" target="_blank">System.DateTime</a> 
            Object. 
            </para>
            <para>
            When a Graphic has a TimeExtent and the Map Control has a TimeExtent set, the Graphic will not be rendered 
            if it does not intersect the Map's TimeExtent. By adjusting the 
            <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> users can see visually how a Graphic 
            phenomenon has changed over time. One highly useful tool for automating the display of temporal 
            observations is by using the ESRI <see cref="T:ESRI.ArcGIS.Client.Toolkit.TimeSlider">TimeSlider</see> 
            Control. 
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the button to initialize the TimeSlider functions (play, pause, forward, back) to display Graphics 
            with TimeExtent Properties set.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Animating Graphics with various TimeExtent values in the Map using a TimeSlider Control." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.TimeExtent.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Define two SimpleMarkerSymbol's and a SpatialReference in the Resources section of the XAML file. --&gt;
              &lt;Grid.Resources&gt;
               
                &lt;!-- 
                Tip: Use x:Key Attribute and not x:Name Attribute for defining the name of the Resources so that
                you can access the Resource in the code-behind file. 
                --&gt;
                
                &lt;!-- The 'RedMarkerSymbol' will be used as the default symbol for the Graphics. --&gt;
                &lt;esri:SimpleMarkerSymbol x:Key="RedMarkerSymbol" Color="Red" Size="12" Style="Circle" /&gt;
                
                &lt;!-- 
                Define a SpatialReference object that has the same WKID as the ArcGISTiledMapServiceLayer in
                the Map. This will allow for the Graphics in the GraphicsLayer to line up properly. 
                --&gt;
                &lt;esri:SpatialReference x:Key="theSpatialReference" WKID="102100"/&gt;
                
              &lt;/Grid.Resources&gt;
              
              &lt;!-- 
              Add a Map control with an ArcGISTiledMapServiceLayer and a GraphicsLayer. The Map.TimeExtent is
              bound to the MyTimeSlider (TimeSlider) control. The MyTimeSlider will control what TimeExtent (i.e.
              slices of time) can be viewed in the Map control.
                    
              The GraphicsLayer will contain several Graphics based upon MapPoint geometries (which use the 
              defined SpatialReference) which use the RedMarkerSymbol as the default symbolization, and have various 
              TimeExtent values set. When the specific Graphic elements have a TimeExtent that falls within the 
              Map.TimeExtent will they be displayed based upon the MyTimeSlider settings.
              --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,108,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="341" 
                        TimeExtent="{Binding ElementName=MyTimeSlider, Path=Value}"&gt;
                
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                               Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer" /&gt;
                
                &lt;!-- 
                It is important to provide the GraphicsLayer with an 'ID' Attribute so to be able to access it
                in the code-behind file. 
                --&gt;
                &lt;esri:GraphicsLayer ID="MyGraphicsLayer" &gt;
                
                  &lt;esri:GraphicsLayer.Graphics&gt;
                  
                    &lt;!-- 
                    Each Graphic added to the GraphicsLayer will have it's symbology, time extent and geometry defined. 
                    --&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}" TimeExtent="2000/08/04 12:00:01 UTC" &gt;
                      &lt;esri:MapPoint X="-7356594.25" Y="4752385.95" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}" TimeExtent="2000/08/07 06:30:00 UTC"&gt;
                      &lt;esri:MapPoint X="5654893.89" Y="3718746.02" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}" TimeExtent="2000/08/10 05:15:15 UTC"&gt;
                      &lt;esri:MapPoint X="-13654893.89" Y="-1718746.02" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}" TimeExtent="2000/08/14 03:03:00 UTC"&gt;
                      &lt;esri:MapPoint X="3654893.89" Y="7718746.02" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}" TimeExtent="2000/08/18 09:11:51 UTC"&gt;
                      &lt;esri:MapPoint X="6801033.36" Y="10325547.30" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}" TimeExtent="2000/08/20 01:00:03 UTC"&gt;
                      &lt;esri:MapPoint X="-5468910.57" Y="1741081.03" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource RedMarkerSymbol}" TimeExtent="2000/08/22 18:23:43 UTC"&gt;
                      &lt;esri:MapPoint X="-4614958.43" Y="-326382.05" SpatialReference="{StaticResource theSpatialReference}"/&gt;
                    &lt;/esri:Graphic&gt;
                    
                  &lt;/esri:GraphicsLayer.Graphics&gt;
                  
                &lt;/esri:GraphicsLayer&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- 
              Add a TimeSlider to control the display of what geographic features are displayed in the Map Control
              based upon a specified TimeExtent. In the case of this sample code, when the specific Graphic elements 
              have a TimeExtent that falls within the Map.TimeExtent will they be displayed based upon the MyTimeSlider 
              settings.
                
              Tip: It is the x:Name Attribute that allows you to access the TimeSlider Control in the code-behind file. 
              
              The Loop Attribute of True allows continuous playing of the TimeSlider once it intialized in the code-behind.
                
              The PlaySpeed Attribute follows the format of "hh:mm:ss" where, hh = hours (0 to 24), mm = minutes (0 to 60),
              and ss = seconds (0 to 60). In this example the PlaySpeed increments the time intervals every tenth of a second
              (i.e. 0.1).
                  
              The TimeMode Attribute of CumulativeFromStart means there is a fixed start date/time (2000/08/04 00:00:00 UTC
              in this example) that does not change and an end date/time that adjusts as the specified Interval (one day 
              in this example which is set in the code-behind) increases. As the 'thumb' of the TimeSlider control moves
              to the right along the slider track the TimeExtent Interval of the TimeSlider increases.
                  
              The MinimumValue Attribute specifies the starting date/time of the TimeSlider track.
                  
              The MaximumValue Attribute specifies the ending date/time of the TimeSlider track.
                
              The Value Attribute specifies the date/time location of the thumb along the TimeSlider track. The thumb can 
              have a start date/time and end date/time set for a TimeExtent which will display a window of time as the
              thumb moves along the TimeSlider track but this is best for TimeMode Attribute of 'TimeExtent'. Since
              this example is showing a TimeMode of 'CumulativeFromStart' it is best to have the thumb just use a single
              date/time specified for the Value set to the same date/time as the MinimumValue.
                
              The last thing needed to enable the full capabilities of a TimeSlider (i.e. having the play, pause, forward, 
              and back buttons) is to set the Intervals Property. In Silverlight, this can only be done in code-behind to 
              construct the Collection Type of IEnumerable(Of Date). Without the TimeSlider.Intervals being set the user 
              has to manually move the thumb across the TimeSlider track to change the Map.TimeExtent and thereby see what 
              Graphics can be displayed for that date/time window.
              --&gt;
              &lt;esri:TimeSlider x:Name="MyTimeSlider" 
                                  Loop="True" PlaySpeed="0:0:0.1"
                                  TimeMode="CumulativeFromStart"                 
                                  MinimumValue="2000/08/04 00:00:00 UTC"
                                  MaximumValue="2000/08/24 00:00:00 UTC"
                                  Height="22" Margin="12,80,0,0" 
                                  Value="2000/08/04 00:00:00 UTC"
                                  HorizontalAlignment="Left" VerticalAlignment="Top" Width="341" /&gt;
                                  
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="40" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="455" 
                         TextWrapping="Wrap" Margin="12,12,0,0" 
                         Text="Click the button to initialize the TimeSlider functions (play, pause, forward, back) 
                         to display Graphics with TimeExtent Properties set." /&gt;
                         
              &lt;!-- Add a button to perform the work. --&gt;
              &lt;Button Content="Initialize the TimeSlider" Height="23" HorizontalAlignment="Left" 
                      Margin="77,51,0,0" Name="Button1" VerticalAlignment="Top" Width="185" Click="Button1_Click"/&gt;
                      
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function sets up TimeSlider Intervals that define the tic marks along the TimeSlider track. Intervals 
              // are a Collection of IEnumerable(Of Date) objects. When the TimeSlider.Intervals Property is set along with 
              // the other necessary TimeSlider Properties, the full functionality of the TimeSlider is enabled. This full 
              // functionality includes buttons for Play, Pause, Forward, and Back.
              
              // Obtain the start and end Date/Time values from the TimeSlider named MyTimeSlider that was defined in XAML.
              DateTime myMinimumDate = MyTimeSlider.MinimumValue;
              DateTime myMaximumDate = MyTimeSlider.MaximumValue;
              
              // Create a TimeExtent based upon the start and end date/times.
              ESRI.ArcGIS.Client.TimeExtent myTimeExtent = new ESRI.ArcGIS.Client.TimeExtent(myMinimumDate, myMaximumDate);
              
              // Create a new TimeSpan (1 day in our case).
              TimeSpan myTimeSpan = new TimeSpan(1, 0, 0, 0);
              
              // Create an empty Collection of IEnumerable(Of Date) objects.
              System.Collections.Generic.IEnumerable&lt;DateTime&gt; myIEnumerableDates = null;
              
              // Load all of Dates into the Collection of IEnumerable(Of Date) objects using the 
              // TimeSlider.CreateTimeStopsByTimeInterval Shared/Static function.
              myIEnumerableDates = ESRI.ArcGIS.Client.Toolkit.TimeSlider.CreateTimeStopsByTimeInterval(myTimeExtent, myTimeSpan);
              
              // Set the TimeSlider.Intervals which define the tic marks along the TimSlider track to the IEnumerable(Of Date) 
              // objects.
              MyTimeSlider.Intervals = myIEnumerableDates;
            }
            </code>	
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' This function sets up TimeSlider Intervals that define the tic marks along the TimeSlider track. Intervals 
              ' are a Collection of IEnumerable(Of Date) objects. When the TimeSlider.Intervals Property is set along with 
              ' the other necessary TimeSlider Properties, the full functionality of the TimeSlider is enabled. This full 
              ' functionality includes buttons for Play, Pause, Forward, and Back.
              
              ' Obtain the start and end Date/Time values from the TimeSlider named MyTimeSlider that was defined in XAML.
              Dim myMinimumDate As Date = MyTimeSlider.MinimumValue
              Dim myMaximumDate As Date = MyTimeSlider.MaximumValue
              
              ' Create a TimeExtent based upon the start and end date/times.
              Dim myTimeExtent As New ESRI.ArcGIS.Client.TimeExtent(myMinimumDate, myMaximumDate)
              
              ' Create a new TimeSpan (1 day in our case).
              Dim myTimeSpan As New TimeSpan(1, 0, 0, 0)
              
              ' Create an empty Collection of IEnumerable(Of Date) objects.
              Dim myIEnumerableDates As System.Collections.Generic.IEnumerable(Of Date)
              
              ' Load all of Dates into the Collection of IEnumerable(Of Date) objects using the 
              ' TimeSlider.CreateTimeStopsByTimeInterval Shared/Static function.
              myIEnumerableDates = ESRI.ArcGIS.Client.Toolkit.TimeSlider.CreateTimeStopsByTimeInterval(myTimeExtent, myTimeSpan)
              
              ' Set the TimeSlider.Intervals which define the tic marks along the TimSlider track to the IEnumerable(Of Date) 
              ' objects.
              MyTimeSlider.Intervals = myIEnumerableDates
              
            End Sub
            </code>
            </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Graphic.MouseEnter">
            <summary>
            The event handler that occurs when the mouse, stylus, or touch enters the bounding area of 
            a Graphic.
            </summary>
            <remarks>
            <para>
            The Graphic.MouseEnter is useful for capturing when the user has moved the mouse, stylus, 
            or touch into the bounding area of a Graphic. Some useful scenarios for taking advantage 
            of the Graphic.MouseEnter Event include:
            <list type="bullet">
            <item>
            Display information in another control about Attribute information for a Graphic (see the 
            code example in this document)
            </item>
            <item>
            Start an animation on another control as a result of focus of a particular Graphic being 
            received (see the code example document 
            <see cref="E:ESRI.ArcGIS.Client.Graphic.MouseLeave">Graphic.MouseLeave</see>)
            </item>
            <item>
            Take a particular action based upon a different StylusDevices being used
            </item>
            </list>
            </para>
            <para>
            There are two input parameters that are passed into the Graphic.MouseEnter Event when it is 
            fired, they are: <b>sender</b> and <b>e</b>.
            </para>
            <para>
            <b>sender</b> is the Graphic for which the mouse, stylus, or touch has just entered its 
            bounding area. 
            </para>
            <para>
            <b>e</b> is a 
            <a href="http://msdn.microsoft.com/en-us/library/ms611367(v=VS.95).aspx" target="_blank">System.Windows.Input.MouseEventArgs</a> 
            and has two Properties: <b>StylusDevice</b> and <b>OriginalSource</b>. One of most important 
            Properties of <b>StylusDevice</b> is the <b>DeviceType</b> which will tell whether the 
            pointer that has entered the Graphic is a mouse, stylus or touch. The <b>OriginalSource</b> 
            Property gets a reference to the object that raised the event.    
            </para>
            <para>
            Modifying the symbology of a Graphic to give the appearance of a selection as a result of the 
            Graphic.MouseEnter or Graphic.MouseLeave Events is in general not a good practice. The reason 
            for this statement is that each time the symbology of a Graphic changes, it must be re-rendered 
            which will re-invoke MouseEnter and MouseLeave Events and thereby cause a flickering effect. A 
            better programming practice for giving the appearance of have a Graphic appear to be selected 
            is to use the 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.visualstatemanager(VS.95).aspx" target="_blank">System.Windows.VisualStateManager</a>. 
            See the code examples of <see cref="P:ESRI.ArcGIS.Client.Graphic.Selected">Graphic.Selected</see> 
            Property and <see cref="M:ESRI.ArcGIS.Client.Graphic.Select">Graphic.Select</see> Method for 
            examples of using the System.Windows.VisualStateManager.  
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the button to add two Graphics on the Map. Move the mouse/stylus/touch pointing device 
            over the Graphics to see Graphic.MouseEnter and Graphic.MouseLeave event handlers fire which 
            provide information about each Graphic.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Demonstration of the Graphic MouseEnter and MouseLeave Events." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.MouseEnter.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,193,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="275" Width="473" &gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                         Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button to perform the work. Note the Click Event handler is wired-up to use code-behind. --&gt;
              &lt;Button Content="Click me to add Graphics and move the mouse/sytlus/touch over them." Height="23" 
                      HorizontalAlignment="Left" Margin="12,164,0,0" Name="Button1" 
                      VerticalAlignment="Top" Width="473" Click="Button1_Click"/&gt;
              
              &lt;!-- 
              Add a TextBox to display information about a Graphic as the mouse/stylus/touch input devices
              moves across each it. 
              --&gt;
              &lt;TextBox Height="84" HorizontalAlignment="Left" Margin="12,74,0,0" Name="TextBox1" 
                       VerticalAlignment="Top" Width="473" TextWrapping="Wrap" /&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="65" Name="TextBlock1" VerticalAlignment="Top" TextWrapping="Wrap" Margin="9,3,186,0" 
                         Text="Click the button to add two Graphics on the Map. Move the mouse/stylus/touch 
                              pointing device over the Graphics to see Graphic.MouseEnter and 
                              Graphic.MouseLeave event handlers fire which provide information about each Graphic." /&gt;
                
              &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This is the driver function that will generate a two Polygon Graphics with an Attribute 
              // and add them to the GraphicLayer of the Map Control. Each Graphic will also have a MouseEnter
              // and MouseLeave Event handler wired up for additional functionality.
              
              // Create a new instance of the GraphicsLayer object 
              ESRI.ArcGIS.Client.GraphicsLayer myGraphicsLayer = new ESRI.ArcGIS.Client.GraphicsLayer();
              
              // Add the first Polygon to the GraphicsLayer
              List&lt;MyPoint&gt; polygon1 = new List&lt;MyPoint&gt;();
              polygon1.Add(new MyPoint(-10.039, -20.303));
              polygon1.Add(new MyPoint(-32.539, -7.0137));
              polygon1.Add(new MyPoint(-53.281, -13.923));
              polygon1.Add(new MyPoint(-62.773, -35.174));
              polygon1.Add(new MyPoint(-33.594, -43.18));
              polygon1.Add(new MyPoint(-11.797, -36.032));
              polygon1.Add(new MyPoint(-10.039, -20.303));
              ESRI.ArcGIS.Client.Graphic aGraphic1 = MakePolygonGraphic(polygon1, 102100, "WOW I AM HERE!");
              myGraphicsLayer.Graphics.Add(aGraphic1);
              
              // Add the second Polygon to the GraphicsLayer
              List&lt;MyPoint&gt; polygon2 = new List&lt;MyPoint&gt;();
              polygon2.Add(new MyPoint(-10.039, 20.303));
              polygon2.Add(new MyPoint(-32.539, 7.0137));
              polygon2.Add(new MyPoint(-62.773, 35.174));
              polygon2.Add(new MyPoint(-11.797, 36.032));
              polygon2.Add(new MyPoint(-10.039, 20.303));
              ESRI.ArcGIS.Client.Graphic aGraphic2 = MakePolygonGraphic(polygon2, 102100, "ITS A NICE DAY!");
              myGraphicsLayer.Graphics.Add(aGraphic2);
              
              // Add the GraphicsLayer to the Layers collection of the Map (this will automatically cause a refresh of the Map). 
              Map1.Layers.Add(myGraphicsLayer);
            }
            
            // A helper class used to construct MapPoints from coordinate pairs.
            public class MyPoint
            {
              //The coordinate pairs.
              public double X;
              public double Y;
              
              // The Constructor.
              public MyPoint(double inputX, double inputY)
              {
                X = inputX;
                Y = inputY;
              }
            }
            
            public ESRI.ArcGIS.Client.Graphic MakePolygonGraphic(List&lt;MyPoint&gt; inputPolygon, int inputSR, string anAttributeValue)
            {
              // A helper function that will generate a Polygon Graphic from a list of coordinate pairs, 
              // an integer to define a SpatialRefernce, and an Attribute string that denotes some
              // characteristic of the Graphic.
              
              // Create a new instance of one Graphic.
              ESRI.ArcGIS.Client.Graphic aGraphic = new ESRI.ArcGIS.Client.Graphic();
              
              // Make a new PointCollection to hold the vertices of the Polygon
              ESRI.ArcGIS.Client.Geometry.PointCollection aPointCollection = new ESRI.ArcGIS.Client.Geometry.PointCollection();
            
              // Loop through all of the coordinate pairs (i.e. List(Of MyPoint) objects.
              foreach (MyPoint mp in inputPolygon)
              {
                // Create a SpatialReference for the Graphic.
                ESRI.ArcGIS.Client.Geometry.SpatialReference aSpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(inputSR);
                
                // Create a MapPoint object and set its SpatialReference and coordinate (X,Y) information. 
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint1 = new ESRI.ArcGIS.Client.Geometry.MapPoint(mp.X, mp.Y, aSpatialReference);
              
                // Add the MapPoint to the PointCollection which will be used to define the Polygon verticies.
                aPointCollection.Add(aMapPoint1);
              }
              
              // The PointCollection needs to be added to a new instance of an ObservableCollection.
              System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt; anObservableCollection = new System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt;();
              anObservableCollection.Add(aPointCollection);
              
              // Create a new instance of a Polygon object and set the Rings and SpatialReference Properties.
              ESRI.ArcGIS.Client.Geometry.Polygon aPolygon = new ESRI.ArcGIS.Client.Geometry.Polygon();
              aPolygon.Rings = anObservableCollection;
              aPolygon.SpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(inputSR);
              
              // Create a new instance of a SimpleFillSymbol and set its Color, BorderBrush, and BorderThickness Properties.
              ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol aSimpleFillSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
              aSimpleFillSymbol.Fill = new System.Windows.Media.SolidColorBrush(Colors.Green);
              aSimpleFillSymbol.BorderBrush = new System.Windows.Media.SolidColorBrush(Colors.Yellow);
              aSimpleFillSymbol.BorderThickness = 5;
            
              // Apply the Graphic's Geometry and Symbol Properties.
              aGraphic.Geometry = (ESRI.ArcGIS.Client.Geometry.Geometry)aPolygon;
              aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)aSimpleFillSymbol;
              
              // Add an Attribute to the Graphic.
              aGraphic.Attributes.Add("Interesting Fact", anAttributeValue);
              
              // Dynamically wire-up the MouseEnter and MouseLeave Event handlers.
              aGraphic.MouseEnter += Graphic_MouseEnter;
              aGraphic.MouseLeave += Graphic_MouseLeave;
              
              // Return the Graphic to the calling function.
              return aGraphic;
            }
            
            private void Graphic_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)
            {
              // This function will obtain the various input arguments for the Graphic.MouseEnter Event 
              // and display the information in a TextBox. The information will be displayed when the 
              // user moves the mouse/stylus/touch pointing device into a Graphic that has an MouseEnter
              // Event wired up. It can be highly useful for displaying Graphic.Attribute information in
              // other FrameworkElement UI Controls.
              
              // Obtain the various variable information from the input arguments.
              string theStylusDeviceType = e.StylusDevice.DeviceType.ToString();
              string theOriginalSource = e.OriginalSource.GetType().ToString();
              ESRI.ArcGIS.Client.Graphic theGraphic = (ESRI.ArcGIS.Client.Graphic)sender;
              string theGraphicExtent = sender.Geometry.Extent.ToString();
              
              // Create a StringBuilder to hold the message we want to display.
              Text.StringBuilder myMessage = new Text.StringBuilder();
              myMessage.Append("The SytlusDevice.DeviceType is: " + theStylusDeviceType + Environment.NewLine);
              myMessage.Append("The OriginalSource object is: " + theOriginalSource + Environment.NewLine);
              myMessage.Append("The Extent of the Graphic is: " + theGraphicExtent + Environment.NewLine);
              string theKey = theGraphic.Attributes.Keys[0].ToString();
              myMessage.Append("The first Attribute information has: Key: " + theKey + ", Value: " + theGraphic.Attributes[theKey]);
              
              // Display the Message in a TextBox.
              TextBox1.Text = myMessage.ToString();
              
              // NOTES:
              // e.StylusDevice is System.Windows.Input.MouseEventArgs.StylusDevice Property
              // e.StylusDevice.DeviceType = TabletDeviceType Enumeration value of (Mouse, Stylus, Touch)
              // e.OriginalSource is System.Windows.Shapes.Path
              // sender = the ESRI.ArcGIS.Client.Graphic
            }
            
            private void Graphic_MouseLeave(object sender, System.Windows.Input.MouseEventArgs e)
            {
              // Clear the TextBox since the mouse/stylus/touch pointing device is no longer over the Graphic.
              TextBox1.Text = "";
              
              // NOTES:
              // e.StylusDevice is System.Windows.Input.MouseEventArgs.StylusDevice Property
              // e.StylusDevice.DeviceType = TabletDeviceType Enumeration value of (Mouse, Stylus, Touch)
              // e.OriginalSource is ESRI.ArcGIS.Client.Symbols.GraphicElement
              // sender = the ESRI.ArcGIS.Client.Graphic
              
              // Use these variables if you need to:
              // string theStylusDeviceType = e.StylusDevice.DeviceType.ToString();
              // string theOriginalSource = e.OriginalSource.GetType().ToString();
              // ESRI.ArcGIS.Client.Graphic theGraphic = (ESRI.ArcGIS.Client.Graphic)sender;
              // string theGraphicExtent = sender.Geometry.Extent.ToString();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' This is the driver function that will generate a two Polygon Graphics with an Attribute 
              ' and add them to the GraphicLayer of the Map Control. Each Graphic will also have a MouseEnter
              ' and MouseLeave Event handler wired up for additional functionality.
              
              ' Create a new instance of the GraphicsLayer object 
              Dim myGraphicsLayer As New ESRI.ArcGIS.Client.GraphicsLayer
              
              ' Add the first Polygon to the GraphicsLayer
              Dim polygon1 As New List(Of MyPoint)
              polygon1.Add(New MyPoint(-10.039, -20.303))
              polygon1.Add(New MyPoint(-32.539, -7.0137))
              polygon1.Add(New MyPoint(-53.281, -13.923))
              polygon1.Add(New MyPoint(-62.773, -35.174))
              polygon1.Add(New MyPoint(-33.594, -43.18))
              polygon1.Add(New MyPoint(-11.797, -36.032))
              polygon1.Add(New MyPoint(-10.039, -20.303))
              Dim aGraphic1 As ESRI.ArcGIS.Client.Graphic = MakePolygonGraphic(polygon1, 102100, "WOW I AM HERE!")
              myGraphicsLayer.Graphics.Add(aGraphic1)
              
              ' Add the second Polygon to the GraphicsLayer
              Dim polygon2 As New List(Of MyPoint)
              polygon2.Add(New MyPoint(-10.039, 20.303))
              polygon2.Add(New MyPoint(-32.539, 7.0137))
              polygon2.Add(New MyPoint(-62.773, 35.174))
              polygon2.Add(New MyPoint(-11.797, 36.032))
              polygon2.Add(New MyPoint(-10.039, 20.303))
              Dim aGraphic2 As ESRI.ArcGIS.Client.Graphic = MakePolygonGraphic(polygon2, 102100, "ITS A NICE DAY!")
              myGraphicsLayer.Graphics.Add(aGraphic2)
              
              ' Add the GraphicsLayer to the Layers collection of the Map (this will automatically cause a refresh of the Map). 
              Map1.Layers.Add(myGraphicsLayer)
              
            End Sub
            
            ' A helper class used to construct MapPoints from coordinate pairs.
            Public Class MyPoint
              
              'The coordinate pairs.
              Public X As Double
              Public Y As Double
              
              ' The Constructor.
              Public Sub New(ByVal inputX As Double, ByVal inputY As Double)
                X = inputX
                Y = inputY
              End Sub
              
            End Class
            
            Public Function MakePolygonGraphic(ByVal inputPolygon As List(Of MyPoint), ByVal inputSR As Integer, ByVal anAttributeValue As String) As ESRI.ArcGIS.Client.Graphic
              
              ' A helper function that will generate a Polygon Graphic from a list of coordinate pairs, 
              ' an integer to define a SpatialRefernce, and an Attribute string that denotes some
              ' characteristic of the Graphic.
              
              ' Create a new instance of one Graphic.
              Dim aGraphic As New ESRI.ArcGIS.Client.Graphic
              
              ' Make a new PointCollection to hold the vertices of the Polygon
              Dim aPointCollection As New ESRI.ArcGIS.Client.Geometry.PointCollection
              
              ' Loop through all of the coordinate pairs (i.e. List(Of MyPoint) objects.
              For Each mp As MyPoint In inputPolygon
                
                ' Create a SpatialReference for the Graphic.
                Dim aSpatialReference As New ESRI.ArcGIS.Client.Geometry.SpatialReference(inputSR)
                
                ' Create a MapPoint object and set its SpatialReference and coordinate (X,Y) information. 
                Dim aMapPoint1 As New ESRI.ArcGIS.Client.Geometry.MapPoint(mp.X, mp.Y, aSpatialReference)
                
                ' Add the MapPoint to the PointCollection which will be used to define the Polygon verticies.
                  aPointCollection.Add(aMapPoint1)
                
              Next
              
              ' The PointCollection needs to be added to a new instance of an ObservableCollection.
              Dim anObservableCollection As New System.Collections.ObjectModel.ObservableCollection(Of ESRI.ArcGIS.Client.Geometry.PointCollection)
              anObservableCollection.Add(aPointCollection)
              
              ' Create a new instance of a Polygon object and set the Rings and SpatialReference Properties.
              Dim aPolygon As New ESRI.ArcGIS.Client.Geometry.Polygon
              aPolygon.Rings = anObservableCollection
              aPolygon.SpatialReference = New ESRI.ArcGIS.Client.Geometry.SpatialReference(inputSR)
            
              ' Create a new instance of a SimpleFillSymbol and set its Color, BorderBrush, and BorderThickness Properties.
              Dim aSimpleFillSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
              aSimpleFillSymbol.Fill = New System.Windows.Media.SolidColorBrush(Colors.Green)
              aSimpleFillSymbol.BorderBrush = New System.Windows.Media.SolidColorBrush(Colors.Yellow)
              aSimpleFillSymbol.BorderThickness = 5
              
              ' Apply the Graphic's Geometry and Symbol Properties.
              aGraphic.Geometry = CType(aPolygon, ESRI.ArcGIS.Client.Geometry.Geometry)
              aGraphic.Symbol = CType(aSimpleFillSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
              
              ' Add an Attribute to the Graphic.
              aGraphic.Attributes.Add("Interesting Fact", anAttributeValue)
              
              ' Dynamically wire-up the MouseEnter and MouseLeave Event handlers.
              AddHandler aGraphic.MouseEnter, AddressOf Graphic_MouseEnter
              AddHandler aGraphic.MouseLeave, AddressOf Graphic_MouseLeave
              
              ' Return the Graphic to the calling function.
              Return aGraphic
              
            End Function
            
            Private Sub Graphic_MouseEnter(ByVal sender As System.Object, ByVal e As System.Windows.Input.MouseEventArgs)
              
              ' This function will obtain the various input arguments for the Graphic.MouseEnter Event 
              ' and display the information in a TextBox. The information will be displayed when the 
              ' user moves the mouse/stylus/touch pointing device into a Graphic that has an MouseEnter
              ' Event wired up. It can be highly useful for displaying Graphic.Attribute information in
              ' other FrameworkElement UI Controls.
              
              ' Obtain the various variable information from the input arguments.
              Dim theStylusDeviceType As String = e.StylusDevice.DeviceType.ToString
              Dim theOriginalSource As String = e.OriginalSource.GetType.ToString
              Dim theGraphic As ESRI.ArcGIS.Client.Graphic = CType(sender, ESRI.ArcGIS.Client.Graphic)
              Dim theGraphicExtent As String = sender.Geometry.Extent.ToString
              
              ' Create a StringBuilder to hold the message we want to display.
              Dim myMessage As New Text.StringBuilder
              myMessage.Append("The SytlusDevice.DeviceType is: " + theStylusDeviceType + vbCrLf)
              myMessage.Append("The OriginalSource object is: " + theOriginalSource + vbCrLf)
              myMessage.Append("The Extent of the Graphic is: " + theGraphicExtent + vbCrLf)
              Dim theKey As String = theGraphic.Attributes.Keys(0).ToString
              myMessage.Append("The first Attribute information has: Key: " + theKey + ", Value: " + theGraphic.Attributes.Item(theKey))
              
              ' Display the Message in a TextBox.
              TextBox1.Text = myMessage.ToString
              
              ' NOTES:
              ' e.StylusDevice is System.Windows.Input.MouseEventArgs.StylusDevice Property
              ' e.StylusDevice.DeviceType = TabletDeviceType Enumeration value of (Mouse, Stylus, Touch)
              ' e.OriginalSource is System.Windows.Shapes.Path
              ' sender = the ESRI.ArcGIS.Client.Graphic
              
            End Sub
            
            Private Sub Graphic_MouseLeave(ByVal sender As System.Object, ByVal e As System.Windows.Input.MouseEventArgs)
              
              ' Clear the TextBox since the mouse/stylus/touch pointing device is no longer over the Graphic.
              TextBox1.Text = ""
              
              ' NOTES:
              ' e.StylusDevice is System.Windows.Input.MouseEventArgs.StylusDevice Property
              ' e.StylusDevice.DeviceType = TabletDeviceType Enumeration value of (Mouse, Stylus, Touch)
              ' e.OriginalSource is ESRI.ArcGIS.Client.Symbols.GraphicElement
              ' sender = the ESRI.ArcGIS.Client.Graphic
              
              ' Use these variables if you need to:
              ' Dim theStylusDeviceType As String = e.StylusDevice.DeviceType.ToString
              ' Dim theOriginalSource As String = e.OriginalSource.GetType.ToString
              ' Dim theGraphic As ESRI.ArcGIS.Client.Graphic = CType(sender, ESRI.ArcGIS.Client.Graphic)
              ' Dim theGraphicExtent As String = sender.Geometry.Extent.ToString
              
            End Sub
            </code>
            </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Graphic.MouseLeave">
            <summary>
            The event handler that occurs when the mouse, stylus, or touch leaves the bounding area of a Graphic.
            </summary>
            <remarks>
            <para>
            The Graphic.MouseLeave is useful for capturing when the user has moved the mouse, stylus, or touch 
            out of the bounding area of a Graphic. Some useful scenarios for taking advantage of the 
            Graphic.MouseLeave Event include:
            <list type="bullet">
              <item>
              Clear any information that was being displayed in another control about Attribute 
              information for a Graphic (see the code example in the 
              <see cref="E:ESRI.ArcGIS.Client.Graphic.MouseEnter">Graphic.MouseEnter</see> documentation)
              </item>
              <item>
              Stop an animation on another control as a result of focus of a particular Graphic being 
              lost (see the code example in this document)
              </item>
              <item>
              Take a particular action based upon a different StylusDevices being used
              </item>
            </list>
            </para>
            <para>
            There are two input parameters that are passed into the Graphic.MouseLeave Event when it is fired, 
            they are: <b>sender</b> and <b>e</b>.
            </para>
            <para>
            <b>sender</b> is the Graphic for which the mouse, stylus, or touch has just exited its bounding area. 
            </para>
            <para>
            <b>e</b> is a 
            <a href="http://msdn.microsoft.com/en-us/library/ms611367(v=VS.95).aspx" target="_blank">System.Windows.Input.MouseEventArgs</a> 
            and has two Properties: <b>StylusDevice</b> and <b>OriginalSource</b>. One of most important 
            Properties of <b>StylusDevice</b> is the <b>DeviceType</b> which will tell whether the pointer 
            that has exited the Graphic is a mouse, stylus or touch. The <b>OriginalSource</b> Property gets a 
            reference to the object that raised the event.    
            </para>
            <para>
            Modifying the symbology of a Graphic to give the appearance of a selection as a result of the 
            Graphic.MouseEnter or Graphic.MouseLeave Events is in general not a good practice. The reason 
            for this statement is that each time the symbology of a Graphic changes, it must be re-rendered 
            which will re-invoke MouseEnter and MouseLeave Events and thereby cause a flickering effect. A 
            better programming practice for giving the appearance of have a Graphic appear to be selected 
            is to use the 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.visualstatemanager(VS.95).aspx" target="_blank">System.Windows.VisualStateManager</a>. 
            See the code examples of 
            <see cref="P:ESRI.ArcGIS.Client.Graphic.Selected">Graphic.Selected</see> Property and 
            <see cref="M:ESRI.ArcGIS.Client.Graphic.Select">Graphic.Select</see> Method for examples of using 
            the System.Windows.VisualStateManager.  
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Move the mouse cursor over the Polygon Graphic in the Map to begin animating the custom Path 
            object. When the mouse cursor exits the polygon the animation will stop.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Demostrating controlling animation of another UI control via the Graphic MosueEnter and MouseLeve Events." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.MouseLeave.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Define some Resources that can be used in other parts of the XAML file. --&gt;
              &lt;Grid.Resources&gt;
              
                &lt;!-- Define a SimpleFillSymbol to use as the initial display of the Graphics on the Map. --&gt;
                &lt;esri:SimpleFillSymbol x:Key="theSimpleFillSymbol" Fill="Beige" BorderBrush="black" 
                                       BorderThickness="2" /&gt;
              
                &lt;!-- 
                Define a SpatialReference object that has the same WKID as the ArcGISTiledMapServiceLayer in
                the Map.  
                 --&gt;
                &lt;esri:SpatialReference x:Key="theSpatialReference" WKID="4326"/&gt;
                
                &lt;!--
                Define a Storyboard that will rotate a custom Path (called myPath) infinately using
                a RenderTransform. This XAML was originally created in a Blend 4 project and copied
                into this Visual Studio project.
                --&gt;
                &lt;Storyboard x:Name="Storyboard1" RepeatBehavior="Forever"&gt;
                  &lt;DoubleAnimationUsingKeyFrames 
                  Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.Rotation)" 
                  Storyboard.TargetName="myPath"&gt;
                    &lt;EasingDoubleKeyFrame KeyTime="0" Value="0"/&gt;
                    &lt;EasingDoubleKeyFrame KeyTime="0:0:0.125" Value="45"/&gt;
                    &lt;EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="90"/&gt;
                    &lt;EasingDoubleKeyFrame KeyTime="0:0:0.375" Value="135"/&gt;
                    &lt;EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="180"/&gt;
                    &lt;EasingDoubleKeyFrame KeyTime="0:0:0.625" Value="225"/&gt;
                    &lt;EasingDoubleKeyFrame KeyTime="0:0:0.75" Value="270"/&gt;
                    &lt;EasingDoubleKeyFrame KeyTime="0:0:0.875" Value="315"/&gt;
                    &lt;EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="360"/&gt;
                  &lt;/DoubleAnimationUsingKeyFrames&gt;
                &lt;/Storyboard&gt;
              &lt;/Grid.Resources&gt;
              
              &lt;!-- 
              Add a Map control with an ArcGISTiledMapServiceLayer and a GraphicsLayer. The GraphicsLayer will
              contain one Graphic based upon Polygon geometries (which use the defined SpatialReference) 
              and using the theSimpleFillSymbol as the default symbolization. 
              --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,111,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="483" &gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                         Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                
                &lt;!-- 
                It is important to provide the GraphicsLayer with an 'ID' Attribute so to be able to access it
                in the code-behind file. 
                --&gt;
                &lt;esri:GraphicsLayer ID="MyGraphicsLayer" &gt;
                  
                  &lt;esri:GraphicsLayer.Graphics&gt;
                    
                    &lt;!-- 
                    Define a Polygon Graphic using the StaticResources for the Symbol and SpatialReference.
                    The Graphic has MouseEnter and MouseLeave Events defined that use code-behind functions.
                    --&gt;
                    &lt;esri:Graphic Symbol="{StaticResource theSimpleFillSymbol}" 
                                  MouseEnter="Graphic_MouseEnter" MouseLeave="Graphic_MouseLeave"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="-10" Y="10" /&gt;
                            &lt;esri:MapPoint X="-10" Y="43" /&gt;
                            &lt;esri:MapPoint X="25" Y="30" /&gt;
                            &lt;esri:MapPoint X="35" Y="18" /&gt;
                            &lt;esri:MapPoint X="-10" Y="10" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                  &lt;/esri:GraphicsLayer.Graphics&gt;
                &lt;/esri:GraphicsLayer&gt;
              &lt;/esri:Map&gt;
              
              &lt;!--
              The myPath object was created using Blend 4 and copied into this Visual Studio project.
              It is a circle with an embedded ellise that will rotate infinately because it uses
              StoryBoard animation defined in the Resources section of this XAML. 
              --&gt;
              &lt;Path x:Name="myPath" Fill="Red" Margin="511,207,0,0" Stretch="Fill" Stroke="Black" 
                    UseLayoutRounding="False" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" 
                    Height="114" VerticalAlignment="Top" Width="114"
                    Data="M180.5,38.5 C152.33348,38.5 129.5,67.377632 129.5,103 C129.5,138.62236 152.33348,167.5 180.5,167.5 C208.66652,167.5 231.5,138.62236 231.5,103 C231.5,67.377632 208.66652,38.5 180.5,38.5 z M175,0.5 C271.37369,0.5 349.5,78.626312 349.5,175 C349.5,271.37369 271.37369,349.5 175,349.5 C78.626312,349.5 0.5,271.37369 0.5,175 C0.5,78.626312 78.626312,0.5 175,0.5 z" &gt;
                &lt;Path.RenderTransform&gt;
                  &lt;CompositeTransform /&gt;
                &lt;/Path.RenderTransform&gt;
              &lt;/Path&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="64" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" 
                         Width="442" TextWrapping="Wrap" Margin="12,12,0,0" 
                         Text="Move the mouse cursor over the Polygon Graphic in the Map to 
                               begin animating the custom Path object. When the mouse cursor 
                               exits the polygon the animation will stop." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Graphic_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)
            {
              // This function will obtain the Storyboard1 object from the Resources section of the
              // XAML file. The Storyboard.Begin function invokes the animation of a circle with an
              // embedded ellipse to rotate continuously while the mouse cursor is over the Polygon
              // Graphic object in the Map. The sender input parameter of this function is the 
              // Polygon Graphic.
              
              Storyboard sb = (Storyboard)(LayoutRoot.Resources["Storyboard1"]);
              sb.Begin();
            }
            
            private void Graphic_MouseLeave(object sender, System.Windows.Input.MouseEventArgs e)
            {
              // This function will obtain the Storyboard1 object from the Resources section of the
              // XAML file. The Storyboard.Stop function terminates the animation of a circle with an
              // embedded ellipse that is rotating continuously when the mouse cursor exits the Polygon
              // Graphic object in the Map. The sender input parameter of this function is the 
              // Polygon Graphic.
              
              Storyboard sb = (Storyboard)(LayoutRoot.Resources["Storyboard1"]);
              sb.Stop();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Graphic_MouseEnter(ByVal sender As System.Object, ByVal e As System.Windows.Input.MouseEventArgs)
              
              ' This function will obtain the Storyboard1 object from the Resources section of the
              ' XAML file. The Storyboard.Begin function invokes the animation of a circle with an
              ' embedded ellipse to rotate continuously while the mouse cursor is over the Polygon
              ' Graphic object in the Map. The sender input parameter of this function is the 
              ' Polygon Graphic.
              
              Dim sb As Storyboard = DirectCast(LayoutRoot.Resources("Storyboard1"), Storyboard)
              sb.Begin()
              
            End Sub
              
            Private Sub Graphic_MouseLeave(ByVal sender As System.Object, ByVal e As System.Windows.Input.MouseEventArgs)
              
              ' This function will obtain the Storyboard1 object from the Resources section of the
              ' XAML file. The Storyboard.Stop function terminates the animation of a circle with an
              ' embedded ellipse that is rotating continuously when  the mouse cursor exits the Polygon
              ' Graphic object in the Map. The sender input parameter of this function is the 
              ' Polygon Graphic.
              
              Dim sb As Storyboard = DirectCast(LayoutRoot.Resources("Storyboard1"), Storyboard)
              sb.Stop()
              
            End Sub
            </code>
            </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Graphic.MouseMove">
            <summary>
            Occurs when the coordinate position of the mouse (or stylus) changes while over a <see cref="T:System.Windows.UIElement"/> (or while a <see cref="T:System.Windows.UIElement"/> holds mouse capture).
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Graphic.MouseLeftButtonDown">
            <summary>
            Occurs when the left mouse button is pressed (or when the tip of the stylus touches the tablet PC) while the mouse pointer is over a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Graphic.MouseLeftButtonUp">
            <summary>
            Occurs when the left mouse button is released (or the tip of the stylus is removed from the tablet PC) while the mouse (or the stylus) is over a <see cref="T:System.Windows.UIElement"/> (or while a <see cref="T:System.Windows.UIElement"/> holds mouse capture).
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Graphic.MouseRightButtonDown">
            <summary>
            The event handler that occurs when the Right Mouse Button is clicked over the bounding area of a Graphic.
            </summary>
            <remarks>
            <para>
            The Graphic.MouseRightButtonDown is useful for capturing when the user has clicked with the Right 
            Mouse Button in the bounding area of a Graphic. Some useful scenarios for taking advantage of the 
            Graphic.MouseRightButtonDown Event include:
            <list type="bullet">
              <item>
              Display information in another control about Attribute information for a Graphic (see the code 
              example in this document)
              </item>
              <item>
              Start an animation on another control as a result of focus of a particular Graphic being received
              </item>
            </list>
            </para>
            <para>
            There are two input parameters that are passed into the Graphic.MouseRightButtonDown Event when it 
            is fired, they are: <b>sender</b>, and <b>e</b>.
            </para>
            <para>
            <b>sender</b> is the Graphic for which the mouse, stylus, or touch has just been clicked on.
            </para>
            <para>
            <b>e</b> is a 
            <a href="http://msdn.microsoft.com/en-us/library/ms611349(v=VS.95).aspx" target="_blank">System.Windows.Input.MouseButtonEventArgs</a> 
            and has three Properties: <b>StylusDevice</b>, <b>OriginalSource</b>, and <b>Handled</b>. One of 
            most important Properties of <b>StylusDevice</b> is the <b>DeviceType</b> which will tell whether 
            the pointer that has entered the Graphic is a mouse, stylus or touch. The <b>OriginalSource</b> 
            Property gets a reference to the object that raised the event. The <b>Handled</b> Property gets 
            or sets a value that marks the routed event as handled (a True value for Handled prevents most 
            handlers along the event route from handling the same event again; the default value is False).
            </para>
            <para>
            When working in a Silverlight application and trying to use Graphic.MouseRightButtonDown Event, 
            setting the 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.input.mousebuttoneventargs.handled(v=VS.95).aspx" target="_blank">e.Handled</a> 
            Property to True becomes paramount in order to override the default functionality of the Microsoft 
            Silverlight Configuration dialog automatically showing whenever the user right clicks in a 
            Silverlight application. By setting <b>e.Handled</b> = True, the routed Event is considered 
            handled and the Microsoft Silverlight Configuration dialog will not display and allows the 
            remainder of the Graphic.MouseRightButtonDown Event to process. The following screen shot 
            provides a visual example of right clicking over a Graphic in the ESRI Map Control when the 
            <b>e.Handled</b> is False (the default) and thereby causing the Silverlight button to appear 
            which controls opening the Microsoft Silverlight Configuration dialog.   
            </para>
            <para>
            <img border="0" alt="Right click over a control in Silverlight causes the Silverlight button to appear." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.MouseRightButtonDown1.png"/>
            </para>
            <para>
            In order to make use of the 
            <see cref="E:ESRI.ArcGIS.Client.Graphic.MouseRightButtonUp">Graphic.MouseRightButtonUp</see> 
            Event it is required to make use of the <b>e.Handled</b> = True in the Graphic.MouseRightButtonDown 
            Event. If the <b>e.Handled</b> Property is left its default value (False) in the 
            Graphic.MouseRightButtonDown Event, then the Graphic.MouseRightButtonUp Event will never fire.
            </para>
            <para>
            The Graphic.MouseRightButtonDown Event only fires when a user right clicks on a Graphic. If the 
            user right clicks with the mouse in the Map Control in an area where a Graphic is not located 
            then the Event will not fire. This also means that if the user right clicks in an area of the 
            Map Control where no Graphic exists then the Silverlight button will display.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the button to add Graphics (with Attributes) to the Map. Then right-click on a graphic 
            with the Mouse to launch a Popup that display Attribute information about the Graphic. Click 
            the 'Close' button to close the Popup to get information on another Graphic.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Using the right mouse click to display Graphic Attribute information in a Popup Control." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.MouseRightButtonDown.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="0,150,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="423" &gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                               Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer" /&gt;
                      
                 &lt;!-- 
                 Create a GraphicsLayer to hold the Graphics that will be defined in code-behind. 
                 Setting the ID attribute is key to accessing in the code-behind.
                  --&gt;
                 &lt;esri:GraphicsLayer ID="MyGraphicsLayer" /&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button to perform the work. Note the Click Event handler is wired-up to use code-behind. --&gt;
              &lt;Button Content="Load Sample Points" Height="23" HorizontalAlignment="Left" Margin="57,121,0,0" Name="Button1" 
                      VerticalAlignment="Top" Width="314" Click="Button1_Click"/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="65" Name="TextBlock1" VerticalAlignment="Top" TextWrapping="Wrap" Margin="9,3,88,0" 
                       Text="Click the button to add Graphics (with Attributes) to the Map. Then right-click on a Graphic 
                         with the Mouse to launch a Popup that display Attribute information about the Graphic. 
                         Click the 'Close' button to close the Popup to get information on another Graphic." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function adds a few MapPoint based Graphics with Attributes to the GraphicsLayer.
              // The GraphicsLayer was defined in XAML.
              
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = Map1.Layers["MyGraphicsLayer"];
              ESRI.ArcGIS.Client.GraphicCollection theGraphicsCollection = theGraphicsLayer.Graphics;
              
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic2(-7356594.25, 4752385.95, 102100, 48, "Dead Man's Gulf"));
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic2(654893.89, 7718746.02, 102100, 50, "Shark Reef"));
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic2(4801033.36, 15325547.3, 102100, 52, "Crab Alley"));
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic2(-5468910.57, 1741081.03, 102100, 51, "Goo Lagoon"));
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic2(-1614958.43, -126382.05, 102100, 50, "Bikini Bottom"));
            }
            
            public object MakeMapPointGraphic2(double X, double Y, int SR, int anAttributeValue1, string anAttributeValue2)
            {
              // This function constructs a new Graphic using: 
              // (1) coordinate pairs (X, Y)
              // (2) a SpatialReference.WKID (SR)
              // (3) some Attribute values (anAttributeValue, anAttributeValue2)
              
              // Create a SpatialReference for the Graphic.
              ESRI.ArcGIS.Client.Geometry.SpatialReference aSpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(SR);
              
              // Create a MapPoint object and set its SpatialReference and coordinate (X,Y) information. 
              ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint = new ESRI.ArcGIS.Client.Geometry.MapPoint(X, Y, aSpatialReference);
              
              // Create a new instance of one Graphic and assign its Geometry.
              ESRI.ArcGIS.Client.Graphic aGraphic = new ESRI.ArcGIS.Client.Graphic();
              aGraphic.Geometry = (ESRI.ArcGIS.Client.Geometry.Geometry)aMapPoint;
              
              // Create a new instance of a SimpleMarkerSymbol and set its Color, Style, and Size Properties.
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol aSimpleMarkerySymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              aSimpleMarkerySymbol.Color = new System.Windows.Media.SolidColorBrush(Colors.Red);
              aSimpleMarkerySymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle;
              aSimpleMarkerySymbol.Size = 20;
              aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)aSimpleMarkerySymbol;
              
              // Add some Attributes to the Graphic.
              aGraphic.Attributes.Add("Temperature", anAttributeValue1);
              aGraphic.Attributes.Add("Location", anAttributeValue2);
              
              // Dynamically wire-up the MouseRightButtonDown Event handler.
              aGraphic.MouseRightButtonDown += Graphic_MouseRightButtonDown;
              
              // Return the created Graphic.
              return aGraphic;
            }
            
            // Create a Popup to display Attribute information about a Graphic. In general using global variables (aka.
            // Member variables) is not a good coding practice but since we need to control Properties of the Popup
            // across multiple functions, its becomes a necessity.
            private Primitives.Popup _MyPopup = new Primitives.Popup();
            
            private void Graphic_MouseRightButtonDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
            {
              // This function overrides the default right mouse button click behavior to display a Microsoft
              // Popup control with some Graphic Attribute values when the user clicks on a Graphic.
              
              // NOTES:
              // e.StylusDevice is a System.Windows.Input.MouseEventArgs.StylusDevice Property
              // e.StylusDevice.DeviceType is a TabletDeviceType Enumeration value of (Mouse, Stylus, Touch)
              // e.OriginalSource is a System.Windows.Shapes.Ellipse
              // e.Handled is a Boolean denoting whether the routed event was handled
              // sender is the ESRI.ArcGIS.Client.Graphic that was clicked on
              
              // This is the way to stop the annoying Silverlight button from appearing!
              e.Handled = true;
              
              // Get the Graphic object that was clicked on.
              ESRI.ArcGIS.Client.Graphic theGraphic = (ESRI.ArcGIS.Client.Graphic)sender;
              
              // Create some content to show in the a Popup Control (_MpPopup). 
              // Typically you would create a user control but we will create the UI element in code-behind 
              // for an alternate approach.
              
              // Create a Border to hold all the other UI Elements.
              Border aBorder = new Border();
              aBorder.BorderBrush = new SolidColorBrush(Colors.Red);
              aBorder.BorderThickness = new Thickness(5);
              
              // Add a Panel to the Border.
              StackPanel aStackPanel = new StackPanel();
              aStackPanel.Background = new SolidColorBrush(Colors.LightGray);
              aBorder.Child = aStackPanel;
              
              // Add a TextBox to the StackPanel. Use a Graphic.Attribute to populate the TextBox.Text. 
              TextBox aTextBox1 = new TextBox();
              aTextBox1.Text = "Temperature: " + theGraphic.Attributes["Temperature"].ToString();
              aTextBox1.Margin = new Thickness(5);
              aStackPanel.Children.Add(aTextBox1);
              
              // Add a TextBox to the StackPanel. Use a Graphic.Attribute to populate the TextBox.Text. 
              TextBox aTextBox2 = new TextBox();
              aTextBox2.Text = "Location: " + theGraphic.Attributes["Location"].ToString();
              aTextBox2.Margin = new Thickness(5);
              aStackPanel.Children.Add(aTextBox2);
              
              // Add a Button to the StackPanel. Add an EventHandler for the Button to close the Popup.
              Button aButton = new Button();
              aButton.Content = "Close";
              aButton.Margin = new Thickness(5);
              aStackPanel.Children.Add(aButton);
              aButton.Click += button1A_Click;
              
              // Set the Child property of Popup to the Border (which contains the other nested UI elements). 
              _MyPopup.Child = aBorder;
              
              // Set where the Popup will show up on the screen (just to the right of the Map). 
              _MyPopup.VerticalOffset = 200;
              _MyPopup.HorizontalOffset = 400;
              
              // Open the Popup. It will stay in the screen until it is explicitly closed.
              _MyPopup.IsOpen = true;
            }
            
            private void button1A_Click(object sender, RoutedEventArgs e)
            {
              // Close the popup.
              _MyPopup.IsOpen = false;
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' This function adds a few MapPoint based Graphics with Attributes to the GraphicsLayer.
              ' The GraphicsLayer was defined in XAML.
              
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer = Map1.Layers("MyGraphicsLayer")
              Dim theGraphicsCollection As ESRI.ArcGIS.Client.GraphicCollection = theGraphicsLayer.Graphics
              
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic2(-7356594.25, 4752385.95, 102100, 48, "Dead Man's Gulf"))
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic2(654893.89, 7718746.02, 102100, 50, "Shark Reef"))
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic2(4801033.36, 15325547.3, 102100, 52, "Crab Alley"))
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic2(-5468910.57, 1741081.03, 102100, 51, "Goo Lagoon"))
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic2(-1614958.43, -126382.05, 102100, 50, "Bikini Bottom"))
              
            End Sub
            
            Public Function MakeMapPointGraphic2(ByVal X As Double, ByVal Y As Double, ByVal SR As Integer, ByVal anAttributeValue1 As Integer, ByVal anAttributeValue2 As String)
              
              ' This function constructs a new Graphic using: 
              ' (1) coordinate pairs (X, Y)
              ' (2) a SpatialReference.WKID (SR)
              ' (3) some Attribute values (anAttributeValue, anAttributeValue2)
              
              ' Create a SpatialReference for the Graphic.
              Dim aSpatialReference As New ESRI.ArcGIS.Client.Geometry.SpatialReference(SR)
              
              ' Create a MapPoint object and set its SpatialReference and coordinate (X,Y) information. 
              Dim aMapPoint As New ESRI.ArcGIS.Client.Geometry.MapPoint(X, Y, aSpatialReference)
              
              ' Create a new instance of one Graphic and assign its Geometry.
              Dim aGraphic As New ESRI.ArcGIS.Client.Graphic
              aGraphic.Geometry = CType(aMapPoint, ESRI.ArcGIS.Client.Geometry.Geometry)
              
              ' Create a new instance of a SimpleMarkerSymbol and set its Color, Style, and Size Properties.
              Dim aSimpleMarkerySymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              aSimpleMarkerySymbol.Color = New System.Windows.Media.SolidColorBrush(Colors.Red)
              aSimpleMarkerySymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle
              aSimpleMarkerySymbol.Size = 20
              aGraphic.Symbol = CType(aSimpleMarkerySymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
              
              ' Add some Attributes to the Graphic.
              aGraphic.Attributes.Add("Temperature", anAttributeValue1)
              aGraphic.Attributes.Add("Location", anAttributeValue2)
              
              ' Dynamically wire-up the MouseRightButtonDown Event handler.
              AddHandler aGraphic.MouseRightButtonDown, AddressOf Graphic_MouseRightButtonDown
              
              ' Return the created Graphic.
              Return aGraphic
              
            End Function
              
            ' Create a Popup to display Attribute information about a Graphic. In general using global variables (aka.
            ' Member variables) is not a good coding practice but since we need to control Properties of the Popup
            ' across multiple functions, its becomes a necessity.
            Private _MyPopup As Primitives.Popup = New Primitives.Popup()
            
            Private Sub Graphic_MouseRightButtonDown(ByVal sender As System.Object, ByVal e As System.Windows.Input.MouseButtonEventArgs)
              
              ' This function overrides the default right mouse button click behavior to display a Microsoft
              ' Popup control with some Graphic Attribute values when the user clicks on a Graphic.
              
              ' NOTES:
              ' e.StylusDevice is a System.Windows.Input.MouseEventArgs.StylusDevice Property
              ' e.StylusDevice.DeviceType is a TabletDeviceType Enumeration value of (Mouse, Stylus, Touch)
              ' e.OriginalSource is a System.Windows.Shapes.Ellipse
              ' e.Handled is a Boolean denoting whether the routed event was handled
              ' sender is the ESRI.ArcGIS.Client.Graphic that was clicked on
              
              ' This is the way to stop the annoying Silverlight button from appearing!
              e.Handled = True
              
              ' Get the Graphic object that was clicked on.
              Dim theGraphic As ESRI.ArcGIS.Client.Graphic = CType(sender, ESRI.ArcGIS.Client.Graphic)
              
              ' Create some content to show in the a Popup Control (_MpPopup). 
              ' Typically you would create a user control but we will create the UI element in code-behind 
              ' for an alternate approach.
              
              ' Create a Border to hold all the other UI Elements.
              Dim aBorder As New Border()
              aBorder.BorderBrush = New SolidColorBrush(Colors.Red)
              aBorder.BorderThickness = New Thickness(5)
              
              ' Add a Panel to the Border.
              Dim aStackPanel As New StackPanel()
              aStackPanel.Background = New SolidColorBrush(Colors.LightGray)
              aBorder.Child = aStackPanel
              
              ' Add a TextBox to the StackPanel. Use a Graphic.Attribute to populate the TextBox.Text. 
              Dim aTextBox1 As New TextBox()
              aTextBox1.Text = "Temperature: " + theGraphic.Attributes.Item("Temperature").ToString
              aTextBox1.Margin = New Thickness(5)
              aStackPanel.Children.Add(aTextBox1)
              
              ' Add a TextBox to the StackPanel. Use a Graphic.Attribute to populate the TextBox.Text. 
              Dim aTextBox2 As New TextBox()
              aTextBox2.Text = "Location: " + theGraphic.Attributes.Item("Location").ToString
              aTextBox2.Margin = New Thickness(5)
              aStackPanel.Children.Add(aTextBox2)
              
              ' Add a Button to the StackPanel. Add an EventHandler for the Button to close the Popup.
              Dim aButton As New Button()
              aButton.Content = "Close"
              aButton.Margin = New Thickness(5)
              aStackPanel.Children.Add(aButton)
              AddHandler aButton.Click, AddressOf button1A_Click
              
              ' Set the Child property of Popup to the Border (which contains the other nested UI elements). 
              _MyPopup.Child = aBorder
              
              ' Set where the Popup will show up on the screen (just to the right of the Map). 
              _MyPopup.VerticalOffset = 200
              _MyPopup.HorizontalOffset = 400
              
              ' Open the Popup. It will stay in the screen until it is explicitly closed.
              _MyPopup.IsOpen = True
              
            End Sub
            
            Private Sub button1A_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
              
              ' Close the popup.
              _MyPopup.IsOpen = False
              
            End Sub
            </code>
            </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Graphic.MouseRightButtonUp">
            <summary>
            The event handler that occurs when the Right Mouse Button is released (after a click) over the 
            bounding area of a Graphic. NOTE: this event will only be raised if a caller marks the preceding 
            Graphic.MouseRightButtonDown event as e.Handled = True.
            </summary>
            <remarks>
            <para>
            The Graphic.MouseRightButtonUp is useful for capturing when the user has clicked and released with 
            the Right Mouse Button in the bounding area of a Graphic. Some useful scenarios for taking advantage 
            of the Graphic.MouseRightButtonUp Event include:
            <list type="bullet">
              <item>
              Display information in another control about Attribute information for a Graphic (see the code 
              example in this document)
              </item>
              <item>
              Stop an animation on another control as a result of focus of a particular Graphic being received
              </item>
            </list>
            </para>
            <para>
            There are two input parameters that are passed into the Graphic.MouseRightButtonUp Event when it 
            is fired, they are: <b>sender</b>, and <b>e</b>.
            </para>
            <para>
            <b>sender</b> is the Graphic for which the mouse, stylus, or touch has just been clicked on.
            </para>
            <para>
            <b>e</b> is a 
            <a href="http://msdn.microsoft.com/en-us/library/ms611349(v=VS.95).aspx" target="_blank">System.Windows.Input.MouseButtonEventArgs</a> 
            and has three Properties: <b>StylusDevice</b>, <b>OriginalSource</b>, and <b>Handled</b>. One of 
            most important Properties of <b>StylusDevice</b> is the <b>DeviceType</b> which will tell whether 
            the pointer that has entered the Graphic is a mouse, stylus or touch. The <b>OriginalSource</b> 
            Property gets a reference to the object that raised the event. The <b>Handled</b> Property gets 
            or sets a value that marks the routed event as handled (a True value for Handled prevents most 
            handlers along the event route from handling the same event again; the default value is False).
            </para>
            <para>
            When working in a Silverlight application and trying to use 
            <see cref="E:ESRI.ArcGIS.Client.Graphic.MouseRightButtonDown">Graphic.MouseRightButtonDown</see> 
            Event, setting the 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.input.mousebuttoneventargs.handled(v=VS.95).aspx" target="_blank">e.Handled</a> 
            Property to True becomes paramount in order to override the default functionality of the Microsoft 
            Silverlight Configuration dialog automatically showing whenever the user right clicks in a 
            Silverlight application. By setting <b>e.Handled</b> = True, the routed Event is considered 
            handled and the Microsoft Silverlight Configuration dialog will not display and allows the 
            remainder of the Graphic.MouseRightButtonDown Event to process. The following screen shot provides 
            a visual example of right clicking over a Graphic in the ESRI Map Control when the <b>e.Handled</b> 
            is False (the default) and thereby causing the Silverlight button to appear which controls opening 
            the Microsoft Silverlight Configuration dialog.   
            </para>
            <para>
            <img border="0" alt="Right click over a control in Silverlight causes the Silverlight button to appear." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.MouseRightButtonDown1.png"/>
            </para>
            <para>
            In order to make use of the Graphic.MouseRightButtonUp Event it is required to make use of the 
            <b>e.Handled</b> = True in the Graphic.MouseRightButtonDown Event. If the <b>e.Handled</b> Property 
            is left its default value (False) in the Graphic.MouseRightButtonDown Event, then the 
            Graphic.MouseRightButtonUp Event will never fire.
            </para>
            <para>
            The Graphic.MouseRightButtonDown and Graphic.MouseRightButtonUp Events only fires when a user right 
            clicks on a Graphic. If the user right clicks with the mouse in the Map Control in an area where a 
            Graphic is not located then the Events will not fire. This also means that if the user right clicks 
            in an area of the Map Control where no Graphic exists then the Silverlight button will display.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the button to add Graphics (with Attributes) to the Map. Then right-click and hold with the 
            Mouse on a Graphic to launch a Popup that displays Attribute information about the Graphic. When 
            you release the right mouse button the Popup will automatically close.
            </para>
            <para>
            <b>SPECIAL INSTRUCTIONS:</b> There are two XAML files (each with code-behind files) associated with 
            this code example. The <b>first XAML file</b> is used in conjunction with the code-behind (C# or 
            VB.NET) to demonstrate the launching a UserControl to display Graphic.Attribute information when the 
            user right clicks and holds with the mouse button over a Graphic. The <b>second XAML file</b> is used 
            in conjunction with the code-behind (C# or VB.NET) to define the User Interface (UI) look of the 
            UserControl based upon a Microsoft Popup. Name the UserControl "Popup_UserControl.xaml" and copy the 
            contents from the <b>second XAML file</b> and its associated code-behind (C# or VB.NET) into the 
            correct location of the UserControl so that <b>first XAML file</b> with code-behind file can 
            instantiate the UserControl Class correctly.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Use the right mouse click and hold to display Graphic Attribute information in a Popup Control." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.MouseRightButtonUp.png"/>
            </para>
            <code title="Example XAML1" description="This is the first XAML file. The driver of the application." lang="XAML">
            &lt;!-- This is the first XAML file and is the driver of the application. --&gt;
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="0,150,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="423" &gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                               Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer" /&gt;
                &lt;!-- 
                Create a GraphicsLayer to hold the Graphics that will be defined in code-behind. 
                Setting the ID attribute is key to accessing in the code-behind.
                --&gt;
                &lt;esri:GraphicsLayer ID="MyGraphicsLayer" /&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button to perform the work. Note the Click Event handler is wired-up to use code-behind. --&gt;
              &lt;Button Content="Load Sample Points" Height="23" HorizontalAlignment="Left" Margin="57,121,0,0" Name="Button1" 
                      VerticalAlignment="Top" Width="314" Click="Button1_Click"/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="65" Name="TextBlock1" VerticalAlignment="Top" TextWrapping="Wrap" Margin="9,3,88,0" 
                       Text="Click the button to add Graphics (with Attributes) to the Map. Then right-click and hold 
                         with the Mouse on a Graphic to launch a Popup that displays Attribute information about the 
                         Graphic. When you release the right mouse button the Popup will automatically close." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="This is the C# code-behind file associated with the first XAML file." lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // This function adds a few MapPoint based Graphics with Attributes to the GraphicsLayer.
              // The GraphicsLayer was defined in XAML.
              
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = Map1.Layers["MyGraphicsLayer"];
              ESRI.ArcGIS.Client.GraphicCollection theGraphicsCollection = theGraphicsLayer.Graphics;
              
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic(-7356594.25, 4752385.95, 102100, 10, "Libra"));
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic(3654893.89, 7718746.02, 102100, 8, "Leo"));
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic(6801033.36, 10325547.3, 102100, 7, "Virgo"));
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic(-5468910.57, 1741081.03, 102100, 8, "Taurus"));
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic(-4614958.43, -326382.05, 102100, 9, "Pisces"));
            }
            
            public object MakeMapPointGraphic(double X, double Y, int SR, int anAttributeValue1, string anAttributeValue2)
            {
              // This function constructs a new Graphic using: 
              // (1) coordinate pairs (X, Y)
              // (2) a SpatialReference.WKID (SR)
              // (3) some Attribute values (anAttributeValue, anAttributeValue2)
              
              // Create a SpatialReference for the Graphic.
              ESRI.ArcGIS.Client.Geometry.SpatialReference aSpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(SR);
              
              // Create a MapPoint object and set its SpatialReference and coordinate (X,Y) information. 
              ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint = new ESRI.ArcGIS.Client.Geometry.MapPoint(X, Y, aSpatialReference);
              
              // Create a new instance of one Graphic and assign its Geometry.
              ESRI.ArcGIS.Client.Graphic aGraphic = new ESRI.ArcGIS.Client.Graphic();
              aGraphic.Geometry = (ESRI.ArcGIS.Client.Geometry.Geometry)aMapPoint;
              
              // Create a new instance of a SimpleMarkerSymbol and set its Color, Style, and Size Properties.
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol aSimpleMarkerySymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              aSimpleMarkerySymbol.Color = new System.Windows.Media.SolidColorBrush(Colors.Green);
              aSimpleMarkerySymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square;
              aSimpleMarkerySymbol.Size = 20;
              aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)aSimpleMarkerySymbol;
              
              // Add some Attributes to the Graphic.
              aGraphic.Attributes.Add("Zen Factor", anAttributeValue1);
              aGraphic.Attributes.Add("Zodiac Sign", anAttributeValue2);
              
              // Dynamically wire-up the MouseRightButtonDown and MouseRightButtonUp Event handlers.
              aGraphic.MouseRightButtonDown += Graphic_MouseRightButtonDown;
              aGraphic.MouseRightButtonUp += Graphic_MouseRightButtonUp;
              
              // Return the created Graphic.
              return aGraphic;
            }
             
            // Create a UserControl that is based upon a Popup to display Attribute information about a Graphic. 
            // In general using global variables (aka. Member variables) is not a good coding practice but since 
            // we need to control Properties of the UserControl across multiple functions, its becomes a necessity.
            // NOTE: The second XAML file in the example code contains the information for the Popup_UserControl.
            private Popup_UserControl _xa = new Popup_UserControl();
            
            private void Graphic_MouseRightButtonDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
            {
              // This function overrides the default right mouse button click behavior to display a Microsoft
              // Popup control with some Graphic Attribute values when the user clicks on a Graphic.
              
              // NOTES:
              // e.StylusDevice is a System.Windows.Input.MouseEventArgs.StylusDevice Property
              // e.StylusDevice.DeviceType is a TabletDeviceType Enumeration value of (Mouse, Stylus, Touch)
              // e.OriginalSource is a System.Windows.Shapes.Ellipse
              // e.Handled is a Boolean denoting whether the routed event was handled
              // sender is the ESRI.ArcGIS.Client.Graphic that was clicked on
              
              // This is the way to stop the annoying Silverlight button from appearing! It is also necessary in 
              // order for the Graphic.MouseRightButtonUp Event to fire.
              e.Handled = true;
              
              // Get the Graphic object that was clicked on.
              ESRI.ArcGIS.Client.Graphic theGraphic = (ESRI.ArcGIS.Client.Graphic)sender;
              
              // Use some functions that were defined in the UserControl to display Graphic.Attribute values
              // the TextBoxes of the Popup.
              _xa.SetCustomAttribute1(theGraphic.Attributes.Item("Zen Factor"));
              _xa.SetCustomAttribute2(theGraphic.Attributes.Item("Zodiac Sign").ToString());
              
              // Call the UserControl function to display the Popup.
              _xa.Show();
            }
              
            private void Graphic_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
            {
              // This function causes the UserControl Popup to close.
              
              // NOTES:
              // e.StylusDevice is a System.Windows.Input.MouseEventArgs.StylusDevice Property
              // e.StylusDevice.DeviceType is a TabletDeviceType Enumeration value of (Mouse, Stylus, Touch)
              // e.OriginalSource is a System.Windows.Shapes.Ellipse
              // e.Handled is a Boolean denoting whether the routed event was handled
              // sender is the ESRI.ArcGIS.Client.Graphic that was clicked on
              
              // Call the UserControl function to close the Popup. This will occur as soon as the user lets
              // go of the right mouse button.
              _xa.Close();
              }
            </code>
            <code title="Example VB1" description="This is the VB.NET code-behind file associated with the first XAML file." lang="VB.NET">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' This function adds a few MapPoint based Graphics with Attributes to the GraphicsLayer.
              ' The GraphicsLayer was defined in XAML.
              
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer = Map1.Layers("MyGraphicsLayer")
              Dim theGraphicsCollection As ESRI.ArcGIS.Client.GraphicCollection = theGraphicsLayer.Graphics
              
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic(-7356594.25, 4752385.95, 102100, 10, "Libra"))
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic(3654893.89, 7718746.02, 102100, 8, "Leo"))
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic(6801033.36, 10325547.3, 102100, 7, "Virgo"))
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic(-5468910.57, 1741081.03, 102100, 8, "Taurus"))
              theGraphicsLayer.Graphics.Add(MakeMapPointGraphic(-4614958.43, -326382.05, 102100, 9, "Pisces"))
              
            End Sub
            
            Public Function MakeMapPointGraphic(ByVal X As Double, ByVal Y As Double, ByVal SR As Integer, ByVal anAttributeValue1 As Integer, ByVal anAttributeValue2 As String)
              
              ' This function constructs a new Graphic using: 
              ' (1) coordinate pairs (X, Y)
              ' (2) a SpatialReference.WKID (SR)
              ' (3) some Attribute values (anAttributeValue, anAttributeValue2)
              
              ' Create a SpatialReference for the Graphic.
              Dim aSpatialReference As New ESRI.ArcGIS.Client.Geometry.SpatialReference(SR)
              
              ' Create a MapPoint object and set its SpatialReference and coordinate (X,Y) information. 
              Dim aMapPoint As New ESRI.ArcGIS.Client.Geometry.MapPoint(X, Y, aSpatialReference)
              
              ' Create a new instance of one Graphic and assign its Geometry.
              Dim aGraphic As New ESRI.ArcGIS.Client.Graphic
              aGraphic.Geometry = CType(aMapPoint, ESRI.ArcGIS.Client.Geometry.Geometry)
              
              ' Create a new instance of a SimpleMarkerSymbol and set its Color, Style, and Size Properties.
              Dim aSimpleMarkerySymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              aSimpleMarkerySymbol.Color = New System.Windows.Media.SolidColorBrush(Colors.Green)
              aSimpleMarkerySymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square
              aSimpleMarkerySymbol.Size = 20
              aGraphic.Symbol = CType(aSimpleMarkerySymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
              
              ' Add some Attributes to the Graphic.
              aGraphic.Attributes.Add("Zen Factor", anAttributeValue1)
              aGraphic.Attributes.Add("Zodiac Sign", anAttributeValue2)
              
              ' Dynamically wire-up the MouseRightButtonDown and MouseRightButtonUp Event handlers.
              AddHandler aGraphic.MouseRightButtonDown, AddressOf Graphic_MouseRightButtonDown
              AddHandler aGraphic.MouseRightButtonUp, AddressOf Graphic_MouseRightButtonUp
              
              ' Return the created Graphic.
              Return aGraphic
              
            End Function
              
            ' Create a UserControl that is based upon a Popup to display Attribute information about a Graphic. 
            ' In general using global variables (aka. Member variables) is not a good coding practice but since 
            ' we need to control Properties of the UserControl across multiple functions, its becomes a necessity.
            ' NOTE: The second XAML file in the example code contains the information for the Popup_UserControl.
            Private _xa As New Popup_UserControl
            
            Private Sub Graphic_MouseRightButtonDown(ByVal sender As System.Object, ByVal e As System.Windows.Input.MouseButtonEventArgs)
              
              ' This function overrides the default right mouse button click behavior to display a Microsoft
              ' Popup control with some Graphic Attribute values when the user clicks on a Graphic.
              
              ' NOTES:
              ' e.StylusDevice is a System.Windows.Input.MouseEventArgs.StylusDevice Property
              ' e.StylusDevice.DeviceType is a TabletDeviceType Enumeration value of (Mouse, Stylus, Touch)
              ' e.OriginalSource is a System.Windows.Shapes.Ellipse
              ' e.Handled is a Boolean denoting whether the routed event was handled
              ' sender is the ESRI.ArcGIS.Client.Graphic that was clicked on
              
              ' This is the way to stop the annoying Silverlight button from appearing! It is also necessary in 
              ' order for the Graphic.MouseRightButtonUp Event to fire.
              e.Handled = True
              
              ' Get the Graphic object that was clicked on.
              Dim theGraphic As ESRI.ArcGIS.Client.Graphic = CType(sender, ESRI.ArcGIS.Client.Graphic)
              
              ' Use some functions that were defined in the UserControl to display Graphic.Attribute values
              ' the TextBoxes of the Popup.
              _xa.SetCustomAttribute1(theGraphic.Attributes.Item("Zen Factor"))
              _xa.SetCustomAttribute2(theGraphic.Attributes.Item("Zodiac Sign").ToString)
              
              ' Call the UserControl function to display the Popup.
              _xa.Show()
              
            End Sub
              
            Private Sub Graphic_MouseRightButtonUp(ByVal sender As Object, ByVal e As MouseButtonEventArgs)
              
              ' This function causes the UserControl Popup to close.
              
              ' NOTES:
              ' e.StylusDevice is a System.Windows.Input.MouseEventArgs.StylusDevice Property
              ' e.StylusDevice.DeviceType is a TabletDeviceType Enumeration value of (Mouse, Stylus, Touch)
              ' e.OriginalSource is a System.Windows.Shapes.Ellipse
              ' e.Handled is a Boolean denoting whether the routed event was handled
              ' sender is the ESRI.ArcGIS.Client.Graphic that was clicked on
              
              ' Call the UserControl function to close the Popup. This will occur as soon as the user lets
              ' go of the right mouse button.
              _xa.Close()
              
            End Sub
            </code>
            <code title="Example XAML2" description="This is the second XAML file. It defines the UserControl with is based on a Microsoft Popup." lang="XAML">
            &lt;!-- Define a new Microsoft Popup Control. --&gt;
            &lt;Popup x:Name="popMessage"  VerticalOffset="300" HorizontalOffset="400"&gt;
              &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
                &lt;Border BorderBrush="Green" BorderThickness="10" Name="Border1"&gt;
                  &lt;StackPanel&gt;
                    
                    &lt;!-- This StackPanel will display some Graphic Attribute information. --&gt;
                    &lt;StackPanel Orientation="Horizontal" Name="StackPanel_ZenFactor"&gt;
                      &lt;TextBlock Text="Zen Factor: " FontWeight="Bold" FontSize="10" VerticalAlignment="Center"/&gt;
                      &lt;TextBlock x:Name="TextBlock_ZenFactor" HorizontalAlignment="Left" VerticalAlignment="Center" /&gt;
                    &lt;/StackPanel&gt;
                    
                    &lt;!-- This StackPanel will display some Graphic Attribute information. --&gt;
                    &lt;StackPanel Orientation="Horizontal" Name="StackPanel_ZodiacSign"&gt;
                      &lt;TextBlock Text="Zodiac Sign: " FontWeight="Bold" FontSize="10" VerticalAlignment="Center"/&gt;
                      &lt;TextBlock x:Name="TextBlock_ZodiacSign" HorizontalAlignment="Left" VerticalAlignment="Center" /&gt;
                    &lt;/StackPanel&gt;
                    
                  &lt;/StackPanel&gt;
                &lt;/Border&gt;
              &lt;/Grid&gt;
            &lt;/Popup&gt;
            </code>
            <code title="Example CS2" description="This is the C# code-behind file associated with the second XAML file." lang="CS">
            // This Class provides the logic for the UserControl that launches a Popup Control which will
            // display Graphic Attribute information while the user clicks and holds down the right mouse
            // button. 
            public partial class Popup_UserControl : UserControl
            {
              public Popup_UserControl()
              {
                InitializeComponent();
              }
            
              public void Show()
              {
                // Launch the Popup
                popMessage.IsOpen = true;
              }
              
              public void SetCustomAttribute1(int anInteger)
              {
                // Set the TextBlock.Text from the Graphic Attribute value. 
                TextBlock_ZenFactor.Text = anInteger.ToString();
              }
              
              public void SetCustomAttribute2(string aString)
              {
                // Set the TextBlock.Text from the Graphic Attribute value. 
                TextBlock_ZodiacSign.Text = aString;
              }
              
              public void Close()
              {
                // Close the Popup
                popMessage.IsOpen = false;
              }
            }
            </code>
            <code title="Example VB2" description="This is the VB.NET code-behind file associated with the second XAML file." lang="VB.NET">
            ' This Class provides the logic for the UserControl that launches a Popup Control which will
            ' display Graphic Attribute information while the user clicks and holds down the right mouse
            ' button. 
            Partial Public Class Popup_UserControl
              Inherits UserControl
              
              Public Sub New()
                InitializeComponent()
              End Sub
              
              Public Sub Show()
                ' Launch the Popup
                popMessage.IsOpen = True
              End Sub
              
              Public Sub SetCustomAttribute1(ByVal anInteger As Integer)
                ' Set the TextBlock.Text from the Graphic Attribute value. 
                TextBlock_ZenFactor.Text = anInteger.ToString
              End Sub
              
              Public Sub SetCustomAttribute2(ByVal aString As String)
                ' Set the TextBlock.Text from the Graphic Attribute value. 
                TextBlock_ZodiacSign.Text = aString
              End Sub
            
              Public Sub Close()
                ' Close the Popup
                popMessage.IsOpen = False
              End Sub
            
            End Class
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphic.Selected">
            <summary>
            Gets or sets a Boolean value indicating whether the Graphic is selected.
            </summary>
            <remarks>
            <para>
            By default a Graphic is not selected (i.e. Selected = False). If a Graphic is selected the 
            Selected Property will be True.
            </para>
            <para>
            The Symbol of a Graphic does not automatically change according to the Graphic’s Selected 
            status. Custom code in either the XAML or code-behind is required to change the Symbol of the 
            Graphic when the Graphic’s Selected status changes.  
            </para>
            <para>
            There are several ways to select a Graphic using visual interaction with the Map Control; some 
            examples are:
            <list type="bullet">
              <item>As a result of a Geometry service (see the code example in the 
              <see cref="M:ESRI.ArcGIS.Client.Graphic.Select">Graphic.Select</see> Method)</item>
              <item>
              Via the XAML System.Windows.VisualStateManager (see the code example in this document). 
              <b>Note:</b> The VisualStateManager Class was newly added in the .NET Framework v4.0. If you are 
              running the .NET Framework v3.5 then you can download and Reference the 
              <a href="http://wpf.codeplex.com" target="_blank">WPFToolkit</a> on Codeplex to take advantage of
              the VisualStateManager Class.
              </item>
              <item>By iterating over the GraphicsCollection (see the code example in the 
              <see cref="M:ESRI.ArcGIS.Client.Graphic.UnSelect">Graphic.UnSelect</see> Method)</item>
              <item>Using the Editor Class (see the interactive SDK sample 
              <a href="http://help.arcgis.com/en/webapi/silverlight/samples/start.htm#EditToolsAutoSave" target="_top">Edit Tools - Auto Save</a>)</item>
            </list>
            </para>
            <para>
            Using the System.Windows.VisualStateManager in a ControlTemplate is a popular option for rendering 
            Selected Graphics because of its performance.  In Silverlight, control templating is entirely done 
            by defining XAML. The API surface of FrameworkTemplate and 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.controltemplate(v=VS.95).aspx" target="_blank">ControlTemplate</a> 
            is not intended for and is not capable of defining templates for a control by creating a ControlTemplate 
            in code. The 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.visualstatemanager(VS.95).aspx" target="_blank">VisualStateManager</a> 
            Class manages states and the logic for transitioning between states for controls of a ControlTemplate.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click on the Polygon Graphics with the left mouse button in the Map Control to change their Selection 
            value and Symbology. The XAML VisualStateManager in the FillSymbol's ControlTemplate performs the work 
            for swapping the symbology.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Selecting Graphics using the VisualStateManager to change the Symbol." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Graphic.Selected.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- 
              Define a FillSymbol in the Resources section of the XAML file. The FillSymbol uses a ControlTemplate
              to define two VisualStateGroups which automatically switch symbology on the GraphicsLayer depending 
              on whether individual Graphic objects are selected or not. Also define a SpatialReference for using
              best practices when adding Graphics to the GraphicsLayer.
              --&gt;
              &lt;Grid.Resources&gt;
                &lt;esriSymbols:FillSymbol x:Key="SelectFillSymbol"&gt;
                  &lt;esriSymbols:FillSymbol.ControlTemplate&gt;
                    &lt;ControlTemplate&gt;
                      
                      &lt;!-- 
                      Provide the default look of the FillSymbol for the polygon Graphic (a solid blue fill with 
                      black edges). 
                      --&gt;
                      &lt;Path x:Name="Element" Stroke="Black" StrokeStartLineCap="Round" StrokeThickness="2"
            				StrokeLineJoin="Round" StrokeEndLineCap="Round" Fill="Blue"&gt;
                      
                        &lt;!-- 
                        Learn more about the VisualStateManager in the MSDN document:
                        http://msdn.microsoft.com/en-us/library/system.windows.controls.controltemplate(v=VS.95).aspx 
                        Note: The VisualStateManager Class was newly added in the .NET Framework v4.0. If you are 
                        running the .NET Framework v3.5 then you can download and Reference the WPFToolkit on 
                        Codeplex (http://wpf.codeplex.com) to take advantage of the VisualStateManager Class.
                        --&gt;
                        &lt;VisualStateManager.VisualStateGroups&gt;
                          
                          &lt;VisualStateGroup x:Name="SelectionStates"&gt;
                            
                            &lt;!--
                            By specifying an empty Unselected state, unselecting the graphic will set the
                            values back to their original value. The use of a Duration and Storyboard provides  
                            a smooth transition back. Note that it take .75 seconds for the Graphic to be
                            selected and .25 seconds to go back to the original state.
                            --&gt;
                            &lt;VisualState x:Name="Unselected" &gt;
                              &lt;Storyboard&gt;
                                
                                &lt;!-- 
                                Note how the To="Blue" Attribute matches the default Fill Attribute value of
                                the Path x:Name="Element" for defining the Polygon's Symbology.
                                --&gt;
                                &lt;ColorAnimation Storyboard.TargetName="Element" To="Blue"  Duration="00:00:00.25"
            									Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)"/&gt;
                              &lt;/Storyboard&gt;
                            &lt;/VisualState&gt;
                                            
                            &lt;VisualState x:Name="Selected"&gt;
                              &lt;Storyboard&gt;
                                
                                &lt;!-- 
                                The To="Cyan" Attribute will become the Fill Atrribute value for the Selected state
                                of the Path x:Name="Element" for defining the Polygon's Symbology.
                                --&gt;
                                &lt;ColorAnimation Storyboard.TargetName="Element" To="Cyan" Duration="00:00:00.75"
             									Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)"/&gt;
                              &lt;/Storyboard&gt;
                            &lt;/VisualState&gt;
                            
                          &lt;/VisualStateGroup&gt;
                                        
                        &lt;/VisualStateManager.VisualStateGroups&gt;
                                  
                      &lt;/Path&gt;
                      
                    &lt;/ControlTemplate&gt;
                  &lt;/esriSymbols:FillSymbol.ControlTemplate&gt;
                &lt;/esriSymbols:FillSymbol&gt;
                
                &lt;!-- Define a SpatialReference object that has the same WKID as the ArcGISTiledMapServiceLayer in
                     the Map. This will allow for the Graphics in the GraphicsLayer to line up properly. --&gt;
                &lt;esri:SpatialReference x:Key="theSpatialReference" WKID="4326"/&gt;
                
              &lt;/Grid.Resources&gt;
              
              &lt;!-- 
              Add a Map control with an ArcGISTiledMapServiceLayer and a GraphicsLayer. The GraphicsLayer will
              contain several Graphics based upon Polygon geometries and using the SelectFillSymbol for the 
              symbolization. By default the Graphics are not selected. The MouseLeftButtonDown Event on the 
              GraphicsLayer has been specified to wire-up code-behind functionality.
              --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="36,51,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="318" Width="483"&gt;
                  
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                           Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                
                &lt;!-- 
                The MouseLeftButtonDown Event only fires when clicking with the left mouse button over a Graphic.
                It will not fire if clicked over areas of the Map Control where there are no Graphics. 
                --&gt;
                &lt;esri:GraphicsLayer ID="MyGraphicsLayer" MouseLeftButtonDown="GraphicsLayer_MouseLeftButtonDown"&gt;
                  
                  &lt;esri:GraphicsLayer.Graphics&gt;
                    
                    &lt;!-- 
                    Define several Polygon based Graphics using the StaticResources for the Symbol and SpatialReference.
                    --&gt;
                        
                    &lt;esri:Graphic Symbol="{StaticResource SelectFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="10" Y="-20" /&gt;
                            &lt;esri:MapPoint X="32" Y="-7" /&gt;
                            &lt;esri:MapPoint X="53" Y="-13" /&gt;
                            &lt;esri:MapPoint X="62" Y="-35" /&gt;
                            &lt;esri:MapPoint X="33" Y="-43" /&gt;
                            &lt;esri:MapPoint X="11" Y="-36" /&gt;
                            &lt;esri:MapPoint X="10" Y="-20" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource SelectFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="10" Y="20" /&gt;
                            &lt;esri:MapPoint X="32" Y="7" /&gt;
                            &lt;esri:MapPoint X="62" Y="35" /&gt;
                            &lt;esri:MapPoint X="11" Y="36" /&gt;
                            &lt;esri:MapPoint X="10" Y="20" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                    &lt;esri:Graphic Symbol="{StaticResource SelectFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="5" Y="17" /&gt;
                            &lt;esri:MapPoint X="5" Y="5" /&gt;
                            &lt;esri:MapPoint X="-10" Y="8" /&gt;
                            &lt;esri:MapPoint X="-12" Y="18" /&gt;
                            &lt;esri:MapPoint X="5" Y="17" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
                    
                  &lt;/esri:GraphicsLayer.Graphics&gt;
                &lt;/esri:GraphicsLayer&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="40" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" 
                         Width="616" TextWrapping="Wrap" Margin="12,12,0,0" 
                         Text="Click on the Polygon Graphics with the left mouse button in the Map Control to 
                         change their Selection value and Symbology. The XAML VisualStateManager in the 
                         FillSymbol's ControlTemplate performs the work for swapping the symbology." /&gt;
                
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void GraphicsLayer_MouseLeftButtonDown(object sender, ESRI.ArcGIS.Client.GraphicMouseButtonEventArgs e)
            {
              
              // Alternate between setting the Graphic's Selected property to true and false depending on where the
              // user clicks it with the left mouse button. The transitioning from one Symbol to another on the Graphic
              //based upon its Selected state is exclusively handled in XAML using the VisualStateManager Class.
              e.Graphic.Selected = ! (e.Graphic.Selected);
              
              // Helper notes:
              // -------------
              // sender is the ESRI.ArcGIS.Client.Graphic.GraphicsLayer object
              // e.StylusDevice is the System.Windows.Input.MouseEventArgs.StylusDevice Property
              // e.StylusDevice.DeviceType is a TabletDeviceType Enumeration value of (Mouse, Stylus, Touch)
              // e.OriginalSource is a System.Windows.Shapes.Path
              // e.Graphic is the Graphic for which the MouseLeftButtonDown occured over 
              
            }
            </code>	
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub GraphicsLayer_MouseLeftButtonDown(ByVal sender As System.Object, ByVal e As ESRI.ArcGIS.Client.GraphicMouseButtonEventArgs)
              
              ' Alternate between setting the Graphic's Selected property to true and false depending on where the
              ' user clicks it with the left mouse button. The transitioning from one Symbol to another on the Graphic
              'based upon its Selected state is exclusively handled in XAML using the VisualStateManager Class.
              e.Graphic.Selected = Not (e.Graphic.Selected)
              
              ' Helper notes:
              ' -------------
              ' sender is the ESRI.ArcGIS.Client.Graphic.GraphicsLayer object
              ' e.StylusDevice is the System.Windows.Input.MouseEventArgs.StylusDevice Property
              ' e.StylusDevice.DeviceType is a TabletDeviceType Enumeration value of (Mouse, Stylus, Touch)
              ' e.OriginalSource is a System.Windows.Shapes.Path
              ' e.Graphic is the Graphic for which the MouseLeftButtonDown occured over 
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphic.Layer">
            <summary>
            Gets the map this layer belongs to if any.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Graphic.GeometryInstanceChangeEventArgs">
            <summary>
            Used by the Graphic.GeometryInstanceChanged event
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphic.GeometryInstanceChangeEventArgs.OldGeometry">
            <summary>
            The old geometry
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphic.GeometryInstanceChangeEventArgs.NewGeometry">
            <summary>
            The new geometry
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.ValidationException">
            <summary>
            Validation exception.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.WaitSymbols">
            <summary>
            Helper class waiting for snapshots of symbols
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyTask">
            <summary>
            Task for identifying features from a image service.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyTask"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyTask"/> class.
            </summary>
            <param name="Url">The URL of the image service.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyTask.ExecuteAsync(ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyParameters,System.Object)">
            <summary>
            Executes an IdentifyImageServiceTask against an ArcGIS Server image 
            service layer. The result is returned as an array of features.
            </summary>
            <param name="parameters">Specifies the criteria used to 
            identify the features of an image service layer.</param>
            <param name="userToken"> A user-defined object that is passed to the
            method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyTask.OnExecuteCompleted(ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyTask.ExecuteCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyTask.LastResult">
            <summary>
            The result of the last execution of the IdentifyImageServiceTask.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyTask.ExecuteCompleted">
            <summary>
            Occurs when the IdentifyImageService task completes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.DensifyParameters">
            <summary>
            Parameters contains additional properties 
            that defines how the densify task will be preformed.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DensifyParameters.MaxSegmentLength">
            <summary>
            Gets or sets the maximum allowable length of a segment
            in densified geometry.
            </summary>
            <value>The length of the max segment.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DensifyParameters.Geodesic">
            <summary>
            Gets or sets a value indicating whether the results should be 
            geodesic.
            </summary>
            <value><c>true</c> if geodesic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DensifyParameters.LengthUnit">
            <summary>
            Gets or sets the unit of measurement that applies to the 
            MaxSegmentLength.
            </summary>
            <value>The unit of measurement for the max segement length.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol">
            <summary>
            Type of <see cref="T:ESRI.ArcGIS.Client.Symbols.LineSymbol"/> that is used to draw <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline"/> objects in the <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.LineSymbol">
            <summary>
            Base class for Line symbols which are used to draw <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline"/> objects
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.LineSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Symbols.LineSymbol"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.LineSymbol.WidthProperty">
            <summary>
            Identifies the Border width dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.LineSymbol.ColorProperty">
            <summary>
            Identifies the Color Dependency Property
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.LineSymbol.Width">
            <summary>
            Gets or sets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.LineSymbol.Color">
            <summary>
            Gets or sets the color of the line.
            </summary>
            <value>The color of the line.</value>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.#ctor(System.Windows.Media.Color,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol"/> class.
            </summary>
            <param name="borderColor">Color of the border.</param>
            <param name="borderWidth">Width of the border.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.StyleProperty">
            <summary>
            Identifies the LineStyle dependency property
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.ToJson">
            <summary>
            Serializes the simple line symbol to JSON
            </summary>
            <returns>
            A JSON string representation of the simple line symbol.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.Style">
            <summary>
            Gets or sets a pre-defined Dash Array using the <see cref="T:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle"/> enumeration
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle">
            <summary>
            The pre-defined styles that can be applied to the drawn Line
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Dash">
            <summary>
            Line <see cref="T:System.Windows.Ink.Stroke"/> made of a dash pattern.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.DashDot">
            <summary>
            Line <see cref="T:System.Windows.Ink.Stroke"/> made of a dash-dot pattern.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.DashDotDot">
            <summary>
            Line <see cref="T:System.Windows.Ink.Stroke"/> made of a Dash-dot-dot pattern.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Dot">
            <summary>
            Line <see cref="T:System.Windows.Ink.Stroke"/> made of a Dot pattern.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Null">
            <summary>
            Line <see cref="T:System.Windows.Ink.Stroke"/> that has no symbol.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Solid">
            <summary>
            Line <see cref="T:System.Windows.Ink.Stroke"/> made of a solid line.  The Default line style.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ScaleBar">
             <summary>
             <para>
             <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
             </para>
             <para>
             The ScaleBar Control generates a bar representing a certain distance on the map.
             </para>
             </summary>
             <remarks>
             	<para>The following image depicts a ScaleBar that matches the code Examples in this document.</para>
             	<para>
             		<img border="0" alt="Scalebar that matches the Example code." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ScaleBar.ScaleBar1.png"/>
             	</para>
             	<para>
             		<strong>
             			<u>Setting the MapUnit Property:</u>
             		</strong>
             	</para>
             	<para>
             	For the ScaleBar to function correctly, it is important that the <see cref="P:ESRI.ArcGIS.Client.ScaleBar.MapUnit"></see> is set to 
             	whatever unit the Map's <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> is using. 
             	For example: if the Map's SpatialReference is based on a Geographic coordinate system use DecimalDegrees 
             	(aka. Longitude/Latitude) units; if it is a UTM or WebMercator (SRID=102100) projection use Meters.
             	</para>
             	<para>
             	When the Map is using Geographic units (ie. DecimalDegrees), the approximate scale will be calculated at the 
             	center of the map using the <see cref="P:ESRI.ArcGIS.Client.ScaleBar.EarthRadius"></see> as the radius for sphere used as an approximated 
             	scale. If any other units are used, a direct conversion between MapUnit's and <see cref="P:ESRI.ArcGIS.Client.ScaleBar.DisplayUnit"></see>s 
             	is used and scale distortion is not taken into account.
             	</para>
                 <para>
             		<strong>
             			<u>Controling the text on the ScaleBar:</u>
             		</strong>
                 </para>
                 <para>
                 It is not possibly to directly control the values of the text on the ScaleBar as a Property that can be set. The 
                 text as part of the ScaleBar that displays is automatically adjusted as the scale of the map changes when the 
                 ScaleBar is bound to a Map Control. This also means that it is not possible to control the scale (ie. zoom level) 
                 of the Map Control via a Property of the ScaleBar Control.
                 </para>
             </remarks>
             <example>
             	<code title="Example XAML1" description="" lang="XAML">
             	&lt;esri:ScaleBar Name="ScaleBar1" Map="{Binding ElementName=Map1}"
                   HorizontalAlignment="Left" VerticalAlignment="Top"  
                   MapUnit="DecimalDegrees" DisplayUnit="Miles"  
                   BarHeight="30" TargetWidth="400" 
                   TextColor="Black" FontFamily="Courier New" FontSize="18" 
                   FillColor1="Magenta" FillColor2="Yellow" /&gt;
                 </code>
                 
             	<code title="Example CS1" description="" lang="CS">
                 //Create a new ScaleBar Control and add it to the LayoutRoot (a Grid in the XAML)
                 ESRI.ArcGIS.Client.ScaleBar ScaleBar1 = new ESRI.ArcGIS.Client.ScaleBar();
                 LayoutRoot.Children.Add(ScaleBar1);
             
                 //Associate the ScaleBar with Map Control (analagous to a OneTime Binding). Most common coding pattern.
                 ScaleBar1.Map = Map1;
             
                 //Alternative Binding Method. Useful if the ScaleBar's Properties will dynamically impact other objects.
                 //System.Windows.Data.Binding myBinding = new System.Windows.Data.Binding();
                 //myBinding.ElementName = "Map1";
                 //ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.MapProperty, myBinding);
            
                 //Set the alignment properties relative the hosting Grid Control
                 ScaleBar1.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                 ScaleBar1.VerticalAlignment = System.Windows.VerticalAlignment.Top;
             
                 //Set the Map and Display units for the ScaleBar
                 ScaleBar1.MapUnit = ESRI.ArcGIS.Client.ScaleBarUnit.DecimalDegrees;
                 ScaleBar1.DisplayUnit = ESRI.ArcGIS.Client.ScaleBarUnit.Miles;
             
                 //Set the height and width for the ScaleBar
                 ScaleBar1.BarHeight = 30;
                 ScaleBar1.TargetWidth = 400;
             
                 //Set TextColor and related Font information
                 System.Windows.Media.Color myTextColor = Color.FromArgb(255, 0, 0, 0);
                 ScaleBar1.TextColor = new System.Windows.Media.SolidColorBrush(myTextColor);
                 ScaleBar1.FontFamily = new FontFamily("Courier New");
                 ScaleBar1.FontSize = 18;
             
                 //Set the color of the alternating bars on the ScaleBar
                 System.Windows.Media.Color myFillColor1 = Color.FromArgb(255, 255, 0, 255);
                 ScaleBar1.FillColor1 = new System.Windows.Media.SolidColorBrush(myFillColor1);
                 System.Windows.Media.Color myFillColor2 = Color.FromArgb(255, 255, 255, 0);
                 ScaleBar1.FillColor2 = new System.Windows.Media.SolidColorBrush(myFillColor2);
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
             	'Create a new ScaleBar Control and add it to the LayoutRoot (a Grid in the XAML)
                 Dim ScaleBar1 As New ESRI.ArcGIS.Client.ScaleBar
                 LayoutRoot.Children.Add(ScaleBar1)
             
                 'Associate the ScaleBar with Map Control (analagous to a OneTime Binding). Most common coding pattern.
                 ScaleBar1.Map = Map1
             
                 'Alternative Binding Method. Useful if the ScaleBar's Properties will dynamically impact other objects.
                 'Dim myBinding As System.Windows.Data.Binding = New System.Windows.Data.Binding()
                 'myBinding.ElementName = "Map1"
                 'ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.MapProperty, myBinding)
            
                 'Set the alignment properties relative the hosting Grid Control
                 ScaleBar1.HorizontalAlignment = Windows.HorizontalAlignment.Left
                 ScaleBar1.VerticalAlignment = Windows.VerticalAlignment.Top
             
                 'Set the Map and Display units for the ScaleBar
                 ScaleBar1.MapUnit = ESRI.ArcGIS.Client.ScaleBarUnit.DecimalDegrees
                 ScaleBar1.DisplayUnit = ESRI.ArcGIS.Client.ScaleBarUnit.Miles
             
                 'Set the height and width for the ScaleBar
                 ScaleBar1.BarHeight = 30
                 ScaleBar1.TargetWidth = 400
             
                 'Set TextColor and related Font information
                 Dim myTextColor As System.Windows.Media.Color = Color.FromArgb(255, 0, 0, 0)
                 ScaleBar1.TextColor = New System.Windows.Media.SolidColorBrush(myTextColor)
                 ScaleBar1.FontFamily = New FontFamily("Courier New")
                 ScaleBar1.FontSize = 18
             
                 'Set the color of the alternating bars on the ScaleBar
                 Dim myFillColor1 As System.Windows.Media.Color = Color.FromArgb(255, 255, 0, 255)
                 ScaleBar1.FillColor1 = New System.Windows.Media.SolidColorBrush(myFillColor1)
                 Dim myFillColor2 As System.Windows.Media.Color = Color.FromArgb(255, 255, 255, 0)
                 ScaleBar1.FillColor2 = New System.Windows.Media.SolidColorBrush(myFillColor2)
                 </code>
             </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ScaleBar.#ctor">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.ScaleBar"/> class.
            </para>
            </summary>
            <example>
            	<code title="Example XAML1" description="" lang="XAML">
            	&lt;esri:ScaleBar Name="ScaleBar1" Map="{Binding ElementName=Map1} /esri:ScaleBar&gt;
                </code>
                
            	<code title="Example CS1" description="" lang="CS">
                //Create a new ScaleBar Control and add it to the LayoutRoot (a Grid in the XAML)
                ESRI.ArcGIS.Client.ScaleBar ScaleBar1 = new ESRI.ArcGIS.Client.ScaleBar();
                LayoutRoot.Children.Add(ScaleBar1);
            
                //Associate the ScaleBar with Map Control
                ScaleBar1.Map = Map1;
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
            	'Create a new ScaleBar Control and add it to the LayoutRoot (a Grid in the XAML)
                Dim ScaleBar1 As New ESRI.ArcGIS.Client.ScaleBar
                LayoutRoot.Children.Add(ScaleBar1)
            
                'Associate the ScaleBar with Map Control
                ScaleBar1.Map = Map1
                </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ScaleBar.#cctor">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Static initialization for the <see cref="T:ESRI.ArcGIS.Client.ScaleBar"/> control.
            </para>
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ScaleBar.OnApplyTemplate">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a 
            rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </para>
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBar.TextColorProperty">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.ScaleBar.TextColor"/> dependency property.
            </para>
            </summary>
            <remarks>Property Fields are used for binding to other objects in the code-behind class file.
            </remarks>
            <example>
            	<code title="Example CS1" description="" lang="CS">
                //Assuming that a ScaleBar (named ScaleBar1) and a TextBox (named TextBox1) are 
                //previously defined, the ScaleBar1.TextColor can be bound to the TextBox1.Background.
                System.Windows.Data.Binding myBinding = new System.Windows.Data.Binding("Background");
                myBinding.ElementName = "TextBox1";
                ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.TextColorProperty, myBinding);
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                'Assuming that a ScaleBar (named ScaleBar1) and a TextBox (named TextBox1) are 
                'previously defined, the ScaleBar1.TextColor can be bound to the TextBox1.Background.
                 Dim myBinding As System.Windows.Data.Binding = New System.Windows.Data.Binding("Background")
                 myBinding.ElementName = "TextBox1"
                 ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.TextColorProperty, myBinding)
                </code>
            </example>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBar.FillColor1Property">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.ScaleBar.FillColor1"/> dependency property.
            </para>
            </summary>
            <remarks>Property Fields are used for binding to other objects in the code-behind class file.
            </remarks>
            <example>
            	<code title="Example CS1" description="" lang="CS">
                //Assuming that a ScaleBar (named ScaleBar1) and a TextBox (named TextBox1) are 
                //previously defined, the ScaleBar1.FillColor1 can be bound to the TextBox1.Background.
                System.Windows.Data.Binding myBinding = new System.Windows.Data.Binding("Background");
                myBinding.ElementName = "TextBox1";
                ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.FillColor1, myBinding);
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                'Assuming that a ScaleBar (named ScaleBar1) and a TextBox (named TextBox1) are 
                'previously defined, the ScaleBar1.FillColor1 can be bound to the TextBox1.Background.
                 Dim myBinding As System.Windows.Data.Binding = New System.Windows.Data.Binding("Background")
                 myBinding.ElementName = "TextBox1"
                 ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.FillColor1, myBinding)
                </code>
            </example>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBar.FillColor2Property">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.ScaleBar.FillColor2"/> dependency property.
            </para>
            </summary>
            <remarks>Property Fields are used for binding to other objects in the code-behind class file.
            </remarks>
            <example>
            	<code title="Example CS1" description="" lang="CS">
                //Assuming that a ScaleBar (named ScaleBar1) and a TextBox (named TextBox1) are 
                //previously defined, the ScaleBar1.FillColor2 can be bound to the TextBox1.Background.
                System.Windows.Data.Binding myBinding = new System.Windows.Data.Binding("Background");
                myBinding.ElementName = "TextBox1";
                ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.FillColor2, myBinding);
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                'Assuming that a ScaleBar (named ScaleBar1) and a TextBox (named TextBox1) are 
                'previously defined, the ScaleBar1.FillColor2 can be bound to the TextBox1.Background.
                 Dim myBinding As System.Windows.Data.Binding = New System.Windows.Data.Binding("Background")
                 myBinding.ElementName = "TextBox1"
                 ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.FillColor2, myBinding)
                </code>
            </example>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBar.DisplayUnitProperty">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Identifies the  <see cref="P:ESRI.ArcGIS.Client.ScaleBar.DisplayUnit"/> dependency property.
            </para>
            </summary>
            <remarks>Property Fields are used for binding to other objects in the code-behind class file.
            </remarks>
            <example>
            	<code title="Example CS1" description="" lang="CS">
                //Assuming that a ScaleBar (named ScaleBar1) and a ScaleBar (named ScaleBar2) are 
                //previously defined, the ScaleBar1.DisplayUnit can be bound to the ScaleBar2.MapUnit.
                System.Windows.Data.Binding myBinding = new System.Windows.Data.Binding("MapUnit");
                myBinding.ElementName = "ScaleBar2";
                ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.DisplayUnitProperty, myBinding);
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                'Assuming that a ScaleBar (named ScaleBar1) and a ScaleBar (named ScaleBar2) are 
                'previously defined, the ScaleBar1.DisplayUnit can be bound to the ScaleBar2.MapUnit.
                Dim myBinding As System.Windows.Data.Binding = New System.Windows.Data.Binding("MapUnit")
                myBinding.ElementName = "ScaleBar2"
                ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.DisplayUnitProperty, myBinding)
                </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ScaleBar.OnDisplayUnitPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            DisplayUnitProperty property changed handler.
            </para>
            </summary>
            <param name="d">ScaleBar that changed its DisplayUnit.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBar.MapProperty">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Identifies the Map dependency property.
            </para>
            </summary>
            <remarks>Property Fields are used for binding to other objects in the code-behind class file.
            <para>
            For most circumstances using the MapProperty Field to bind to other objects may not be necessary; consider 
            using the ScaleBar.Map property instead.</para>
            </remarks>
            <example>
            	<code title="Example CS1" description="" lang="CS">
                //Assuming that a ScaleBar (named ScaleBar1) and a Map (named Map1) are previously defined, the 
                //ScaleBar1.Map can be OneTime bound to Map1.
                System.Windows.Data.Binding myBinding = new System.Windows.Data.Binding();
                myBinding.ElementName = "Map1";
                ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.MapProperty, myBinding);
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                'Assuming that a ScaleBar (named ScaleBar1) and a Map (named Map1) are previously defined, the 
                'ScaleBar1.Map can be OneTime bound to Map1.
                Dim myBinding As System.Windows.Data.Binding = New System.Windows.Data.Binding()
                myBinding.ElementName = "Map1"
                ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.MapProperty, myBinding)
                </code>
            </example>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBar.TargetWidthProperty">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.ScaleBar.TargetWidth"/> dependency property.
            </para>
            </summary>
            <remarks>Property Fields are used for binding to other objects in the code-behind class file.
            </remarks>
            <example>
            	<code title="Example CS1" description="" lang="CS">
                //Assuming that a ScaleBar (named ScaleBar1) and a Slider (named Slider1) are 
                //previously defined, the ScaleBar1.TargetWidth can be bound to the Slider1.Value.
                System.Windows.Data.Binding myBinding = new System.Windows.Data.Binding("Value");
                myBinding.ElementName = "Slider1";
                ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.TargetWidthProperty, myBinding);
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                'Assuming that a ScaleBar (named ScaleBar1) and a Slider (named Slider1) are 
                'previously defined, the ScaleBar1.TargetWidth can be bound to the Slider1.Value.
                Dim myBinding As System.Windows.Data.Binding = New System.Windows.Data.Binding("Value")
                myBinding.ElementName = "Slider1"
                ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.TargetWidthProperty, myBinding)
                </code>
            </example>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBar.BarHeightProperty">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.ScaleBar.BarHeight"/> dependency property.
            </para>
            </summary>
            <remarks>Property Fields are used for binding to other objects in the code-behind class file.
            </remarks>
            <example>
            	<code title="Example CS1" description="" lang="CS">
                //Assuming that a ScaleBar (named ScaleBar1) and a Slider (named Slider1) are 
                //previously defined, the ScaleBar1.BarHeight can be bound to the Slider1.Value.
                System.Windows.Data.Binding myBinding = new System.Windows.Data.Binding("Value");
                myBinding.ElementName = "Slider1";
                ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.BarHeightProperty, myBinding);
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                'Assuming that a ScaleBar (named ScaleBar1) and a Slider (named Slider1) are 
                'previously defined, the ScaleBar1.BarHeight can be bound to the Slider1.Value.
                Dim myBinding As System.Windows.Data.Binding = New System.Windows.Data.Binding("Value")
                myBinding.ElementName = "Slider1"
                ScaleBar1.SetBinding(ESRI.ArcGIS.Client.ScaleBar.BarHeightProperty, myBinding)
                </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ScaleBar.map_ExtentChanged(System.Object,ESRI.ArcGIS.Client.ExtentEventArgs)">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Handles the ExtentChanged event of the map control and updates the scale bar.
            </para>
            </summary>
            <param name="sender">The source of the event (the map).</param>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.ExtentEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ScaleBar.getResolutionForGeographic(ESRI.ArcGIS.Client.Geometry.MapPoint,System.Double)">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Calculates horizontal scale at center of extent for geographic / Plate Carrée projection. Horizontal scale is 0 at the poles.
            </para>
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ScaleBar.UnitToString(ESRI.ArcGIS.Client.ScaleBarUnit)">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Creates a string representation of a unit by inserting a space before capital letters.
            </para>
            </summary>
            <param name="unit">unit</param>
            <returns>String name</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ScaleBar.ScaleValue">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Gets the current scale value.
            </para>
            </summary>
            <value>The current scale value.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ScaleBar.EarthRadius">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Gets or sets the earth radius in meters used for converting decimal degrees to a linear unit.
            </para>
            </summary>
            <value>The earth radius in meters (defaults to WGS84/GRS80 radius).</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ScaleBar.TextColor">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Gets or sets the color of the text that is displayed on the ScaleBar Control to denote the current scale.
            </para>
            </summary>
            <remarks>
            	<para>The following image depicts what part of the ScaleBar is impacted by the TextColor Property:</para>
            	<para>
            		<img border="0" alt="The TextColor Property is set to Black." src="C:\ArcGIS\dotNET\API SDK\Main\ArcGISSilverlightSDK\LibraryReference\images\Client.ScaleBar.TextColor.png"/>
            	</para>
            	<para>
            		<strong>
            			<u>TextColor considerations:</u>
            		</strong>
            	</para>
            	<para>The default TextColor is White.</para>
            	<para>
            	If the ScaleBar Control is sitting on an area of the SilverLight/WPF application where the background is also 
            	White, it will appear that no text is displayed. Change the TextColor to a color that contrasts with the 
            	background Silverlight/WPF application where the ScaleBar sits and the text will be revealed.</para>
            </remarks>
            <example>
            	<code title="Example XAML 1" description="" lang="XAML">
            	&lt;esri:ScaleBar Name="ScaleBar1" Map="{Binding ElementName=Map1}"
                           MapUnit="DecimalDegrees" DisplayUnit="Miles"  
                           TextColor="Black" FontFamily="Courier New" FontSize="18" /&gt;
               </code>
                
            <code title="Example CS 1" description="" lang="CS">
            //Using the existing ScaleBar1 Control that was defined previously
            	
            //Bind to a Map Control
            ScaleBar1.Map = Map1;
            
            //Set the Map and Display units for the ScaleBar
            ScaleBar1.MapUnit = ESRI.ArcGIS.Client.ScaleBarUnit.DecimalDegrees;
            ScaleBar1.DisplayUnit = ESRI.ArcGIS.Client.ScaleBarUnit.Miles;
            
            //Set TextColor and related Font information
            System.Windows.Media.Color myTextColor = Color.FromArgb(255, 0, 0, 0); //Black
            ScaleBar1.TextColor = new System.Windows.Media.SolidColorBrush(myTextColor);
            ScaleBar1.FontFamily = new FontFamily("Courier New");
            ScaleBar1.FontSize = 18;
            </code>
               
               <code title="Example VB 1" description="" lang="VB.NET">
               Using the existing ScaleBar1 Control that was defined previously
               
               'Bind to a Map Control
               ScaleBar1.Map = Map1
            
               'Set the Map and Display units for the ScaleBar
               ScaleBar1.MapUnit = ESRI.ArcGIS.Client.ScaleBarUnit.DecimalDegrees
               ScaleBar1.DisplayUnit = ESRI.ArcGIS.Client.ScaleBarUnit.Miles
            
               'Set TextColor and related Font information
               Dim myTextColor As System.Windows.Media.Color = Color.FromArgb(255, 0, 0, 0) 'Black
               ScaleBar1.TextColor = New System.Windows.Media.SolidColorBrush(myTextColor)
               ScaleBar1.FontFamily = New FontFamily("Courier New")
               ScaleBar1.FontSize = 18
               </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ScaleBar.FillColor1">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Gets or sets the FillColor1.
            </para>
            </summary>
            <remarks>
             	<para>The following image depicts which parts of the ScaleBar Control use FillColor1 and FillColor2:</para>
            	<para>
            		<img border="0" alt="ScaleBar FillColor1 and FillColor2 depicted.." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ScaleBar.FillColor.png"/>
            	</para>
            	<para>
            		<strong>
            			<u>Default color values:</u>
            		</strong>
            	</para>
            	<para>By default FillColor1 is set to solid White and FillColor2 is set to solid Black.</para>
            	<para>
            		<strong>
            			<u>Creativity with FillColor1 and FillColor2:</u>
            		</strong>
            	</para>
                <para>
                Developers are not limited to solid fill colors (ex: Red, White, or Blue) for the FillColor1 and FillColor2 
                Properties. Any System.Windows.Media.Brush object can be used, including:
                </para>
            	<list type="bullet">
            		<item>SolidColorBrush</item>
            		<item>LinearGradientBrush</item>
            		<item>RadialGradientBrush</item>
            		<item>ImageBrush</item>
            		<item>VideoBrush</item>
            	</list>
            	<para>
            	The following image is a visual example of a ScaleBar using the LinearGradientBrush and RadialGradientBrush 
            	for the FillColor1 and FillColor2 Propeties:
            	</para>
            	<para>
            	<img border="0" alt="ScaleBar using LinearGradientBrush and RadialGradientBrush for the FillColor1 and FillColor2 depicted." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ScaleBar.LinearAndRadialGradientBrush.png"/>
            	</para>
            </remarks>
            <example>
            	<code title="Test" description="" lang="XAML">
            	&lt;!-- Standard SolidColorBrush example --&gt;
                &lt;esri:ScaleBar Name="ScaleBar1" Map="{Binding ElementName=Map1}" FillColor1="Magenta" 
                FillColor2="Yellow" /&gt;
                
                &lt;!-- Alternative LinearGradientBrush and RadialGradientBrush example --&gt;        
                &lt;esri:ScaleBar Name="ScaleBar2" Map="{Binding ElementName=Map1}"
                       HorizontalAlignment="Left" VerticalAlignment="Top"  
                       MapUnit="DecimalDegrees" DisplayUnit="Miles"  
                       BarHeight="30" TargetWidth="400" 
                       TextColor="Black" FontFamily="Courier New" FontSize="18" &gt;
                  &lt;esri:ScaleBar.FillColor1&gt;
                    &lt;LinearGradientBrush StartPoint="0,0" EndPoint="1,1"&gt;
                        &lt;GradientStop Color="Yellow" Offset="0.0" /&gt;
                        &lt;GradientStop Color="Black" Offset="1.0" /&gt;
                    &lt;/LinearGradientBrush&gt;
                  &lt;/esri:ScaleBar.FillColor1&gt;
                  &lt;esri:ScaleBar.FillColor2&gt;
                    &lt;RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5"&gt;
                        &lt;GradientStop Color="Yellow" Offset="0" /&gt;
                        &lt;GradientStop Color="Black" Offset="1.0" /&gt;
                    &lt;/RadialGradientBrush&gt;
                  &lt;/esri:ScaleBar.FillColor2&gt;
                &lt;/esri:ScaleBar&gt;
               </code>
            
                <code title="Example1" description="" lang="CS">
                //The ScaleBar1 and ScaleBar2 were define previously in the code...
            
                //Standard SolidColorBrush example
                System.Windows.Media.Color myFillColor1a = Color.FromArgb(255, 255, 255, 0); //Yellow
                ScaleBar1.FillColor1 = new System.Windows.Media.SolidColorBrush(myFillColor1a);
                System.Windows.Media.Color myFillColor2a = Color.FromArgb(255, 0, 0, 0); //Black
                ScaleBar1.FillColor2 = new System.Windows.Media.SolidColorBrush(myFillColor2a);
            
            
                //Alternative LinearGradientBrush and RadialGradientBrush example
                System.Windows.Media.GradientStopCollection myGradientStopCollection = new System.Windows.Media.GradientStopCollection();
                LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush();
            
                GradientStop gradientStop1 = new GradientStop();
                System.Windows.Media.Color myFillColor1b = Color.FromArgb(255, 255, 255, 0); //Yellow
                gradientStop1.Color = myFillColor1b;
            
                GradientStop gradientStop2 = new GradientStop();
                System.Windows.Media.Color myFillColor2b = Color.FromArgb(255, 0, 0, 0); //Black
                gradientStop2.Color = myFillColor2b;
                gradientStop2.Offset = 1;
            
                myGradientStopCollection.Add(gradientStop1);
                myGradientStopCollection.Add(gradientStop2);
            
                ScaleBar2.FillColor1 = new System.Windows.Media.LinearGradientBrush(myGradientStopCollection, 45);
                ScaleBar2.FillColor2 = new System.Windows.Media.RadialGradientBrush(myFillColor1b, myFillColor2b);
                </code>
            
                <code title="Example1" description="" lang="VB.NET">
                'The ScaleBar1 and ScaleBar2 were define previously in the code...
            
                'Standard SolidColorBrush example
                Dim myFillColor1a As System.Windows.Media.Color = Color.FromArgb(255, 255, 255, 0) 'Yellow
                ScaleBar1.FillColor1 = New System.Windows.Media.SolidColorBrush(myFillColor1a)
                Dim myFillColor2a As System.Windows.Media.Color = Color.FromArgb(255, 0, 0, 0) 'Black
                ScaleBar1.FillColor2 = New System.Windows.Media.SolidColorBrush(myFillColor2a)
            
            
                'Alternative LinearGradientBrush and RadialGradientBrush example
                Dim myGradientStopCollection As System.Windows.Media.GradientStopCollection = New System.Windows.Media.GradientStopCollection
                Dim myLinearGradientBrush As LinearGradientBrush = New LinearGradientBrush()
            
                Dim gradientStop1 As GradientStop = New GradientStop()
                Dim myFillColor1b As System.Windows.Media.Color = Color.FromArgb(255, 255, 255, 0) 'Yellow
                gradientStop1.Color = myFillColor1b
            
                Dim gradientStop2 As GradientStop = New GradientStop()
                Dim myFillColor2b As System.Windows.Media.Color = Color.FromArgb(255, 0, 0, 0) 'Black
                gradientStop2.Color = myFillColor2b
                gradientStop2.Offset = 1
            
                myGradientStopCollection.Add(gradientStop1)
                myGradientStopCollection.Add(gradientStop2)
            
                ScaleBar2.FillColor1 = New System.Windows.Media.LinearGradientBrush(myGradientStopCollection, 45)
                ScaleBar2.FillColor2 = New System.Windows.Media.RadialGradientBrush(myFillColor1b, myFillColor2b)
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ScaleBar.FillColor2">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Gets or sets the FillColor2.
            </para>
            </summary>
            <remarks>
             	<para>The following image depicts which parts of the ScaleBar Control use FillColor1 and FillColor2:</para>
            	<para>
            		<img border="0" alt="ScaleBar FillColor1 and FillColor2 depicted.." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ScaleBar.FillColor.png"/>
            	</para>
            	<para>
            		<strong>
            			<u>Default color values:</u>
            		</strong>
            	</para>
            	<para>By default FillColor1 is set to solid White and FillColor2 is set to solid Black.</para>
            	<para>
            		<strong>
            			<u>Creativity with FillColor1 and FillColor2:</u>
            		</strong>
            	</para>
                <para>
                Developers are not limited to solid fill colors (ex: Red, White, or Blue) for the FillColor1 and FillColor2 
                Properties. Any System.Windows.Media.Brush object can be used, including:
                </para>
            	<list type="bullet">
            		<item>SolidColorBrush</item>
            		<item>LinearGradientBrush</item>
            		<item>RadialGradientBrush</item>
            		<item>ImageBrush</item>
            		<item>VideoBrush</item>
            	</list>
            	<para>
            	The following image is a visual example of a ScaleBar using the LinearGradientBrush and RadialGradientBrush 
            	for the FillColor1 and FillColor2 Propeties:
            	</para>
            	<para>
            	<img border="0" alt="ScaleBar using LinearGradientBrush and RadialGradientBrush for the FillColor1 and FillColor2 depicted.." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ScaleBar.LinearAndRadialGradientBrush.png"/>
            	</para>	
            </remarks>
            <example>
            	<code title="Test" description="" lang="XAML">
            	&lt;!-- Standard SolidColorBrush example --&gt;
                &lt;esri:ScaleBar Name="ScaleBar1" Map="{Binding ElementName=Map1}" FillColor1="Magenta" 
                FillColor2="Yellow" /&gt;
                
                &lt;!-- Alternative LinearGradientBrush and RadialGradientBrush example --&gt;        
                &lt;esri:ScaleBar Name="ScaleBar2" Map="{Binding ElementName=Map1}"
                       HorizontalAlignment="Left" VerticalAlignment="Top"  
                       MapUnit="DecimalDegrees" DisplayUnit="Miles"  
                       BarHeight="30" TargetWidth="400" 
                       TextColor="Black" FontFamily="Courier New" FontSize="18" &gt;
                  &lt;esri:ScaleBar.FillColor1&gt;
                    &lt;LinearGradientBrush StartPoint="0,0" EndPoint="1,1"&gt;
                        &lt;GradientStop Color="Yellow" Offset="0.0" /&gt;
                        &lt;GradientStop Color="Black" Offset="1.0" /&gt;
                    &lt;/LinearGradientBrush&gt;
                  &lt;/esri:ScaleBar.FillColor1&gt;
                  &lt;esri:ScaleBar.FillColor2&gt;
                    &lt;RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5"&gt;
                        &lt;GradientStop Color="Yellow" Offset="0" /&gt;
                        &lt;GradientStop Color="Black" Offset="1.0" /&gt;
                    &lt;/RadialGradientBrush&gt;
                  &lt;/esri:ScaleBar.FillColor2&gt;
                &lt;/esri:ScaleBar&gt;
                </code>
            
                <code title="Example1" description="" lang="CS">
                //The ScaleBar1 and ScaleBar2 were define previously in the code...
            
                //Standard SolidColorBrush example
                System.Windows.Media.Color myFillColor1a = Color.FromArgb(255, 255, 255, 0); //Yellow
                ScaleBar1.FillColor1 = new System.Windows.Media.SolidColorBrush(myFillColor1a);
                System.Windows.Media.Color myFillColor2a = Color.FromArgb(255, 0, 0, 0); //Black
                ScaleBar1.FillColor2 = new System.Windows.Media.SolidColorBrush(myFillColor2a);
            
            
                //Alternative LinearGradientBrush and RadialGradientBrush example
                System.Windows.Media.GradientStopCollection myGradientStopCollection = new System.Windows.Media.GradientStopCollection();
                LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush();
            
                GradientStop gradientStop1 = new GradientStop();
                System.Windows.Media.Color myFillColor1b = Color.FromArgb(255, 255, 255, 0); //Yellow
                gradientStop1.Color = myFillColor1b;
            
                GradientStop gradientStop2 = new GradientStop();
                System.Windows.Media.Color myFillColor2b = Color.FromArgb(255, 0, 0, 0); //Black
                gradientStop2.Color = myFillColor2b;
                gradientStop2.Offset = 1;
            
                myGradientStopCollection.Add(gradientStop1);
                myGradientStopCollection.Add(gradientStop2);
            
                ScaleBar2.FillColor1 = new System.Windows.Media.LinearGradientBrush(myGradientStopCollection, 45);
                ScaleBar2.FillColor2 = new System.Windows.Media.RadialGradientBrush(myFillColor1b, myFillColor2b);
                </code>
            
                <code title="Example1" description="" lang="VB.NET">
                'The ScaleBar1 and ScaleBar2 were define previously in the code...
            
                'Standard SolidColorBrush example
                Dim myFillColor1a As System.Windows.Media.Color = Color.FromArgb(255, 255, 255, 0) 'Yellow
                ScaleBar1.FillColor1 = New System.Windows.Media.SolidColorBrush(myFillColor1a)
                Dim myFillColor2a As System.Windows.Media.Color = Color.FromArgb(255, 0, 0, 0) 'Black
                ScaleBar1.FillColor2 = New System.Windows.Media.SolidColorBrush(myFillColor2a)
            
            
                'Alternative LinearGradientBrush and RadialGradientBrush example
                Dim myGradientStopCollection As System.Windows.Media.GradientStopCollection = New System.Windows.Media.GradientStopCollection
                Dim myLinearGradientBrush As LinearGradientBrush = New LinearGradientBrush()
            
                Dim gradientStop1 As GradientStop = New GradientStop()
                Dim myFillColor1b As System.Windows.Media.Color = Color.FromArgb(255, 255, 255, 0) 'Yellow
                gradientStop1.Color = myFillColor1b
            
                Dim gradientStop2 As GradientStop = New GradientStop()
                Dim myFillColor2b As System.Windows.Media.Color = Color.FromArgb(255, 0, 0, 0) 'Black
                gradientStop2.Color = myFillColor2b
                gradientStop2.Offset = 1
            
                myGradientStopCollection.Add(gradientStop1)
                myGradientStopCollection.Add(gradientStop2)
            
                ScaleBar2.FillColor1 = New System.Windows.Media.LinearGradientBrush(myGradientStopCollection, 45)
                ScaleBar2.FillColor2 = New System.Windows.Media.RadialGradientBrush(myFillColor1b, myFillColor2b)
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ScaleBar.DisplayUnit">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Gets or sets the type of units that are displayed in the text area of the ScaleBar control.
            </para>
            </summary>
            <remarks>
            	<para>The following image depicts ScaleBar's with different DisplayUnit values set:</para>
            	<para>
            		<img border="0" alt="ScaleBar's with different DisplayUnit's set." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ScaleBar.DisplayUnit.png"/>
            	</para>
            	<para>
            		<strong>
            			<u>Purpose of setting the DisplayUnit Property:</u>
            		</strong>
            	</para>
                <para>
                The DisplayUnit Property provides the human readable type of units that are displayed in the text area
                of the ScaleBar Control. It is not necessary that the MapUnit and DisplayUnit be the same on the ScaleBar. For
                example: the Map Controls <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> may be in 
                Decimal Degrees (a type of Geographic projection) but this might not serve as very useful for individuals using 
                the map to view drive distances; setting the DisplayUnit to Miles would be more appropriate. 
                </para>
            	<para>
            		<strong>
            			<u>Types of DisplayUnit values:</u>
            		</strong>
            	</para>
            	<para>
            	The types of DisplayUnit values that can be set are defined in the 
            	<see cref="T:ESRI.ArcGIS.Client.ScaleBarUnit">ESRI.ArcGIS.Client.ScaleBarUnit Enumeration's</see>.
            	The availabe types are:
            	</para>
            	<list type="bullet">
            		<item>Centimeters</item>
            		<item>DecimalDegrees</item>
            		<item>Decimteres</item>
            		<item>Feet</item>
            		<item>Inches</item>
            		<item>Kilometers</item>
            		<item>Meters</item>
            		<item>Miles</item>
            		<item>Millimeters</item>
            		<item>NauticalMiles</item>
            		<item>Undefined</item>
            		<item>Yards</item>
            	</list>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ScaleBar.MapUnit">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Gets or sets the Map's underlying units being used.
            </para>
            </summary>
            <remarks>
            <para>
            For the ScaleBar to function correctly, it is important that the MapUnit is set to whatever unit the 
            Map's <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> is using. By default the 
            SpatialReference is automatically defined by the first layer with a SpatialReference in the layer collection.
            </para>
            <para>
            Unlike the <see cref="P:ESRI.ArcGIS.Client.ScaleBar.DisplayUnit"></see> which users see on the ScaleBar Control, the MapUnit is based upon 
            the geographic data that is loaded in the Map Control. Geographic data can be stored in various formats that 
            are most suited its purpose. Some examples of common common native formats of geographic data include Decimal 
            Degrees for the Geographic projection, Meters for the Universal Transverse Mercator (UTM) projection, and Feet 
            for the State Plane projection.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ScaleBar.Map">
             <summary>
             <para>
             <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
             </para>
             <para>
             Gets or sets the Map Control that the ScaleBar Control is associated with.
             </para>
             </summary>
             <remarks>
             It is required that the ScaleBar Control be associated with a Map Control in order to display in an  
             application. If the ScaleBar.Map Property is not set correctly, the application may compile but the ScaleBar 
             will not be visible. The ScaleBar.Map property can be set in XAML or the code-behind files.
             <para>
             For most circumstances setting the Map property is all that is needed to perform a OneTime bind between the 
             Map and ScaleBar Controls. This OneTime binding will make it so that as the Map's extent is changed, the
             ScaleBar will adjust accordingly. If more granular control is needed to have a Property on the 
             ScaleBar Control change dynamically, it is possible to use traditional binding in the code-behind via the 
             <see cref="F:ESRI.ArcGIS.Client.ScaleBar.MapProperty"></see>.
            </para>
             </remarks>
             <example>
             	<code title="Example XAML1" description="" lang="XAML">
             	&lt;esri:ScaleBar Name="ScaleBar1" Map="{Binding ElementName=Map1}" /&gt;
                 </code>
                 
             	<code title="Example CS1" description="" lang="CS">
                 //Create a new ScaleBar Control and add it to the LayoutRoot (a Grid in the XAML)
                 ESRI.ArcGIS.Client.ScaleBar ScaleBar1 = new ESRI.ArcGIS.Client.ScaleBar();
                 LayoutRoot.Children.Add(ScaleBar1);
             
                 //Associate the ScaleBar with Map Control
                 ScaleBar1.Map = Map1;
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
             	'Create a new ScaleBar Control and add it to the LayoutRoot (a Grid in the XAML)
                 Dim ScaleBar1 As New ESRI.ArcGIS.Client.ScaleBar
                 LayoutRoot.Children.Add(ScaleBar1)
             
                 'Associate the ScaleBar with Map Control
                 ScaleBar1.Map = Map1
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ScaleBar.TargetWidth">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Gets or sets the width of the ScaleBar Control.
            </para>
            </summary>
            <remarks>
                <para>
                The TargetWidth of the ScaleBar Control is the total width of the graphic bars on Control; not the single 
                individual alternating sub-bars. It is the entire horizintal width of the graphic bar portion of the 
                ScaleBar that matches the text on the ScaleBar for a particular zoom level. 
                </para>
            	<para>
            		<img border="0" alt="Example of the Scalebar TargetWidth." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ScaleBar.TargetWidth.png"/>
            	</para>
            	<para>The actual width of the ScaleBar changes when values are rounded.</para>
            </remarks>
            <example>
            	<code title="Test" description="" lang="XAML">
                &lt;esri:ScaleBar Name="ScaleBar1" Map="{Binding ElementName=Map1}" TargetWidth="300" /&gt;
                </code>
            
                <code title="Example1" description="" lang="CS">
                //The ScaleBar Control (named ScaleBar1) was define previously in the code...
                ScaleBar1.TargetWidth = 300;
                </code>
            
                <code title="Example1" description="" lang="VB.NET">
                'The ScaleBar Control (named ScaleBar1) was define previously in the code...
                ScaleBar1.TargetWidth = 300
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ScaleBar.BarHeight">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Gets or sets the height of the ScaleBar Control.
            </para>
            </summary>
            <remarks>
                <para>
                The BarHeight of the ScaleBar Control is the total height of the graphic bars in the Control; not one 
                of the single individual alternating sub-bars.
                </para>
            	<para>
            		<img border="0" alt="Example of the Scalebar BarHeight." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ScaleBar.BarHeight.png"/>
            	</para>
            </remarks>
            <example>
            	<code title="Test" description="" lang="XAML">
                &lt;esri:ScaleBar Name="ScaleBar1" Map="{Binding ElementName=Map1}" BarHeight="50" /&gt;
                </code>
            
                <code title="Example1" description="" lang="CS">
                //The ScaleBar Control (named ScaleBar1) was define previously in the code...
                ScaleBar1.BarHeight = 50;
                </code>
            
                <code title="Example1" description="" lang="VB.NET">
                'The ScaleBar Control (named ScaleBar1) was define previously in the code...
                ScaleBar1.BarHeight = 50
                </code>
            </example>
        </member>
        <member name="E:ESRI.ArcGIS.Client.ScaleBar.PropertyChanged">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ScaleLine control in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Occurs when a property value changes.
            </para>
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ArcGISDynamicMapServiceLayer_NoLayer">
            <summary>
              Looks up a localized string similar to Service URL does not contain any layer..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ArcGISJsonWriter_MixSpatialReference">
            <summary>
              Looks up a localized string similar to Mixed spatial reference on input geometries..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ArcGISTiledMapServiceLayer_MultiLayerCacheNotSupported">
            <summary>
              Looks up a localized string similar to &apos;ArcGISTiledMapServiceLayer&apos; does not support multi-layer caches. Use an &apos;ArcGISDynamicMapServiceLayer&apos; instead or create a single-fused cache..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ArcGISTiledMapServiceLayer_ServiceIsNotACachedMapService">
            <summary>
              Looks up a localized string similar to Service does not appear to be a cached map service..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Collection_OperationNotSupportOnReadOnlyCollection">
            <summary>
              Looks up a localized string similar to Operation not supported on read-only collection..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Converter_TypeToStringNotSupported">
            <summary>
              Looks up a localized string similar to Cannot convert to string..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.DelegateCommand_CannotExecute">
            <summary>
              Looks up a localized string similar to Cannot execute command..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.DoubleCollectionCloner_TypeNotSupported">
            <summary>
              Looks up a localized string similar to &apos;DoubleCollectionCloner&apos; does not support type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.DynamicLayer_GetImageFailed">
            <summary>
              Looks up a localized string similar to Get Image failed..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.DynamicLayer_ImageLoadFailed">
            <summary>
              Looks up a localized string similar to Image load failed &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Editing_Graphic_Null">
            <summary>
              Looks up a localized string similar to &apos;graphic&apos; cannot be null..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.EditTask_AddGraphicsFailed">
            <summary>
              Looks up a localized string similar to Add results do not match..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.EditTask_AddGraphicsToJsonFailed">
            <summary>
              Looks up a localized string similar to Could not convert add graphics to JSON..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.EditTask_DeleteGraphicsFailed">
            <summary>
              Looks up a localized string similar to Delete results do not match..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.EditTask_DeleteGraphicsToJsonFailed">
            <summary>
              Looks up a localized string similar to Could not convert delete list to JSON..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.EditTask_UpdateGraphicsFailed">
            <summary>
              Looks up a localized string similar to Update results do not match..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.EditTask_UpdateGraphicsToJsonFailed">
            <summary>
              Looks up a localized string similar to Could not convert update graphics to JSON..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ElementLayer_MissingEnvelopeProperty">
            <summary>
              Looks up a localized string similar to The attached &apos;ElementLayer.Envelope&apos; property was not set on the element..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FeatureLayer_AddAttachmentsNotSupported">
            <summary>
              Looks up a localized string similar to Layer does not support adding attachments..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FeatureLayer_AttachmentReadAccessFailed">
            <summary>
              Looks up a localized string similar to Cannot read from stream.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FeatureLayer_AttachmentsNotSupported">
            <summary>
              Looks up a localized string similar to Layer does not support attachments..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FeatureLayer_DeleteAttachmentsNotSupported">
            <summary>
              Looks up a localized string similar to Layer does not support deleting attachments..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FeatureLayer_EditNotSupported">
            <summary>
              Looks up a localized string similar to Use with feature service layer only..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FeatureLayer_FeatureCollection_Url_Modified">
            <summary>
              Looks up a localized string similar to URL cannot be set for a FeatureLayer initialized from a FeatureCollection..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FeatureLayer_FeatureCollectionPropertyChangeNotAllowed">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; property cannot be set for feature layers initialized from a feature collection..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FeatureLayer_FeatureCollectionSaveNotSupported">
            <summary>
              Looks up a localized string similar to Feature editing is not supported for feature layers initialized from a feature collection..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FeatureLayer_FeatureCollectionSnapshotModeOnly">
            <summary>
              Looks up a localized string similar to Feature layers initialized from a feature collection only support Snapshot mode..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FeatureLayer_FeatureCollectionUpdateNotSupported">
            <summary>
              Looks up a localized string similar to Update is not supported for feature layers initialized from a feature collection..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FeatureLayer_MissingField">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not set..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FeatureLayer_PropertyChangeAfterInitializeNotAllowed">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; property cannot be changed once layer has been initialized..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.FindTask_MissingLayerIDs">
            <summary>
              Looks up a localized string similar to &apos;LayerIDs&apos; not specified..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Generic_GeometryTypeNotSupported">
            <summary>
              Looks up a localized string similar to Geometry type is not supported..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Generic_MixGeometryTypeNotSupported">
            <summary>
              Looks up a localized string similar to Mix geometry types are not supported..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Generic_MixSpatialReferenceNotSupported">
            <summary>
              Looks up a localized string similar to Mix spatial references are not supported..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Generic_NumberCannotBeLessThanZero">
            <summary>
              Looks up a localized string similar to Value cannot be less than zero..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Generic_RequiredParameterIsNullOrEmpty">
            <summary>
              Looks up a localized string similar to Required parameter is null or empty..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Generic_StringToIntInvalidCharacters">
            <summary>
              Looks up a localized string similar to Number contains invalid characters..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Generic_UrlNotSet">
            <summary>
              Looks up a localized string similar to &apos;Url&apos; is not set..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.GeometryConverter_TextParseFailed">
            <summary>
              Looks up a localized string similar to Text parse failed..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Geoprocessing_UpdateDelayGreaterThanZero">
            <summary>
              Looks up a localized string similar to &apos;UpdateDelay&apos; must be greater than zero..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.GPDate_Format">
            <summary>
              Looks up a localized string similar to M/d/yyyy h:mm:ss tt.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.GPMultiValue_NotSupported">
            <summary>
              Looks up a localized string similar to &apos;GPMultiValue&apos; generic parameter must be a subclass of &apos;GPParameter&apos;..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Graphic_AttributesIsNull">
            <summary>
              Looks up a localized string similar to &apos;Attributes&apos; cannot be null..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Graphic_AttributesNotObservableDictionary">
            <summary>
              Looks up a localized string similar to &apos;Attributes&apos; must be of type &apos;ObservableDictionary&apos;..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.GraphicLayer_GeometryTypeNotSupported">
            <summary>
              Looks up a localized string similar to Geometry type not supported for drawing..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.GraphicLayer_GraphicMultiLayerAssociativity">
            <summary>
              Looks up a localized string similar to Graphic is already associated with another layer..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.GraphicsLayer_CannotModifyGraphicsPropertyWhenGraphicsSourceIsSet">
            <summary>
              Looks up a localized string similar to Operation not supported when using GraphicsSource..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.GraphicsLayer_CannotModifyGraphicsSourceWhenGraphicsItemsArePresent">
            <summary>
              Looks up a localized string similar to Graphics collection must be empty before using GraphicsSource..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.GraphicsLayer_GraphicDoesNotBelongToLayer">
            <summary>
              Looks up a localized string similar to Graphic does not belong to layer..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.GraphicsLayer_RendererNoLegendSupport">
            <summary>
              Looks up a localized string similar to &apos;Renderer&apos; does not implement &apos;ILegendSupport&apos;..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.IdentifyTask_LayerTimeOptionsNull">
            <summary>
              Looks up a localized string similar to One of the TimeOption.layerIds in the collection is null or empty..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.IdentifyTask_MapExtentNull">
            <summary>
              Looks up a localized string similar to &apos;IdentifyParameter.MapExtent&apos; is null..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.JavaScriptObjectDeserializer_BadEscape">
            <summary>
              Looks up a localized string similar to Bad escape..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.JSON_InvalidGeometry">
            <summary>
              Looks up a localized string similar to Invalid geometry..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.JSON_InvalidOrNotSupportedJson">
            <summary>
              Looks up a localized string similar to JSON string is invalid or not supported..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.JSON_UnknownGeometryType">
            <summary>
              Looks up a localized string similar to &apos;GeometryType&apos; was of unkown type..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.JsonDeserialization_MissingProperty">
            <summary>
              Looks up a localized string similar to Property was not found during JSON deserialization..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.JsonWriter_EndNoMatchingStart">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; called with no matching &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.JsonWriter_PropertyCalledOutsideObject">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; called outside of an object..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Layer_IntializeFailed">
            <summary>
              Looks up a localized string similar to Failed to initialize {0} {1}.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Layer_NotInitialized">
            <summary>
              Looks up a localized string similar to Layer not initialized..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Map_CannotBeginNavigation">
            <summary>
              Looks up a localized string similar to Cannot begin navigation - No navigation in progress..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Map_CannotEndNavigation">
            <summary>
              Looks up a localized string similar to Cannot stop navigation. No navigation in progress..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Map_InvalidSpatialReference">
            <summary>
              Looks up a localized string similar to Invalid spatial reference. Spatial reference must match map&apos;s spatial reference. Clear the map layers collection prior to changing the spatial reference..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Map_InvalidUriScheme">
            <summary>
              Looks up a localized string similar to Invalid URI scheme &apos;{0}://&apos; for map control.\nControl must be hosted in a HTTP(S) website..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Map_LayerMultiMapAssociativity">
            <summary>
              Looks up a localized string similar to Layer is already associated with another map..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Map_MissingRootElement">
            <summary>
              Looks up a localized string similar to Element &apos;RootElement&apos; not found in Map template or is not of type Grid..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Map_NavigateBeforeCallingBeginNavigation">
            <summary>
              Looks up a localized string similar to BeginNavigation must be called prior to navigating..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Map_ResolutionOutOfRange">
            <summary>
              Looks up a localized string similar to Cannot navigate to resolution equal to or less than 0..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.MapService_ExportImageNotSupported">
            <summary>
              Looks up a localized string similar to Export image is not supported..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.MapService_InvalidMetadata">
            <summary>
              Looks up a localized string similar to Invalid response from service metadata.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.MapService_InvalidUriSchemeHost">
            <summary>
              Looks up a localized string similar to Application hosted in invalid URI scheme for web requests. Only HTTP* is supported for this layer type..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.MapService_SecurityException">
            <summary>
              Looks up a localized string similar to A security exception occured while trying to connect to the REST endpoint. Make sure you have a cross domain policy file available at the root for your server that allows for requests from this application..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.MultiplicationConverter_TypeNotSupported">
            <summary>
              Looks up a localized string similar to &apos;MultiplicationConverter&apos; does not support type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.QueryTask_Error">
            <summary>
              Looks up a localized string similar to Error processing task results..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.RelationTask_RelationComparisonFailed">
            <summary>
              Looks up a localized string similar to &apos;comparisonString&apos; not specified while using &apos;esriGeometryRelationRelation&apos;..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.RouteTask_DirectionLengthUnitsInvalid">
            <summary>
              Looks up a localized string similar to Unit &apos;{0}&apos; not valid for &apos;DirectionsLengthUnits&apos;.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.RouteTask_InconsistentRouteNames">
            <summary>
              Looks up a localized string similar to The stops do not have consistent route names..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.RouteTask_MissingAttributeNameOrParameterName">
            <summary>
              Looks up a localized string similar to &apos;AttributeParameter.attributeName&apos; and &apos;AttributeParameter.parameterName&apos; cannot be null..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ScaleBarUnit_Centimeters">
            <summary>
              Looks up a localized string similar to Centimeters.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ScaleBarUnit_DecimalDegrees">
            <summary>
              Looks up a localized string similar to DecimalDegrees.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ScaleBarUnit_Decimeters">
            <summary>
              Looks up a localized string similar to Decimeters.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ScaleBarUnit_Feet">
            <summary>
              Looks up a localized string similar to Feet.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ScaleBarUnit_Inches">
            <summary>
              Looks up a localized string similar to Inches.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ScaleBarUnit_Kilometers">
            <summary>
              Looks up a localized string similar to Kilometers.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ScaleBarUnit_Meters">
            <summary>
              Looks up a localized string similar to Meters.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ScaleBarUnit_Miles">
            <summary>
              Looks up a localized string similar to Miles.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ScaleBarUnit_Millimeters">
            <summary>
              Looks up a localized string similar to Millimeters.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ScaleBarUnit_NauticalMiles">
            <summary>
              Looks up a localized string similar to NauticalMiles.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ScaleBarUnit_Undefined">
            <summary>
              Looks up a localized string similar to Undefined.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ScaleBarUnit_Yards">
            <summary>
              Looks up a localized string similar to Yards.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ServiceError_ErrorCode">
            <summary>
              Looks up a localized string similar to Error code &apos;{0}&apos;:.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.ServiceError_ErrorCodeWithMessage">
            <summary>
              Looks up a localized string similar to Error code &apos;{0}&apos;: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.SpatialQuery_SelectionWithUnsavedEditsNotSupported">
            <summary>
              Looks up a localized string similar to Spatial selection using &apos;{0}&apos; when auto save is turned off is not supported with unsaved edits..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.StringToArrayConverter_TypeNotSupported">
            <summary>
              Looks up a localized string similar to Cannot convert to &apos;{0}&apos; array..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.TaskBase_ConcurrencyNotSupported">
            <summary>
              Looks up a localized string similar to Task does not support concurrent I/O operations. Cancel the pending request or wait for it to complete..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.TemporalRenderer_ObservationRenderNoLegendSupport">
            <summary>
              Looks up a localized string similar to &apos;Observation Renderer&apos; does not implement &apos;ILegendSupport&apos;..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.TileLayer_TileDownloadFailed">
            <summary>
              Looks up a localized string similar to Tile download failed &apos;{0}&apos;\n&apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.TileLayer_TileLoadFailed">
            <summary>
              Looks up a localized string similar to Tile load failed Level=&apos;{0}&apos;,Row=&apos;{1}&apos;,Column=&apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.TimeExtent_StringToDateFailed">
            <summary>
              Looks up a localized string similar to Could not convert &apos;string&apos; to &apos;DateTime&apos;..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.TimeExtent_StringToTimeExtentFailed">
            <summary>
              Looks up a localized string similar to Could not convert to &apos;TimeExtent&apos;..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Validation_InvalidCodedValueDomain">
            <summary>
              Looks up a localized string similar to Field value does not match acceptable coded value domain codes..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Validation_InvalidDateTimeType">
            <summary>
              Looks up a localized string similar to Type must be DateTime..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Validation_InvalidDoubleType">
            <summary>
              Looks up a localized string similar to Type must be Double..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Validation_InvalidGeometryType">
            <summary>
              Looks up a localized string similar to Type must be Geometry..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Validation_InvalidInt16Type">
            <summary>
              Looks up a localized string similar to Type must be Int16..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Validation_InvalidInt32Type">
            <summary>
              Looks up a localized string similar to Type must be Int32..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Validation_InvalidRangeDomain">
            <summary>
              Looks up a localized string similar to Value must be between {0} and {1}..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Validation_InvalidSingleType">
            <summary>
              Looks up a localized string similar to Type must be Single..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Validation_InvalidStringType">
            <summary>
              Looks up a localized string similar to Type must be String..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Validation_InvalidTypeForRangeDomain">
            <summary>
              Looks up a localized string similar to Range domain can only applied to a numeric or date field..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.Validation_StringExceededMaxLength">
            <summary>
              Looks up a localized string similar to Value for &apos;{0}&apos; cannot exceed {1} characters..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.WebMercator_InvalidCoordinate">
            <summary>
              Looks up a localized string similar to Point does not fall within a valid range of a geographic coordinate system..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.WebMercator_InvalidSpatialReference">
            <summary>
              Looks up a localized string similar to Invalid spatial reference..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.WebRequest_Canceled">
            <summary>
              Looks up a localized string similar to Web request canceled..
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.WebRequest_ConcurrencyNotSupported">
            <summary>
              Looks up a localized string similar to Request does not support concurrent I/O operations.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Properties.Resources.WebRequest_RelativeUrlNotSupported">
            <summary>
              Looks up a localized string similar to Relative URLs are not allowed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FlareClusterer">
            <summary>
            Clusterer that creates flaring out symbols that represents child elements in a cluster.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.GraphicsClusterer">
            <summary>
            Abstract clustering class that implements a common clustering algorithm.
            </summary>
            <remarks>
            Subclasses are required to implement <see cref="M:ESRI.ArcGIS.Client.GraphicsClusterer.OnCreateGraphic(ESRI.ArcGIS.Client.GraphicCollection,ESRI.ArcGIS.Client.Geometry.MapPoint,System.Int32)"/> to generate the graphic
            used to represent a cluster.
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Clusterer">
            <summary>
            Abstract clustering class used for creating custom cluster algorithms used with the <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>.
            </summary>
            <seealso cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.GraphicsClusterer"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Clusterer.ClusterGraphicsAsync(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},System.Double)">
            <summary>
            Begins clustering a set of graphics.
            </summary>
            <remarks>The clustering algorithm is expected to run on a separate cancellable thread to 
            prevent blocking the UI. On completion, raise <see cref="E:ESRI.ArcGIS.Client.Clusterer.ClusteringCompleted"/> by
            invoking <see cref="M:ESRI.ArcGIS.Client.Clusterer.OnClusteringCompleted(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic})"/>. The event should not be raised
            if clustering was cancelled.</remarks>
            <param name="graphics">The collection of graphics to cluster.</param>
            <param name="resolution">The resolution used to determine how much to cluster.</param>
            <seealso cref="T:System.ComponentModel.BackgroundWorker"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Clusterer.CancelAsync">
            <summary>
            Cancels an asyncronously clustering process.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Clusterer.OnClusteringCompleted(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Called when clustering is complete.
            </summary>
            <param name="clusters">The clusters.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Clusterer.GetClusterChildElements(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:ESRI.ArcGIS.Client.Clusterer.ClusterChildElementsProperty"/> attached property for a given object.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>The <see cref="F:ESRI.ArcGIS.Client.Clusterer.ClusterChildElementsProperty"/> value of the specified object.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Clusterer.SetClusterChildElements(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the <see cref="F:ESRI.ArcGIS.Client.Clusterer.ClusterChildElementsProperty"/> attached property for a given object.
            </summary>
            <param name="obj">The object to which the property is written.</param>
            <param name="value">The <see cref="F:ESRI.ArcGIS.Client.Clusterer.ClusterChildElementsProperty"/> of the specified element.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Clusterer.ClusterChildElementsProperty">
            <summary>
            Used for specifying a comma-separated list of elements that represents
            the individual graphics in a cluster.
            </summary>
            <remarks>
            This attached property is used to allow for databinding to parts of the cluster symbol, 
            or adding maptip behavior to subparts of your cluster symbol.<br/>
            The order of the element names must match the order of elements in the cluster, and must be placed
            on the root element.<br/>
            <br/>
            <code language="XAML">
            &lt; ControlTemplate
               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
               xmlns:esri="clr-namespace:ESRI.ArcGIS.Client;assembly=ESRI.ArcGIS.Client" &gt;
               &lt;Grid esri:GraphicsClusterer.ClusterChildElements="childElement1,childElement2,childElement3" &gt;
                 &lt;Ellipse x:Name="childElement1" Width="20" Height="20" Fill="Red" /&gt;
                 &lt;Ellipse x:Name="childElement2" Width="15" Height="15" Fill="Yellow" /&gt;
                 &lt;Ellipse x:Name="childElement3" Width="10" Height="10" Fill="Blue" /&gt;
               &lt;/Grid&gt;
            &lt;/ControlTemplate&gt;
            </code>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Clusterer.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Clusterer.ClusteringCompleted">
            <summary>
            Occurs when the clustering process has completed.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Clusterer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Clusterer.ClusterEventArgs">
            <summary>
            Cluster event args, used for raising the <see cref="E:ESRI.ArcGIS.Client.Clusterer.ClusteringCompleted"/> event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Clusterer.ClusterEventArgs.#ctor(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Clusterer.ClusterEventArgs"/> class.
            </summary>
            <param name="clusters">The clusters.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Clusterer.ClusterEventArgs.Clusters">
            <summary>
            Gets the clusters.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsClusterer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.GraphicsClusterer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsClusterer.CancelAsync">
            <summary>
            Cancels an asyncronously clustering process.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsClusterer.ClusterGraphicsAsync(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},System.Double)">
            <summary>
            Begins clustering a set of graphics.
            </summary>
            <param name="graphics">The collection of graphics to cluster.</param>
            <param name="resolution">The resolution used to determine how much to cluster.</param>
            <remarks>The clustering algorithm is expected to run on a seperate cancellable thread to
            prevent blocking the UI. On completion, raise <see cref="E:ESRI.ArcGIS.Client.Clusterer.ClusteringCompleted"/> by
            invoking <see cref="M:ESRI.ArcGIS.Client.Clusterer.OnClusteringCompleted(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic})"/>. The event should not be raised
            if clustering was cancelled.</remarks>
            <seealso cref="T:System.ComponentModel.BackgroundWorker"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsClusterer.OnCreateGraphic(ESRI.ArcGIS.Client.GraphicCollection,ESRI.ArcGIS.Client.Geometry.MapPoint,System.Int32)">
            <summary>
            Creates a graphic that represents a cluster.
            </summary>
            <param name="cluster">The graphics cluster.</param>
            <param name="center">The center of the graphic.</param>
            <param name="maxClusterCount">The size of the largest cluster in the collection.</param>
            <returns>Graphic</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsClusterer.merge(ESRI.ArcGIS.Client.Clustering.Cluster,ESRI.ArcGIS.Client.Clustering.Cluster)">
            <summary>
            Adjust centroid weighted by the number of map points in the cluster.
            The more map points a cluster has, the less it moves.  
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsClusterer.Contains(ESRI.ArcGIS.Client.Geometry.Envelope,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Determines whether the specified point is within the extent.
            </summary>
            <param name="Extent">The extent.</param>
            <param name="point">The point.</param>
            <returns>
            	<c>true</c> if the specified point is contained by the instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsClusterer.Radius">
            <summary>
            Gets or sets the cluster radius used by the clustering algorithm.
            </summary>
            <value>The cluster radius.</value>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FlareClusterer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.FlareClusterer"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FlareClusterer.MaximumFlareCountProperty">
            <summary>
            Identifies the flare background dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FlareClusterer.FlareBackgroundProperty">
            <summary>
            Identifies the flare background dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FlareClusterer.FlareForegroundProperty">
            <summary>
            Identifies the flare foreground dependency property
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FlareClusterer.ClusterGraphicsAsync(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},System.Double)">
            <summary>
            Begins clustering a set of graphics.
            </summary>
            <param name="graphics">The collection of graphics to cluster.</param>
            <param name="resolution">The resolution used to determine how much to cluster.</param>
            <remarks>The clustering algorithm is expected to run on a seperate cancellable thread to
            prevent blocking the UI. On completion, raise <see cref="E:ESRI.ArcGIS.Client.Clusterer.ClusteringCompleted"/> by
            invoking <see cref="M:ESRI.ArcGIS.Client.Clusterer.OnClusteringCompleted(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic})"/>. The event should not be raised
            if clustering was cancelled.</remarks>
            <seealso cref="T:System.ComponentModel.BackgroundWorker"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FlareClusterer.OnCreateGraphic(ESRI.ArcGIS.Client.GraphicCollection,ESRI.ArcGIS.Client.Geometry.MapPoint,System.Int32)">
            <summary>
            Creates a graphic that represents a cluster.
            </summary>
            <param name="cluster">The graphics cluster.</param>
            <param name="point">The center of the graphic.</param>
            <param name="maxClusterCount">The size of the largest cluster in the collection.</param>
            <returns>Graphic</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FlareClusterer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of the layer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> object.
            This object contains a collection of legenditems.
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FlareClusterer.MaximumFlareCount">
            <summary>
            Gets or sets the flare background.
            </summary>
            <value>The flare background.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FlareClusterer.FlareBackground">
            <summary>
            Gets or sets the flare background.
            </summary>
            <value>The flare background.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FlareClusterer.FlareForeground">
            <summary>
            Gets or sets the flare foreground.
            </summary>
            <value>The flare foreground.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FlareClusterer.Gradient">
            <summary>
            Gets or sets the color gradient used for the large cluster.
            </summary>
            <remarks>
            If the <see cref="P:System.Windows.Media.GradientBrush.MappingMode"/> is set to Absolute, the
            offsets correspond to the number of elements in that cluster. If 
            set to RelativeToBoundingBox, offsets should be specified from 0..1,
            and will be relative to the largest cluster at the current specific scale.
            </remarks>
            <value>The gradient.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FlareClusterer.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed (e.g. when the FlareBackground or the FlareForeground changed)
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Editing.DeleteSelected">
            <summary>
            Clears selection on a graphics layer.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.DeleteSelected.Invoke">
            <summary>
            Invokes the action.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.DeleteSelected.Map">
            <summary>
            The map on which the selection is deleted.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.DeleteSelected.Layers">
            <summary>
            Gets or sets the layers to delete selected features on.
            </summary>
            <value>The layers to delete selection on..</value>
        </member>
        <member name="M:ESRI.ArcGIS.Client.MapNavigationHelper.#ctor(ESRI.ArcGIS.Client.Map)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.MapNavigationHelper"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.MapNavigationHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.MapNavigationHelper.GestureStarted">
            <summary>
            Occurs when gesture is started.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.MapNavigationHelper.GestureCompleted">
            <summary>
            Occurs when gesture is completed.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.MapNavigationHelper.Tap">
            <summary>
            Occurs when tap gesture is raised.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.MapNavigationHelper.DoubleTap">
            <summary>
            Occurs when double tap gesture is raised.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.MapNavigationHelper.TouchDrag">
            <summary>
            Occurs when drag is raised.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.MapNavigationHelper.Flick">
            <summary>
            Occurs when a flick is performed.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.MapNavigationHelper.Pinch">
            <summary>
            Occurs when pinching is performed.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.MapNavigationHelper.TouchAndHold">
            <summary>
            Occurs when a touch and hold is performed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureLayer">
            <summary>
            Graphics layer displaying features from a REST service
            </summary>
            <remarks>
            <para>
            The feature layer can be used to display features in one layer of a Feature 
            Service or a Map Service. If the underlying layer is from a Feature Service,
            it can be used to edit features and apply those edits back to the server. 
            </para>
            </remarks>
            <seealso cref="T:ESRI.ArcGIS.Client.Editor"/>
        </member>
        <member name="T:ESRI.ArcGIS.Client.GraphicsLayer">
            <summary>
            A map layer containing a set of interactable vector graphics
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsLayer._graphicsSourceWeakEventListener">
            <summary>WeakEventListener used to handle INotifyCollectionChanged events on GraphicsSource.</summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.OnMapChanged(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.Map)">
            <summary>
            Stop the maptipHideTimer when map changes.
            </summary>
            <param name="oldMap">The old map.</param>
            <param name="newMap">The new map.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.Invalidate(System.Boolean)">
            <summary>
            Enqueues a render at the next frame.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.FromGraphics(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Symbols.Symbol)">
            <summary>
            Create a graphics layer from a collection of graphics.
            </summary>
            <param name="graphics">A collection of graphics.</param>
            <param name="symbol">The symbol to apply to all features.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.FromGraphics(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.IRenderer)">
            <summary>
            Create a graphics layer from a collection of graphics.
            </summary>
            <param name="graphics">A collection of graphics.</param>
            <param name="renderer">The renderer used to render the features.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.Refresh">
            <summary>
            Forces a full redraw of all graphic features.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.updateFullExtent(System.Collections.IEnumerable)">
            <summary>
            Updates the full extent and raises PropertyChanged("FullExtent").
            </summary>
            <param name="items">The added DisplayGraphics</param>
            <returns>true if the extent changed.</returns>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsLayer.GraphicsProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.Graphics"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsLayer.ProjectionServiceProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.ProjectionService"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsLayer.GraphicsSourceProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.GraphicsSource"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.OnGraphicsSourceChanged(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Called when the GraphicsSource property changes.
            </summary>
            <param name="oldValue">Old value of the GraphicsSource property.</param>
            <param name="newValue">New value of the GraphicsSource property.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.ClearGraphics">
            <summary>
            Clears the graphics.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsLayer.ClustererProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.Clusterer"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.Draw(ESRI.ArcGIS.Client.Geometry.Envelope,System.Double,ESRI.ArcGIS.Client.Geometry.MapPoint,System.Boolean,System.Boolean)">
            <summary>
            Performs an update of the layer
            </summary>
            <param name="extent">Extent to draw</param>
            <param name="resolution">Resolution to draw at</param>
            <param name="canvasOrigin">Origin of the canvas</param>
            <param name="useTransitions">Whether smooth transitions should be used, like fading in the images</param>
            <param name="isContinuous">if set to <c>true</c> is continuous draw.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.MapPointToScreen(ESRI.ArcGIS.Client.Geometry.MapPoint,System.Double,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Converts a point on the map to screen coordinates
            </summary>
            <param name="mapPoint"></param>
            <param name="resolution"></param>
            <param name="canvasOrigin"></param>
            <returns></returns>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsLayer.MapTipVerticalOffsetProperty">
            <summary>
            Identifies the MapTipVerticalOffset attached dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.SetMapTipVerticalOffset(System.Windows.FrameworkElement,System.Double)">
            <summary>
            Sets the vertical offset of a maptip relative to a graphic.
            </summary>
            <param name="element">The element.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.GetMapTipVerticalOffset(System.Windows.FrameworkElement)">
            <summary>
            Gets the vertical offset of a maptip relative to a graphic.
            </summary>
            <param name="element">The element.</param>
            <returns>Offset</returns>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsLayer.MapTipHorizontalOffsetProperty">
            <summary>
            Identifies the MapTipHorizontalOffset attached dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.SetMapTipHorizontalOffset(System.Windows.FrameworkElement,System.Double)">
            <summary>
            Sets the horizontal offset of a maptip relative to a graphic.
            </summary>
            <param name="element">The maptip element.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.GetMapTipHorizontalOffset(System.Windows.FrameworkElement)">
            <summary>
            Gets the horizontal offset of a maptip relative to a graphic.
            </summary>
            <param name="element">The maptip element.</param>
            <returns>Offset</returns>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsLayer.MapTipHideDelayProperty">
            <summary>
            Identifies the MapTipHideDelay attached dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.SetMapTipHideDelay(System.Windows.FrameworkElement,System.TimeSpan)">
            <summary>
            Sets the delay for the maptip before it hides after the mouse left the graphic
            </summary>
            <param name="element">The element.</param>
            <param name="delay">The delay.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.GetMapTipHideDelay(System.Windows.FrameworkElement)">
            <summary>
            Gets the delay for the maptip before it hides after the mouse left the graphic
            </summary>
            <param name="element">The element.</param>
            <returns>Delay</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of graphics.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.FindGraphicsInHostCoordinates(System.Windows.Point)">
            <summary>
            Retrieves a set of <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.Graphics"/> that are located within a specified
            <see cref="T:System.Windows.Point"/> of the applications coordinate space.
            </summary>
            <param name="intersectingPoint">The <see cref="T:System.Windows.Rect"/> to use as the determination point.</param>
            <returns>
            An enumerable set of <see cref="T:ESRI.ArcGIS.Client.Graphic"/> objects that are determined
            to be located in the visual tree composition at the specified point.
            </returns>
            <remarks>
            <para>The intersection area must be given relative to the application host.</para>
            <para>If the intersection includes a clustered graphic, the individual graphics
            that the cluster represents will be returned.</para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.FindGraphicsInHostCoordinates(System.Windows.Rect)">
            <summary>
            Retrieves a set of <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.Graphics"/> that are located within a specified
            <see cref="T:System.Windows.Rect"/> of the applications coordinate space.
            </summary>
            <param name="intersectingRect">The System.Windows.Rect to use as the determination area.</param>
            <returns>
            An enumerable set of <see cref="T:ESRI.ArcGIS.Client.Graphic"/> objects that are determined
            to be located in the visual tree composition at the specified rectangle.
            </returns>
            <remarks>
            <para>The intersection area must be given relative to the application host.</para>
            <para>If the intersection includes a clustered graphic, the individual graphics
            that the cluster represents will be returned.</para>
            </remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsLayer.TimeIntervalProperty">
            <summary>
            Identifies the TimeInterval dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsLayer.HasLegendChanged">
            <summary>
            Flag indicating whether the legend has changed during the call of QueryLegendInfos
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of the layer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> object.
            This object contains a collection of legenditems.
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsLayer.OnLegendChanged">
            <summary>
            Called when the legend changes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.ContinuousDraw">
            <summary>
            Gets a value indicating whether the layer will draw while panning
            </summary>
            <value><c>true</c> if continuous draw; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.FullExtent">
            <summary>
            Gets the minimum enclosing envelope that all the features in the layer.
            </summary>
            <remarks>
            If graphics added to the layer are not in the same spatial reference
            as the map, note that the FullExtent property might not immediately be updated
            after a graphic has been added. You can use the <see cref="E:ESRI.ArcGIS.Client.Layer.PropertyChanged"/>
            event to listen for changes to FullExtent when this occurs.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.RendererTakesPrecedence">
            <summary>
            If <c>false</c>, the graphic symbol takes precedence over the renderer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.Renderer">
            <summary>
            Gets or sets the renderer used for generating symbols.
            If a renderer is specified, any symbol set on the graphic will be ignored.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.MapTip">
            <summary>
            Gets or sets the MapTip displayed when the mouse hovers on a 
            <see cref="T:ESRI.ArcGIS.Client.Graphic">Graphic</see> in the GraphicsLayer.
            </summary>
            <remarks>
            <para>
            A GraphicsLayer.MapTip is a FrameworkElement that displays a visual popup containing information associated 
            with a Graphic in the GraphicsLayer. Defining the User Interface (UI) look of the FrameworkElement for a 
            GraphicsLayer.MapTip can be done in either XAML or code-behind.
            </para>
            <para>
            Use the GraphicsLayer.MapTip Property when you want to have all of the MapTips in the GraphicsLayer have 
            the same FrameworkElement look and feel. Alternatively, use the 
            <see cref="P:ESRI.ArcGIS.Client.Graphic.MapTip">Graphic.MapTip</see> Property when you want to have 
            control over individual FrameworkElement MapTips look and feel in the GraphicsLayer. 
            </para>
            <para>        
            There are several sources of where the information that is displayed in a GraphicsLayer.MapTip can come from:
            <list type="bullet">
            <item>
            The information is stored in the 
            <see cref="P:ESRI.ArcGIS.Client.Graphic.Attributes">Graphic.Attributes</see>
            </item>
            <item>The information is hard coded</item>
            <item>The information is generated on the fly based upon user interaction with the Map</item>
            </list>
            </para>
            <para>
            You can use a binding expression in XAML to bind Graphic.Attributes in the GraphicsLayer to the 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.frameworkelement.datacontext(v=vs.95).aspx" target="_blank">DataContext</a> 
            Property. The general usage syntax follows the pattern:<br></br>
            <code lang="XAML">
            &lt;esri:GraphicsLayer&gt;
              &lt;esri:GraphicsLayeer.MapTip&gt;
                &lt;StackPanel Orientation="Horizontal" Background="White"&gt;
                  &lt;TextBlock Text="Feature ID:" /&gt;
                  &lt;TextBlock Text="{Binding [SomeAttributeName]}" /&gt;
                &lt;/StackPanel&gt;
              &lt;/esri:GraphicsLayer.MapTip&gt;
            &lt;esri:GraphicsLayer&gt;
            </code>
            </para>
            <para>
            <b>Tip:</b> Starting with Silverlight version 4, developers can perform DataContext binding directly to 
            Dictionary Keys by specifying the Key name in brackets. Therefore when binding the DataContext of 
            a GraphicsLayer.MapTip to a specific attribute name in the Graphic.Attributes (which is a Dictionary), 
            encase the attribute name in square brackets (i.e. []). Example: 
            <b>&lt;TextBlock Text="{Binding [Age]}" /&gt;</b> or the slightly more verbose version 
            <b>&lt;TextBlock Text="{Binding Path=[Age]}" /&gt;</b>).
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the button to load data in a textfile (.txt) on the local hard drive. The User Interface (UI) 
            look and feel of the GraphicsLayer.MapTips are established in the XAML. Hover over a Graphic to see the 
            MapTip.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate 
            the functionality.
            </para>
            <para>
            The following screen shots corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Draw GraphicsLayer.MapTips from data in a file on disk." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.GraphicsLayer.MapTip2.png"/>
            </para>
            <para>
            <img border="0" alt="The Open dialog pointing to the TestData.txt file containing information to create Graphics." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.GraphicsLayer.MapTip1.png"/>
            </para>
            <para>
            <img border="0" alt="The TestData.txt file contents." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.GraphicsLayer.MapTip3.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,102,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="366" Width="616" &gt;
                  
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                               Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer" /&gt;
                
                &lt;!-- Define a GraphicsLayer which will be used to set up MapTips. --&gt;
                &lt;esri:GraphicsLayer ID="MyGraphicsLayer"&gt;
                  &lt;esri:GraphicsLayer.MapTip&gt;
                              
                    &lt;!-- Define the User Interface (UI) look and feel of the FrameworkElement for the GraphicsLayer.MapTip --&gt;
                    &lt;Border BorderBrush="DarkGray" CornerRadius="13" BorderThickness="1" Margin="0,0,15,15"&gt;
                      &lt;Border.Effect&gt;
                        &lt;DropShadowEffect ShadowDepth="10" BlurRadius="14" Direction="300" /&gt;
                      &lt;/Border.Effect&gt;
                      &lt;Border CornerRadius="10" Background="#DDFFEEEE" BorderThickness="5" BorderBrush="#77FF0000"&gt;
                        &lt;StackPanel Orientation="Vertical" HorizontalAlignment="Center" Margin="10"&gt;
                          &lt;StackPanel Orientation="Horizontal"&gt;
                            
                            &lt;!-- 
                            Bind the DataContext of the various Graphic.Attribute values to the various TextBlocks.
                            
                            Information on DataContext documentation can be found at: 
                            http://msdn.microsoft.com/en-us/library/system.windows.frameworkelement.datacontext(v=vs.95).aspx 
                            
                            Starting with Silverlight version 4, developers can perform DataContext binding directly to 
                            Dictionary Keys by specifying the Key name in brackets. Therefore, when binding the DataContext 
                            of a GraphicsLayer.MapTip to a specific attribute name in the Graphic.Attributes (which is a 
                            Dictionary), encase the attribute name in square brackets (i.e. []). Example: 
                            &lt;TextBlock Text="{Binding [Age]}" /&gt; or the slightly more verbose version 
                            &lt;TextBlock Text="{Binding Path=[Age]}" /&gt;). 
                            --&gt;
                            &lt;TextBlock Text="Name: " FontWeight="Bold" Foreground="#FF0F274E" FontSize="10" VerticalAlignment="Center"/&gt;
                            &lt;TextBlock Text="{Binding Path=[Name]}" HorizontalAlignment="Left" VerticalAlignment="Center" /&gt;
                          &lt;/StackPanel&gt;
                          &lt;StackPanel Orientation="Horizontal"&gt;
                            &lt;TextBlock Text="Age: " FontWeight="Bold" Foreground="#FF0F274E" FontSize="10" VerticalAlignment="Center" /&gt;
                            &lt;TextBlock Text="{Binding [Age]}" HorizontalAlignment="Left" VerticalAlignment="Center" /&gt;
                          &lt;/StackPanel&gt;
                        &lt;/StackPanel&gt;
                      &lt;/Border&gt;
                    &lt;/Border&gt;
                  &lt;/esri:GraphicsLayer.MapTip&gt;
                &lt;/esri:GraphicsLayer&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a Button to perform the work. Note the Click Event handler is wired-up to use code-behind. --&gt;
              &lt;Button Content="Draw graphics from data in a file on disk" Height="35" HorizontalAlignment="Left" 
                      Margin="160,61,0,0" Name="Button3"  VerticalAlignment="Top" Width="302" Click="Button1_Click"/&gt;
                
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="40" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="616" 
                         TextWrapping="Wrap" Margin="12,12,0,0" 
                         Text="Click the button to load data in a textfile (.txt) on the local hard drive. The User Interface (UI) 
                         look and feel of the GraphicsLayer.MapTips are established in the XAML. Hover over a Graphic to see the 
                         MapTip." /&gt;
                
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            // SPECIAL INSTRUCTIONS:
            // This example code reads information from a textfile to display Graphics on the Map. Use a text editor
            // program (like Notepad) to add the following lines into the TestData.txt file and save it in the 
            // \MyDocuments folder. NOTE: REMOVE THE STARTING COMMENT (' or //) BEFORE EACH LINE!
            //
            //-7356594.25,4752385.95,102100,Billy,11
            //-5468910.57,1875915.58,102100,Sue,31
            //-1558708.66,-326382.05,102100,Sam,78
            //-4614958.43,-4191639.11,102100,Kate,44
              
            // A simple Class that will hold all of the information to draw Graphics (with MapTips) on the Map Control.
            public class TestData
            {
              public int X; // X coordinate value
              public int Y; // Y coordinate value
              public int WKID; // The SpatialRefernce.WKID value
              public string Name; // An Attribute for a persons name
              public int Age; // An Attribute for a persons age
            }
            
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Create a List&lt;TestData&gt; objects that will contain all of the information needed to draw Graphics
              // with MapTips on the Map Control.
              List&lt;TestData&gt; theTestData = new List&lt;TestData&gt;();
              
              // Load the List&lt;TestData&gt; objects from a textfile (.txt) on the local hard drive.
              theTestData = LoadTestData();
              
              // Draw the Graphics (with configured MapTips) on the Map Control. 
              DrawTestData2(theTestData);
            }
            
            public List&lt;TestData&gt; LoadTestData()
            {
              
              // This function will load data that is in a textfile (.txt) on the local hard drive into a
              // List&lt;TestData&gt; objects.
              
              // Create a new List&lt;TestData&gt;.
              List&lt;TestData&gt; theTestData = new List&lt;TestData&gt;();
              
              // Create an instance of the open file dialog box.
              OpenFileDialog theOpenFileDialog = new OpenFileDialog();
              
              // Set filter options and filter index.
              theOpenFileDialog.Filter = "Text Files (*.txt)|*.txt";
              theOpenFileDialog.FilterIndex = 1;
              
              // Only let the user select one textfile at a time
              theOpenFileDialog.Multiselect = false;
              
              // Call the ShowDialog method to show the dialogbox.
              bool UserClickedOK = theOpenFileDialog.ShowDialog();
              
              // Process input if the user clicked OK.
              if (UserClickedOK == true)
              {
                
                //Open the selected file to read.
                System.IO.Stream fileStream = theOpenFileDialog.File.OpenRead;
                
                // Use a StreamReader to read the contents of the textfile
                using (System.IO.StreamReader reader = new System.IO.StreamReader(fileStream))
                {
                  // Hold the contents of reading one line from the textfile.
                  string line = null;
                  
                  // Loop through the textfile.
                  do
                  {
                    // Read one line from the StreamReader
                    line = reader.ReadLine();
                    
                    // Only process valid content
                    if (line != null)
                    {
                      // Break (tokenize) the contents of a line of information into a String Array. 
                      string[] parts = line.Split(',');
                      
                      // Create a new instance of one TestData object and populate the various fields.
                      TestData oneRecord = new TestData();
                      oneRecord.X = parts[0];
                      oneRecord.Y = parts[1];
                      oneRecord.WKID = parts[2];
                      oneRecord.Name = parts[3];
                      oneRecord.Age = parts[4];
                      
                      // Add the TestData object to the List&lt;TestData&gt;.
                      theTestData.Add(oneRecord);
                    }
                    
                  // Break out of the StreamReader if we don't have valid data.
                  } while ( line != null);
                  
                } // Close the Using logic flow.
                
                // Close the StreamReader.
                fileStream.Close();
              }
              
              // Return the List&lt;TestData&gt;.
              return theTestData;
              
            }
              
            public void DrawTestData2(List&lt;TestData&gt; theTestData)
            {
              // Loop through all of the List&lt;TestData&gt; objects, construct Graphics with Attributes, and add the 
              // Graphics to the GraphicsLayer to render on the Map Control.
              
              // Obtain the GraphicsLayer that was defined in XAML. Note: the look and feel of the MapTips are defined in
              // the XAML for the GraphicsLayer.MapTips. 
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = null;
              theGraphicsLayer = (ESRI.ArcGIS.Client.GraphicsLayer)(Map1.Layers["MyGraphicsLayer"]);
              
              // Loop through the List&lt;TestData&gt; objects.
              foreach (TestData oneRecord in theTestData)
              {
                // Construct a new MapPoint geometric object from the TestData .X and .Y fields.
                ESRI.ArcGIS.Client.Geometry.MapPoint aMapPoint = new ESRI.ArcGIS.Client.Geometry.MapPoint();
                aMapPoint.X = oneRecord.X;
                aMapPoint.Y = oneRecord.Y;
                
                // Construct a new SpatialReference object from a TestData.WKID field and use it for the MapPoint.
                ESRI.ArcGIS.Client.Geometry.SpatialReference aSpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(oneRecord.WKID);
                aMapPoint.SpatialReference = aSpatialReference;
                
                // Create SimpleMarkerSymbol for the Graphic's Symbology.
                ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol aSimpleMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
                aSimpleMarkerSymbol.Color = new System.Windows.Media.SolidColorBrush(Colors.Yellow);
                aSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Diamond;
                aSimpleMarkerSymbol.Size = 12;
                
                // Create a new Graphic object and define its Geometry and Symbol Properties.
                ESRI.ArcGIS.Client.Graphic aGraphic = new ESRI.ArcGIS.Client.Graphic();
                aGraphic.Geometry = (ESRI.ArcGIS.Client.Geometry.Geometry)aMapPoint;
                aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)aSimpleMarkerSymbol;
                
                // Define two Graphic.Attribute Properties from the TestData object. You could have defined more
                // Attributes but this was sufficient for the sample.
                aGraphic.Attributes.Add("Name", oneRecord.Name);
                aGraphic.Attributes.Add("Age", oneRecord.Age);
                
                // Add the Graphic to the GraphicsLayer.
                theGraphicsLayer.Graphics.Add(aGraphic);
              }
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            ' SPECIAL INSTRUCTIONS:
            ' This example code reads information from a textfile to display Graphics on the Map. Use a text editor
            ' program (like Notepad) to add the following lines into the TestData.txt file and save it in the 
            ' \MyDocuments folder. NOTE: REMOVE THE STARTING COMMENT (' or //) BEFORE EACH LINE!
            '
            '-7356594.25,4752385.95,102100,Billy,11
            '-5468910.57,1875915.58,102100,Sue,31
            '-1558708.66,-326382.05,102100,Sam,78
            '-4614958.43,-4191639.11,102100,Kate,44
              
            ' A simple Class that will hold all of the information to draw Graphics (with MapTips) on the Map Control.
            Public Class TestData
              Public X As Integer ' X coordinate value
              Public Y As Integer ' Y coordinate value
              Public WKID As Integer ' The SpatialRefernce.WKID value
              Public Name As String ' An Attribute for a persons name
              Public Age As Integer ' An Attribute for a persons age
            End Class
            
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Create a List(Of TestData) objects that will contain all of the information needed to draw Graphics
              ' with MapTips on the Map Control.
              Dim theTestData As New List(Of TestData)
              
              ' Load the List(Of TestData) objects from a textfile (.txt) on the local hard drive.
              theTestData = LoadTestData()
              
              ' Draw the Graphics (with configured MapTips) on the Map Control. 
              DrawTestData2(theTestData)
                  
            End Sub
            
            Public Function LoadTestData() As List(Of TestData)
              
              ' This function will load data that is in a textfile (.txt) on the local hard drive into a
              ' List(Of TestData) objects.
              
              ' Create a new List(Of TestData).
              Dim theTestData As New List(Of TestData)
              
              ' Create an instance of the open file dialog box.
              Dim theOpenFileDialog As OpenFileDialog = New OpenFileDialog
              
              ' Set filter options and filter index.
              theOpenFileDialog.Filter = "Text Files (*.txt)|*.txt"
              theOpenFileDialog.FilterIndex = 1
              
              ' Only let the user select one textfile at a time
              theOpenFileDialog.Multiselect = False
              
              ' Call the ShowDialog method to show the dialogbox.
              Dim UserClickedOK As Boolean = theOpenFileDialog.ShowDialog
              
              ' Process input if the user clicked OK.
              If (UserClickedOK = True) Then
                
                'Open the selected file to read.
                Dim fileStream As System.IO.Stream = theOpenFileDialog.File.OpenRead
                
                ' Use a StreamReader to read the contents of the textfile
                Using reader As New System.IO.StreamReader(fileStream)
                
                  ' Hold the contents of reading one line from the textfile.
                  Dim line As String
                  
                  ' Loop through the textfile.
                  Do
                    
                    ' Read one line from the StreamReader
                    line = reader.ReadLine()
                    
                    ' Only process valid content
                    If line IsNot Nothing Then
                      
                      ' Break (tokenize) the contents of a line of information into a String Array. 
                      Dim parts As String() = Split(line, ",")
                      
                      ' Create a new instance of one TestData object and populate the various fields.
                      Dim oneRecord As New TestData
                      oneRecord.X = parts(0)
                      oneRecord.Y = parts(1)
                      oneRecord.WKID = parts(2)
                      oneRecord.Name = parts(3)
                      oneRecord.Age = parts(4)
                      
                      ' Add the TestData object to the List(of TestData).
                      theTestData.Add(oneRecord)
                      
                    End If
                    
                  ' Break out of the StreamReader if we don't have valid data.
                  Loop Until line Is Nothing
                  
                End Using ' Close the Using logic flow.
                
                ' Close the StreamReader.
                fileStream.Close()
              End If
              
              ' Return the List(Of TestData).
              Return theTestData
              
            End Function
            
            Public Sub DrawTestData2(ByVal theTestData As List(Of TestData))
              
              ' Loop through all of the List(Of TestData) objects, construct Graphics with Attributes, and add the 
              ' Graphics to the GraphicsLayer to render on the Map Control.
              
              ' Obtain the GraphicsLayer that was defined in XAML. Note: the look and feel of the MapTips are defined in
              ' the XAML for the GraphicsLayer.MapTips. 
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer
              theGraphicsLayer = CType(Map1.Layers("MyGraphicsLayer"), ESRI.ArcGIS.Client.GraphicsLayer)
              
              ' Loop through the List(Of TestData) objects.
              Dim oneRecord As TestData
              For Each oneRecord In theTestData
                
                ' Construct a new MapPoint geometric object from the TestData .X and .Y fields.
                Dim aMapPoint As New ESRI.ArcGIS.Client.Geometry.MapPoint
                aMapPoint.X = oneRecord.X
                aMapPoint.Y = oneRecord.Y
                
                ' Construct a new SpatialReference object from a TestData.WKID field and use it for the MapPoint.
                Dim aSpatialReference As New ESRI.ArcGIS.Client.Geometry.SpatialReference(oneRecord.WKID)
                aMapPoint.SpatialReference = aSpatialReference
                
                ' Create SimpleMarkerSymbol for the Graphic's Symbology.
                Dim aSimpleMarkerSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
                aSimpleMarkerSymbol.Color = New System.Windows.Media.SolidColorBrush(Colors.Yellow)
                aSimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Diamond
                aSimpleMarkerSymbol.Size = 12
                
                ' Create a new Graphic object and define its Geometry and Symbol Properties.
                Dim aGraphic As New ESRI.ArcGIS.Client.Graphic
                aGraphic.Geometry = CType(aMapPoint, ESRI.ArcGIS.Client.Geometry.Geometry)
                aGraphic.Symbol = CType(aSimpleMarkerSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                
                ' Define two Graphic.Attribute Properties from the TestData object. You could have defined more
                ' Attributes but this was sufficient for the sample.
                aGraphic.Attributes.Add("Name", oneRecord.Name)
                aGraphic.Attributes.Add("Age", oneRecord.Age)
                
                ' Add the Graphic to the GraphicsLayer.
                theGraphicsLayer.Graphics.Add(aGraphic)
              Next
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.Graphics">
            <summary>
            Gets or sets the graphics collection.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.GraphicsSource">
            <summary>
            Gets or sets a collection used to contain the graphics of the <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.ProjectionService">
            <summary>
            Gets or sets the projection service used for projecting geometry in the data source
            to the map's spatial reference. 
            </summary>
            <remarks>
            If you are projecting between WGS84 Geographic coordinates (SRID=4326) and WebMercator
            or your source data is in the same projection as the map it's being displayed on, 
            there is no need to set this property.
            </remarks>
            <value>The projection service.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.IsHitTestVisible">
            <summary>
            Gets or sets whether the contained area of this <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>
            can return true values for hit testing.
            </summary>
            <value>
            <c>true</c> if the contained area of this <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/> can be used for
            hit-testing; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.Clusterer">
            <summary>
            Gets or sets the clusterer that is applied to the features.
            </summary>
            <value>The clusterer.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseEnter">
            <summary>
            Occurs when the mouse (or a stylus) enters the bounding area of a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseLeave">
            <summary>
            Occurs when the mouse (or the stylus) leaves the bounding area of a <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseMove">
            <summary>
            Occurs when the coordinate position of the mouse (or stylus) changes while over a <see cref="T:System.Windows.UIElement"/> (or while a <see cref="T:System.Windows.UIElement"/> holds mouse capture).
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseLeftButtonDown">
            <summary>
            Occurs when the left mouse button is pressed (or when the tip of the
            stylus touches the tablet PC) while the mouse pointer is over a
            <see cref="T:ESRI.ArcGIS.Client.Graphic"/>.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseLeftButtonUp">
            <summary>
            Occurs when the left mouse button is released (or the tip of the stylus 
            is removed from the tablet PC) while the mouse (or the stylus) is
            over a <see cref="T:ESRI.ArcGIS.Client.Graphic"/>.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseRightButtonDown">
            <summary>
            Occurs when the right mouse button is pressed while the mouse pointer is
            over a <see cref="T:ESRI.ArcGIS.Client.Graphic"/>.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseRightButtonUp">
            <summary>
            Occurs when the right mouse button is released while the mouse pointer is
            over a <see cref="T:ESRI.ArcGIS.Client.Graphic"/>. However, this event 
            will only be raised if a caller marks the preceding System.Windows.UIElement.MouseRightButtonDown
            event as handled.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.ESRI#ArcGIS#Client#ITimeAwareLayer#TimeInterval">
            <summary>
            Gets or sets the time interval to limit the data in.
            </summary>
            <remarks>This property only applies if the service supports time data and the <see cref="T:ESRI.ArcGIS.Client.TimeExtent"/> is populated.</remarks>
            <value>The time interval.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.SelectedGraphics">
            <summary>
            The list of selected graphics.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsLayer.SelectionCount">
            <summary>
            The selection count
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.GraphicsLayer.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed (e.g. when the renderer changed)
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.GraphicsLayer.MouseEventHandler">
            <summary>
             Represents the method that will handle mouse related routed events that do
             not specifically involve mouse buttons; for example, System.Windows.UIElement.MouseMove.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.GraphicsLayer.MouseButtonEventHandler">
            <summary>
             Represents the method that handles the <see cref="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseLeftButtonDown"/>,
             <see cref="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseLeftButtonUp"/>, <see cref="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseRightButtonDown"/>
             and <see cref="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseRightButtonUp"/> 
             events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.ModeProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.Mode"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.OnDemandCacheSizeProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.OnDemandCacheSize"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.OnMapChanged(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.Map)">
            <summary>
            When map changes, unhook ExtentChanged event handler and hook up with the new map.
            Also called update if initialization has already occurred.
            </summary>
            <param name="oldMap"></param>
            <param name="newMap"></param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.Map_ExtentChanged(System.Object,ESRI.ArcGIS.Client.ExtentEventArgs)">
            <summary>
            For OnDemand, refresh query when map's extent changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.#cctor">
            <summary>
            Initializes the <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.FromJson(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> class from a JSON string.
            </summary>
            <param name="json">The JSON string.</param>
            <returns>A new instance of <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.OnGraphicsSourceChanged(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Called when the GraphicsSource property changes.
            </summary>
            <param name="oldValue">Old value of the GraphicsSource property.</param>
            <param name="newValue">New value of the GraphicsSource property.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.GraphicsSource"/>property is changed on a <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.Initialize">
            <summary>
            Initializes the resource.
            </summary>
            <remarks>
            	<para>Override this method if your resource requires asyncronous requests to initialize,
            and call the base method when initialization is completed.</para>
            	<para>Upon completion of initialization, check the <see cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/> for any possible errors.</para>
            </remarks>
            <seealso cref="E:ESRI.ArcGIS.Client.Layer.Initialized"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.Update">
            <summary>
            Performs a new refreshed query against the REST endpoint and refreshes the graphics layer.
            </summary>
            <remarks>Selections and unsaved edits will be lost on Update.</remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.update">
            <summary>
            This private update method doesn't clear the graphics collection
            until after the query has completed - Used mostly by OnDemand mode,
            where we don't want to clear out everything between queries, and want
            to append the result instead of replacing it.
            The public Update() method first clears the graphics collection before 
            calling this method.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.IgnoreServiceScaleRangeProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.IgnoreServiceScaleRange"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.UrlProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.Url"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.SelectionColorProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.SelectionColor"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.IsReadOnlyProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.IsReadOnly"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.AutoSaveProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.AutoSave"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.ValidateEditsProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.ValidateEdits"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.SaveEdits">
            <summary>
            Save edits to the layer.  Only required if AutoSave is false.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.OnBeginEdits(ESRI.ArcGIS.Client.Tasks.BeginEditEventArgs)">
            <summary>
            Raises the <see cref="E:SubmittingEdits"/> event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.QueryAttachmentInfos(ESRI.ArcGIS.Client.Graphic,System.Action{System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.FeatureService.AttachmentInfo}},System.Action{System.Exception})">
            <summary>
            Queries for a list of attachments for a specific graphic.
            </summary>
            <param name="g">The graphic to query attachment info for.</param>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.QueryAttachmentInfos(System.String,System.Action{System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.FeatureService.AttachmentInfo}},System.Action{System.Exception})">
            <summary>
            Queries for a list of attachments for a feature with the specified feature ID.
            </summary>
            <param name="featureID">The feature ID to query for.</param>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.AddAttachment(ESRI.ArcGIS.Client.Graphic,System.IO.Stream,System.String,System.Action{ESRI.ArcGIS.Client.FeatureService.AttachmentResult},System.Action{System.Exception})">
            <summary>
            Adds an attachment to a feature.
            </summary>
            <param name="g">The feature to add an attachment to.</param>
            <param name="file">The file stream used for the attachment.</param>
            <param name="filename">Name of the attachment.</param>
            <param name="callback">The method to call when completed.</param>
            <param name="errorCallback">The method to call if an error occurs.</param>
            <remarks>Filename extension will be used to determine the MimeType associated with the attachment.</remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.AddAttachment(ESRI.ArcGIS.Client.Graphic,System.IO.Stream,System.String,System.String,System.Action{ESRI.ArcGIS.Client.FeatureService.AttachmentResult},System.Action{System.Exception})">
            <summary>
            Adds an attachment to a feature.
            </summary>
            <param name="g">The feature to add an attachment to.</param>
            <param name="file">The file stream used for the attachment.</param>
            <param name="filename">Name of the attachment.</param>
            <param name="contentType">MimeType of the content.</param>
            <param name="callback">The method to call when completed.</param>
            <param name="errorCallback">The method to call if an error occurs.</param>
            <remarks>Filename extension will be used to determine the MimeType associated with the attachment.</remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.AddAttachment(System.String,System.IO.Stream,System.String,System.Action{ESRI.ArcGIS.Client.FeatureService.AttachmentResult},System.Action{System.Exception})">
            <summary>
            Adds an attachment to a feature.
            </summary>
            <param name="featureID">The ID of the feature to add an attachment to.</param>
            <param name="file">The file stream used for the attachment.</param>
            <param name="filename">Name of the attachment.</param>
            <param name="callback">The method to call when completed.</param>
            <param name="errorCallback">The method to call if an error occurs.</param>
            <remarks>Filename extension will be used to determine the MimeType associated with the attachment.</remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.AddAttachment(System.String,System.IO.Stream,System.String,System.String,System.Action{ESRI.ArcGIS.Client.FeatureService.AttachmentResult},System.Action{System.Exception})">
            <summary>
            Adds an attachment to a feature.
            </summary>
            <param name="featureID">The ID of the feature to add an attachment to.</param>
            <param name="file">The file stream used for the attachment.</param>
            <param name="filename">Name of the attachment.</param>
            <param name="contentType">MimeType of the content.</param>
            <param name="callback">The method to call when completed.</param>
            <param name="errorCallback">The method to call if an error occurs.</param>
            <remarks>Filename extension will be used to determine the MimeType associated with the attachment.</remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.DeleteAttachment(ESRI.ArcGIS.Client.Graphic,System.String[],System.Action{ESRI.ArcGIS.Client.FeatureService.AttachmentResult[]},System.Action{System.Exception})">
            <summary>
            Deletes one or more attachments.
            </summary>
            <param name="g">The graphic to delete attachments from.</param>
            <param name="attachmentIds">The attachment ids.</param>
            <param name="callback">The method to call when completed.</param>
            <param name="errorCallback">The method to call if an error occurs.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.DeleteAttachment(System.String,System.String[],System.Action{ESRI.ArcGIS.Client.FeatureService.AttachmentResult[]},System.Action{System.Exception})">
            <summary>
            Deletes one or more attachments.
            </summary>
            <param name="featureID">The ID of the feature to delete attachments from.</param>
            <param name="attachmentIds">The attachment ids.</param>
            <param name="callback">The method to call when completed.</param>
            <param name="errorCallback">The method to call if an error occurs.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of the layer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> object.
            This object contains a collection of legenditems.
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.HasEditsProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.HasEdits"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.EditorIgnoreProperty">
            <summary>
            Whether a change to the layer's Graphics collection should be ignored by the editor.
            Used when the layer's mode is SelectionOnly to signal changes that are not edits. 
            Set on the graphic that is added or removed from the Graphics collection.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.UndoEdits">
            <summary>
            Undoes all edits tracked on the FeatureLayer since last <see cref="M:ESRI.ArcGIS.Client.FeatureLayer.SaveEdits"/> or <see cref="M:ESRI.ArcGIS.Client.FeatureLayer.Update"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.UndoEdits(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Reverts all edits on a graphic back to the state it was received from the server.
            If the feature was added, it will be removed from the layer.
            </summary>
            <param name="graphic">Graphic whose edits should be undone.</param>
            <returns>Returns <c>true</c> if the undo was successful, <c>false</c> if there was nothing to undo.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.Mode">
            <summary>
            Gets or sets the selection mode.  Default is Snapshot mode.  If Where is specified, mode
            becomes Snapshot.
            </summary>
            <value>The selection mode.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.OnDemandCacheSize">
            <summary>
            Gets or sets the number of features held in cache beyond what is in the current extent when
            <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.Mode"/> is <see cref="F:ESRI.ArcGIS.Client.FeatureLayer.QueryMode.OnDemand"/>.
            </summary>
            <value>The OnDemand cache count.</value>
            <remarks>This limit does not apply to selected features.  Selected features are always in 
            the graphics collection regardless of whether they are in the current extent or of they
            number more than the OnDemandCacheSize setting. The default value is 1000.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.IsFeatureCollection">
            <summary>
            Indicates whether FeatureLayer is initialized by a Feature collection.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.FeatureSymbol">
            <summary>
            <para><b>Note: This API is now obsolete.</b> Please use a SimpleRenderer on the FeatureLayer.Renderer.</para>
            <para>Gets or sets the default feature symbol.</para>
            </summary>
            <value>The feature symbol.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FeatureLayer.UpdateFailed">
            <summary>
            Occurs if the layer fails to request feature data from the feature service.
            </summary>
            <seealso cref="E:ESRI.ArcGIS.Client.Layer.InitializationFailed"/>
            <seealso cref="E:ESRI.ArcGIS.Client.FeatureLayer.UpdateCompleted"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.OutFields">
            <summary>
            Attribute fields to include in the FeatureSet.
            </summary>
            <remarks>
            <para>
            Fields must exist in the map layer. You must list the actual field names rather than the alias names. 
            Returned fields are also the actual field names. However, you are able to use the alias names when 
            you display the results. For optimal performance, limit the output fields to only those you expect 
            to use. Each query must have access to the Shape and Objectid fields for a layer, but your list of 
            fields does not need to include these two fields. To return all fields, specify the wildcard '*' as 
            the value of this parameter. In this case, the query results include all the field values. 
            </para>
            <para>
            <b>Note:</b> The wildcard will not return the geometry (i.e. shape field). In order to return the 
            geometry information the <see cref="P:ESRI.ArcGIS.Client.Tasks.Query.ReturnGeometry">ReturnGeometry</see> 
            must be set to True.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.Text">
            <summary>
            Shorthand for a literal search text on the display field, equivalent to: where 
            &lt;displayField&gt; like '%%'. The text is case sensitive. This parameter is ignored 
            if the where parameter is specified. 
            You can determine what the display field is for a layer using the ArcGIS Services Directory. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.Where">
            <summary>
            A where clause for the query. Any legal SQL where clause operating on the fields in the 
            layer is allowed, for example: where=POP2000 > 350000 .
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.Geometry">
            <summary>
            The geometry to apply to the spatial filter. The spatial relationship as 
            specified by spatialRelationship is applied to this geometry while 
            performing the query. The valid geometry types are Envelope, Point, 
            Multipoint, Polyline, or Polygon. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.IgnoreServiceScaleRange">
            <summary>
            If <c>true</c>, the scale range set at the service level is ignored.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.Token">
            <summary>
            Token for accessing a secure ArcGIS task.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.ProxyUrl">
            <summary>
            Gets or sets the URL to proxy the request through.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.Url">
            <summary>
            Gets or sets the URL of the REST MapService layer to query.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.Color">
            <summary>
            <para><b>Note: This API is now obsolete.</b> Please use a SimpleRenderer on the FeatureLayer.Renderer.</para>
            <para>
            Gets or sets the color to render symbols with. 
            Use a custom <see cref="T:ESRI.ArcGIS.Client.IRenderer">renderer</see> for extended symbology control.
            </para>
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.DisableClientCaching">
            <summary>
            If true, adds a timestamp parameter ("_ts") to the request to prevent it from 
            being loaded from the browser's cache.
            </summary>
            <value>
            	<c>true</c> to disable client caching otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.MaxAllowableOffset">
            <summary>
            Gets or sets the max allowable offset. This option can be used to 
            specify the maximum allowable offset to be used for generalizing 
            geometries returned by the query operation.
            Editable FeatureLayer ignores this property.
            </summary>		
            <remarks>Supported in ArcGIS REST Server v.10+</remarks>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FeatureLayer.UpdateCompleted">
            <summary>
            Occurs when the layer has completed requesting features from the service.
            </summary>
            <remarks>This event fires after an explicit call to Update() or after the layer has
            initialized and features was returned from the feature layer service.</remarks>
            <seealso cref="E:ESRI.ArcGIS.Client.FeatureLayer.UpdateFailed"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.SelectionColor">
            <summary>
            Gets or sets the selection color.
            </summary>
            <remarks>
            <para>
            The <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.SelectionColor"/> will only have effect on default 
            symbols. If you override the service symbology using 
            either the <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.Renderer"/> or 
            <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.FeatureSymbol"/>
            properties, this property will be ignored. The selection color
            will instead be what the <see cref="T:ESRI.ArcGIS.Client.Symbols.Symbol"/> defines for its selection 
            state. Note that the default built-in symbols does not define a 
            selection state.
            </para>
            </remarks>
            <seealso cref="T:ESRI.ArcGIS.Client.Symbols.Symbol"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.ObjectIDs">
            <summary>
            Object ids to query for.  If object ids are specified, 
            other query parameters like Where are ignored.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.LayerInfo">
            <summary>
            Information about the feature layer.  If null, can be obtained by calling FeatureLayerInfo.Get and listening to its Ready event.  When the Ready event is 
            fired, the LayerInfo property can be set to the FeatureLayerInfo that is now ready for use.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.EditTask">
            <summary>
            Provides access to events and methods for editing.  Null if the layer is not editable.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.TimeExtent">
            <summary>
            Gets the valid time extent for the service, or null of this service does not support time based queries.
            </summary>
            <remarks>
            <para>
            Only supported for ArcGIS Image Server from version 10.0 onward. The layer/table must also support 
            querying and exporting maps based on time.
            </para>
            <para>
            The TimeExtent Property provides metadata about the layer’s service. If temporal information is available 
            (meaning it is not null/Nothing) for the geographic data in the layer’s service, then developers can take 
            advantage of using the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> Property to 
            display snapshots of the temporal data that cover a specified time period (aka. 
            <see cref="T:ESRI.ArcGIS.Client.TimeExtent">TimeExtent</see>).  Once common use case is to bind a 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.TimeSlider">TimeSlider</see> Control  with the a 
            <see cref="T:ESRI.ArcGIS.Client.Map">Map</see> Control to provide an interactive user experience of 
            showing how geographic temporal data changes over time. 
            </para>
            <para>
            Several examples where a FeatureLayer with TimeExtent information can be used to display snapshots of 
            temporal geographic data can be found in the SDK documentation for the 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Class, 
            <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.LatestObservationRenderer">TemporalRenderer.LatestObservationRenderer</see> 
            Property, 
            <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.ObservationRenderer">TemporalRenderer.ObservationRenderer</see> 
            Property, 
            <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.TrackRenderer">TemporalRenderer.TrackRenderer</see> 
            Property, <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> Class, and 
            <see cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger">TimeClassBreaksAger</see> Class.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.Version">
            <summary>
            Gets the version of ArcGIS Server where the map service is published.
            </summary>
            <remarks>Examples are 9.3, 9.31, 10, 10.01.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.IsReadOnly">
            <summary>
            Whether the feature layer is read only.  If False, changes made to the layer's
            graphic collection can be applied to the service by explicitly calling SubmitEdits
            or by setting AutoSave to True.
            </summary>
            <remarks>Only available after layer initialization.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.AutoSave">
            <summary>
            Gets or sets the whether edits to the layer's graphics collection are
            auto-submitted to the service. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.ValidateEdits">
            <summary>
            Whether edits are validated.  If true, exceptions will be thrown on 
            attribute value changes if value does not match field type or if it 
            does not fall into the field domain.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FeatureLayer.SaveEditsFailed">
            <summary>
            Occurs when save edits fails.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FeatureLayer.EndSaveEdits">
            <summary>
            Event fired when edits are complete.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FeatureLayer.BeginSaveEdits">
            <summary>
            Event fired when edits are about to be submitted.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.AttributionTemplate">
            <summary>
            Gets the attribution template of the layer.
            </summary>
            <value>The attribution template.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureLayer.HasEdits">
            <summary>
            Whether Undo can be done.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureLayer.QueryMode">
             <summary>
             Describes how the layer queries the service: Gets a snapshot of all or all available features;
            Gets the features in the current extent and caches upto the OnDemandCacheSize number
            of features; or has its graphics collection managed by selection tools.
             </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.QueryMode.Snapshot">
            <summary>
            Gets a snapshot of all or all available features
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.QueryMode.OnDemand">
             <summary>
             Gets the features in the current extent and caches upto the OnDemandCacheSize number
            of features
             </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureLayer.QueryMode.SelectionOnly">
            <summary>
            Has its graphics collection managed by selection tools
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.ObjectIDComparer.GetHashCode(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureLayer.SimpleRenderer.GetSymbol(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Gets a symbol based on a graphic.
            </summary>
            <param name="graphic">The graphic.</param>
            <returns>Symbol</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.GroupLayer">
            <summary>
            Group Layer collection
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GroupLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.GroupLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GroupLayer.OnMapChanged(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.Map)">
            <summary>
            Override to know when a layer's <see cref="T:ESRI.ArcGIS.Client.Map"/> property changes.
            </summary>
            <param name="oldValue">Old map</param>
            <param name="newValue">New map</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GroupLayer.Initialize">
            <summary>
            Initializes the resource.
            </summary>
            <remarks>
            	<para>Override this method if your resource requires asynchronous requests to initialize,
            and call the base method when initialization is completed.</para>
            	<para>Upon completion of initialization, check the <see cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/> for any possible errors.</para>
            </remarks>
            <seealso cref="E:ESRI.ArcGIS.Client.Layer.Initialized"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Layer.InitializationFailure"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GroupLayer.Cancel">
            <summary>
            Stops loading of any pending images
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GroupLayer.ChildLayersProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.GroupLayer.ChildLayers"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GroupLayer.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GroupLayer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GroupLayer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of the layer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> object.
            A group layer returns only one item describing the group layer (the legends of the sublayers are not returned by this method) 
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error (cant' happen with a group layer).</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GroupLayer.OnLegendChanged">
            <summary>
            Called when the legend changes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GroupLayer.FullExtent">
            <summary>
            The full extent of the layer
            </summary>
            <value></value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GroupLayer.ChildLayers">
            <summary>
            Gets or sets the child layers.
            </summary>
            <value>The child layers.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.GroupLayer.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed (e.g. when the renderer changed)
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:ESRI.ArcGIS.Client.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ValueConverters.DoubleCollectionCloner">
            <summary>
            For internal use only. This class is used for supporting the assembly infrastructure and not meant to be used outside the assembly.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ValueConverters.DoubleCollectionCloner.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ValueConverters.DoubleCollectionCloner.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Utils.Snapping">
            <summary>
            Extension methods for finding nearby points in a geometry, used for snapping in edit and draw.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Utils.Snapping.FindClosestVertex(ESRI.ArcGIS.Client.Geometry.Geometry,ESRI.ArcGIS.Client.Geometry.MapPoint,System.Double,System.Double@)">
            <summary>
            Finds the vertex in a geometry closest to a point.
            </summary>
            <param name="g">The geometry to search for a vertex in.</param>
            <param name="snapPoint">The point to find the closest vertex to.</param>
            <param name="maxDistance">The maximum search distance. Will only return a vertex if one exist within this distance.</param>
            <param name="distanceSquared">The output distance squared to the returned point.</param>
            <returns>The vertex point closest to the search point.</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.RouteTask">
            <summary>
            Solves routing problems by finding a least-cost path between multiple 
            locations.
            </summary>
            <para>
            Helps you solve a routing problem by finding a least-cost path between 
            multiple locations using a network service exposed by the ArcGIS Server 
            REST API (available in ArcGIS Server 9.3.1 and later). You can route 
            between two or more locations, optionally avoiding barriers, finding 
            best sequence and getting driving directions.
            </para>
            <para>
            The "cost" (of the least-cost path) is calculated based on an impedance 
            attribute which you define in a network dataset. Impedance can be time 
            or distance, or even a more abstract variable such as "scenic value".
            </para>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveServiceAreaAsync(ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters)">
            <summary>
            Returns geometries that define the service area of each facility.
            </summary>
            <param name="parameters">Parameters indicate guidlines that are required 
            when determining what the service area is of each facility.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveServiceAreaAsync(ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters,System.Object)">
            <summary>
            Returns geometries that define the service area of each facility.
            </summary>
            <param name="parameters">Parameters indicate guidlines that are required 
            when determining what the service area is of each facility.</param>
            <param name="userToken"> A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveClosestFacilityAsync(ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters)">
            <summary>
            Determines the closest route between <see cref="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.Incidents"/> and <see cref="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.Facilities"/>. 
            </summary>
            <param name="parameters">Parameters indicate guidlines that are 
            required when determining what the route to the closest facility.
            </param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveClosestFacilityAsync(ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters,System.Object)">
            <summary>
            Determines the closest route between 
            <see cref="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.Incidents"/> and 
            <see cref="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.Facilities"/>. 
            </summary>
            <param name="parameters">Parameters indicate guidlines that are 
            required when determining what the route to the closest facility.
            </param>
            <param name="userToken"> A user-defined object that is passed to the 
            method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteTask.solveClosestFacilityCompleted(System.Object,ESRI.ArcGIS.Client.WebRequest.RequestEventArgs)">
            <summary>
            On succesful completion of the 
            <see cref="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveClosestFacilityAsync(ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters)"/> 
            the response results will populated.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">
            The <see cref="T:ESRI.ArcGIS.Client.WebRequest.RequestEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteTask"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteTask"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveAsync(ESRI.ArcGIS.Client.Tasks.RouteParameters)">
            <summary>
            Determines the path from one stop to the next.
            </summary>
            <param name="parameters">Parameters indicate guidlines that are 
            required when determining what the route to each stop.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveAsync(ESRI.ArcGIS.Client.Tasks.RouteParameters,System.Object)">
            <summary>
            Determines the path from one stop to the next.
            </summary>
            <param name="parameters">Parameters indicate guidlines that are 
            required when determining what the route to each stop.</param>
            <param name="userToken"> A user-defined object that is passed to the 
            method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteTask.OnSolveCompleted(ESRI.ArcGIS.Client.Tasks.RouteEventArgs)">
            <summary>
            Raises the <see cref="E:SolveCompleted"/> event.
            </summary>
            <param name="args">
            The <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveServiceAreaCompleted">
            <summary>
            This event is raised on the succesful completion of the <see cref="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveServiceAreaAsync(ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters)"/>.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveClosestFacilityCompleted">
            <summary>
            Event is rasised on completion of <see cref="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveClosestFacilityAsync(ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters)"/> 
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveCompleted">
            <summary>
            Event is raised upon completion of 
            <see cref="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveAsync(ESRI.ArcGIS.Client.Tasks.RouteParameters)"/>. 
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters">
            <summary>
            Base route parameters in shared between <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteParameters"/>, <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters"/> and <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters"/>
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.AccumulateAttributes">
            <summary>
            The list of network attribute names to be accumulated with the analysis,
            i.e. which attributes should be returned as part of the response. The
            default is as defined in the specific routing network layer used in your
            RouteTask. You can specify any attributes names listed in the Service
            Directory under "Network Dataset -> Network Attributes" as
            "Usage Type: esriNAUTCost". 
            </summary>
            <value>The accumulate attributes.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.Barriers">
            <summary>
            The set of barriers loaded as network locations during analysis.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.PolylineBarriers">
            <summary>
            The set of polyline barriers loaded as network locations during analysis.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.PolygonBarriers">
            <summary>
            The set of polygon barriers loaded as network locations during analysis.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.ImpedanceAttribute">
            <summary>
            The network attribute name to be used as the impedance attribute in analysis. 
            </summary>
            <para>
            The default is as defined in the specific routing network layer used in your RouteTask. 
            You can specify any attributes names listed in the Service Directory under 
            "Network Dataset -> Network Attributes" as "Usage Type: esriNAUTCost". </para>
            <para>You can also specify a value of "none" to indicate that no network attributes should be 
            used for impedance. If you specify an empty string, it will use the default of the service.
            For example, set impedanceAttribute="Time" for quickest route and impedanceAttribute="Length" 
            for shortest drive. Assuming the service has those two esriNAUTCost attributes.</para>
            <seealso href="http://webhelp.esri.com/arcgisdesktop/9.3/index.cfm?TopicName=Understanding_the_network_attribute"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.OutputGeometryPrecision">
            <summary>
             The precision of the output geometry after generalization. If 0, no generalization of output 
             geometry is performed. If present and positive, it represents the MaximumAllowableOffset 
             parameter - generalization is performed according to IPolycurve.Generalize.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.OutputGeometryPrecisionUnits">
            <summary>
             The units of the output geometry precision.
            </summary>
            <remarks>The default value is esriUnknownUnits.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.OutputLines">
            <summary>
            The type of output lines to be generated in the result. The default is as defined in the specific
            routing network layer used in your <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteTask"/>. Possible values are "esriNAOutputLineNone" (no line at
            all), "esriNAOutputLineStraight" (a straight line from start to end) and "esriNAOutputLineTrueShape"
            </summary>
            <value> esriNAOutputLineNone | esriNAOutputLineStraight | esriNAOutputLineTrueShape.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.OutSpatialReference">
            <summary>
             The well-known ID of the spatial reference for the geometries returned with the analysis results. 
             If outSR is not specified, the geometries are returned in the spatial reference of the routing network layer  
             used in your <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteTask"/>.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.RestrictionAttributes">
            <summary>
             The list of network attribute names to be used as restrictions with the analysis. The default is as defined
             in the specific routing network layer used in your RouteTask. Possible values are listed in the Service
             Directory under "Network Dataset -> Network Attributes". You can also specify a value of "none" to indicate
             that no network attributes should be used as restrictions. If you specify an empty array, it will default
             to the default of the service. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.RestrictUTurns">
            <summary>
            Specifies how U-Turns should be handled. The default is as defined in the specific routing network layer used
            in your RouteTask. Possible values are "esriNFSBAllowBacktrack", "esriNFSBAtDeadEndsOnly" and
            "esriNFSBNoBacktrack". 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.ReturnBarriers">
            <summary>
            If true, barriers will be returned in the barriers property of RouteSolveResult. 
            </summary>
            <remarks>
            The default value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.ReturnPolygonBarriers">
            <summary>
            If true, polyline barriers will be returned in the polylineBarriers of the RouteSolveResult.
            </summary>
            <remarks>
            The default value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.ReturnPolylineBarriers">
            <summary>
            If true, polygon barriers will be returned in the polygonBarriers of the RouteSolveResult.
            </summary>
            <remarks>
            The default value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.AttributeParameterValues">
            <summary>
            A set of attribute parameter values that can be parameterized to 
            determine which network elements can be used by a vehicle. 
            </summary>		
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.RouteParameters">
            <summary>
            Input parameters for a <see cref="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveAsync(ESRI.ArcGIS.Client.Tasks.RouteParameters,System.Object)"/>. 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteParameters"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.Stops">
            <summary>
             The set of stops loaded as network locations during analysis. Can be either an instance of DataLayer or FeatureSet.
            </summary>
            <remarks>To do batch routing (solving multiple routes at once), add route names to each of your stops.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.DirectionsLanguage">
            <summary>
            The language to be used when computing directions. The default is as defined
            in the specific routing network layer used in your RouteTask. By default,
            NAServer gets installed with en_US only - it is up to the server administrator
            to add additional languages. 
            </summary>
            <value>The directions language.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.DirectionsLengthUnits">
            <summary>
            The length units to use when computing directions. The default is as defined
            in the specific routing network layer used in your <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteTask"/>.
            Possible values are "esriFeet", "esriKilometers", "esriMeters",
            "esriMiles", "esriNauticalMiles" and "esriYards". 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.DirectionsTimeAttribute">
            <summary>
            The name of network attribute to use for the drive time when computing directions.
            The default is as defined in the specific routing network layer used in your RouteTask. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.DoNotLocateOnRestrictedElements">
            <summary>
            If true, avoid network elements restricted by barriers or due to restrictions
            specified in restrictionAttributes. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.FindBestSequence">
            <summary>
            If true, the solver will optimize the order of the stops in the route (while taking
            into account preserveFirstStop and preserveLastStop if they were set to true).
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.IgnoreInvalidLocations">
            <summary>
            When false, the solve operation will fail if at least one of the stops specified cannot
            be located or reached.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.PreserveFirstStop">
            <summary>
            If true, the solver should keep the first stop fixed in the sequence (even when findBestSequence is true).
            Only applicable if findBestSequence is true. The default is as defined in the specific routing network 
            layer used in your <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteTask"/>. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.PreserveLastStop">
            <summary>
             If true, the solver should keep the last stop fixed in the sequence (even when findBestSequence is true). 
             Only applicable if findBestSequence is true. The default is as defined in the specific routing network 
             layer used in your RouteTask.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.ReturnDirections">
            <summary>
             If <c>true</c>, directions will be generated and returned in the directions property of each <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteResult"/> of the <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteEventArgs"/>.
            </summary>
            <remarks>The default value is <c>false</c>.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.ReturnRoutes">
            <summary>
             If true, routes will be generated and returned in the route property of each <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteResult"/> of the <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteEventArgs"/>.
            </summary>
            <remarks>The default value is <c>true</c>.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.ReturnStops">
            <summary>
             If <c>true</c>, stops will be returned in the stops property of RouteSolveResult.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.StartTime">
            <summary>
             The time the route begins. If not specified, the solver will not start the route at a particular time.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.UseHierarchy">
            <summary>
             If true, the hierarchy attribute for the network should be used in analysis. The default is as defined
             in the specific routing network layer used in your RouteTask.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.UseTimeWindows">
            <summary>
             If <c>true</c>, the solver should consider time windows. The default is as defined in the specific routing network layer used in your RouteTask.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.AttributeParameter">
            <summary>
            Used in RouteParameter.attributeParameterValues 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.AttributeParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.AttributeParameter"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.AttributeParameter.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.AttributeParameter"/> class.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AttributeParameter.attributeName">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <value>The name of the attribute.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AttributeParameter.parameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AttributeParameter.value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ExtentEventArgs">
            <summary>
            Event argument for a change in map extent.
            </summary>
            <seealso cref="E:ESRI.ArcGIS.Client.Map.ExtentChanging"/>
            <seealso cref="E:ESRI.ArcGIS.Client.Map.ExtentChanged"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ExtentEventArgs.#ctor(ESRI.ArcGIS.Client.Geometry.Envelope,ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.ExtentEventArgs"/> class.
            </summary>
            <param name="oldExtent">The previous extent envelope.</param>
            <param name="newExtent">The new extent envelope.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ExtentEventArgs.NewExtent">
            <summary>
            The new extent envelope.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ExtentEventArgs.OldExtent">
            <summary>
            The old extent envelope.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.PictureFillSymbol">
            <summary>
            <see cref="T:ESRI.ArcGIS.Client.Symbols.FillSymbol"/> class used to draw fills of type Image
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.PictureFillSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Symbols.PictureFillSymbol"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.PictureFillSymbol.SourceProperty">
            <summary>
            Identifies the Image Source dependency property
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.PictureFillSymbol.ToJson">
            <summary>
            Serializes the picture fill symbol to JSON
            </summary>
            <returns>
            A JSON string representation of the picture fill symbol.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.PictureFillSymbol.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source of the Image to use for the fill.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Services.LodInfo">
            <summary>Provides information about a scale level of detail (LOD) for map display.</summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.LodInfo.#ctor">
            <summary>
            Default, parameterless constructor
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.LodInfo.#ctor(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Constructor.</summary>
            <param name="levelID">ID of the level.</param>
            <param name="resolution">Resolution of the level of detail, in map units per pixel.</param>
            <param name="scale">Map scale of the level of detail.</param>
            <param name="columns">Number of columns.</param>
            <param name="rows">Number of rows.</param>
            <param name="tileExtentWidth">Horizontal map extent of each tile.</param>
            <param name="tileExtentHeight">Vertical map extent of each tile.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.LodInfo.Compare(ESRI.ArcGIS.Client.Services.LodInfo)">
            <summary>Compares two levels of detail for equal values in all properties.</summary>
            <returns>
            True if both LODs have the same values for all properties, false
            otherwise.
            </returns>
            <param name="other">Other level of detail to compare with the current one.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.LodInfo.AreResolutionsCompatible(ESRI.ArcGIS.Client.Services.LodInfo)">
            <summary>
            Compares resolutions taking rounding errors into account.
            </summary>
            <param name="other"><see cref="T:ESRI.ArcGIS.Client.Services.LodInfo"/> to compare to.</param>
            <returns>True if compatible.</returns>
            <remarks>Two resolutions are considered compatible if the calculated rounded 
            tilesize in pixels are the same for both resolutions.</remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.LodInfo.Clone">
            <summary>Creates a copy of the level of detail with the same property values.</summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.LodInfo.TileExtentWidth">
            <summary>Horizontal map extent of each tile in the level of detail.</summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.LodInfo.TileExtentHeight">
            <summary>Horizontal map extent of each tile in the level of detail.</summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.LodInfo.LevelID">
            <summary>ID of the level of detail.</summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.LodInfo.Resolution">
            <summary>Resolution of the level of detail, in map units per pixel.</summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.LodInfo.Scale">
            <summary>Map scale of the level of detail.</summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.LodInfo.Columns">
            <summary>Number of columns in the level of detail.</summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.LodInfo.Rows">
            <summary>Number of rows in the level of detail.</summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.TileInfo">
            <summary>
            Contains information about the tiling scheme for a <see cref="T:ESRI.ArcGIS.Client.TiledMapServiceLayer"/>.
            </summary>
            <seealso cref="T:ESRI.ArcGIS.Client.TiledMapServiceLayer"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TileInfo.Height">
            <summary>
            Gets or sets the heightof each tile in pixels.
            </summary>
            <value>The height of each tile.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TileInfo.Width">
            <summary>
            Gets or sets the width of each tile in pixels.
            </summary>
            <value>The width of each tile.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TileInfo.Origin">
            <summary>
            Gets or sets the tiling scheme origin..
            </summary>
            <value>The tiling scheme origin.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TileInfo.SpatialReference">
            <summary>
            Gets or sets the spatial reference of the tiling schema.
            </summary>
            <value>The spatial reference.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TileInfo.Lods">
            <summary>
            Gets or sets an array of levels of detail that define the tiling scheme.
            </summary>
            <value>The level of details.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Lod">
            <summary>
            Levels of detail (LOD) for a <see cref="T:ESRI.ArcGIS.Client.TiledMapServiceLayer"/>. Each LOD corresponds to a map at a given scale or resolution.
            </summary>
            <seealso cref="T:ESRI.ArcGIS.Client.TiledMapServiceLayer"/>
            <seealso cref="P:ESRI.ArcGIS.Client.TileInfo.Lods"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Lod.CompareTo(ESRI.ArcGIS.Client.Lod)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Lod.Resolution">
            <summary>
            Gets or sets the resolution in map units of each pixel in a tile for each level..
            </summary>
            <value>The resolution.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.EditGeometry">
            <summary>
            GraphicLayer editor
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.OnGeometryEdit(ESRI.ArcGIS.Client.Graphic,ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.EditGeometry.Action)">
            <summary>
            Called when geometry has been edited.
            </summary>
            <param name="g">The g.</param>
            <param name="newItem">The new item.</param>
            <param name="oldItem">The old item.</param>
            <param name="action">The action.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.hoverLine">
            <summary>Invisible line symbol for tragging mouse move on polygon edges and polylines</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.snapSymbol">
            <summary>Snap Symbol when hovering on the line segments</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.MapProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.EditGeometry.Map"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.MaintainAspectRatioProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.EditGeometry.MaintainAspectRatio"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.ScaleEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.EditGeometry.ScaleEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.RotateEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.EditGeometry.RotateEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.MoveEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.EditGeometry.MoveEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.EditVerticesEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.EditGeometry.EditVerticesEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.VertexSymbolProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.EditGeometry.VertexSymbol"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.ScaleBoxSymbolProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.EditGeometry.ScaleBoxSymbol"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.ScalePointSymbolProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.EditGeometry.ScalePointSymbol"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.RotatePointSymbolProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.EditGeometry.RotatePointSymbol"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.EditGeometry"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.#ctor(ESRI.ArcGIS.Client.Map)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.EditGeometry"/> class.
            </summary>   
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.IsEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.EditGeometry.IsEnabled"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.StartEdit(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Starts the edit.
            </summary>
            <param name="graphicToEdit">The graphic to edit.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.StartEdit(ESRI.ArcGIS.Client.Graphic,ESRI.ArcGIS.Client.Symbols.Symbol,System.Boolean)">
            <summary>
            Starts the edit.
            </summary>
            <param name="graphic">The graphic.</param>
            <param name="editSymbol">The symbol for the graphic to edit.</param>
            <param name="deletingVertex">True when rebuilding vertices and hover lines after vertex deletion.</param>        
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.BuildHoverLines(ESRI.ArcGIS.Client.Graphic,ESRI.ArcGIS.Client.Geometry.PointCollection,System.Boolean)">
            <summary>
            Adds hover lines and vertices to track mouseover on the polygon outline and line segments.
            </summary>
            <param name="graphic">Graphics to build hoverlines for</param>
            <param name="ps">The ps.</param>
            <param name="includeLastPoint">set to <c>true</c> for lines and <c>false</c> for polygons.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.StopEdit">
            <summary>
            Stops editing a graphic.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.CancelEdit">
            <summary>
            Cancels the edit.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.vertexLayer_MouseLeave(System.Object,ESRI.ArcGIS.Client.GraphicMouseEventArgs)">
             <summary>
            Removes the snap vertex.
             </summary>
             <param name="sender">The sender.</param>
             <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.vertexLayer_MouseEnter(System.Object,ESRI.ArcGIS.Client.GraphicMouseEventArgs)">
            <summary>
            Shows and moves the snap vertex.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.vertex_doubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the Double click event extension on Graphic and deletes the vertex.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.StartTracking">
            <summary>
            Hooks up mouse events for moving the geometry/vertex
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.MyMap_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the MouseLeave event of the MyMap control (cancels vertex drag tracking).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.Map_MouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseLeftButtonUp event of the Map control (cancels vertex drag tracking).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.Map_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the MouseMove event of the Map control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.UndoLastEdit">
            <summary>
            Undoes the last edit.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.RedoLastEdit">
            <summary>
            Redoes the last edit.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.StopTracking">
            <summary>
            Unhooks mouse events and stops tracking vertex dragging
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.EditGeometry.GeometryEdit">
            <summary>
            Occurs when geometry has edited.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.Map">
            <summary>
            Gets or sets the map to draw on.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.MaintainAspectRatio">
            <summary>
            Gets or sets a value indicating whether aspect ratio need to be maintained.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.ScaleEnabled">
            <summary>
            Gets or sets a value indicating whether scale is enabled.
            </summary>
            <value><c>true</c> if scale is enabled; otherwise, <c>false</c>.</value>        
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.RotateEnabled">
            <summary>
            Gets or sets a value indicating whether rotate is enabled.
            </summary>
            <value><c>true</c> if rotate is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.MoveEnabled">
            <summary>
            Gets or sets a value indicating whether move is enabled.
            </summary>
            <value><c>true</c> if move is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.EditVerticesEnabled">
            <summary>
            Gets or sets a value indicating whether edit vertices is enabled.
            </summary>
            <value><c>true</c> if edit vertices is enabled; otherwise, <c>false</c>.</value>        
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.VertexSymbol">
            <summary>
            Gets or sets the vertex symbol used for editing vertex
            </summary>
            <value>The default vertex symbol.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.ScaleBoxSymbol">
            <summary>
            Gets or sets the scale box symbol used for editing vertex
            </summary>
            <value>The default scale box symbol.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.ScalePointSymbol">
            <summary>
            Gets or sets the scale point symbol used for scaling geometry
            </summary>
            <value>The default scale point symbol.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.RotatePointSymbol">
            <summary>
            Gets or sets the rotate point symbol used for rotating geometry
            </summary>
            <value>The default rotate point symbol.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.IsEnabled">
            <summary>
            Gets or sets a value indicating whether edit geometry is enabled.
            </summary>
            <value>
            	<c>true</c> if edit geometry is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.EditGeometry.Action">
            <summary>
            Describes the action that caused a <see cref="E:ESRI.ArcGIS.Client.EditGeometry.GeometryEdit"/> event.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.Action.VertexAdded">
            <summary>
            New vertex added
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.Action.VertexRemoved">
            <summary>
            Vertex removed
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.Action.VextedMoved">
            <summary>
            Vertex moved
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.Action.EditCompleted">
            <summary>
            Edit completed
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.Action.EditStarted">
            <summary>
            Edit started
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.Action.EditCanceled">
            <summary>
            Edit canceled
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.Action.EditUndone">
            <summary>
            Edit undone
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.Action.EditRedone">
            <summary>
            Edit redone
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.Action.GeometryMoved">
            <summary>
            Geometry moved
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.Action.GeometryScaled">
            <summary>
            Geometry scaled
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.EditGeometry.Action.GeometryRotated">
            <summary>
            Geometry rotated
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.EditGeometry.GeometryEditEventArgs">
            <summary>
            Geometry edit event arguments used by  used by the <see cref="E:ESRI.ArcGIS.Client.EditGeometry.GeometryEdit"/> event.
            </summary>
            <seealso cref="E:ESRI.ArcGIS.Client.EditGeometry.GeometryEdit"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.GeometryEditEventArgs.#ctor(ESRI.ArcGIS.Client.Graphic,ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.EditGeometry.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.EditGeometry.GeometryEditEventArgs"/> class.
            </summary>
            <param name="g">The g.</param>
            <param name="newItem">The new item.</param>
            <param name="oldItem">The old item.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.EditGeometry.GeometryEditEventArgs.#ctor(ESRI.ArcGIS.Client.Graphic,ESRI.ArcGIS.Client.Geometry.MapPoint[],ESRI.ArcGIS.Client.Geometry.MapPoint[],ESRI.ArcGIS.Client.EditGeometry.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.EditGeometry.GeometryEditEventArgs"/> class.
            </summary>
            <param name="g">The g.</param>
            <param name="newItems">The new items.</param>
            <param name="oldItems">The old items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.GeometryEditEventArgs.Graphic">
            <summary>
            Gets or sets the graphic.
            </summary>
            <value>The graphic.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.GeometryEditEventArgs.NewItems">
            <summary>
            Gets or sets the new items.
            </summary>
            <value>The new items.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.GeometryEditEventArgs.OldItems">
            <summary>
            Gets or sets the old items.
            </summary>
            <value>The old items.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.EditGeometry.GeometryEditEventArgs.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.MouseExtensions">
            <summary>
            Extension method for tracking double clicking on graphics
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.MouseExtensions.AddDoubleClick(ESRI.ArcGIS.Client.Graphic,System.Windows.Input.MouseButtonEventHandler)">
            <summary>
            Adds a double click event handler.
            </summary>
            <param name="element">The Element to listen for double clicks on.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.MouseExtensions.RemoveDoubleClick(ESRI.ArcGIS.Client.Graphic,System.Windows.Input.MouseButtonEventHandler)">
            <summary>
            Removes a double click event handler.
            </summary>
            <param name="element">The element.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.AttachmentInfo">
            <summary>
            Information on a feature attachment.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.AttachmentInfo.ID">
            <summary>
            Gets the ID of the attachment.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.AttachmentInfo.ContentType">
            <summary>
            Gets the content type.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.AttachmentInfo.Size">
            <summary>
            Gets the attachment size in bytes.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.AttachmentInfo.Name">
            <summary>
            Gets the name of the attachment.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.AttachmentInfo.Uri">
            <summary>
            Gets the URI to the attachment.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.AttachmentInfo.Delete">
            <summary>
            Gets the delete command.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.AttachmentResult">
            <summary>
            Attachment results returned when working with FeatureLayer attachments.
            </summary>
            <seealso cref="M:ESRI.ArcGIS.Client.FeatureLayer.AddAttachment(ESRI.ArcGIS.Client.Graphic,System.IO.Stream,System.String,System.Action{ESRI.ArcGIS.Client.FeatureService.AttachmentResult},System.Action{System.Exception})"/>
            <seealso cref="M:ESRI.ArcGIS.Client.FeatureLayer.DeleteAttachment(ESRI.ArcGIS.Client.Graphic,System.String[],System.Action{ESRI.ArcGIS.Client.FeatureService.AttachmentResult[]},System.Action{System.Exception})"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.AttachmentResult.ObjectID">
            <summary>
            Gets the object ID of the attachment.
            </summary>
            <value>The object ID.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.AttachmentResult.GlobalID">
            <summary>
            Gets the global ID of the Attachment.
            </summary>
            <value>The global ID.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.AttachmentResult.Success">
            <summary>
            Gets a value indicating whether the operation against the attachment was successful.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.GraphicsDataSource">
            <summary>
            Base Graphics DataSource that allows binding a model or view to <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.GraphicsSource"/> and
            converting the items to renderable Graphics in the process.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsDataSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.GraphicsDataSource"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsDataSource.ItemsSourceProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.GraphicsDataSource.ItemsSource"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsDataSource.OnItemsSourceCollectionChanged(System.Collections.IEnumerable,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the items source collection has changed.
            </summary>
            <param name="collection">The collection.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsDataSource._selectionBinding">
            <summary>
            The binding used to identify the dependent value binding.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsDataSource.Refresh">
            <summary>
            Refreshes data from data source and renders the series.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsDataSource.PrepareDataPoint(ESRI.ArcGIS.Client.GraphicsDataSource.DataObject,System.Object)">
            <summary>
            Prepares the data point.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="dataContext">The data context.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsDataSource.LoadDataPoints(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Loads the data points.
            </summary>
            <param name="newItems">The new items.</param>
            <param name="oldItems">The old items.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsDataSource.GetDataPoint(System.Object)">
            <summary>
            Retrieves the data object corresponding to the object passed as the
            parameter.
            </summary>
            <param name="dataContext">The data context used for the graphics.
            </param>
            <returns>The data point associated with the object.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsDataSource.ShouldCreateDataPoint(System.Object)">
            <summary>
            Determines whether the datasource should create a data point for the associated item.
            </summary>
            <param name="dataContext">The data context.</param>
            <returns><c>true</c> to create it, <c>false</c> to skip it.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsDataSource.System#Collections#Generic#IEnumerable{ESRI#ArcGIS#Client#Graphic}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsDataSource.System#Collections#IEnumerable#GetEnumerator">
            <summary>
             Returns an enumerator that iterates through a collection.
             </summary>
             <returns>
             An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through
             the collection.
             </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsDataSource.CreateDataPoint(System.Object)">
            <summary>
            Returns a Control suitable for the Series.
            </summary>
            <returns>The DataPoint instance.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsDataSource.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>The items source.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsDataSource.IsSelectedBinding">
            <summary>
            Gets or sets the optional Binding to use for identifying the dependent value the signifies selection.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.GraphicsDataSource.CollectionChanged">
            <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.GraphicsDataSource.DataObject">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicsDataSource.DataObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.GraphicsDataSource.DataObject"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GraphicsDataSource.DataObject.SelectedProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.GraphicsDataSource.DataObject.Selected"/> dependency property.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsDataSource.DataObject.Graphic">
            <summary>
            Gets the graphic instance.
            </summary>
            <value>The graphic.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsDataSource.DataObject.Geometry">
            <summary>
            Gets the geometry instance.
            </summary>
            <value>The geometry.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicsDataSource.DataObject.Selected">
            <summary>
            Gets or sets the selection state.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.PointCollection">
            <summary>
            Point collection
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.PointCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.PointCollection"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.PointCollection.#ctor(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Geometry.MapPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.PointCollection"/> class.
            </summary>
            <param name="list">The list containing map points.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.PointCollection.#ctor(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Geometry.MapPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.PointCollection"/> class.
            </summary>
            <param name="collection">Enumerable of Map Points.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.PointCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.PointCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.PointCollection.GetEnvelope">
            <summary>
            Gets the envelope.
            </summary>
            <returns>Minimum enclosing envelope</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ProgressEventArgs">
            <summary>
            Holds event data for the <see cref="P:ESRI.ArcGIS.Client.ProgressEventArgs.Progress"/> event.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ProgressEventArgs.Progress">
            <summary>
            Gets or sets the progress.
            </summary>
            <value>The progress is a value between 0 and 100.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.LayerCollection">
            <summary>
            A collection of Map Layers
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.LayerCollection"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerCollection.GetFullExtent">
            <summary>
            Gets the full combined extent of all layers
            </summary>
            <returns>Full extent</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerCollection.GetLevelByNearestPixelSize(System.Double)">
            <summary>
            Gets the level that closets matches a given pixelsize
            </summary>
            <param name="pixelsize">PixelSize resolution to match to</param>
            <returns>Level index</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerCollection.resolutionsAreSame(System.Double,System.Double)">
            <summary>
            A pixel resolution making a 256px tile less than
            1/2 a pixel wider is considered the same.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="E:ESRI.ArcGIS.Client.LayerCollection.LayersInitialized">
            <summary>
            Occurs when all layers in the collection is initialized.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.LayerCollection.Progress">
            <summary>
            Occurs when the layers are loading.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.LayerCollection.CollectionClearing">
            <summary>
            Occurs when the layers collection is about to get cleared.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:ESRI.ArcGIS.Client.Layer"/> with the specified ID.
            </summary>
            <value></value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerCollection.HasPendingLayers">
            <summary>
            Returns true if there are layers that are not initialized yet
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.LayerCollection.LayersInitializedHandler">
            <summary>
            Layer initialization handler for the <see cref="E:ESRI.ArcGIS.Client.LayerCollection.LayersInitialized"/> event.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.IMapTool">
            <summary>
            Interface use for drawing tools 
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Draw">
            <summary>
            The Draw object used to draw Graphic objects against the <see cref="T:ESRI.ArcGIS.Client.Map"/>
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Draw.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Draw"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Draw.#ctor(ESRI.ArcGIS.Client.Map)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Draw"/> class.
            </summary>
            <param name="map">The map to draw on.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Draw.LineSymbolProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Draw.LineSymbol"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Draw.FillSymbolProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Draw.FillSymbol"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Draw.DrawModeProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Draw.DrawMode"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Draw.MapProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Draw.Map"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Draw.IsEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Draw.IsEnabled"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Draw.Activate">
            <summary>
            Activates the draw mode specified
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Draw.AddVertex(ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Adds vertex.
            </summary>
            <param name="mp">The mp.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Draw.UndoLastVertex">
            <summary>
            Undo the last vertex.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Draw.CompleteDraw">
            <summary>
            Completes the draw.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Draw.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Draw.DrawComplete">
            <summary>
            The DrawComplete event is raised just after drawing is complete
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Draw.DrawBegin">
            <summary>
            The Draw Begin event is raised just before drawing begins
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Draw.VertexAdded">
            <summary>
            The DrawComplete event is raised just after drawing is complete
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Draw.LineSymbol">
            <summary>
            Gets or sets the line symbol used for drawing freehand and polylines.
            </summary>
            <value>The default line symbol.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Draw.FillSymbol">
            <summary>
            Gets or sets the symbol used for drawing polygons and envelopes.
            </summary>
            <value>The default fill symbol.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Draw.DrawMode">
            <summary>
            Gets or sets the Draw mode.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Draw.Map">
            <summary>
            Gets or sets the map to draw on.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Draw.IsEnabled">
            <summary>
            Gets or sets a value indicating whether drawing is enabled.
            </summary>
            <value>
            	<c>true</c> if drawing is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.DrawMode">
            <summary>
            The drawing mode used by the Draw Object
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.DrawMode.None">
            <summary>
            Disables drawing of graphics on the Map
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.DrawMode.Point">
            <summary>
            Uses a single click to create a <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint"/>
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.DrawMode.Polyline">
            <summary>
            Direct the Draw object to draw using a <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline"/>
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.DrawMode.Polygon">
            <summary>
            Direct the Draw object to draw using a <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/>
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.DrawMode.Rectangle">
            <summary>
            Direct the Draw object to draw using an <see cref="T:ESRI.ArcGIS.Client.Geometry.Envelope"/>
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.DrawMode.Freehand">
            <summary>
            Direct the Draw object to draw Free Hand.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.DrawMode.Arrow">
            <summary>
            Direct the Draw object to draw an arrow using a <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/>
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.DrawMode.Triangle">
            <summary>
            Direct the Draw object to draw a triangle using a <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/>
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.DrawMode.Ellipse">
            <summary>
            Direct the Draw object to draw an ellipse using a <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/>
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.DrawMode.Circle">
            <summary>
            Direct the Draw object to draw a circle using a <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/>
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.DrawShape">
            <summary>
            This class is used to define a shaped geometry.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DrawShape.#ctor(ESRI.ArcGIS.Client.Geometry.PointCollection,ESRI.ArcGIS.Client.ScaleMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.DrawShape"/> class.
            </summary>
            <param name="vertices">The vertices that define the shape.</param>
            <param name="scaleMode">The scale mode that defines how the shape will be drawn.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DrawShape.ScaleFromBaseShape(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Scales from base shape.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <returns></returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ScaleMode">
            <summary>
            The scale mode used by DrawShape to scale its base shape.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleMode.Distance">
            <summary>
            Scale base shape by the distance between start point and end point.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleMode.Envelope">
            <summary>
            Scale base shape by the envelope created by start point and end point.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.DrawEventArgs">
            <summary>
            Draw Event Arcguments used when Drawing Operations are Complete
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DrawEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.DrawEventArgs"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.DrawEventArgs.Geometry">
            <summary>
            Gets or sets the geometry.
            </summary>
            <value>The geometry.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.DrawEventArgs.DrawMode">
            <summary>
            Gets or sets the draw mode.
            </summary>
            <value>The draw mode.</value>
        </member>
        <member name="F:ESRI.ArcGIS.Client.DrawSelection.DrawModeProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.DrawSelection.DrawMode"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DrawSelection.Activate">
            <summary>
            Activates the draw mode specified
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DrawSelection.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.DrawSelection.DrawMode">
            <summary>
            Gets or sets the Draw mode.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.VertexAddedEventArgs">
            <summary>
            Draw Event Arcguments used when Drawing Operations are Complete
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.VertexAddedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.DrawEventArgs"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.VertexAddedEventArgs.Vertex">
            <summary>
            Gets the vertex that was added.
            </summary>
            <value>The geometry.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.VertexAddedEventArgs.DrawMode">
            <summary>
            Gets or sets the draw mode.
            </summary>
            <value>The draw mode.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.MapPoint">
            <summary>
            Point class
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MapPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MapPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint"/> class.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MapPoint.#ctor(System.Double,System.Double,ESRI.ArcGIS.Client.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint"/> class.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="sref">Spatial Reference</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MapPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MapPoint.Equals(ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MapPoint.Clone">
            <summary>
            Creates a deep clone of the current Object.
            </summary>
            <returns>Returns a deep clone of the current Object.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.MapPoint.X">
            <summary>
            Gets or sets X.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.MapPoint.Y">
            <summary>
            Gets or sets Y.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.MapPoint.Extent">
            <summary>
            Gets the minimum enclosing envelope of the instance
            </summary>
            <returns>Envelope</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Clustering.Cluster.Count">
            <summary>
            Number of map points in the cluster 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Clustering.Cluster.cx">
            <summary>
            Centroid x value
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Clustering.Cluster.cy">
            <summary>
            Centroid y value 
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Editing.Union">
            <summary>
            Enables unions on graphics.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Union.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Union.OnIsEnabledChanged">
            <summary>
            Overrides to enable verb
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Union.SetDrawMode">
            <summary>
            Overrides to set draw mode for union
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Union.Execute(ESRI.ArcGIS.Client.GraphicsLayer,System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Executes union on the given graphics.
            </summary>
            <param name="layer">Graphics layer that contains graphics to union</param>
            <param name="toUnion">Graphics to union</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Union.Execute">
            <summary>
            Executes union on all selected graphics.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Union.Execute(ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Executes union on graphics contained in the geometry selector.
            </summary>
            <param name="selector">Geometry to select features with for union</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.Union.DrawMode">
            <summary>
            Gets or sets the draw mode.  If draw mode is None, no selection will be performed before calling geometry service method.
            </summary>
            <value>The draw mode.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FeatureService.Editing.Union.UnionCompleted">
            <summary>
            Occurs when union has completed.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Graphics.ObservableDictionary"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Graphics.ObservableDictionary"/> class.
            </summary>
            <param name="dictionary">The dictionary storage container.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"/> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"/> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null. </exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"/> object. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"/> is read-only.-or- The <see cref="T:System.Collections.IDictionary"/> has a fixed size. </exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"/> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"/> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null. </exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"/> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"/> has a fixed size. </exception>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Graphics.ObservableDictionary.ValueChanged">
            <summary>
            Occurs when a key value changes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Graphics.DictionaryChangedEventArgs">
            <summary>
            Dictionary changed event arguments
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.DictionaryChangedEventArgs.Action">
            <summary>
            The action causing the change
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.DictionaryChangedEventArgs.Key">
            <summary>
            The key of the attribute that changed.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.DictionaryChangedEventArgs.OldValue">
            <summary>
            The old value of the attribute
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Graphics.DictionaryChangedEventArgs.NewValue">
            <summary>
            The new value of the attribute
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ValueConverters.DictionaryConverter">
            <summary>
            <para><b>Note: This API is now obsolete.</b> Not necessary for use in Silverlight 4+ or WPF. Please bind to dictionaries directly via keys.</para>
            <para>
            Value converter for getting a value from a Dictionary&lt;string,object&gt; instance.
            Parameter must be a string key.
            </para>
            </summary>
            <remarks>
            This class is here for backwards compatibility with earlier releases. However
            the dictionary converter is no longer needed in Silverlight version 4 and up.
            Binding to dictionaries can be accomplished by specifying
            the key in brackets. Example: <br/> 
            {Binding [AttributeKey]} <br/> 
            {Binding SomeDictionary[AttributeKey]}.
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ValueConverters.DictionaryConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            <para><b>Note: This API is now obsolete.</b> Not necessary for use in Silverlight 4+ or WPF. Please bind to dictionaries directly via keys.</para>
            <para>
            Modifies the source data before passing it to the target for display in the UI.
            </para>
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ValueConverters.DictionaryConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            <para><b>Note: This API is now obsolete.</b> Not necessary for use in Silverlight 4+ or WPF. Please bind to dictionaries directly via keys.</para>
            <para>
            Modifies the target data before passing it to the source object. This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </para>
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.QueryTask">
            <summary>
            Task for querying a layer from a map service.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteRelationshipQueryAsync(ESRI.ArcGIS.Client.Tasks.RelationshipParameter,System.Object)">
            <summary>
            Executes a query to a obtain addtional data from another layer/table 
            based on a relationship defined in the service meta data.
            </summary>
            <param name="parameter">The parameters that define the relationship of 
            the query.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.QueryTask.OnExecuteRelationshipQueryCompleted(ESRI.ArcGIS.Client.Tasks.RelationshipEventArgs)">
            <summary>
            Raises the <see cref="E:ExecuteRelationshipQueryCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.RelationshipEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.QueryTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.QueryTask"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.QueryTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.QueryTask"/> class.
            </summary>
            <param name="Url">The URL of the REST MapService layer to query.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteCountAsync(ESRI.ArcGIS.Client.Tasks.Query,System.Object)">
            <summary>
            Executes a query against an ArcGIS Server map layer and counts the
            results. If the query is successful, the <see cref="E:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteCountCompleted"/> event
            is raised with the result. 
            </summary>
            <param name="query">Specifies the attributes and spatial filter of the query.</param>
            <param name="userToken"> A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteAsync(ESRI.ArcGIS.Client.Tasks.Query)">
            <summary>
            Executes a query against an ArcGIS Server map layer. The result is returned 
            as a FeatureSet. If the query is successful, the <see cref="E:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteCompleted"/> event
            is raised with the result. A FeatureSet contains an array of Graphic features, 
            which can be added to the map using Map.graphics.add(). This array will not be 
            populated if no results are found. 
            </summary>
            <param name="query">Specifies the attributes and spatial filter of the query.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteAsync(ESRI.ArcGIS.Client.Tasks.Query,System.Object)">
            <summary>
            Executes a query against an ArcGIS Server map layer. The result is returned
            as a FeatureSet. If the query is successful, the <see cref="E:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteCompleted"/> event
            is raised with the result. A FeatureSet contains an array of Graphic features,
            which can be added to the map using Map.graphics.add(). This array will not be
            populated if no results are found.
            </summary>
            <param name="query">Specifies the attributes and spatial filter of the query.</param>
            <param name="userToken"> A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.QueryTask.OnExecuteCompleted(ESRI.ArcGIS.Client.Tasks.QueryEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.QueryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.QueryTask.OnExecuteCountCompleted(ESRI.ArcGIS.Client.Tasks.QueryCountEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteCountCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.QueryCountEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.QueryTask.LastRelationshipResult">
            <summary>
            Gets the last relationship result of the ExecuteRelashipQuery or 
            ExecuteRelationshipQueryAsync method of the QueryTask.
            </summary>
            <value>The last relationship result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteRelationshipQueryCompleted">
            <summary>
            Occurs when the query completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.QueryTask.LastResult">
            <summary>
            Gets or sets the last query result.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteCompleted">
            <summary>
            Occurs when the query completes.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteCountCompleted">
            <summary>
            Occurs when the count query completes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GeometryType">
            <summary>
            The geometry type.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryType.Envelope">
            <summary>
            Refers to geometry type <see cref="T:ESRI.ArcGIS.Client.Geometry.Envelope"/>.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryType.MultiPoint">
            <summary>
            Refers to geometry type <see cref="T:ESRI.ArcGIS.Client.Geometry.MultiPoint"/>.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryType.Point">
            <summary>
            Refers to geometry type <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint"/>.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryType.Polygon">
            <summary>
            Refers to geometry type <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/>.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryType.Polyline">
            <summary>
            Refers to geometry type <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline"/>.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GeometryOffset">
            <summary>
            Offset enumeration
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryOffset.Mitered">
            <summary>
            Mitered offset
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryOffset.Bevelled">
            <summary>
            Bevelled offset
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryOffset.Rounded">
            <summary>
            Rounded offset
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.CurveExtension">
            <summary>
            Trim / Extend enumeration is used for TrimExtend Geometry service
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.CurveExtension.DefaultCurveExtension">
            <summary>
            By default, extension considers both ends of paths. 
            The old ends remain and new points are added at the 
            extended ends. The new points have attributes that are 
            extrapolated from adjacent existing segments.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.CurveExtension.RelocateEnds">
            <summary>
            If an extension is performed at an end, relocate the 
            end point to the new position instead of leaving the old 
            point and adding a new point at the new position.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.CurveExtension.KeepEndAttributes">
            <summary>
            If an extension is performed at an end, do not extrapolate 
            the end-segment's attributes for the new point. Instead, 
            make its attributes the same as the current end. Incompatible 
            with esriNoAttributes.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.CurveExtension.NoEndAttributes">
            <summary>
            If an extension is performed at an end, do not extrapolate the 
            end-segment's attributes for the new point. Instead, make its 
            attributes be empty. Incompatible with esriKeepAttributes.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.CurveExtension.NoExtendAtFrom">
            <summary>
            Do not extend the 'from' end of any path.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.CurveExtension.NoExtendAtTo">
            <summary>
            Do not extend the 'to' end of any path.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.FacilityTravelDirection">
            <summary>
            Enumeration used to indicate there starting and 
            ending points for directions
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.FacilityTravelDirection.TravelDirectionFromFacility">
            <summary>
            Directions should be in order from facility to the location.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.FacilityTravelDirection.TravelDirectionToFacility">
            <summary>
            Directions should bin in order from location to facility.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.FacilityReturnType">
            <summary>
            The type of facility to be returned. 	
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.FacilityReturnType.ServerFacilityReturnAll">
            <summary>
            Returns all facilities
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.FacilityReturnType.ServerFacilityReturn">
            <summary>
            Returns a single facility
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.GraphicCollection">
            <summary>
            An observable collection of <see cref="T:ESRI.ArcGIS.Client.Graphic"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.GraphicCollection"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicCollection.InsertItem(System.Int32,ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Inserts the item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicCollection.InsertItemInternal(System.Int32,ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Inserts the item ignoring the ReadOnly setting.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicCollection.RemoveItemInternal(System.Int32)">
            <summary>
            Removes the item ignoring the ReadOnly setting.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicCollection.SetItem(System.Int32,ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Sets the item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicCollection.SetItemInternal(System.Int32,ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Sets the item ignoring the ReadOnly setting.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicCollection.#ctor(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.GraphicCollection"/>
            class and populates it with items copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the items are copied.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicCollection.ClearItems">
            <summary>
            Raises collection clearing event before the collection is cleared.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicCollection.IsReadOnly">
            <summary>
            If true, will throw InvalidOperationException when trying to modify the collection.
            </summary>
            <remarks>
            This property will only be true if <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.GraphicsSource"/> is used 
            on a <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/> instead of directly populating the 
            <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.Graphics"/> property directly.
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.MapImage">
            <summary>
            The results of an export map operation or Geoprocessor GetResultImage method call.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.MapImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.MapImage"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MapImage.Href">
            <summary>
            URL to the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MapImage.Width">
            <summary>
            The width of the generated image in pixels.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MapImage.Height">
            <summary>
            The height of the generated image in pixels.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MapImage.Extent">
            <summary>
            The extent of the generated map image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MapImage.Scale">
            <summary>
            The scale of the generated map image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MapImage.Error">
            <summary>
            Gets or sets an error if the image failed to be generated.
            </summary>
            <value>The error.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol">
            <summary>
            Point symbol using a bitmap image for symbol
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol"/> class.
            FOR INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.SourceProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.Source"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.WidthProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.Width"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.HeightProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.Height"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.OpacityProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.Opacity"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.ColorProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.Color"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.XOffsetFromCenterProperty">
            <summary>
            Dependency property for the X offset from the center.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.YOffsetFromCenterProperty">
            <summary>
            Dependency property for the Y offset from the center.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.AngleProperty">
            <summary>
            The dependency property for Angle.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.RenderTransformPointProperty">
            <summary>
            Dependency property for RenderTransformPoint
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.SelectionColorProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.Color"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.ToJson">
            <summary>
            Serializes the picture marker symbol to JSON
            </summary>
            <returns>
            A JSON string representation of the picture marker symbol.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.Source">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.Width">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.Height">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.Opacity">
            <summary>
            Gets or sets the opacity of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.XOffsetFromCenter">
            <summary>
            X offset from the center.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.YOffsetFromCenter">
            <summary>
            Y offset from the center.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.OffsetX">
            <summary>
            Gets the horizontal offset of centering the symbol.
            </summary>
            <remarks>Setting the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.OffsetX"/> property is not allowed on the PictureMarkerSymbol sub class.</remarks>
            <value></value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.OffsetY">
            <summary>
            Gets the vertical offset of centering the symbol.
            </summary>
            <remarks>Setting the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.OffsetY"/> property is not allowed on the PictureMarkerSymbol sub class.</remarks>
            <value></value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.Angle">
            <summary>
            Gets or sets the angle
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.RenderTransformPoint">
            <summary>
            Gets the render transform point used for drawing the symbol.  Cannot set.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureMarkerSymbol.SelectionColor">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.EditResultItem">
            <summary>
            An item in the results from an edit operation.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.EditResultItem.ObjectID">
            <summary>
            The object id of the edited graphic
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.EditResultItem.GlobalID">
            <summary>
            The global id of the edited graphic
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.EditResultItem.Success">
            <summary>
            Whether the edit was successful
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.EditResultItem.ErrorCode">
            <summary>
            The error code if the edit was not successful
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.EditResultItem.ErrorDescription">
            <summary>
            The error description if the edit was not successful
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.EndEditEventArgs">
            <summary>
            Arguments for the end edit event.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.EndEditEventArgs.Results">
            <summary>
            Results from the edit operation
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.EndEditEventArgs.Success">
            <summary>
            Whether the edit was successful.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ITemporalRenderer">
            <summary>
            ITemporalRenderer interface for generating aged <see cref="T:ESRI.ArcGIS.Client.Symbols.Symbol"/>s based on the graphic's age.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ITemporalRenderer.GetTrackID(ESRI.ArcGIS.Client.Graphic,ESRI.ArcGIS.Client.GraphicsLayer)">
            <summary>
            Gets the track ID.
            </summary>
            <param name="graphic">The graphic.</param>
            <param name="layer">The layer.</param>
            <returns></returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ITemporalRenderer.ObservationRenderer">
            <summary>
            Gets or sets the observation renderer.
            </summary>
            <value>The observation renderer.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ITemporalRenderer.TrackRenderer">
            <summary>
            Gets or sets the track renderer.
            </summary>
            <value>The track renderer.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ITemporalRenderer.LatestObservationRenderer">
            <summary>
            Gets or sets the latest observation renderer.
            </summary>
            <value>The latest observation renderer.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.StringToStringArrayConverter">
            <summary>
            String To String Array Converter
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.StringToStringArrayConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="destinationType">The type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.StringToStringArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.StringToStringArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.StringToStringArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified value object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
            <exception cref="T:System.NotImplementedException">
            	<see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>  not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Editor">
            <summary>
            Editor object which enables editing and selection support for <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> 
            and <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>.
            </summary>
            <remarks>
            <para>
            The Editor object can be used to perform selection, draw and edit of
            graphics in a feature layer and graphics layer. The Editor requires the 
            <see cref="P:ESRI.ArcGIS.Client.Editor.Map"/> property to be set, and optionally a set of 
            <see cref="P:ESRI.ArcGIS.Client.Editor.LayerIDs"/> to work against, otherwise all GraphicsLayers are active for editing.
            </para>
            <para>
            Editing is performed by executing an <see cref="T:System.Windows.Input.ICommand"/> on the Editor.
            The following commands are supported by the Editor:
            </para>
            <list type="table">  
            <listheader><term>Command</term><description>Description</description></listheader>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.Add"/></term><description>Allows the user to draw and add a new graphic to a layer.</description></item>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.CancelActive"/></term><description>Cancels any active command active on the map.</description></item>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.ClearSelection"/></term><description>Unselects all graphics.</description></item>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.Cut"/></term><description>Uses a GeometryService to cut graphics with a line drawn by the user.</description></item>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.DeleteSelected"/></term><description>Deletes all selected graphics.</description></item>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.EditVertices"/></term><description>Edits the vertices of any graphic clicked by the user.</description></item>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.Reshape"/></term><description>Uses a GeometryService to reshape selected graphics with a line drawn by the user.</description></item>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.Save"/></term><description>Commits any unsaved edits in all <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>s.</description></item>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.Select"/></term><description>Allows the user to select graphics.</description></item>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.Union"/></term><description>Uses a GeometryService to union selected graphics.</description></item>  
            </list>   
            <para>
            Use the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> method to verify 
            if an action can be executed. Based on the current selection and other Editor settings some actions might not be executable. 
            For instance, you cannot perform a union if only one graphic is selected. Selection on a <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/> is only supported  
            using a point or rectangle, while all selection modes are available on <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>.
            If the <see cref="P:ESRI.ArcGIS.Client.Editor.GeometryServiceUrl"/> is not set, commands that require
            this service will not be available. A read-only
            <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> will only support selection, no editing.
            </para>
            <para>
            You can have any number of Editors associated with a map. If one Editor's 
            command becomes active, it will cancel any other Editor's currently working
            on the map.  This will prevent the user from adding and selecting features
            at the same time. Note: Only commands requiring user input will cancel 
            other commands.   For example, clicking save will not cancel a draw currently in
            progress.
            </para>
            <para>
            Some command takes an additional <c>CommandParameter</c> to control the
            command. For example <see cref="P:ESRI.ArcGIS.Client.Editor.Select"/> has an optional parameter
            to choose whether the user wants to Add or Remove features to the current
            selection. Similarly <see cref="P:ESRI.ArcGIS.Client.Editor.Add"/> requires a specific template or type id for
            drawing on a <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>, but a <see cref="T:ESRI.ArcGIS.Client.Symbols.Symbol"/> for drawing on a GraphicsLayer.
            See the individual command reference for more detail on command parameters.
            </para>
            <para>Controls can implement their own handling of ICommand. For example, a control
            can listen to the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event and
            change its enable or visibility state. <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>
            and Hyperlink already implement commanding and will change
            their IsEnabled state based on whether the command can execute. As a result, the developer does not have to
            update the button state explicity when the Editor or a layer changes. </para>
            The following example shows how to create a select tool using an editor:
            <code language="Xaml">
            &lt;Border&gt;
              &lt;Border.Resources&gt;
                &lt;esri:Editor x:Key="editor" Map="{Binding ElementName=MyMap}" LayerIDs="myFeatureLayer"  /&gt;
              &lt;/Border.Resources&gt;
              &lt;StackPanel Orientation="Horizontal" DataContext="{StaticResource editor}"&gt;
                &lt;Button Content="Select" Command="{Binding Select}" CommandParameter="New" /&gt;
                &lt;Button Content="Add Selection" Command="{Binding Select}" CommandParameter="Add" /&gt;
                &lt;Button Content="Unselect" Command="{Binding Select}" CommandParameter="Remove" /&gt;
                &lt;Button Content="Clear Selection" Command="{Binding ClearSelection}" /&gt;
                &lt;Button Content="Add Default" Command="{Binding Add}" /&gt;
                &lt;Button Content="Add MyFeatureType" Command="{Binding Add}" CommandParameter="MyFeatureTemplate" /&gt;
                &lt;Button Content="Delete Selected" Command="{Binding DeleteSelected}" /&gt;
                &lt;CheckBox IsChecked="{Binding Path=Freehand, Mode=TwoWay}" Content="Freehand Draw" VerticalAlignment="Center" /&gt;
              &lt;/StackPanel&gt;
            &lt;/Border&gt;
            </code>
            <para>
            To see a visual change to a <see cref="T:ESRI.ArcGIS.Client.Symbols.Symbol"/> when its
            selected, it must have a Selected state defined. The simple symbols included with the ArcGIS API for Silverlight/WPF do not include a selected state.
            However symbols created using definitions provided by an ArcGIS Server REST feature service will include a selected state.
            </para>
            <para>
            Whenever an action completes, the <see cref="E:ESRI.ArcGIS.Client.Editor.EditCompleted"/> event is fired.
            Use the <see cref="P:ESRI.ArcGIS.Client.Editor.ActionEventArgs.Action"/> to perform additional logic
            when an operation completes.
            </para>
            <para>
            The Editor is able to work on multiple layers at the same time. Be aware 
            of using <see cref="P:ESRI.ArcGIS.Client.Editor.AutoSelect"/> on some of the commands like union 
            and reshape when working with multiple layers. The AutoSelect feature may 
            cause the user to edit features in layers they didn't intend to 
            (note that union won't union features across layers, but will union 
            features together within it). A good approach to avoid this issue, is 
            using a <see cref="T:System.Windows.Controls.ComboBox"/> to select the layer the user wants to 
            perform edits on, and set the <see cref="P:ESRI.ArcGIS.Client.Editor.LayerIDs"/> property when the 
            user selects a layer in the ComboBox.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Input.ICommand"/>
            <seealso cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>
            <seealso cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Editor.CancelActiveAction">
            <summary>
            Will check if the current map already has an editor working on it.
            If so, will cancel that action using the spefied cancel method set
            using <see cref="M:ESRI.ArcGIS.Client.Editor.SetActiveAction(System.Action,System.Windows.Input.ICommand,System.Object)"/>.
            This should always be called prior to starting an action that requires 
            user interaction with the map (ie. draw, edit, select, reshape etc).
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Editor.ClearActiveAction">
            <summary>
            Call this method when user iteraction with the map has ended (ie. draw completed etc).
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Editor.SetActiveAction(System.Action,System.Windows.Input.ICommand,System.Object)">
            <summary>
            Call this method right before letting the user interact with the map using
            draw, edit etc.
            </summary>
            <param name="cancel">The method to call if the user changes tool before the action is complete.</param>
            <param name="command">The command.</param>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.AutoSelectProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.AutoSelect"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.GeometryServiceUrlProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.GeometryServiceUrl"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.ProxyUrlProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.ProxyUrl"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.ContinuousModeProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.ContinuousMode"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.MapProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.Map"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.SelectionModeProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.SelectionMode"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.MaintainAspectRatioProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.MaintainAspectRatio"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.ScaleEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.ScaleEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.RotateEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.RotateEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.MoveEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.MoveEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.EditVerticesEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.EditVerticesEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.LayerIDsProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.LayerIDs"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.FreehandProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.Freehand"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.AutoCompleteProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Editor.AutoComplete"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Editor.GetGeometryType(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Gets the common geometry in a collection of graphics, or null if they are not all the same type
            </summary>
            <param name="graphics"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Editor.GetSnapKey(System.Windows.DependencyObject)">
            <summary>
            Gets the SnapKey used on the map when drawing.
            </summary>
            <param name="map">The map where the snap key has been set.</param>
            <returns>Snap Key</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Editor.SetSnapKey(System.Windows.DependencyObject,System.Windows.Input.Key)">
            <summary>
            Sets the SnapKey used on the map when drawing
            </summary>
            <param name="map">The map.</param>
            <param name="key">The key to use for snapping.</param>
            <remarks>
            You can change the default snap key for drawing by setting this attached
            property on the map. Example:
            <code lang="Xaml">
            &lt;esri:Map esri:Editor.SnapKey=&quot;A&quot; /&gt;
            </code>
            </remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.SnapKeyProperty">
            <summary>
            Identifies the SnapKey attached dependency property.
            </summary>
            <remarks>
            <para>Note that some keys are not supported in fullscreen mode.</para>
            <para>You can change the default snap key for drawing by setting this attached
            property on the map. Example:
            <code lang="Xaml">
            &lt;esri:Map esri:Editor.SnapKey=&quot;A&quot; /&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Editor.GetSnapDistance(System.Windows.DependencyObject)">
            <summary>
            Gets the snap radius used on the map in pixels.
            </summary>
            <param name="map">The map where the snap distance has been set.</param>
            <returns>Snap radius in pixels</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Editor.SetSnapDistance(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the snap radius in pixels.
            </summary>
            <param name="map">The map.</param>
            <param name="distance">The radius in pixels to use when snapping.</param>
            <remarks>
            <para>Note that some keys are not supported in fullscreen mode.</para>
            <para>You can change the default snap key for drawing by setting this attached
            property on the map. Example:
            <code lang="Xaml">
            &lt;esri:Map esri:Editor.SnapKey=&quot;A&quot; /&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.SnapDistanceProperty">
            <summary>
            Identifies the SnapDistance attached dependency property.
            </summary>
            <remarks>
            You can change the default snap key for drawing by setting this attached
            property on the map. Example:
            <code lang="Xaml">
            &lt;esri:Map esri:Editor.SnapDistance=&quot;30&quot; /&gt;
            </code>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Editor.GetIsTouchMagnifierEnabled(System.Windows.DependencyObject)">
            <summary>
            Gets a value specifying whether the touch magnifier is enabled.
            </summary>
            <param name="map">The map where magnify settings is set on.</param>
            <returns>Whether magnifier is enabled</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Editor.SetIsTouchMagnifierEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the touch magnifier is enabled.
            </summary>
            <param name="map">The map.</param>
            <param name="isEnabled"><c>true</c> if the magnifier should be enabled when editing using touch gestures.</param>
            <remarks>
            <para>Example:
            <code lang="Xaml">
            &lt;esri:Map esri:Editor.IsTouchMagnifierEnabled=&quot;False&quot; /&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.IsTouchMagnifierEnabledProperty">
            <summary>
            Identifies the IsTouchMagnifierEnabled attached dependency property.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Editor.EditorActivated">
            <summary>
            Occurs when a tool in the Editor becomes active and waits for user input.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.AutoSelect">
            <summary>
            Gets or sets a value indicating whether auto select is enabled.
            </summary>
            <value><c>true</c> if auto select is enabled otherwise, <c>false</c>.</value>
            <remarks>
            AutoSelect will allow commands that require an active selection to be executed, 
            even though no features has been selected. All commands will ignore
            this setting, if the layers has any selection. See reference table below
            for a list of commands utilizing AutoSelect:
            <list type="table">  
            <listheader><term>Command</term><description>Description</description></listheader>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.Cut"/></term><description>Uses the cut line to select features and perform the cut against (<see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> only).</description></item>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.Reshape"/></term><description>Uses the reshape line to select features and perform the reshape against (<see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> only).</description></item>  
            <item><term><see cref="P:ESRI.ArcGIS.Client.Editor.Union"/></term><description>Asks the user to do a selection first and performs a union using the selection. 
            If <see cref="P:ESRI.ArcGIS.Client.Editor.SelectionMode"/> is not Point or Rectangle, only <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> will supports AutoSelect.</description></item>  
            </list>   	
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.GeometryServiceUrl">
            <summary>
            Gets or sets the URL to a geometry service.
            </summary>
            <remarks>
            <para>
            The following commands requires a geometry service, and will be disabled if this property is not set:
            <see cref="P:ESRI.ArcGIS.Client.Editor.Union"/>, <see cref="P:ESRI.ArcGIS.Client.Editor.Cut"/>, <see cref="P:ESRI.ArcGIS.Client.Editor.Reshape"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.ProxyUrl">
            <summary>
            Gets or sets the proxy URL for geometry service.
            </summary>
            <value>The proxy URL for geometry service.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.ContinuousMode">
            <summary>
            Gets or sets a value indicating whether continuous mode is enabled.
            </summary>
            <value><c>true</c> if continuous mode; otherwise, <c>false</c>.</value>
            <remarks>If Continuous mode is true, commands like Add, Select etc will
            stay active until this value is set to false, <see cref="P:ESRI.ArcGIS.Client.Editor.CancelActive"/> 
            is executed or another command is enabled.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.Map">
            <summary>
            Gets or sets the map this editor works on.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.SelectionMode">
            <summary>
            Gets or sets the selection mode used with the selection tool.
            </summary>
            <remarks>
            Note that only <see cref="F:ESRI.ArcGIS.Client.DrawMode.Point"/> and <see cref="F:ESRI.ArcGIS.Client.DrawMode.Rectangle"/> 
            is supported on <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>. All draw modes are 
            supported on <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.MaintainAspectRatio">
            <summary>
            Gets or sets the MaintainAspectRatio.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.ScaleEnabled">
            <summary>
            Gets or sets a value indicating whether scale is enabled.
            </summary>
            <value><c>true</c> if scale is enabled; otherwise, <c>false</c>.</value>
            <remarks>If ScaleEnabled is true and command EditVertices is active,
            the selected geometry can be scaled until this value is set to false.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.RotateEnabled">
            <summary>
            Gets or sets a value indicating whether rotate is enabled.
            </summary>
            <value><c>true</c> if rotate is enabled; otherwise, <c>false</c>.</value>
            <remarks>If RotateEnabled is true and command EditVertices is active,
            the selected geometry can be rotated until this value is set to false.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.MoveEnabled">
            <summary>
            Gets or sets a value indicating whether move is enabled.
            </summary>
            <value><c>true</c> if move is enabled; otherwise, <c>false</c>.</value>
            <remarks>If MoveEnabled is true and command EditVertices is active,
            the selected geometry can be moved until this value is set to false.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.EditVerticesEnabled">
            <summary>
            Gets or sets a value indicating whether edit vertices is enabled.
            </summary>
            <value><c>true</c> if edit vertices is enabled; otherwise, <c>false</c>.</value>
            <remarks>If EditVerticesEnabled is true and command EditVertices is active,
            the selected geometry's vertices can be edited until this value is set to false.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.LayerIDs">
            <summary>
            Gets or sets the layer IDs this editor works against.
            </summary>
            <remarks>Note that some commands only supports specific layer types, 
            or requires only one layer specified.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.Freehand">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ESRI.ArcGIS.Client.Editor"/> is using
            freehand draw mode when using the <see cref="P:ESRI.ArcGIS.Client.Editor.Add"/>, <see cref="P:ESRI.ArcGIS.Client.Editor.Reshape"/>,
            <see cref="P:ESRI.ArcGIS.Client.Editor.Union"/> and <see cref="P:ESRI.ArcGIS.Client.Editor.Cut"/> commands.
            </summary>
            <value><c>true</c> if freehand; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.AutoComplete">
            <summary>
            Gets or sets whether auto completion is enabled when adding polygons
            to a <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>.
            </summary>
            <remarks>
            When AutoComplete is enabled, you draw a line instead of a polygon,
            and the autocomplete will fill in the rest of the polygon based on
            snapping to nearby features.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.GraphicsLayers">
            <summary>
            Iterates on the graphics layers this editor is working on, based
            on the <see cref="P:ESRI.ArcGIS.Client.Editor.LayerIDs"/> and <see cref="P:ESRI.ArcGIS.Client.Editor.Map"/> properties.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.GraphicsLayersInitialized">
            <summary>
            Iterates on the initialized graphics layers this editor is working on, based
            on the <see cref="P:ESRI.ArcGIS.Client.Editor.LayerIDs"/> and <see cref="P:ESRI.ArcGIS.Client.Editor.Map"/> properties.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.Save">
            <summary>
            Performs a save on all the referenced <see cref="T:ESRI.ArcGIS.Client.FeatureLayer">FeatureLayers</see>
            that doesn't have <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.AutoSave"/> enabled.
            </summary>
            <remarks>
            <para>
            Save will not be enabled if any of the feature layers referenced in
            <see cref="P:ESRI.ArcGIS.Client.Editor.LayerIDs"/> doesn't have edits or have <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.AutoSave"/>
            enabled.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.Select">
            <summary>
            Enables the user to select features in the layers.
            </summary>
            <remarks>
            <para>
            Use the CommandParameter to set the <see cref="T:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.SelectionMode"/>.
            Supported modes: Add, Remove, New, Keyboard (default).
            </para>
            <para>
            The <see cref="P:ESRI.ArcGIS.Client.Editor.SelectionMode"/> specifies whether the user selects using
            a point, polygon, polyline or rectangle. Only <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>
            supports polygon and polyline selection modes. If any of these modes
            are selected but no FeatureLayers are referenced by the editor, this
            command will be disabled.
            </para>
            </remarks>
            <see cref="N:ESRI.ArcGIS.Client.FeatureService.Editing"/>
            <see cref="P:ESRI.ArcGIS.Client.Editor.SelectionMode"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.Union">
            <summary>
            Gets the union command.
            </summary>
            <para>
            Requires the <see cref="P:ESRI.ArcGIS.Client.Editor.GeometryServiceUrl"/> to be set to a valid 
            service. Only <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline"/> and <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/>
            geometry types are supported, and all selected items must be of the 
            same type.
            </para>
            <para>
            If there is no active selection in the layers, this command will be
            disabled, unless <see cref="P:ESRI.ArcGIS.Client.Editor.AutoSelect"/> is enabled. Note that if the
            <see cref="P:ESRI.ArcGIS.Client.Editor.SelectionMode"/> is polygon or polyline, auto select will only
            be available to FeatureLayer and disabled on <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>.
            </para>
            <seealso cref="P:ESRI.ArcGIS.Client.Editor.AutoSelect"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Editor.SelectionMode"/>
            <see cref="P:ESRI.ArcGIS.Client.Editor.GeometryServiceUrl"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.ClearSelection">
            <summary>
            Unselects all features in the referenced <see cref="T:ESRI.ArcGIS.Client.FeatureLayer">FeatureLayers</see>.
            </summary>
            <remarks>
            This command is disabled if no layers have selection.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.Add">
            <summary>
            Enables the user to add a feature to the <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>
            using a specified geometry type, or a <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> using 
            either the default template or specified template.
            </summary>
            <remarks>
            <para>
            Add will work against either an editable <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> 
            or a <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>. It will only be enabled if 
            <see cref="P:ESRI.ArcGIS.Client.Editor.LayerIDs"/> is only referencing one layer.
            </para>
            <para>
            If you are editing a <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>, the CommandParameter 
            should be the feature type to use if you have feature types, or
            the template name if you only have templates defined. If you have multiple 
            templates defined for each feature type, you can use an array
            object[] { featureTypeId, featureTemplateName } as parameter.
            If no template and/or feature type is specified, the default will be used.
            If the <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> is read-only, Add will not be supported.</para>
            <para>
            If you are editing a <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>, the commandParameter 
            must be a <see cref="T:ESRI.ArcGIS.Client.Symbols.Symbol"/> to use for drawing. The <see cref="T:ESRI.ArcGIS.Client.DrawMode"/> 
            will be deduced from the symbology type.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.Cut">
            <summary>
            Performs a cut against the selected features using a user-drawn polyline.
            </summary>
            <remarks>
            <para>
            This command requires the <see cref="P:ESRI.ArcGIS.Client.Editor.GeometryServiceUrl"/> to be set.
            If this is not set, the command will be disabled.
            </para>
            <para>
            If features are selected and <see cref="P:ESRI.ArcGIS.Client.Editor.AutoSelect"/> is off, this 
            command will also be disabled. <see cref="P:ESRI.ArcGIS.Client.Editor.AutoSelect"/> is only 
            supported on <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> for this command.
            </para>
            </remarks>
            <seealso cref="P:ESRI.ArcGIS.Client.Editor.GeometryServiceUrl"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.DeleteSelected">
            <summary>
            Deletes all selected features in the referenced layers.
            </summary>
            <remarks>
            <para>
            This command will be disabled if no features are selected, or only
            has selection in read-only <see cref="T:ESRI.ArcGIS.Client.FeatureLayer">FeatureLayers</see>.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.EditVertices">
            <summary>
            Allows the user to click any feature and edit its vertices.
            </summary>
            <remarks>
            <para>
            This command is not available for read-only <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>.
            </para>
            <para>When this command is executed, the map will wait for the user to 
            click any of the graphics listed in the <see cref="P:ESRI.ArcGIS.Client.Editor.LayerIDs"/> property 
            that is editable.</para>
            <para>If you want to edit a specific graphic, regardless of layer, 
            set the command parameter of the command to the graphic you want to edit.
            The graphic's geometry does not support MapPoint.</para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.Reshape">
            <summary>
            Performs a reshape against the selected features using a user-drawn polyline.
            </summary>
            <remarks>
            <para>
            This command requires the <see cref="P:ESRI.ArcGIS.Client.Editor.GeometryServiceUrl"/> to be set.
            If this is not set, the command will be disabled.
            </para>
            <para>
            If features are selected and <see cref="P:ESRI.ArcGIS.Client.Editor.AutoSelect"/> is off, this 
            command will also be disabled. <see cref="P:ESRI.ArcGIS.Client.Editor.AutoSelect"/> is only 
            supported on <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> for this command.
            </para>
            </remarks>
            <seealso cref="P:ESRI.ArcGIS.Client.Editor.GeometryServiceUrl"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.CancelActive">
            <summary>
            Cancels any command that might be active on the <see cref="P:ESRI.ArcGIS.Client.Editor.Map"/>.
            </summary>
            <remarks>
            <para>
            This command is only active if any other command is currently waiting 
            for user input. It will cancel any active command on any active
            editor working on the associated <see cref="P:ESRI.ArcGIS.Client.Editor.Map"/>.
            </para>
            </remarks>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Editor.EditCompleted">
            <summary>
            Occurs when an edit has completed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Editor.ActionEventArgs">
            <summary>
            Action Event arguments, base for CommandEventArgs and EditEventArgs 
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.ActionEventArgs.Action">
            <summary>
            Gets the type of edit.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Editor.CommandEventArgs">
            <summary>
            Command Event arguments used by the <see cref="E:ESRI.ArcGIS.Client.Editor.EditorActivated"/> event.
            </summary>
            <seealso cref="E:ESRI.ArcGIS.Client.Editor.EditorActivated"/>	
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.CommandEventArgs.CommandParameter">
            <summary>
            Gets the command parameter.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.CommandEventArgs.Layers">
            <summary>
            Gets the layers that may be affected.
            </summary>
            <value>The layers.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Editor.EditEventArgs">
            <summary>
            Edit Event arguments used by the <see cref="E:ESRI.ArcGIS.Client.Editor.EditCompleted"/> event.
            </summary>
            <seealso cref="E:ESRI.ArcGIS.Client.Editor.EditCompleted"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.EditEventArgs.Edits">
            <summary>
            Gets a list of edits.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Editor.Change">
            <summary>
            Edit changes used by the <see cref="E:ESRI.ArcGIS.Client.Editor.EditCompleted"/> event
            </summary>
            <seealso cref="E:ESRI.ArcGIS.Client.Editor.EditCompleted"/>
            <seealso cref="T:ESRI.ArcGIS.Client.Editor.EditEventArgs"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.Change.Layer">
            <summary>
            Gets the layer the change was performed on.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Editor.Change.Graphic">
            <summary>
            Gets the graphic that was changed.
            </summary>
            <value>The graphic.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Editor.EditAction">
            <summary>
            Describes the action that caused a <see cref="E:ESRI.ArcGIS.Client.Editor.EditCompleted"/> event.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.EditAction.Add">
            <summary>Add</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.EditAction.Remove">
            <summary>Remov</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.EditAction.Cut">
            <summary>Cut</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.EditAction.DeleteSelected">
            <summary>Delete selected</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.EditAction.ClearSelection">
            <summary>Clear selection</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.EditAction.Select">
            <summary>Select</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.EditAction.Reshape">
            <summary>Reshape</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.EditAction.Cancel">
            <summary>Cancel</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.EditAction.EditVertices">
            <summary>Edit vertices</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.EditAction.Save">
            <summary>Sasve</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Editor.EditAction.Union">
            <summary>Union</summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.OutFields">
            <summary>
            The fields to return in a QueryTask FeatureSet.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.OutFields.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.OutFields.StringToOutFieldsConverter">
            <summary>
            String To String Array Converter
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.OutFields.StringToOutFieldsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="destinationType">The type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.OutFields.StringToOutFieldsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.OutFields.StringToOutFieldsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.OutFields.StringToOutFieldsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified value object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
            <exception cref="T:System.NotImplementedException">
            	<see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>  not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.IdentifyTask">
            <summary>
            Task for identifying features from a map service.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.IdentifyTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.IdentifyTask"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.IdentifyTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.IdentifyTask"/> class.
            </summary>
            <param name="Url">The URL of the map service.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.IdentifyTask.ExecuteAsync(ESRI.ArcGIS.Client.Tasks.IdentifyParameters)">
            <summary>
            Executes an identify against an ArcGIS Server map layer. The result 
            is returned as a List of FeatureSet. If the identify is successful, 
            the user-specified responder is invoked with the result. Each 
            FeatureSet contains an array of Graphic features, which can be added 
            to the map using Map.graphics.add().
            </summary>
            <param name="identifyParameters">Specifies the criteria used to 
            identify the features.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.IdentifyTask.ExecuteAsync(ESRI.ArcGIS.Client.Tasks.IdentifyParameters,System.Object)">
            <summary>
            Executes an identify against an ArcGIS Server map layer. The result 
            is returned as a List of FeatureSet. If the identify is successful, 
            the user-specified responder is invoked with the result. Each 
            FeatureSet contains an array of Graphic features, which can be added 
            to the map using Map.graphics.add().
            </summary>
            <param name="identifyParameters">Specifies the criteria used to 
            identify the features.</param>
            <param name="userToken"> A user-defined object that is passed to the
            method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.IdentifyTask.OnExecuteCompleted(ESRI.ArcGIS.Client.Tasks.IdentifyEventArgs)">
            <summary>
            Raises the <see cref="E:ExecuteCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.IdentifyEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyTask.LastResult">
            <summary>
            The result of the last execution of the IdentifyTask.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.IdentifyTask.ExecuteCompleted">
            <summary>
            Occurs when the identify completes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPLinearUnit">
            <summary>
            A linear unit input to a geoprocessing task.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPLinearUnit.#ctor(System.String,ESRI.ArcGIS.Client.Tasks.esriUnits,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPLinearUnit"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="unit">The unit the distance is measured in.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPLinearUnit.ToJson">
            <summary>
            Serializes the parameter to JSON.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPLinearUnit.Unit">
            <summary>
            The unit the distance is measured in.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPLinearUnit.Distance">
            <summary>
            The distance.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPBoolean">
            <summary>
            A boolean input to a geoprocessing task.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPBoolean.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPBoolean"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPBoolean.ToJson">
            <summary>
            Serializes the parameter to JSON.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPBoolean.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.MultiPoint">
            <summary>
            An array of points
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MultiPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.MultiPoint"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MultiPoint.#ctor(ESRI.ArcGIS.Client.Geometry.PointCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.MultiPoint"/> class.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MultiPoint.#ctor(ESRI.ArcGIS.Client.Geometry.PointCollection,ESRI.ArcGIS.Client.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.MultiPoint"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="sref">The <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference"/></param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MultiPoint.Clone">
            <summary>
            Creates a deep clone of the current Object.
            </summary>
            <returns>Returns a deep clone of the current Object.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.MultiPoint.Points">
            <summary>
            Gets or sets the points.
            </summary>
            <value>The points.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.MultiPoint.Extent">
            <summary>
            Gets the minimum enclosing <see cref="T:ESRI.ArcGIS.Client.Geometry.Envelope"/> of the instance
            </summary>
            <returns>Envelope</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.GraphicMouseEventArgs">
            <summary>
            Provides data for mouse-related events on <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/> that 
            do not specifically involve mouse buttons, for example <see cref="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseMove"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.GraphicMouseEventArgs.GetPosition(System.Windows.UIElement)">
            <summary>
            Returns the x- and y-coordinates of the mouse pointer position, optionally
            evaluated against a coordinate origin of a supplied System.Windows.UIElement.
            </summary>
            <param name="relativeTo">
            Any System.Windows.UIElement-derived object that is contained by the Silverlight
            plug-in and connected to the object tree. To specify the object relative
            to the overall Silverlight coordinate system, use a relativeTo value of null.
            </param>
            <returns>
            A System.Windows.Point that represents the current x- and y-coordinates of
            the mouse pointer position.
            If null was passed as relativeTo, this coordinate
            is for the overall Silverlight plug-in content area. If a non-null relativeTo
            was passed, this coordinate is relative to the object referenced by relativeTo.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicMouseEventArgs.StylusDevice">
            <summary>
            Gets an object that reports stylus device information, such as the collection
            of stylus points associated with the input.
            </summary>
            <value>The stylus device information object.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicMouseEventArgs.OriginalSource">
            <summary>
            Gets a reference to the object that raised the event.
            </summary>
            <value>Gets a reference to the object that raised the event.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicMouseEventArgs.Graphic">
            <summary>
            Gets a reference to the the <see cref="P:ESRI.ArcGIS.Client.GraphicMouseEventArgs.Graphic"/> that raised the event.
            </summary>
            <value>Gets a reference to the <see cref="P:ESRI.ArcGIS.Client.GraphicMouseEventArgs.Graphic"/> that raised the event.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.GraphicMouseButtonEventArgs">
            <summary>
            Provides event data for the <see cref="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseLeftButtonDown"/>,
            <see cref="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseLeftButtonUp"/>, <see cref="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseRightButtonDown"/>
            and <see cref="E:ESRI.ArcGIS.Client.GraphicsLayer.MouseRightButtonUp"/> events.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.GraphicMouseButtonEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled. A <c>true</c> value
            for Handled prevents most handlers along the event route from handling the
            same event again.
            </summary>
            <value><c>true</c> to mark the routed event handled. <c>false</c> 
            to leave the routed event unhandled, which permits the event to 
            potentially route further and be acted on by other handlers. The 
            default is <c>false</c>.
            </value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol">
            <summary>
            Class that defines advanced cartographic features of a Line Symbol
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.DashArrayProperty">
            <summary>
            Identifies the dependency property for DashArray
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.DashCapProperty">
            <summary>
            Identifies the DashCap dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.DashOffsetProperty">
            <summary>
            Identifies the DashOffset Dependency Property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.StartLineCapProperty">
            <summary>
            Identifies the StartLineCap dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.EndLineCapProperty">
            <summary>
            Identifies the EndLineCap dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.LineJoinProperty">
            <summary>
            Identifies the LineJoin dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.MiterLimitProperty">
            <summary>
            Identifies the MiterLimit dependency property
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.DashArray">
            <summary>
            Gets or sets a collection of Double values that indicate the pattern of dashes and gaps that is used to outline shapes. 
            </summary>
            <code>
            C# Syntax
            public DoubleCollection DashArray { get; set; }
            
            XAML Sytax:
            <object DashArray="DashString"/>
            </code>
            <remarks>
            DashArray Grammar
            S[,G][,S*,G**]*
            <br/>
             S - A double value that defines the length of the first stroke in the sequence.
             G - A double value that defines the length of the first gap between strokes in the sequence. If G is omitted, the gap length is identical to the preceding stroke length.
             S* - A double value that defines the length of the additional strokes in the sequence.
             G* - A double value that defines the length of additional gaps between strokes in the sequence. If G* is omitted, the gap length is identical to the preceding stroke length. 
             <br/>
             - The [] characters are not literals, they are indicators of optional values. The * indicates that any number of stroke-dash pairs beyond the initial S,G is permitted.
             - The separator in this grammar can be either a space or a comma. You can use a mixture of space and comma as separators.
             - Each Double value in the string specifies the length of a stroke or gap relative to the thickness of the pen as a factor. For example, a value of 1 creates a dash or gap that has the same length as the thickness of the pen (a square).
             - If an odd-numbered total of entries is in the string, then the missing even-numbered entry of a pair will use the gap value specified by the last valid (even-numbered entry) gap value. 
             <br/>
            Each Double in the collection specifies the length of a dash or gap relative to the Thickness of the pen. For example, a value of 1 creates a dash or gap that has the same length as the thickness of the pen (a square).
            <br/>
            The first item in the collection, which is located at index 0, specifies the length of a dash; the second item, which is located at index 1, specifies the length of a gap. 
             <br/>
            Objects with an even index value specify dashes; objects with an odd index value specify gaps. 
             </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.DashCap">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Media.PenLineCap">PenLineCap</see>/&gt; enumeration value that specifies how the ends of a dash are drawn. 
            </summary>
            <remarks>
            This setting applies to both ends of each dash.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.DashOffset">
            <summary>
            Gets or sets a Double that specifies the distance within the dash pattern where a dash begins. 
            </summary>
            <remarks>
            The dash pattern is also influenced by StrokeDashArray. 
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.StartLineCap">
            <summary>
            Gets or sets a PenLineCap enumeration value that describes the Shape at the start of a line. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.EndLineCap">
            <summary>
            Gets or sets a PenLineCap enumeration value that describes the Shape at the end of a line. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.LineJoin">
            <summary>
            Gets or sets a PenLineJoin enumeration value that specifies the type of join that is used at the vertices of a Shape. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.CartographicLineSymbol.MiterLimit">
            <summary>
            Gets or sets a limit on the ratio of the miter length to half the  border Thickness. 
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>System.Double
            The limit on the ratio of the miter length to the border thickness of a Polyline. 
            This value is always a positive number that is greater than or equal to 1. 
            </value>
            <remarks>
            A miter forms a corner by beveling the ends of two joined lines. When two line segments meet at a small angle (sharp angle), the miter may extend beyond the thickness of the line that strokes the path.
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Services.TileInfo">
            <summary>
            Describes a map tile cache.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.TileInfo.Rows">
            <summary>
            The number of rows within the tile cache.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.TileInfo.Cols">
            <summary>
            The number of columns within the tile cache.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.TileInfo.DPI">
            <summary>
            The DPI of the tile cache.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.TileInfo.Format">
            <summary>
            The image format of the tile cache.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.TileInfo.CompressionQuality">
            <summary>
            The compression quality of the tile cache; applies to JPEG format only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.TileInfo.Origin">
            <summary>
            The origin (upper left corner) of the tiling scheme in coordinates of the spatial reference 
            of the source map document.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.TileInfo.SpatialReference">
            <summary>
            The spatial reference of the map cache.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.TileInfo.LODs">
            <summary>
            The levels of details contained in the map cache.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ArcGISImageServiceLayer">
            <summary>
            Dynamic ArcGIS REST image service layer.
            </summary>
            <remarks>
            <para>
            Allows you to work with an Image Service resource exposed by the ArcGIS 
            Server REST API (available in ArcGIS Server 9.3 and above). Image Service
            is new in ArcGIS 9.3 and is optimized for 
            delivering raw or finished imagery that can be RGB, panchromatic, 
            multispectral, or elevation data stored in a geodatabase or file system.
            Data sources for Image Services can be raster datasets, in formats such 
            as TIFF, MrSID, IMAGINE (IMG), or JPEG2000, as well as raster mosaics. 
            </para>
            <para>
            XAML usage of ArcGISImageMapServiceLayer:<br/>
            <code lang="XAML">
            &lt;esri:Map&gt;
              &lt;esri:ArcGISImageMapServiceLayer ID=&quot;MyTiledLayer&quot; 
                                         Url=&quot;http://serverapps.esri.com/ArcGIS/rest/services/BlueMarble12Month/ImageServer&quot; /&gt;
            &lt;/esri:Map&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.ArcGISImageServiceLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.#cctor">
            <summary>
            Initializes the <see cref="T:ESRI.ArcGIS.Client.ArcGISImageServiceLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.GetUrl(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,ESRI.ArcGIS.Client.DynamicMapServiceLayer.OnUrlComplete)">
            <summary>
            Gets the URL that references the map image.
            </summary>
            <param name="extent">The map extent in map units.</param>
            <param name="width">The map width in pixels.</param>
            <param name="height">The map height in pixels.</param>
            <param name="onComplete">The method to delegate to when the map image is generated.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.GetSource(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,ESRI.ArcGIS.Client.DynamicLayer.OnImageComplete)">
            <summary>
            Gets the source image to display in the dynamic layer. Override this to generate
            or modify images.
            </summary>
            <param name="extent">The extent of the image being requested.</param>
            <param name="width">The width of the image being requested.</param>
            <param name="height">The height of the image being requested.</param>
            <param name="onComplete">The method to call when the image is ready.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.TimeIntervalProperty">
            <summary>
            Identifies the TimeInterval dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.Initialize">
            <summary>
            Initializes the resource.
            Override this method if your resource requires asyncronous requests 
            to initialize, and call the base method when initialization is 
            complete.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ESRI#ArcGIS#Client#ITimeAwareLayer#TimeInterval">
            <summary>
            Gets or sets the time interval to limit the data in.
            </summary>
            <remarks>This property only applies if the service supports time data and the <see cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.TimeExtent"/> is populated.</remarks>
            <value>The time interval.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.InitialExtent">
            <summary>
            The initial extent reported by the ArcGISImageLayerService.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.Description">
             <summary>Gets the text description of the ArcGISImageServiceLayer.</summary>
             <example>
             
             	<code title="Example XAML1" description="" lang="XAML">
             	&lt;esri:Map Name="Map1" Height="400" Width="400" "&gt;
             	  &lt;!-- Description Property (Read Only). --&gt;
             	  &lt;esri:ArcGISImageServiceLayer 
             	        Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"/&gt;
             	&lt;/esri:Map&gt;
             	&lt;TextBlock Name="TextBlock_Description" Height="23" Width="248" 
             	           Text="{Binding ElementName=Map1, Path=Layers[0].Description}"/&gt;
                 </code>
                 
                 <code title="Example CS1" description="" lang="CS">
                 private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                 {
                   
                   // The Map1 object (a Map object) was defined previously in XAML.
                   
                   // Create an ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
            
                   // Create an Event Handler.
                   myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                 
                   // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer);
                 
                 }
                 
                 private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                 {
                 
                   // The Map1 object (a Map object) and TextBlock_Description (a TextBlock object) were defined previously in XAML.
                 
                   // Access a specific ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                   
                   // Description Property (Read Only).
                   TextBlock_Description.Text = myArcGISImageServiceLayer.Description;
                 
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                 
                   ' The Map1 object (a Map object) was defined previously in XAML.
                 
                   ' Create an ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                 
                   ' Create an Event Handler.
                   AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                 
                   ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer)
                 
                 End Sub
                 
                 Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                 
                   ' The Map1 object (a Map object) and TextBlock_Description (a TextBlock object) were defined previously in XAML.
                 
                   ' Access a specific ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                 
                   ' Description Property (Read Only).
                   TextBlock_Description.Text = myArcGISImageServiceLayer.Description
                 
                 End Sub        
                 </code>
                 
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ServiceDescription">
            <summary>Gets the service description reported by the ArcGISImageServiceLayer.</summary>
            <example>
            	<code title="Example XAML1" description="" lang="XAML">
                &lt;StackPanel Name="StackPanel1" Height="400" Width="400" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" &gt;
                    &lt;esri:Map Background="White" Name="Map1" Height="200" Width="400"&gt;
                    
                         &lt;!-- Define an ArcGISImageServiceLayer. --&gt;
                         &lt;esri:ArcGISImageServiceLayer 
                              Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer" /&gt;
                              
                    &lt;/esri:Map&gt;
                    
                    &lt;!-- ServiceDescription Property (Read Only). --&gt;
                    &lt;TextBlock Height="22" Name="TextBlock_ServiceDescription" Text="{Binding ElementName=Map1, Path=Layers[0].ServiceDescription}" /&gt;
                &lt;/StackPanel&gt;
                </code>
                
                <code title="Example CS1" description="" lang="CS">
                private void ArcGISImageServiceLayer_Initialized(object sender, System.EventArgs e)
                {
                    // The myArcGISImageServiceLayer (an ArcGISImageServiceLayer object) and TextBlock_ServiceDescription
                    // (a TextBlock object) were defined previously in the XAML or code-behind.
                
                    // Get the first layer in the LayerInfo collection. 
                    ArcGISImageServiceLayer myArcGISImageServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers[0];
                    
                    // ServiceDescription Property (Read Only).
                    TextBlock_ServiceDescription.Text = myArcGISImageServiceLayer.ServiceDescription;
                }
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                Private Sub ArcGISImageServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
                    ' The myArcGISImageServiceLayer (an ArcGISImageServiceLayer object) and TextBlock_ServiceDescription
                    ' (a TextBlock object) were defined previously in the XAML or code-behind.
                    
                    ' Get the first layer in the LayerInfo collection. 
                    Dim myArcGISImageServiceLayer As ArcGISImageServiceLayer = Map1.Layers.Item(0)
                    
                    ' ServiceDescription Property (Read Only).
                    TextBlock_ServiceDescription.Text = myArcGISImageServiceLayer.ServiceDescription
                End Sub
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.MapName">
            <summary>Gets the name of the raster dataset hosted by the ArcGISImageServerLayer.</summary>
            <value>The name of the raster dataset.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.CopyrightText">
             <summary>Gets the copyright text reported by the ArcGISImageServiceLayer.</summary>
             <example>
               <code title="Example XAML1" description="" lang="XAML">
               &lt;esri:Map Name="Map1" Height="400" Width="400" "&gt;
                 &lt;!-- CopyrightText Property (Read Only). --&gt;
                 &lt;esri:ArcGISImageServiceLayer 
                       Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"/&gt;
               &lt;/esri:Map&gt;
               &lt;TextBlock Name="TextBlock_CopyrightText" Height="23" Width="248" 
                          Text="{Binding ElementName=Map1, Path=Layers[0].CopyrightText}"/&gt;
               </code>
            
                 <code title="Example CS1" description="" lang="CS">
                 private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                 {
                   
                   // The Map1 object (a Map object) was defined previously in XAML.
                   
                   // Create an ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
            
                   // Create an Event Handler.
                   myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                 
                   // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer);
                 
                 }
                 
                 private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                 {
                 
                   // The Map1 object (a Map object) and TextBlock_CopyrightText (a TextBlock object) were defined previously in XAML.
                 
                   // Access a specific ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                   
                   // CopyrightText Property (Read Only).
                   TextBlock_CopyrightText.Text = myArcGISImageServiceLayer.CopyrightText;
                 
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                 
                   ' The Map1 object (a Map object) was defined previously in XAML.
                 
                   ' Create an ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                 
                   ' Create an Event Handler.
                   AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                 
                   ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer)
                 
                 End Sub
                 
                 Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                 
                   ' The Map1 object (a Map object) and TextBlock_CopyrightText (a TextBlock object) were defined previously in XAML.
                 
                   ' Access a specific ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                   
                   ' CopyrightText Property (Read Only).
                   TextBlock_CopyrightText.Text = myArcGISImageServiceLayer.CopyrightText
                 
                 End Sub        
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.Url">
             <summary>Gets or sets the URL to an ArcGISImageServiceLayer.</summary>
             <value>The URL.</value>
             <remarks>
             The URL defines the REST endpoint to an ArcGIS Server image service. 
             Use the 
             <a href="javascript:ApiToConcept('01660000001w000000', '01n700000004000000', '011v00000007000000')" target="_top">Services Directory</a> 
             application available with REST services on any ArcGIS 
             Server site to discover the URL.
             </remarks>
             <example>
             	<code title="Example XAML1" description="" lang="XAML">
                 &lt;StackPanel Name="StackPanel1" Height="400" Width="400" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" &gt;
                     &lt;esri:Map Background="White" Name="Map1" Height="200" Width="400"&gt;
                     
                          &lt;!-- Define an ArcGISImageServiceLayer. --&gt;
                          &lt;esri:ArcGISImageServiceLayer 
                               Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer" /&gt;
                               
                     &lt;/esri:Map&gt;
                     
                     &lt;!-- Url Property (Read/Write) --&gt;
                     &lt;TextBlock Height="23" Name="TextBlock_Url" Text="{Binding ElementName=Map1, Path=Layers[0].Url}" /&gt;
                 &lt;/StackPanel&gt;
                 </code>
                 
                 <code title="Example CS1" description="" lang="CS">
             	private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
             	{
             	     
             	  // Create an ArcGISImageServiceLayer. The Map1 object (a Map class) was previously defined in XAML.
             	  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
             	 
                   // Set the URL.
             	  myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
             	  
                   // Wire-up the event handler.
             	  myArcGISImageServiceLayer.Initialized += new EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Initialized);
                   
                   // Add the ArcGISImageServiceLayer to the Map control.
             	  Map1.Layers.Add(myArcGISImageServiceLayer);
             	  
             	}
             	
             	private void ArcGISImageServiceLayer_Initialized(object sender, System.EventArgs e)
             	{
             	
             	  // The TextBlock_Url (a TextBlock object) was defined previously in the XAML.
            
             	  //Access a specific layer:
             	  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
             	
             	  //Url (Read/Write)
             	  string myUrl = myArcGISImageServiceLayer.Url;
             	  if (myUrl != null)
             	  {
             	    TextBlock_Url.Text = "Url: " + myUrl;
             	  }
             	  else
             	  {
             	    TextBlock_Url.Text = "[NO Url SET]";
             	  }
             	  
             	}
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
             	Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
             	
             	  ' Create an ArcGISImageServiceLayer. The Map1 object (a Map class) was previously defined in XAML.
             	  Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
             	 
                   ' Set the URL.
             	  myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
             	  
                   ' Wire-up the event handler.
             	  AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                   
                   ' Add the ArcGISImageServiceLayer to the Map control.
             	  Map1.Layers.Add(myArcGISImageServiceLayer)
             	  
             	End Sub
             	
             	Private Sub ArcGISImageServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
             	
             	  ' The TextBlock_Url (a TextBlock object) was defined previously in the XAML.
                   
             	  'Access a specific layer:
             	  Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
             	
             	  'Url (Read/Write)
             	  Dim myUrl As String = myArcGISImageServiceLayer.Url
             	  If myUrl IsNot Nothing Then
             	    TextBlock_Url.Text = "Url: " + myUrl
             	  Else
             	    TextBlock_Url.Text = "[NO Url SET]"
             	  End If
             	
             	End Sub
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.TimeExtent">
            <summary>
            Gets the valid TimeExtent object for the ArcGISImageServiceLayer or null/Nothing if this service does 
            not support time based queries.
            </summary>
            <remarks>
            <para>
            Only supported for ArcGIS Image Server from version 10.0 onward. The layer/table must also support 
            querying and exporting maps based on time.
            </para>
            <para>
            The TimeExtent Property provides metadata about the layer’s service. If temporal information is available 
            (meaning it is not null/Nothing) for the geographic data in the layer’s service, then developers can take 
            advantage of using the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> Property to 
            display snapshots of the temporal data that cover a specified time period (aka. 
            <see cref="T:ESRI.ArcGIS.Client.TimeExtent">TimeExtent</see>).  Once common use case is to bind a 
            <see cref="T:ESRI.ArcGIS.Client.Toolkit.TimeSlider">TimeSlider</see> Control  with the a 
            <see cref="T:ESRI.ArcGIS.Client.Map">Map</see> Control to provide an interactive user experience of 
            showing how geographic temporal data changes over time. 
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.MosaicRule">
            <summary>
            Gets or sets the mosaic rule. 
            </summary>
            <value>The mosaic rule.</value>
            <remarks>A mosaic rule defines how individual images in a raster mosaic are displayed. 
            It can be used to specify a selection, mosaic method, sort order, overlapping 
            pixel resolution, etc.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.RenderingRule">
            <summary>
            Gets or sets the rendering rule which provides a set of predefined raster functions to dynamically 
            change the display of the ArcGISImageServiceLayer.
            </summary>
            <remarks>
            <para>
            The following lists the rendering rule functions, with hyperlinks to conceptual documentation, that are supported
            by the RenderingRule property:
            </para>
            <list type="bullet">
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Aspect_function/009t00000047000000/" target="_top">Aspect</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Colormap_function/009t00000049000000/" target="_top">Colormap</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Hillshade_function/009t0000004z000000/" target="_top">Hillshade</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/NDVI_function/009t00000052000000/" target="_top">NDVI</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Shaded_Relief_function/009t00000055000000/" target="_top">ShadedRelief</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Slope_function/009t00000056000000/" target="_top">Slope</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Statistics_function/009t00000058000000/" target="_top">Statistics</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Stretch_function/009t00000059000000/" target="_top">Stretch</a></item>
            </list>
            <para>
            It is required to create a <see cref="T:ESRI.ArcGIS.Client.RenderingRule">RenderingRule</see> class and set the 
            appropriate properties in order set the ArcGISImageServiceLayer.RenderingRule property.
            </para>
            </remarks>
            <example>
                <code title="Example CS1" description="" lang="CS">
                public void Make_Aspect()
                {
                
                  // Create a RenderingRule for the 'Aspect' raster function.
                
                  // Read the following conceptual documentation to understand the valid arguments necessary to create
                  // a successful RenderingRule.
                  // http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Aspect_function/009t00000047000000/
                
                  // This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  // Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  // an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  // ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                
                  // ---------------------------------------------------------------------------------------------------------------------
                
                  // Display the default ArcGISImageServiceLayer in Map1
                  // ===================================================
                
                  // Create an ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                
                  // This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer";
                
                  // Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1);
                
                  // -----------------------------------------------------------------------------------------------------------------------
                
                  // Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  // ==========================================================================
                
                  // Create another ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                
                  // This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer";
                
                  // Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2);
                
                  // Define the custom RenderingRule
                  ESRI.ArcGIS.Client.RenderingRule myRenderingRule = new ESRI.ArcGIS.Client.RenderingRule();
                
                  // Note: The .RasterFunctonName must use the text string 'Aspect'.
                  myRenderingRule.RasterFunctionName = "Aspect";
                
                }
                
                public void Make_Colormap()
                {
                
                  // Create a RenderingRule for the 'Colormap' raster function.
                
                  // Read the following conceptual documentation to understand the valid arguments necessary to create
                  // a successful RenderingRule.
                  // http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Colormap_function/009t00000049000000/
                
                  // This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  // Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  // an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  // ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                
                  // ---------------------------------------------------------------------------------------------------------------------
                
                  // Display the default ArcGISImageServiceLayer in Map1
                  // ===================================================
                
                  // Create an ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                
                  // This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer";
                
                  // Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1);
                
                  // -----------------------------------------------------------------------------------------------------------------------
                
                  // Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  // ==========================================================================
                
                  // Create another ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                
                  // This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer";
                
                  // Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2);
                
                  // Define the custom RenderingRule
                  ESRI.ArcGIS.Client.RenderingRule myRenderingRule = new ESRI.ArcGIS.Client.RenderingRule();
                
                  // Note: The .RasterFunctonName must use the text string 'Colormap'.
                  myRenderingRule.RasterFunctionName = "Colormap";
                
                  // Note: the .VariableName must use the text string 'Raster'.
                  myRenderingRule.VariableName = "Raster";
                
                
                  // Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  // Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dictionary&lt;string, object&gt; rasterParams = new Dictionary&lt;string, object&gt;();
                
                  // Example #1: Create a random set of colors for the color map.
                  // Note: The a key of 'ColormapName' takes the string 'Random'.
                  rasterParams.Add("ColormapName", "Random");
                
                  // Example #2: Create a Normalized Difference Vegetation Index (NDVI) set of colors for the color map.
                  // Note: The a key of 'ColormapName' takes the string 'NDVI'.
                  //rasterParams.Add("ColormapName", "NDVI");
                
                  // Example #3: Create a elevation stylized set of colors for the color map.
                  // Note: The a key of 'ColormapName' takes the string 'Elevation'.
                  //rasterParams.Add("ColormapName", "Elevation");
                
                  // Example #4: Create a gray scale set of colors for the color map.
                  // Note: The a key of 'ColormapName' takes the string 'Gray'.
                  //rasterParams.Add("ColormapName", "Gray");
                
                  // Example #5: Create a custom color mapping set of colors for the color map.
                  // Note: The Colormap raster function requires a defined set of color mapping values to define 
                  // which pixels will be assigned to a specific color. Defining the color mapping values can be 
                  // lengthy depending on the number of pixel values of the image and the number of colors desired. 
                  // Since defining these color maps is used by several raster functions, a shared function to 
                  // define the color mappings will be used. See the CreateColorMap function for more details on 
                  // what the color mappings are.
                  //rasterParams.Add("Colormap", CreateColorMap());
                
                  // Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams;
                
                
                  // Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule;
                
                }
                
                public void Make_Hillshade()
                {
                
                  // Create a RenderingRule for the 'Hillshade' raster function.
                
                  // Read the following conceptual documentation to understand the valid arguments necessary to create
                  // a successful RenderingRule.
                  // http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Hillshade_function/009t0000004z000000/
                
                  // This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  // Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  // an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  // ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                
                  // ---------------------------------------------------------------------------------------------------------------------
                
                  // Display the default ArcGISImageServiceLayer in Map1
                  // ===================================================
                  
                  // Create an ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  
                  // This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer";
                  
                  // Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1);
                  
                  // -----------------------------------------------------------------------------------------------------------------------
                  
                  // Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  // ==========================================================================
                  
                  // Create another ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  
                  // This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                   myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer";
                  
                  // Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2);
                  
                  
                  // Define the custom RenderingRule
                  ESRI.ArcGIS.Client.RenderingRule myRenderingRule = new ESRI.ArcGIS.Client.RenderingRule();
                  
                  // Note: The .RasterFunctonName must use the text string 'Hillshade'.
                  myRenderingRule.RasterFunctionName = "Hillshade";
                  
                  // Note: the .VariableName must use the text string 'DEM'.
                  myRenderingRule.VariableName = "DEM";
                  
                  
                  // Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  // Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dictionary&lt;string, object&gt; rasterParams = new Dictionary&lt;string, object&gt;();
                  
                  // Note: The a key of 'Azimuth' takes a double for it's object value pair.
                  rasterParams.Add("Azimuth", 215.0);
                  
                  // Note: The a key of 'Altitude' takes a double for it's object value pair.
                  rasterParams.Add("Altitude", 60.0);
                  
                  // Note: The a key of 'ZFactor' takes a double for it's object value pair.
                  rasterParams.Add("ZFactor", 3.2);
                  
                  // Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams;
                  
                  
                  // Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule;
                  
                }
                  
                public void Make_NDVI()
                {
                  
                  // Create a RenderingRule for the 'NDVI' raster function.
                  
                  // Read the following conceptual documentation to understand the valid arguments necessary to create
                  // a successful RenderingRule.
                  // http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/NDVI_function/009t00000052000000/
                  
                  // This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  // Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  // an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  // ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                  // ---------------------------------------------------------------------------------------------------------------------
                  
                  // Display the default ArcGISImageServiceLayer in Map1
                  // ===================================================
                  
                  // Create an ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  
                  // This IS a Mosaic dataset. The ArcGISImageServiceLayer has FOUR bands.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
                  
                  // Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1);
                  // -----------------------------------------------------------------------------------------------------------------------
                  
                  // Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  // ==========================================================================
                  
                  // Create another ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  
                  // This IS a Mosaic dataset. The ArcGISImageServiceLayer has FOUR bands.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
                  
                  // Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2);
                  
                  // Define the custom RenderingRule
                  ESRI.ArcGIS.Client.RenderingRule myRenderingRule = new ESRI.ArcGIS.Client.RenderingRule();
                  
                  // Note: The .RasterFunctonName must use the text string 'NDVI'.
                  myRenderingRule.RasterFunctionName = "NDVI";
                  
                  // Note: the .VariableName must use the text string 'Raster'.
                   myRenderingRule.VariableName = "Raster";
                  
                  
                  // Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  // Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dictionary&lt;string, object&gt; rasterParams = new Dictionary&lt;string, object&gt;();
                  
                  // Note: The a key of 'VisibleBandID' takes an integer for it's object value pair.
                  rasterParams.Add("VisibleBandID", 0);
                  
                  // Note: The a key of 'InfraredBandID' takes an integer for it's object value pair.
                  rasterParams.Add("InfraredBandID", 3);
                  
                  // Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams;
                  
                  
                  // Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule;
                  
                }
                  
                public void Make_ShadedRelief()
                  {
                  
                  // Create a RenderingRule for the 'ShadedRelief' raster function.
                  
                  // Read the following conceptual documentation to understand the valid arguments necessary to create
                  // a successful RenderingRule.
                  // http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Shaded_Relief_function/009t00000055000000/
                  
                  // This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  // Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  // an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  // ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                  // ---------------------------------------------------------------------------------------------------------------------
                  
                  // Display the default ArcGISImageServiceLayer in Map1
                  // ===================================================
                  
                  // Create an ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  
                  // This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer";
                  
                  // Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1);
                  
                  // -----------------------------------------------------------------------------------------------------------------------
                  
                  // Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  // ==========================================================================
                  
                  // Create another ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  
                  // This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer";
                  
                  // Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2);
                  
                  // Define the custom RenderingRule
                  ESRI.ArcGIS.Client.RenderingRule myRenderingRule = new ESRI.ArcGIS.Client.RenderingRule();
                  
                  // Note: The .RasterFunctonName must use the text string 'ShadedRelief'.
                  myRenderingRule.RasterFunctionName = "ShadedRelief";
                  
                  // Note: the .VariableName must use the text string 'Raster'.
                  myRenderingRule.VariableName = "Raster";
                  
                  
                  // Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  // Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dictionary&lt;string, object&gt; rasterParams = new Dictionary&lt;string, object&gt;();
                  
                  // Note: The a key of 'Azimuth' takes a double for it's object value pair.
                  rasterParams.Add("Azimuth", 215.0);
                  
                  // Note: The a key of 'Altitude' takes a double for it's object value pair.
                  rasterParams.Add("Altitude", 60.0);
                  
                  // Note: The a key of 'ZFactor' takes a double for it's object value pair.
                  rasterParams.Add("ZFactor", 3.2);
                  
                  // Note: The ShadedRelief raster function requires a defined set of color mapping values to define which
                  // pixels will be assigned to a specific color. Defining the color mapping values can be lengthy depending 
                  // on the number of pixel values of the image and the number of colors desired. Since defining these color 
                  // maps is used by several raster functions, a shared function to define the color mappings will be used. 
                  // See the CreateColorMap function for more details on what the color mappings are.
                  rasterParams.Add("Colormap", CreateColorMap());
                  
                  // Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams;
                  
                  
                  // Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule;
                  
                }
                  
                public void Make_Slope()
                {
                  
                  // Create a RenderingRule for the 'Slope' raster function.
                  
                  // Read the following conceptual documentation to understand the valid arguments necessary to create
                  // a successful RenderingRule.
                  // http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Slope_function/009t00000056000000/
                  
                  // This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  // Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  // an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  // ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                  // ---------------------------------------------------------------------------------------------------------------------
                  
                  // Display the default ArcGISImageServiceLayer in Map1
                  // ===================================================
                  
                  // Create an ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  
                  // This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer";
                  
                  // Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1);
                  
                  // -----------------------------------------------------------------------------------------------------------------------
                  
                  // Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  // ==========================================================================
                  
                  // Create another ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  
                  // This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer";
                  
                  // Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2);
                  
                  // Define the custom RenderingRule
                  ESRI.ArcGIS.Client.RenderingRule myRenderingRule = new ESRI.ArcGIS.Client.RenderingRule();
                  
                  // Note: The .RasterFunctonName must use the text string 'Slope'.
                  myRenderingRule.RasterFunctionName = "Slope";
                  
                  // Note: the .VariableName must use the text string 'DEM'.
                  myRenderingRule.VariableName = "DEM";
                  
                  // Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  // Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dictionary&lt;string, object&gt; rasterParams = new Dictionary&lt;string, object&gt;();
                  
                  // Note: The a key of 'ZFactor' takes a double for it's object value pair.
                  rasterParams.Add("ZFactor", 3.2);
                  
                  // Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams;
                  
                  
                  // Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule;
                  
                }
                
                public void Make_Statistics()
                {
                
                  // Create a RenderingRule for the 'Statistics' raster function.
                  
                  // Read the following conceptual documentation to understand the valid arguments necessary to create
                  // a successful RenderingRule.
                  // http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Statistics_function/009t00000058000000/
                  
                  // This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  // Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  // an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  // ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                  // ---------------------------------------------------------------------------------------------------------------------
                  
                  // Display the default ArcGISImageServiceLayer in Map1
                  // ===================================================
                  
                  // Create an ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  
                  // This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                   myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer";
                  
                  // Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1);
                  
                  // -----------------------------------------------------------------------------------------------------------------------
                  
                  // Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  // ==========================================================================
                  
                  // Create another ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  
                  // This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer";
                  
                  // Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2);
                  
                  // Define the custom RenderingRule
                  ESRI.ArcGIS.Client.RenderingRule myRenderingRule = new ESRI.ArcGIS.Client.RenderingRule();
                  
                  // Note: The .RasterFunctonName must use the text string 'Statistics'.
                  myRenderingRule.RasterFunctionName = "Statistics";
                  
                  // Note: the .VariableName must use the text string 'Raster'.
                  myRenderingRule.VariableName = "Raster";
                  
                  
                  // Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  // Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dictionary&lt;string, object&gt; rasterParams = new Dictionary&lt;string, object&gt;();
                  
                  // Note: The a key of 'KernelColumns' takes an integer.
                  rasterParams.Add("KernelColumns", 30);
                  
                  // Note: The a key of 'KernelRows' takes an integer.
                  rasterParams.Add("KernelRows", 30);
                  
                  // Example #1: Calculate the minimum value of the pixels within the focal neighborhood 
                  // Note: The a key of 'Type' takes the string 'Min'.
                  rasterParams.Add("Type", "Min");
                  
                  // Example #2: Calculate the maximum value of the pixels within the focal neighborhood 
                  // Note: The a key of 'Type' takes the string 'Max'.
                  //rasterParams.Add("Type", "Max");
                  
                  // Example #3: Calculate the average value of the pixels within the focal neighborhood 
                  // Note: The a key of 'Type' takes the string 'Mean'.
                  //rasterParams.Add("Type", "Mean");
                  
                  // Example #4: Calculate the standard deviation value of the pixels within the focal neighborhood 
                  // Note: The a key of 'Type' takes the string 'StandardDeviation'.
                  //rasterParams.Add("Type", "StandardDeviation");
                  
                  // Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams;
                  
                  
                  // Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                   myArcGISImageServiceLayer2.RenderingRule = myRenderingRule;
                  
                } 
                  
                public void Make_Stretch()
                {
                  
                  // Create a RenderingRule for the 'Stretch' raster function.
                  
                  // Read the following conceptual documentation to understand the valid arguments necessary to create
                  // a successful RenderingRule.
                  // http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Stretch_function/009t00000059000000/
                  
                  // This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  // Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  // an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  // ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                   // ---------------------------------------------------------------------------------------------------------------------
                  
                  // Display the default ArcGISImageServiceLayer in Map1
                  // ===================================================
                  
                  // Create an ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  
                  // This IS a Mosaic dataset. The ArcGISImageServiceLayer has FOUR bands.
                   myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
                  
                  // Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1);
                  
                  // -----------------------------------------------------------------------------------------------------------------------
                  
                  // Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  // ==========================================================================
                  
                  // Create another ArcGISImageServiceLayer
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  
                  // This IS a Mosaic dataset. The ArcGISImageServiceLayer has FOUR bands.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
                  
                  // Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2);
                  
                  // Define the custom RenderingRule
                  ESRI.ArcGIS.Client.RenderingRule myRenderingRule = new ESRI.ArcGIS.Client.RenderingRule();
                  
                  // Note: The .RasterFunctonName must use the text string 'Stretch'.
                  myRenderingRule.RasterFunctionName = "Stretch";
                  
                  // Note: the .VariableName must use the text string 'Raster'.
                  myRenderingRule.VariableName = "Raster";
                  
                  
                  // Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  // Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dictionary&lt;string, object&gt; rasterParams = new Dictionary&lt;string, object&gt;();
                  
                  // Note: The a key of 'NumberOfStandardDeviations' takes an integer for it's object value pair.
                  rasterParams.Add("NumberOfStandardDeviations", 2);
                  
                  // Note: The a key of 'Statistics' takes an array of arrays for it's object value pair. Each nested 
                  // array contains the relevant statistics information {minimum, maximum, mean, standard deviation} 
                  // for each band in the Mosaic raster dataset. The statistics information for each band is obtained 
                  // via the following properties:
                  // minimum = ArcGISImageServiceLayer.MinValues
                  // maximum = ArcGISImageServiceLayer.MaxValues
                  // mean = ArcGISImageServiceLayer.MeanValues
                  // standard deviation = ArcGISImageServiceLayer.StdvValues
                   rasterParams.Add("Statistics", new double[][]{
                  new double[]{0.0, 254, 29.4, 27.9}, 
                  new double []{0.0, 254, 29.3, 19.2}, 
                  new double []{0.0, 254, 42.0, 17.9}, 
                  new double[]{0, 254, 59.9, 27.6}});
                  
                  // Note: The a key of 'Gamma' takes an array of doubles (one for each band) for it's object value pair.
                  rasterParams.Add("Gamma", new double[] { 0.5, 0.5, 0.5, 0.5 });
                  
                  // Example #1: Calculate the stretch function using the stretch type of 'None'. 
                  // Note: The key of 'StretchType' takes the integer value 0.
                  rasterParams.Add("StretchType", 0);
                  
                  // Example #2: Calculate the stretch function using the stretch type of 'Standard Deviation'. 
                  // Note: The key of 'StretchType' takes the integer value 3.
                  //rasterParams.Add("StretchType", 3);
                  
                  // Example #3: Calculate the stretch function using the stretch type of 'Histogram Equalization'. 
                  // Note: The key of 'StretchType' takes the integer value 4.
                  //rasterParams.Add("StretchType", 4);
                  
                  // Example #4: Calculate the stretch function using the stretch type of 'MinMax'. 
                  // Note: The key of 'StretchType' takes the integer value 5.
                  //rasterParams.Add("StretchType", 5);
                  
                  // Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams;
                  
                  
                  // Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule;
                  
                }
                  
                public int[][] CreateColorMap()
                {
                  
                  // This sample function creates a sample color mapping for a specific Digital Elevation Model 
                  // (DEM) with pixels values that range from 0 to 255. The way the color ramp works is an array 
                  // of arrays is created in which each pixel has a specific color defined with Red, Green and 
                  // Blue integer values. 
                  // For example the line:
                  // New Integer() {0, 175, 240, 233}
                  // means that for the pixel value = 0, create a color where Red is 175, Green is 240, and Blue 
                  // is 233.
                  // 
                  // Note:
                  // If a particular pixel value is not defined with a color and yet that pixel value is to be 
                  // rendered it will be shown as transparent. Only those pixel values that have a defined color 
                  // will be rendered with that color. In the example array below, if the pixel value of 2 exists 
                  // in the DEM it will render as transparent since no color was explicitly defined in the array 
                  // of arrays.
                  //
                  // A color map is different than a color ramp. Color ramps are defined and behave similar to 
                  // color maps with the exception that if a pixel value is to be rendered and it is not explicitly 
                  // defined in the array, then a color will automatically be generated that is between two closest 
                  // two pixel values for which colors are defined.
                  // 
                  // The RenderingRule raster functions of ColorMap and ShadedRelief that are used for the 
                  // ArcGISImageServiceLayer only use color maps.
                  
                  int[][] sampleColormap =
                  {
                    new int[] {0, 175, 240, 233},
                    new int[] {3, 175, 240, 222},
                    new int[] {7, 177, 242, 212},
                    new int[] {11, 177, 242, 198},
                    new int[] {15, 176, 245, 183},
                    new int[] {19, 185, 247, 178},
                    new int[] {23, 200, 247, 178},
                    new int[] {27, 216, 250, 177},
                    new int[] {31, 232, 252, 179},
                    new int[] {35, 248, 252, 179},
                    new int[] {39, 238, 245, 162},
                    new int[] {43, 208, 232, 135},
                    new int[] {47, 172, 217, 111},
                    new int[] {51, 136, 204, 88},
                    new int[] {55, 97, 189, 66},
                    new int[] {59, 58, 176, 48},
                    new int[] {63, 32, 161, 43},
                    new int[] {67, 18, 148, 50},
                    new int[] {71, 5, 133, 58},
                    new int[] {75, 30, 130, 62},
                    new int[] {79, 62, 138, 59},
                    new int[] {83, 88, 145, 55},
                    new int[] {87, 112, 153, 50},
                    new int[] {91, 136, 158, 46},
                    new int[] {95, 162, 166, 41},
                    new int[] {99, 186, 171, 34},
                    new int[] {103, 212, 178, 25},
                    new int[] {107, 237, 181, 14},
                    new int[] {111, 247, 174, 2},
                    new int[] {115, 232, 144, 2},
                    new int[] {119, 219, 118, 2},
                    new int[] {123, 204, 93, 2},
                    new int[] {127, 191, 71, 2},
                    new int[] {131, 176, 51, 2},
                    new int[] {135, 163, 34, 2},
                    new int[] {139, 148, 21, 1},
                    new int[] {143, 135, 8, 1},
                    new int[] {147, 120, 5, 1},
                    new int[] {151, 117, 14, 2},
                    new int[] {155, 117, 22, 5},
                    new int[] {159, 115, 26, 6},
                    new int[] {163, 112, 31, 7},
                    new int[] {167, 112, 36, 8},
                    new int[] {171, 110, 37, 9},
                    new int[] {175, 107, 41, 11},
                    new int[] {179, 107, 45, 12},
                    new int[] {183, 105, 48, 14},
                    new int[] {187, 115, 61, 28},
                    new int[] {191, 122, 72, 40},
                    new int[] {195, 133, 86, 57},
                    new int[] {199, 140, 99, 73},
                    new int[] {203, 148, 111, 90},
                    new int[] {207, 153, 125, 109},
                    new int[] {213, 163, 148, 139},
                    new int[] {217, 168, 163, 160},
                    new int[] {223, 179, 179, 179},
                    new int[] {227, 189, 189, 189},
                    new int[] {231, 196, 196, 196},
                    new int[] {235, 207, 204, 207},
                    new int[] {239, 217, 215, 217},
                    new int[] {243, 224, 222, 224},
                    new int[] {247, 235, 232, 235},
                    new int[] {251, 245, 242, 245},
                    new int[] {255, 255, 252, 255}
                  };
                    
                  return sampleColormap;
                    
                }
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                Public Sub Make_Aspect()
                
                  ' Create a RenderingRule for the 'Aspect' raster function.
                  
                  ' Read the following conceptual documentation to understand the valid arguments necessary to create
                  ' a successful RenderingRule.
                  ' http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Aspect_function/009t00000047000000/
                  
                  ' This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  ' Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  ' an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  ' ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                  ' ---------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the default ArcGISImageServiceLayer in Map1
                  ' ===================================================
                  
                  ' Create an ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1)
                  
                  ' -----------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  ' ==========================================================================
                  
                  ' Create another ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2)
                  
                  ' Define the custom RenderingRule
                  Dim myRenderingRule As New ESRI.ArcGIS.Client.RenderingRule()
                  
                  ' Note: The .RasterFunctonName must use the text string 'Aspect'.
                          myRenderingRule.RasterFunctionName = "Aspect"
                  
                End Sub
                  
                Public Sub Make_Colormap()
                  
                  ' Create a RenderingRule for the 'Colormap' raster function.
                  
                  ' Read the following conceptual documentation to understand the valid arguments necessary to create
                  ' a successful RenderingRule.
                  ' http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Colormap_function/009t00000049000000/
                  
                  ' This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  ' Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  ' an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  ' ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                  ' ---------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the default ArcGISImageServiceLayer in Map1
                  ' ===================================================
                  
                  ' Create an ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1)
                  
                  ' -----------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  ' ==========================================================================
                  
                  ' Create another ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2)
                  
                  ' Define the custom RenderingRule
                  Dim myRenderingRule As New ESRI.ArcGIS.Client.RenderingRule()
                  
                  ' Note: The .RasterFunctonName must use the text string 'Colormap'.
                  myRenderingRule.RasterFunctionName = "Colormap"
                  
                  ' Note: the .VariableName must use the text string 'Raster'.
                  myRenderingRule.VariableName = "Raster"
                  
                  
                  ' Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  ' Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dim rasterParams As New Dictionary(Of String, Object)()
                  
                  ' Example #1: Create a random set of colors for the color map.
                  ' Note: The a key of 'ColormapName' takes the string 'Random'.
                  rasterParams.Add("ColormapName", "Random")
                  
                  ' Example #2: Create a Normalized Difference Vegetation Index (NDVI) set of colors for the color map.
                  ' Note: The a key of 'ColormapName' takes the string 'NDVI'.
                  'rasterParams.Add("ColormapName", "NDVI")
                  
                  ' Example #3: Create a elevation stylized set of colors for the color map.
                  ' Note: The a key of 'ColormapName' takes the string 'Elevation'.
                  'rasterParams.Add("ColormapName", "Elevation")
                  
                  ' Example #4: Create a gray scale set of colors for the color map.
                  ' Note: The a key of 'ColormapName' takes the string 'Gray'.
                  'rasterParams.Add("ColormapName", "Gray")
                  
                  ' Example #5: Create a custom color mapping set of colors for the color map.
                  ' Note: The Colormap raster function requires a defined set of color mapping values to define 
                  ' which pixels will be assigned to a specific color. Defining the color mapping values can be 
                  ' lengthy depending on the number of pixel values of the image and the number of colors desired. 
                  ' Since defining these color maps is used by several raster functions, a shared function to 
                  ' define the color mappings will be used. See the CreateColorMap function for more details on 
                  ' what the color mappings are.
                  'rasterParams.Add("Colormap", CreateColorMap)
                  
                  ' Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams
                  
                  
                  ' Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule
                  
                End Sub
                  
                Public Sub Make_Hillshade()
                  
                  ' Create a RenderingRule for the 'Hillshade' raster function.
                  
                  ' Read the following conceptual documentation to understand the valid arguments necessary to create
                  ' a successful RenderingRule.
                  ' http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Hillshade_function/009t0000004z000000/
                  
                  ' This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  ' Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  ' an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  ' ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                  ' ---------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the default ArcGISImageServiceLayer in Map1
                  ' ===================================================
                  
                  ' Create an ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1)
                  
                  ' -----------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  ' ==========================================================================
                  
                  ' Create another ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2)
                  
                  
                  ' Define the custom RenderingRule
                  Dim myRenderingRule As New ESRI.ArcGIS.Client.RenderingRule()
                  
                  ' Note: The .RasterFunctonName must use the text string 'Hillshade'.
                  myRenderingRule.RasterFunctionName = "Hillshade"
                  
                  ' Note: the .VariableName must use the text string 'DEM'.
                  myRenderingRule.VariableName = "DEM"
                  
                  
                  ' Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  ' Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dim rasterParams As New Dictionary(Of String, Object)()
                  
                  ' Note: The a key of 'Azimuth' takes a double for it's object value pair.
                  rasterParams.Add("Azimuth", 215.0)
                  
                  ' Note: The a key of 'Altitude' takes a double for it's object value pair.
                  rasterParams.Add("Altitude", 60.0)
                  
                  ' Note: The a key of 'ZFactor' takes a double for it's object value pair.
                  rasterParams.Add("ZFactor", 3.2)
                  
                  ' Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams
                  
                  
                  ' Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule
                  
                End Sub
                  
                Public Sub Make_NDVI()
                  
                  ' Create a RenderingRule for the 'NDVI' raster function.
                  
                  ' Read the following conceptual documentation to understand the valid arguments necessary to create
                  ' a successful RenderingRule.
                  ' http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/NDVI_function/009t00000052000000/
                  
                  ' This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  ' Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  ' an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  ' ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                  ' ---------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the default ArcGISImageServiceLayer in Map1
                  ' ===================================================
                  
                  ' Create an ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This IS a Mosaic dataset. The ArcGISImageServiceLayer has FOUR bands.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1)
                  ' -----------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  ' ==========================================================================
                  
                  ' Create another ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This IS a Mosaic dataset. The ArcGISImageServiceLayer has FOUR bands.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2)
                  
                  ' Define the custom RenderingRule
                  Dim myRenderingRule As New ESRI.ArcGIS.Client.RenderingRule()
                  
                  ' Note: The .RasterFunctonName must use the text string 'NDVI'.
                  myRenderingRule.RasterFunctionName = "NDVI"
                  
                  ' Note: the .VariableName must use the text string 'Raster'.
                  myRenderingRule.VariableName = "Raster"
                  
                  
                  ' Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  ' Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dim rasterParams As New Dictionary(Of String, Object)()
                  
                  ' Note: The a key of 'VisibleBandID' takes an integer for it's object value pair.
                  rasterParams.Add("VisibleBandID", 0)
                  
                  ' Note: The a key of 'InfraredBandID' takes an integer for it's object value pair.
                  rasterParams.Add("InfraredBandID", 3)
                  
                  ' Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams
                  
                  
                  ' Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule
                  
                End Sub
                  
                Public Sub Make_ShadedRelief()
                  
                  ' Create a RenderingRule for the 'ShadedRelief' raster function.
                  
                  ' Read the following conceptual documentation to understand the valid arguments necessary to create
                  ' a successful RenderingRule.
                  ' http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Shaded_Relief_function/009t00000055000000/
                  
                  ' This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  ' Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  ' an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  ' ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                  ' ---------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the default ArcGISImageServiceLayer in Map1
                  ' ===================================================
                  
                  ' Create an ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1)
                  
                  ' -----------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  ' ==========================================================================
                  
                  ' Create another ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2)
                  
                  ' Define the custom RenderingRule
                  Dim myRenderingRule As New ESRI.ArcGIS.Client.RenderingRule()
                  
                  ' Note: The .RasterFunctonName must use the text string 'ShadedRelief'.
                  myRenderingRule.RasterFunctionName = "ShadedRelief"
                  
                  ' Note: the .VariableName must use the text string 'Raster'.
                  myRenderingRule.VariableName = "Raster"
                  
                  
                  ' Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  ' Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dim rasterParams As New Dictionary(Of String, Object)()
                  
                  ' Note: The a key of 'Azimuth' takes a double for it's object value pair.
                  rasterParams.Add("Azimuth", 215.0)
                  
                  ' Note: The a key of 'Altitude' takes a double for it's object value pair.
                  rasterParams.Add("Altitude", 60.0)
                  
                  ' Note: The a key of 'ZFactor' takes a double for it's object value pair.
                  rasterParams.Add("ZFactor", 3.2)
                  
                  ' Note: The ShadedRelief raster function requires a defined set of color mapping values to define which
                  ' pixels will be assigned to a specific color. Defining the color mapping values can be lengthy depending 
                  ' on the number of pixel values of the image and the number of colors desired. Since defining these color 
                  ' maps is used by several raster functions, a shared function to define the color mappings will be used. 
                  ' See the CreateColorMap function for more details on what the color mappings are.
                  rasterParams.Add("Colormap", CreateColorMap)
                  
                  ' Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams
                  
                  
                  ' Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule
                  
                End Sub
                  
                Public Sub Make_Slope()
                  
                  ' Create a RenderingRule for the 'Slope' raster function.
                  
                  ' Read the following conceptual documentation to understand the valid arguments necessary to create
                  ' a successful RenderingRule.
                  ' http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Slope_function/009t00000056000000/
                  
                  ' This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  ' Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  ' an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  ' ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                  ' ---------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the default ArcGISImageServiceLayer in Map1
                  ' ===================================================
                  
                  ' Create an ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1)
                  
                  ' -----------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  ' ==========================================================================
                  
                  ' Create another ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2)
                  
                  ' Define the custom RenderingRule
                  Dim myRenderingRule As New ESRI.ArcGIS.Client.RenderingRule()
                  
                  ' Note: The .RasterFunctonName must use the text string 'Slope'.
                  myRenderingRule.RasterFunctionName = "Slope"
                  
                  ' Note: the .VariableName must use the text string 'DEM'.
                  myRenderingRule.VariableName = "DEM"
                  
                  ' Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  ' Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dim rasterParams As New Dictionary(Of String, Object)()
                  
                  ' Note: The a key of 'ZFactor' takes a double for it's object value pair.
                  rasterParams.Add("ZFactor", 3.2)
                  
                  ' Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams
                  
                  
                  ' Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule
                  
                End Sub
                  
                Public Sub Make_Statistics()
                  
                  ' Create a RenderingRule for the 'Statistics' raster function.
                  
                  ' Read the following conceptual documentation to understand the valid arguments necessary to create
                  ' a successful RenderingRule.
                  ' http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Statistics_function/009t00000058000000/
                  
                  ' This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  ' Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  ' an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  ' ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                  ' ---------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the default ArcGISImageServiceLayer in Map1
                  ' ===================================================
                  
                  ' Create an ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1)
                  
                  ' -----------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  ' ==========================================================================
                  
                  ' Create another ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This is NOT a Mosaic dataset. The ArcGISImageServiceLayer has only ONE band.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2)
                  
                  ' Define the custom RenderingRule
                  Dim myRenderingRule As New ESRI.ArcGIS.Client.RenderingRule()
                  
                  ' Note: The .RasterFunctonName must use the text string 'Statistics'.
                  myRenderingRule.RasterFunctionName = "Statistics"
                  
                  ' Note: the .VariableName must use the text string 'Raster'.
                  myRenderingRule.VariableName = "Raster"
                  
                  
                  ' Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  ' Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dim rasterParams As New Dictionary(Of String, Object)()
                  
                  ' Note: The a key of 'KernelColumns' takes an integer.
                  rasterParams.Add("KernelColumns", 30)
                  
                  ' Note: The a key of 'KernelRows' takes an integer.
                  rasterParams.Add("KernelRows", 30)
                  
                  ' Example #1: Calculate the minimum value of the pixels within the focal neighborhood 
                  ' Note: The a key of 'Type' takes the string 'Min'.
                  rasterParams.Add("Type", "Min")
                  
                  ' Example #2: Calculate the maximum value of the pixels within the focal neighborhood 
                  ' Note: The a key of 'Type' takes the string 'Max'.
                  'rasterParams.Add("Type", "Max")
                  
                  ' Example #3: Calculate the average value of the pixels within the focal neighborhood 
                  ' Note: The a key of 'Type' takes the string 'Mean'.
                  'rasterParams.Add("Type", "Mean")
                  
                  ' Example #4: Calculate the standard deviation value of the pixels within the focal neighborhood 
                  ' Note: The a key of 'Type' takes the string 'StandardDeviation'.
                  'rasterParams.Add("Type", "StandardDeviation")
                  
                  ' Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams
                  
                  
                  ' Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule
                  
                End Sub
                  
                Public Sub Make_Stretch()
                  
                  ' Create a RenderingRule for the 'Stretch' raster function.
                  
                  ' Read the following conceptual documentation to understand the valid arguments necessary to create
                  ' a successful RenderingRule.
                  ' http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Stretch_function/009t00000059000000/
                  
                  ' This example uses two Map controls to compare the effect of applying a RenderingRule. Map1 and 
                  ' Map2 are ESRI.ArcGIS.Client.Map controls that were previously added to the XAML. Map1 will show 
                  ' an ArcGISImageServiceLayer that comes by default from ArcGIS Server. Map2 will show the same 
                  ' ArcGISImageServiceLayer but with a specific RenderingRule applied, to compare the differences.
                  
                  ' ---------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the default ArcGISImageServiceLayer in Map1
                  ' ===================================================
                  
                  ' Create an ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This IS a Mosaic dataset. The ArcGISImageServiceLayer has FOUR bands.
                  myArcGISImageServiceLayer1.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map1 
                  Map1.Layers.Add(myArcGISImageServiceLayer1)
                  
                  ' -----------------------------------------------------------------------------------------------------------------------
                  
                  ' Display the modified (via a RenderingRule) ArcGISImageServiceLayer in Map2
                  ' ==========================================================================
                  
                  ' Create another ArcGISImageServiceLayer
                  Dim myArcGISImageServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  
                  ' This IS a Mosaic dataset. The ArcGISImageServiceLayer has FOUR bands.
                  myArcGISImageServiceLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                  
                  ' Add the ArcGISImageServiceLayer to Map2 
                  Map2.Layers.Add(myArcGISImageServiceLayer2)
                  
                  ' Define the custom RenderingRule
                  Dim myRenderingRule As New ESRI.ArcGIS.Client.RenderingRule()
                  
                  ' Note: The .RasterFunctonName must use the text string 'Stretch'.
                  myRenderingRule.RasterFunctionName = "Stretch"
                  
                  ' Note: the .VariableName must use the text string 'Raster'.
                  myRenderingRule.VariableName = "Raster"
                  
                  
                  ' Define a Dictionary object with String/Object pairs. The Strings that are used for the keys as 
                  ' Dictionary entries will need to have exact text strings depending on what raster function is being used.
                  Dim rasterParams As New Dictionary(Of String, Object)()
                  
                  ' Note: The a key of 'NumberOfStandardDeviations' takes an integer for it's object value pair.
                  rasterParams.Add("NumberOfStandardDeviations", 2)
                  
                  ' Note: The a key of 'Statistics' takes an array of arrays for it's object value pair. Each nested 
                  ' array contains the relevant statistics information {minimum, maximum, mean, standard deviation} 
                  ' for each band in the Mosaic raster dataset. The statistics information for each band is obtained 
                  ' via the following properties:
                  ' minimum = ArcGISImageServiceLayer.MinValues
                  ' maximum = ArcGISImageServiceLayer.MaxValues
                  ' mean = ArcGISImageServiceLayer.MeanValues
                  ' standard deviation = ArcGISImageServiceLayer.StdvValues
                  rasterParams.Add("Statistics", {{0.0, 254, 29.4, 27.9},
                                                  {0.0, 254, 29.3, 19.2},
                                                  {0.0, 254, 42.0, 17.9},
                                                  {0, 254, 59.9, 27.6}})
                  
                  ' Note: The key of 'Gamma' takes an array of doubles (one for each band) for it's object value pair.
                  rasterParams.Add("Gamma", {0.5, 0.5, 0.5, 0.5})
                  
                  ' Example #1: Calculate the stretch function using the stretch type of 'None'. 
                  ' Note: The key of 'StretchType' takes the integer value 0.
                  rasterParams.Add("StretchType", 0)
                  
                  ' Example #2: Calculate the stretch function using the stretch type of 'Standard Deviation'. 
                  ' Note: The key of 'StretchType' takes the integer value 3.
                  'rasterParams.Add("StretchType", 3)
                  
                  ' Example #3: Calculate the stretch function using the stretch type of 'Histogram Equalization'. 
                  ' Note: The key of 'StretchType' takes the integer value 4.
                  'rasterParams.Add("StretchType", 4)
                  
                  ' Example #4: Calculate the stretch function using the stretch type of 'MinMax'. 
                  ' Note: The key of 'StretchType' takes the integer value 5.
                  'rasterParams.Add("StretchType", 5)
                  
                  ' Add the rasterParms Dictionary as the RenderingRule's RasterFunctionArguments.
                  myRenderingRule.RasterFunctionArguments = rasterParams
                  
                  
                  ' Apply the user defined myRenderingRule to the ArcGISImageServiceLayer's .RenderingRule
                  myArcGISImageServiceLayer2.RenderingRule = myRenderingRule
                  
                End Sub
                  
                Public Function CreateColorMap() As Integer()()
                  
                  ' This sample function creates a sample color mapping for a specific Digital Elevation Model 
                  ' (DEM) with pixels values that range from 0 to 255. The way the color ramp works is an array 
                  ' of arrays is created in which each pixel has a specific color defined with Red, Green and 
                  ' Blue integer values. 
                  ' For example the line:
                  ' New Integer() {0, 175, 240, 233}
                  ' means that for the pixel value = 0, create a color where Red is 175, Green is 240, and Blue 
                  ' is 233.
                  ' 
                  ' Note:
                  ' If a particular pixel value is not defined with a color and yet that pixel value is to be 
                  ' rendered it will be shown as transparent. Only those pixel values that have a defined color 
                  ' will be rendered with that color. In the example array below, if the pixel value of 2 exists 
                  ' in the DEM it will render as transparent since no color was explicitly defined in the array 
                  ' of arrays.
                  '
                  ' A color map is different than a color ramp. Color ramps are defined and behave similar to 
                  ' color maps with the exception that if a pixel value is to be rendered and it is not explicitly 
                  ' defined in the array, then a color will automatically be generated that is between two closest 
                  ' two pixel values for which colors are defined.
                  ' 
                  ' The RenderingRule raster functions of ColorMap and ShadedRelief that are used for the 
                  ' ArcGISImageServiceLayer only use color maps.
                  
                  Dim sampleColormap()() As Integer =
                  {
                    New Integer() {0, 175, 240, 233},
                    New Integer() {3, 175, 240, 222},
                    New Integer() {7, 177, 242, 212},
                    New Integer() {11, 177, 242, 198},
                    New Integer() {15, 176, 245, 183},
                    New Integer() {19, 185, 247, 178},
                    New Integer() {23, 200, 247, 178},
                    New Integer() {27, 216, 250, 177},
                    New Integer() {31, 232, 252, 179},
                    New Integer() {35, 248, 252, 179},
                    New Integer() {39, 238, 245, 162},
                    New Integer() {43, 208, 232, 135},
                    New Integer() {47, 172, 217, 111},
                    New Integer() {51, 136, 204, 88},
                    New Integer() {55, 97, 189, 66},
                    New Integer() {59, 58, 176, 48},
                    New Integer() {63, 32, 161, 43},
                    New Integer() {67, 18, 148, 50},
                    New Integer() {71, 5, 133, 58},
                    New Integer() {75, 30, 130, 62},
                    New Integer() {79, 62, 138, 59},
                    New Integer() {83, 88, 145, 55},
                    New Integer() {87, 112, 153, 50},
                    New Integer() {91, 136, 158, 46},
                    New Integer() {95, 162, 166, 41},
                    New Integer() {99, 186, 171, 34},
                    New Integer() {103, 212, 178, 25},
                    New Integer() {107, 237, 181, 14},
                    New Integer() {111, 247, 174, 2},
                    New Integer() {115, 232, 144, 2},
                    New Integer() {119, 219, 118, 2},
                    New Integer() {123, 204, 93, 2},
                    New Integer() {127, 191, 71, 2},
                    New Integer() {131, 176, 51, 2},
                    New Integer() {135, 163, 34, 2},
                    New Integer() {139, 148, 21, 1},
                    New Integer() {143, 135, 8, 1},
                    New Integer() {147, 120, 5, 1},
                    New Integer() {151, 117, 14, 2},
                    New Integer() {155, 117, 22, 5},
                    New Integer() {159, 115, 26, 6},
                    New Integer() {163, 112, 31, 7},
                    New Integer() {167, 112, 36, 8},
                    New Integer() {171, 110, 37, 9},
                    New Integer() {175, 107, 41, 11},
                    New Integer() {179, 107, 45, 12},
                    New Integer() {183, 105, 48, 14},
                    New Integer() {187, 115, 61, 28},
                    New Integer() {191, 122, 72, 40},
                    New Integer() {195, 133, 86, 57},
                    New Integer() {199, 140, 99, 73},
                    New Integer() {203, 148, 111, 90},
                    New Integer() {207, 153, 125, 109},
                    New Integer() {213, 163, 148, 139},
                    New Integer() {217, 168, 163, 160},
                    New Integer() {223, 179, 179, 179},
                    New Integer() {227, 189, 189, 189},
                    New Integer() {231, 196, 196, 196},
                    New Integer() {235, 207, 204, 207},
                    New Integer() {239, 217, 215, 217},
                    New Integer() {243, 224, 222, 224},
                    New Integer() {247, 235, 232, 235},
                    New Integer() {251, 245, 242, 245},
                    New Integer() {255, 255, 252, 255}
                  }
                  
                  Return sampleColormap
                  
                End Function
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.DisableClientCaching">
            <summary>
            Gets or set the property indicating if browser caching should 
            be disabled for each request.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ProxyURL">
            <summary>
            Gets or sets the URL to proxy the request through.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageFormat">
            <summary>
            Gets or sets the image format for the ArcGISImageServiceLayer.
            </summary>
            <remarks>
            <para>
            The default image format is JPG (JPEG). There are four 
            <see cref="T:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceImageFormat">ArcGISImageServiceLayer.ImageServiceImageFormat</see> 
            Enumeration values that can be used for the ImageFormat Property, they are:
            </para>
            <list type="bullet">
              <item>PNG24</item>
              <item>JPG</item>
              <item>PNG8</item>
              <item>JPGPNG</item>
            </list>
            <para>
            Support for the JPGPNG format was added at ArcGIS Server 10.0. This format returns a JPG 
            if there are no transparent pixels in the requested extent, otherwise it returns a PNG.
            </para>
            <para>
            JPG is considered a lossy image type. PNG is considered lossless image types. Theoretical information 
            related to these compression types can be found for the following topics:
            </para>
            <list type="bullet">
            <item><a href="http://en.wikipedia.org/wiki/Lossy_compression" target="_top">Lossy compression</a></item>
            <item><a href="http://en.wikipedia.org/wiki/Lossless_data_compression" target="_top">Lossless data compression</a></item>
            </list>
            <para>
            Setting the <see cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.NoData">ArcGISImageServiceLayer.NoData</see> 
            Property to a valid pixel value will return an image where the NoData pixel values are displayed as transparent. 
            Transparent pixels can only be displayed when using lossless compression types. Since the default 
            ArcGISImageServiceLayer.ImageFormat is set to JPG, transparent pixel values will not be displayed when the NoData 
            value is set. To display transparent pixels by setting the NoData property, first set the ImageFormat property to 
            either PNG8, PNG24, or JPGPNG.
            </para>
            </remarks>
            <example>
            	<code title="Example XAML1" description="" lang="XAML">
            	&lt;esri:Map Name="Map1" Height="400" Width="400" "&gt;
            	  &lt;!-- ImageFormat Property (Read/Write). --&gt;
            	  &lt;esri:ArcGISImageServiceLayer 
            	        Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer" 
            	        ImageFormat="PNG24"/&gt;
            	&lt;/esri:Map&gt;
            	&lt;TextBlock Name="TextBlock_ImageFormat" Height="23" Width="248" 
            	           Text="{Binding ElementName=Map1, Path=Layers[0].ImageFormat}"/&gt;
                </code>
                
                <code title="Example CS1" description="" lang="CS">
                private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                {
                
                  // The Map1 object (a Map object) was defined previously in XAML.
                
                  // Create an ArcGISImageServiceLayer.
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
                
                  // Set the ImageFormat to PNG24.
                  myArcGISImageServiceLayer.ImageFormat = ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceImageFormat.PNG24;
                
                  // Create an Event Handler.
                  myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                
                  // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                  Map1.Layers.Add(myArcGISImageServiceLayer);
                
                }
                
                private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                {
                
                  // The Map1 object (a Map object) and TextBlock_ImageFormat (a TextBlock object) were defined previously in XAML.
                  
                  // Access a specific ArcGISImageServiceLayer.
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                    
                  // ImageFormat Property (Read Only).
                  TextBlock_ImageFormat.Text = myArcGISImageServiceLayer.ImageFormat.ToString();
                
                }
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                
                  ' The Map1 object (a Map object) was defined previously in XAML.
                
                  ' Create an ArcGISImageServiceLayer.
                  Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                
                  ' Set the ImageFormat to PNG24.
                  myArcGISImageServiceLayer.ImageFormat = ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceImageFormat.PNG24
                
                  ' Create an Event Handler.
                  AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                
                  ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                  Map1.Layers.Add(myArcGISImageServiceLayer)
                
                End Sub
                
                Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                  
                  ' The Map1 object (a Map object) and TextBlock_ImageFormat (a TextBlock object) were defined previously in XAML.
                
                  ' Access a specific ArcGISImageServiceLayer.
                  Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                  
                  ' ImageFormat Property (Read Only).
                  TextBlock_ImageFormat.Text = myArcGISImageServiceLayer.Description
                
                End Sub
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.BandCount">
             <summary>
             Gets the number of bands that are available in the ArcGISImageServiceLayer.
             </summary>
             <remarks>
             <para>
             Images are made up of one or more bands. Each band has a single measurable characteristic (such as temperature, 
             elevation, electromagnetic spectrum value, etc.) per pixel.
             </para>
             <para>
             Theoretical information related to imagery can be found for the following topics:
             </para>
             <list type="bullet">
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_is_raster_data/009t00000002000000/" target="_top">What is raster data?</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Essential_raster_data_vocabulary/009t00000003000000/" target="_top">Essential raster data vocabulary</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Raster_bands/009t00000005000000/" target="_top">Raster Bands</a></item>
             </list>
             </remarks>
             <example>
             <code title="Example XAML1" description="" lang="XAML">
             &lt;esri:Map Name="Map1" Height="400" Width="400" "&gt;
               &lt;!-- BandCount Property (Read Only). --&gt;
               &lt;esri:ArcGISImageServiceLayer 
                     Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"/&gt;
             &lt;/esri:Map&gt;
             &lt;TextBlock Name="TextBlock_BandCount" Height="23" Width="248" 
                        Text="{Binding ElementName=Map1, Path=Layers[0].BandCount}"/&gt;
             </code>
             
                 <code title="Example CS1" description="" lang="CS">
                 private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                 {
                   
                   // The Map1 object (a Map object) was defined previously in XAML.
                   
                   // Create an ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
            
                   // Create an Event Handler.
                   myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                 
                   // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer);
                 
                 }
                 
                 private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                 {
                 
                   // The Map1 object (a Map object) and TextBlock_BandCount (a TextBlock object) were defined previously in XAML.
                 
                   // Access a specific ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                 
                   // BandCount Property (Read Only).
                   TextBlock_BandCount.Text = myArcGISImageServiceLayer.BandCount.ToString();
                 
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                 
                   ' The Map1 object (a Map object) was defined previously in XAML.
                 
                   ' Create an ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                 
                   ' Create an Event Handler.
                   AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                 
                   ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer)
                 
                 End Sub
                 
                 Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                 
                   ' The Map1 object (a Map object) and TextBlock_BandCount (a TextBlock object) were defined previously in XAML.
                 
                   ' Access a specific ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                   
                   ' BandCount Property (Read Only).
                   TextBlock_BandCount.Text = myArcGISImageServiceLayer.BandCount.ToString
                 
                 End Sub        
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.Interpolation">
            <summary>
            The resampling process of extrapolating the pixel values while transforming the raster dataset 
            when it undergoes warping or when it changes coordinate space.
            </summary>
            <remarks>
            <para>
            The default interpolation method is the NearestNeighbor Enumeration.
            </para>
            <para>
            There are four 
            <see cref="T:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceInterpolation">ArcGISImageServiceLayer.ImageServiceInterpolation</see> 
            Enumeration values that can be used in the Interpolation Property, they are: 
            </para>
            <list type="bullet">
              <item>NearestNeighbor</item>
              <item>BilinearInterpolation</item>
              <item>CubitConvolution</item>
              <item>Majority</item>
            </list>
            <para>
            Theoretical information related to interpolation can be found for the following topics:
            </para>
            <list type="bullet">
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_is_raster_data/009t00000002000000/" target="_top">What is raster data?</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Essential_raster_data_vocabulary/009t00000003000000/" target="_top">Essential raster data vocabulary</a></item>
            <item><a href="http://resources.arcgis.com/content/kbase?fa=articleShow&amp;d=23127" target="_top">What is the difference between Nearest Neighbor, Bilinear Interpolation and Cubic Convolution?</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#//009t000000mn000000.htm" target="_top">Fundamentals for georeferencing a raster dataset</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/The_types_of_operations_in_Spatial_Analyst/005900000017000000/" target="_top">The types of operations in Spatial Analyst</a></item>
            </list>
            </remarks>
            <example>
            	<code title="Example XAML1" description="" lang="XAML">
            	&lt;esri:Map Name="Map1" Height="400" Width="400" "&gt;
            	  &lt;!-- Interpolation Property (Read/Write). --&gt;
            	  &lt;esri:ArcGISImageServiceLayer 
            	        Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer" 
            	        Interpolation="Majority"/&gt;
            	&lt;/esri:Map&gt;
            	&lt;TextBlock Name="TextBlock_Interpolation" Height="23" Width="248" 
            	           Text="{Binding ElementName=Map1, Path=Layers[0].Interpolation}"/&gt;
                </code>
                
                <code title="Example CS1" description="" lang="CS">
                private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                {
                
                  // The Map1 object (a Map object) was defined previously in XAML.
                
                  // Create an ArcGISImageServiceLayer.
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
                
                  // In this example the Interpolation will be set to Majority.
                  myArcGISImageServiceLayer.Interpolation = ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceInterpolation.Majority;
                
                  // Create an Event Handler.
                  myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                
                  // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                  Map1.Layers.Add(myArcGISImageServiceLayer);
                
                }
                
                private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                {
                
                  // The Map1 object (a Map object) and TextBlock_CompressionQuality (a TextBlock object) were defined previously in XAML.
                
                  // Access a specific ArcGISImageServiceLayer.
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                
                  // Interpolation Property (Read/Write).
                
                  // Use the getter (Read) to obtain the Interpolation.
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceInterpolation myInterpolation = myArcGISImageServiceLayer.Interpolation;
                  TextBlock_Interpolation.Text = myInterpolation.ToString();
                
                }
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                
                  ' The Map1 object (a Map object) was defined previously in XAML.
                
                  ' Create an ArcGISImageServiceLayer.
                  Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                
                  ' In this example the Interpolation will be set to Majority.
                  myArcGISImageServiceLayer.Interpolation = ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceInterpolation.Majority
                
                  ' Create an Event Handler.
                  AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                
                  ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                  Map1.Layers.Add(myArcGISImageServiceLayer)
                
                End Sub
                
                Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                  
                  ' The Map1 object (a Map object) and TextBlock_Interpolation (a TextBlock object) were defined previously in XAML.
                  
                  ' Access a specific ArcGISImageServiceLayer.
                  Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                  
                  ' Interpolation Property (Read/Write).
                  
                  ' Use the getter (Read) to obtain the Interpolation.
                  Dim myInterpolation As ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceInterpolation = myArcGISImageServiceLayer.Interpolation
                  TextBlock_Interpolation.Text = myInterpolation.ToString
                
                End Sub
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.CompressionQuality">
            <summary>
            Controls how much data loss the image will be subjected to by the compression algorithm. Valid 
            value ranges of compression quality are from 0 to 100.
            </summary>
            <remarks>
            <para>
            The default compression quality is 75. Compression only applies to lossy image types such as JPEG (JPG). 
            PNG is considered a lossless data compression and the CompressionQuality has no effect. If the 
            CompressionQuality property is not set in the code-behind or XAML the getter (Read) will show the 
            CompressionQuality property coming back as Nothing/null.
            </para>
            <para>
            Support for the JPGPNG format was added at ArcGIS Server 10.0. This format returns a JPG if there 
            are no transparent pixels in the requested extent, otherwise it returns a PNG.
            </para>
            <para>
            Theoretical information related to compression types can be found for the following topics:
            </para>
            <list type="bullet">
            <item><a href="http://en.wikipedia.org/wiki/Lossy_compression" target="_top">Lossy compression</a></item>
            <item><a href="http://en.wikipedia.org/wiki/Lossless_data_compression" target="_top">Lossless data compression</a></item>
            </list>
            </remarks>
            <example>
            	<code title="Example XAML1" description="" lang="XAML">
            	&lt;esri:Map Name="Map1" Height="400" Width="400" "&gt;
            	  &lt;!-- CompressionQuality Property (Read/Write). --&gt;
            	  &lt;esri:ArcGISImageServiceLayer 
            	        Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer" 
            	        CompressionQuality="50"/&gt;
            	&lt;/esri:Map&gt;
            	&lt;TextBlock Name="TextBlock_CompressionQuality" Height="23" Width="248" 
            	           Text="{Binding ElementName=Map1, Path=Layers[0].CompressionQuality}"/&gt;
                </code>
                
                <code title="Example CS1" description="" lang="CS">
                private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                {
                
                  // The Map1 object (a Map object) was defined previously in XAML.
                
                  // Create an ArcGISImageServiceLayer.
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
                
                  // In this example the CompressionQuality will be set to 50.
                  Nullable&lt;int&gt; myCompressionQuality = 50;
                  myArcGISImageServiceLayer.CompressionQuality = myCompressionQuality;
                
                  // Create an Event Handler.
                  myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                
                  // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                  Map1.Layers.Add(myArcGISImageServiceLayer);
                
                }
                
                private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                {
                
                  // The Map1 object (a Map object) and TextBlock_CompressionQuality (a TextBlock object) were defined previously in XAML.
                
                  // Access a specific ArcGISImageServiceLayer.
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                
                  // CompressionQuality Property (Read/Write).
                
                  // The return Type can be null/Nothing or an Integer.
                
                  // Use the getter (Read) to obtain the CompressionQuality.
                  Nullable&lt;int&gt; myCompressionQuality = myArcGISImageServiceLayer.CompressionQuality;
                
                  if (myCompressionQuality != null)
                  {
                    // Display the custom set CompressionQuality value.
                    TextBlock_CompressionQuality.Text = myArcGISImageServiceLayer.CompressionQuality.ToString();
                  }
                  else
                  {
                    // The default CompressionQuality is 75 in the ArcGIS Server service.
                    // If the CompressionQuality property is not set in the code-behind or XAML the getter (Read) will show the 
                    // CompressionQuality coming back as Nothing/null.
                    TextBlock_CompressionQuality.Text = "[NO CompressionQuality SET]";
                  }
                
                }
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                
                  ' The Map1 object (a Map object) was defined previously in XAML.
                
                  ' Create an ArcGISImageServiceLayer.
                  Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                
                  ' In this example the CompressionQuality will be set to 50.
                  Dim myCompressionQuality As Nullable(Of Integer) = 50
                  myArcGISImageServiceLayer.CompressionQuality = myCompressionQuality
                
                  ' Create an Event Handler.
                  AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                
                  ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                  Map1.Layers.Add(myArcGISImageServiceLayer)
                
                End Sub
                
                Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                  
                  ' The Map1 object (a Map object) and TextBlock_CompressionQuality (a TextBlock object) were defined previously in XAML.
                  
                  ' Access a specific ArcGISImageServiceLayer.
                  Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                  
                  ' CompressionQuality Property (Read/Write).
                  
                  ' The return Type can be null/Nothing or an Integer.
                  
                  ' Use the getter (Read) to obtain the CompressionQuality.
                  Dim myCompressionQuality As Nullable(Of Integer) = myArcGISImageServiceLayer.CompressionQuality
                  
                  If myCompressionQuality IsNot Nothing Then
                  
                    ' Display the custom set CompressionQuality value.
                    TextBlock_CompressionQuality.Text = myArcGISImageServiceLayer.CompressionQuality.ToString
                  
                  Else
                  
                    ' The default CompressionQuality is 75 in the ArcGIS Server service.
                    ' If the CompressionQuality property is not set in the code-behind or XAML the getter (Read) will show the 
                    ' CompressionQuality coming back as Nothing/null.
                   TextBlock_CompressionQuality.Text = "[NO CompressionQuality SET]"
                  
                  End If
                
                End Sub
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.BandIds">
            <summary>
            Gets or sets which bands will be displayed (or visible) by the ArcGISImageServiceLayer.
            </summary>
            <remarks>
            <para>
            If there are multiple bands, you can either specify a single band to export, or you can change 
            the band combination (red, green, blue) by specifying the band number, for example, [2, 1, 3]. 
            </para>
            <para>
            Images are made up of one or more bands. Each band has a single measurable characteristic (such 
            as temperature, elevation, electromagnetic spectrum value, etc.) per pixel.
            </para>
            <para>
             Typically all of the bands are visible (turned on) by default in the ArcGIS Server service.
             If the BandIds property is not set in the code-behind the getter (Read) will show the BandIds 
             coming back as Nothing/null.
            </para>
            <para>
            Theoretical information related to imagery can be found for the following topics:
            </para>
            <list type="bullet">
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_is_raster_data/009t00000002000000/" target="_top">What is raster data?</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Essential_raster_data_vocabulary/009t00000003000000/" target="_top">Essential raster data vocabulary</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Raster_bands/009t00000005000000/" target="_top">Raster Bands</a></item>
            </list>
            </remarks>
            <example>
                <code title="Example CS1" description="" lang="CS">
                private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                {
                
                  // The Map1 object (a Map object) was defined previously in XAML.
                
                  // Create an ArcGISImageServiceLayer.
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                  myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
                
                  // Control which individual bands are visible by setting the BandId's property.
                  // In this example the ArcGISImageService has 4 bands available but only the 1st and 2nd bands will
                  // be specified (Write) as visible. 
                  int[] myBandIds = { 0, 1 };
                  myArcGISImageServiceLayer.BandIds = myBandIds;
                
                  // Create an Event Handler.
                  myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs%gt;(ArcGISImageServiceLayer_Intialized);
                
                  // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                  Map1.Layers.Add(myArcGISImageServiceLayer);
                
                }
                
                private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                {
                
                  // The Map1 object (a Map object) and TextBlock_BandIds (a TextBlock object) were defined previously in XAML.
                
                  // Access a specific ArcGISImageServiceLayer.
                  ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                
                  // BandIds Property (Read/Write).
                
                  // Use the getter (Read) to obtain an Integer Array of band ids that are visible.
                  int[] myBandIds = myArcGISImageServiceLayer.BandIds;
                
                  if (myBandIds != null)
                  {
                    // Specific BandIds have been set.
                    string myBandIdsText = "Num BandIds: " + myBandIds.Length.ToString();
                    string myBandIdsText2 = "";
                    int i = 0;
                    for (i = 0; i &lt; myBandIds.Length; i++)
                    {
                      myBandIdsText2 = myBandIdsText2 + " " + myBandIds[i].ToString();
                    }
                
                    // Display the number of BandIds set and which one.
                    TextBlock_BandIds.Text = myBandIdsText + ". Bands: " + myBandIdsText2;
                  }
                  else
                  {
                    // Typically all of the bands are visible (turned on) by default in the ArcGIS Server service.
                    // If the BandIds property is not set in the code-behind the getter (Read) will show the BandIds 
                    // coming back as Nothing/null.
                    TextBlock_BandIds.Text = "[NO BandIds SET]";
                  }
                  
                }
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                
                  ' The Map1 object (a Map object) was defined previously in XAML.
                
                  ' Create an ArcGISImageServiceLayer.
                  Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                  myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                
                  ' Control which individual bands are visible by setting the BandId's property.
                  ' In this example the ArcGISImageService has 4 bands available but only the 1st and 2nd bands will
                  ' be specified (Write) as visible. 
                  Dim myBandIds() As Integer = {0, 1}
                  myArcGISImageServiceLayer.BandIds = myBandIds
                
                  ' Create an Event Handler.
                  AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                
                  ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                  Map1.Layers.Add(myArcGISImageServiceLayer)
                
                End Sub
                
                Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                
                  ' The Map1 object (a Map object) and TextBlock_BandIds (a TextBlock object) were defined previously in XAML.
                
                  ' Access a specific ArcGISImageServiceLayer.
                  Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                 
                  ' BandIds Property (Read/Write).
                  
                  ' Use the getter (Read) to obtain an Integer Array of band ids that are visible.
                  Dim myBandIds() As Integer = myArcGISImageServiceLayer.BandIds
                
                  If myBandIds IsNot Nothing Then
                
                    ' Specific BandIds have been set.
                    Dim myBandIdsText As String = "Num BandIds: " + myBandIds.Length.ToString
                    Dim myBandIdsText2 As String = ""
                    Dim i As Integer
                    For i = 0 To myBandIds.Length - 1
                      myBandIdsText2 = myBandIdsText2 + " " + myBandIds(i).ToString
                    Next
                
                    ' Display the number of BandIds set and which one.
                    TextBlock_BandIds.Text = myBandIdsText + ". Bands: " + myBandIdsText2
                
                  Else
                
                    ' Typically all of the bands are visible (turned on) by default in the ArcGIS Server service.
                    ' If the BandIds property is not set in the code-behind the getter (Read) will show the BandIds 
                    ' coming back as Nothing/null.
                
                    TextBlock_BandIds.Text = "[NO BandIds SET]"
                
                  End If
                  
                End Sub
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.NoData">
            <summary>
            Gets or sets the image pixel value representing no information for the ArcGISImageServiceLayer.
            </summary>
            <remarks>
            <para>
            The data type for the NoData Property is a Nullable double. This means that if the NoData Property has
            not been set then the return value will come back as Nothing/null. If the NoData Property has been set
            then the return type will come back at a double.
            </para>
            <para>
            Setting the NoData Property to a valid pixel value that matches what is published in the ArcGIS 
            Server ArcGISImageServiceLayer NoData pixel value will return an image where the NoData pixels are displayed 
            as transparent. If a NoData value is specified in XAML or code-behind and it does not exactly match what is 
            specified as the ArcGIS Server ArcGISImageServiceLayer NoData pixel then the image will still display but the NoData 
            pixels will not display as transparent. Transparent pixels can only be displayed when using lossless compression types. 
            Since the default <see cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageFormat">ArcGISImageServiceLayer.ImageFormat</see> 
            is set to <b>JPG</b>, transparent pixel values will not be displayed when the NoData Property value is set. To display 
            transparent pixels by setting the NoData Property, first set the ArcGISImageServiceLayer.ImageFormat Property to 
            either <b>PNG8</b>, <b>PNG24</b>, or <b>JPGPNG</b>.
            </para>
            <para>
            JPG is considered a lossy image type. PNG is considered lossless image types. Theoretical information 
            related to these compression types can be found for the following topics:
            </para>
            <list type="bullet">
            <item><a href="http://en.wikipedia.org/wiki/Lossy_compression" target="_top">Lossy compression</a></item>
            <item><a href="http://en.wikipedia.org/wiki/Lossless_data_compression" target="_top">Lossless data compression</a></item>
            </list>
            <para>
            The <see cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.NoDataColor">ArcGISImageServiceLayer.NoDataColor</see> 
            Property has precedence over the ArcGISImageServiceLayer.NoData Property. This means that if both the NoDataColor 
            and NoData Properties are set for an ArcGISImageServiceLayer, then whatever is set for the NoDataColor will control 
            how the ArcGISImageServiceLayer behaves.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b> Click either the 'Pixel=0' or 'Pixel=19' radio button and then click the 'Change NoData Pixel' 
            button to see the effect of modifying the ArcGISImageServiceLayer.NoData Property. By choosing the 'Pixel=0' radio 
            button the NoData pixels will be made transparent. Setting the NoData to any other pixel value other than what is 
            defined in the ArcGIS Server map service as the as the NoData pixel value will result in the NoData pixels being 
            displayed.
            </para>
            <para>
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Changing the ArcGISImageServiceLayer.NoData Property." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISImageServiceLayer.NoData.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map Control. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,113,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="367" Width="616" Extent="-14553964,3695023,-11813724,5327601"&gt;
              
                &lt;!-- Add an ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="Topo" 
                        Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer"/&gt;
                
                &lt;!-- 
                In order to have the NoData Property return an image where the NoData pixels are transparent the 
                ArcGISImageServiceLayer.ImageFormat must use a lossless compression. Valid lossless compression 
                types are: PNG24, PNG8, and JPGPNG.
                
                NOTES:
                If you get the NoData pixel value wrong the NoData pixels still show but they will just not be transparent.
                --&gt;
                
                &lt;!-- NoData Property. --&gt;
                &lt;esri:ArcGISImageServiceLayer 
                   Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/CaliforniaDEM/ImageServer" 
                   ImageFormat="PNG24" NoData="0" /&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- Add controls to demonstrate the effect of changing the ArcGISImageServiceLayer.NoData. --&gt;
              &lt;Button Content="Change NoData Pixel " Height="23" HorizontalAlignment="Left" Margin="12,84,0,0" 
                      Name="Button1" VerticalAlignment="Top" Width="151" Click="Button1_Click"/&gt;
              &lt;RadioButton Content="Pixel=0" Height="16" HorizontalAlignment="Left" Margin="169,87,0,0" 
                           Name="rb_Pixel_0" VerticalAlignment="Top" IsChecked="True" /&gt;
              &lt;RadioButton Content="Pixel=19" Height="16" HorizontalAlignment="Left" Margin="249,87,0,0" 
                           Name="rb_Pixel_19" VerticalAlignment="Top" /&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="78" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="640" 
                     TextWrapping="Wrap" Text="Click either the 'Pixel=0' or 'Pixel=19' radio button and then click the 
                         'Change NoData Pixel' button to see the effect of modifying the ArcGISImageServiceLayer.NoData 
                         Property. By choosing the 'Pixel=0' radio button the NoData pixels will be made transparent. Setting 
                         the NoData to any other pixel value other than what is defined in the ArcGIS Server map service as 
                         the as the NoData pixel value will result in the NoData pixels being displayed." /&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Get the ArcGISImageServiceLayer defined in XAML.
              ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[1];
              
              if (rb_Pixel_0.IsChecked == true)
              {
                // The NoData pixel values that were defined in the ArcGIS Server ArcGISImageServiceLayer are 0. 
                // Only when the ArcGISImageServiceLayer.NoData value exactly matches will the NoData pixels be 
                // displayed as transparent.
                //
                // The following two code-behind Options produce the same result:
                
                //Option #1
                double? myNoData = 0;
                myArcGISImageServiceLayer.NoData = myNoData;
                
                //Option #2
                //Nullable&lt;double&gt; myNoData2 = 0;
                //myArcGISImageServiceLayer.NoData = myNoData2;
              }
              else if (rb_Pixel_19.IsChecked == true)
              {
                // Since the pixel value of 19 does not exactly match the NoData value defined in the ArcGIS Server 
                // ArcGISImageServiceLayer, the NoData pixels will be displayed.
                //
                // The following two code-behind Options produce the same result:
                
                //Option #1
                double? myNoData = 19;
                myArcGISImageServiceLayer.NoData = myNoData;
                
                //Option #2
                //Nullable&lt;double&gt; myNoData2 = 19;
                //myArcGISImageServiceLayer.NoData = myNoData2;
              }
              
              // Call the ArcGISImageServiceLayer.Refresh Method to force a round trip to the ArcGIS Server and display
              // the changes made to the ArcGISImageServiceLayer.NoData values.
              myArcGISImageServiceLayer.Refresh();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Get the ArcGISImageServiceLayer defined in XAML.
              Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers(1)
              
              If rb_Pixel_0.IsChecked = True Then
                
                ' The NoData pixel values that were defined in the ArcGIS Server ArcGISImageServiceLayer are 0. 
                ' Only when the ArcGISImageServiceLayer.NoData value exactly matches will the NoData pixels be 
                ' displayed as transparent.
                '
                ' The following two code-behind Options produce the same result:
                
                'Option #1
                Dim myNoData? As Double = 0
                myArcGISImageServiceLayer.NoData = myNoData
                
                'Option #2
                'Dim myNoData2 As Nullable(Of Double) = 0
                'myArcGISImageServiceLayer.NoData = myNoData2
                
              ElseIf rb_Pixel_19.IsChecked = True Then
                
                ' Since the pixel value of 19 does not exactly match the NoData value defined in the ArcGIS Server 
                ' ArcGISImageServiceLayer, the NoData pixels will be displayed.
                '
                ' The following two code-behind Options produce the same result:
                
                'Option #1
                Dim myNoData? As Double = 19
                myArcGISImageServiceLayer.NoData = myNoData
                
                'Option #2
                'Dim myNoData2 As Nullable(Of Double) = 19
                'myArcGISImageServiceLayer.NoData = myNoData2
                
              End If
              
              ' Call the ArcGISImageServiceLayer.Refresh Method to force a round trip to the ArcGIS Server and display
              ' the changes made to the ArcGISImageServiceLayer.NoData values.
              myArcGISImageServiceLayer.Refresh()
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.NoDataColor">
            <summary>
            Gets or sets the RGB image pixel value representing no information for the ArcGISImageServiceLayer.
            </summary>
            <remarks>
            <para>
            The data type for the NoDataColor Property is a Nullable 
            <a href="http://msdn.microsoft.com/en-us/library/system.windows.media.color(v=vs.95).aspx" target="_blank">System.Windows.Media.Color</a>. 
            This means that if the NoDataColor Property has not been set then the return value will come back as Nothing/null. If 
            the NoDataColor Property has been set then the return type will come back at a System.Windows.Media.Color.
            </para>
            <para>
            Setting the NoDataColor Property to a valid RGB (Red, Green, Blue) value that matches what is published in the ArcGIS 
            Server ArcGISImageServiceLayer NoData pixel value will return an image where the NoDataColor pixels are displayed 
            as transparent. If a NoDataColor value is specified in XAML or code-behind and it does not exactly match what is 
            specified as the ArcGIS Server ArcGISImageServiceLayer NoData pixel then the image will still display but the NoData 
            pixels will not display as transparent. Transparent pixels can only be displayed when using lossless compression types. 
            Since the default <see cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageFormat">ArcGISImageServiceLayer.ImageFormat</see> 
            is set to <b>JPG</b>, transparent pixel values will not be displayed when the NoDataColor Property value is set. To display 
            transparent pixels by setting the NoDataColor Property, first set the ArcGISImageServiceLayer.ImageFormat Property to 
            either <b>PNG8</b>, <b>PNG24</b>, or <b>JPGPNG</b>.
            </para>
            <para>
            <b>JPG</b> is considered a lossy image type. <b>PNG</b> is considered lossless image types. Theoretical information 
            related to these compression types can be found for the following topics:
            </para>
            <list type="bullet">
            <item><a href="http://en.wikipedia.org/wiki/Lossy_compression" target="_top">Lossy compression</a></item>
            <item><a href="http://en.wikipedia.org/wiki/Lossless_data_compression" target="_top">Lossless data compression</a></item>
            </list>
            <para>
            There are several ways to specify a System.Windows.Media.Color Structure for the ArcGISImageServiceLayer.NoDataColor 
            Property in XAML. The following three code fragment examples of the NoDataColor Property all yield the same results 
            for the color BLACK in XAML:
            </para>
            <code>
            NoDataColor="#000000" &lt;!-- using the #rrggbb methodology --&gt;
            NoDataColor="#FF000000" &lt;!-- using the #aarrggbb methodology --&gt;
            NoDataColor="Black" &lt;!-- using the predefinedColor methodology --&gt;
            </code>
            <para>The following MSDN help documents provide more information on the System.Windows.Media.Color Structure:
            </para>
            <list type="bullet">
            <item><a href="http://msdn.microsoft.com/en-us/library/system.windows.media.color(v=vs.95).aspx" target="_top">System.Windows.Media.Color Structure</a></item>
            <item><a href="http://msdn.microsoft.com/en-us/library/system.windows.media.colors(v=vs.95).aspx" target="_top">System.Windows.Media.Colors Class</a></item>
            </list>
            <para>
            Additional options are available in WPF to set the NoDataColor Property in the XAML that are not available in Silverlight 
            and Windows Phone. The following is one such example in WPF:
            </para>
            <code>
            &lt;esri:ArcGISImageServiceLayer x:Name="MyArcGISImageServiceLayer"
                  Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer" 
                  ImageFormat="PNG8"&gt;
                &lt;esri:ArcGISImageServiceLayer.NoDataColor&gt;
                    &lt;Color A="255" R="0" G="0" B="0"/&gt;
                &lt;/esri:ArcGISImageServiceLayer.NoDataColor&gt; 
            &lt;/esri:ArcGISImageServiceLayer&gt;
            </code>
            <para>
            Alpha values are not used by the ArcGIS Server REST service. Hence if you use the <b>#aarrggbb</b> methodology to 
            specify the NoDataColor, the <b>aa</b> part is essentially ignored.
            </para>
            <para>
            The ArcGISImageServiceLayer.NoDataColor Property has precedence over the 
            <see cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.NoData">ArcGISImageServiceLayer.NoData</see> Property. This 
            means that if both the NoDataColor and NoData Properties are set for an ArcGISImageServiceLayer, then whatever is 
            set for the NoDataColor will control how the ArcGISImageServiceLayer behaves.
            </para>
            <para>
            <b>TIP:</b> Use the Microsoft Calculator in the <b>Programmer</b> mode see what a Dec and Hex equivalents are.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b> Click either the Black or Red radio button and then click the 'Change NoDataColor' button to see 
            the effect of modifying the ArcGISImageServiceLayer.NoDataColor Property. By choosing the Black radio button the 
            NoData pixels will be made transparent. Setting the NoDataColor to any other color other than what is defined in 
            the ArcGIS Server map service as the as the NoDataColor will result in the NoData pixels being displayed.
            </para>
            <para>
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Changing the ArcGISImageServiceLayer.NoDataColor Property." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISImageServiceLayer.NoDataColor.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map Control. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,113,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="367" Width="616" 
                        Extent="-14005525,5619647,-13180689,6111067"&gt;
              
                &lt;!-- Add an ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="Topo" 
                        Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer"/&gt;
                
                &lt;!-- 
                There are several ways to specify a System.Windows.Media.Color Structure for the ArcGISImageServiceLayer.NoDataColor 
                Property in XAML. The following three examples of the NoDataColor Property all yield the same results for the color BLACK: 
                NoDataColor="#000000" &lt;== using the #rrggbb methodology
                NoDataColor="#FF000000" &lt;== using the #aarrggbb methodology
                NoDataColor="Black" &lt;== using the predefinedColor methodology
                      
                The following MSDN help documents provide more information on the System.Windows.Media.Color Structure:
                http://msdn.microsoft.com/en-us/library/system.windows.media.color(v=vs.95).aspx
                http://msdn.microsoft.com/en-us/library/system.windows.media.colors(v=vs.95).aspx
                  
                In order to have the NoDataColor Property return an image where the NoDataColor pixels are transparent the 
                ArcGISImageServiceLayer.ImageFormat must use a lossless compression. Valid lossless compression types are:
                PNG24, PNG8, and JPGPNG.
                
                NOTES:
                If you get the NoDataColor value wrong the NoDataColor pixels still show but they will just not be transparent.
                
                Alpha values are not used by the ArcGIS Server REST service. Hence if you use the #aarrggbb methodology to specify 
                the NoDataColor, the aa part is essentially ignored.
                      
                This does not work in Silverlight. It is WPF only!:
                &lt;esri:ArcGISImageServiceLayer.NoDataColor&gt;
                    &lt;Color A="255" R="0" G="0" B="0"/&gt;
                &lt;/esri:ArcGISImageServiceLayer.NoDataColor&gt; 
                --&gt;
                &lt;esri:ArcGISImageServiceLayer x:Name="MyArcGISImageServiceLayer"
                          Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer" 
                          ImageFormat="PNG8" NoDataColor="Black" &gt;
                &lt;/esri:ArcGISImageServiceLayer&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- Add controls to demonstrate the effect of changing the ArcGISImageServiceLayer.NoDataColor. --&gt;
              &lt;Button Content="Change NoDataColor" Height="23" HorizontalAlignment="Left" Margin="12,84,0,0" 
                      Name="Button1" VerticalAlignment="Top" Width="151" Click="Button1_Click"/&gt;
              &lt;RadioButton Content="Black" Height="16" HorizontalAlignment="Left" Margin="169,87,0,0" 
                           Name="rb_Black" VerticalAlignment="Top" IsChecked="True" /&gt;
              &lt;RadioButton Content="Red" Height="16" HorizontalAlignment="Left" Margin="233,87,0,0" 
                           Name="rb_Red" VerticalAlignment="Top" /&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="78" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="640" 
                     TextWrapping="Wrap" Text="Click either the Black or Red radio button and then click the 'Change NoDataColor' 
                         button to see the effect of modifying the ArcGISImageServiceLayer.NoDataColor Property. By choosing the 
                         Black radio button the NoData pixels will be made transparent. Setting the NoDataColor to any other color 
                         other than what is defined in the ArcGIS Server map service as the as the NoDataColor will result in the 
                         NoData pixels being displayed." /&gt;
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            // The following MSDN help documents provide more information on the System.Windows.Media.Color Structure:
            // http://msdn.microsoft.com/en-us/library/system.windows.media.color(v=vs.95).aspx
            // http://msdn.microsoft.com/en-us/library/system.windows.media.colors(v=vs.95).aspx
            // 
            // TIP:
            // Use the Microsoft Calculator in the 'Programmer' mode see what a Dec and Hex equivalents are.
              
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Get the ArcGISImageServiceLayer defined in XAML.
              ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[1];
              
              if (rb_Black.IsChecked == true)
              {
                // The NoData values that were defined in the ArcGIS Server ArcGISImageServiceLayer are BLACK. Only when
                // the ArcGISImageServiceLayer.NoDataColor value exactly matches will the NoData pixels be displayed
                // as transparent.
                //
                // The following three code-behind Options all produce the same result:
                
                //Option #1
                myArcGISImageServiceLayer.NoDataColor = Colors.Black;
                
                //Option #2
                //Color? myNoDataColor = Color.FromArgb(0, 0, 0, 0);
                //myArcGISImageServiceLayer.NoDataColor = myNoDataColor;
                
                //Option #2a
                //Nullable&lt;Color&gt; myNoDataColor2 = Color.FromArgb(0, 0, 0, 0);
                //myArcGISImageServiceLayer.NoDataColor = myNoDataColor2;
              }
              else if (rb_Red.IsChecked == true)
              {
                // Since the color RED does not exactly match the NoDataColor defined in the ArcGIS Server ArcGISImageServiceLayer,
                // the NoData pixels will be displayed.
                //
                // The following three code-behind Options all produce the same result:
                
                //Option #1
                myArcGISImageServiceLayer.NoDataColor = Colors.Red;
                
                //Option #2
                //Color? myNoDataColor = Color.FromArgb(0, 255, 0, 0);
                //myArcGISImageServiceLayer.NoDataColor = myNoDataColor;
                
                //Option #2a
                //Nullable&lt;Color&gt; myNoDataColor2 = Color.FromArgb(0, 255, 0, 0);
                //myArcGISImageServiceLayer.NoDataColor = myNoDataColor2;
              }
              
              // Call the ArcGISImageServiceLayer.Refresh Method to force a round trip to the ArcGIS Server and display
              // the changes made to the ArcGISImageServiceLayer.NoDataColor values.
              myArcGISImageServiceLayer.Refresh();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            ' The following MSDN help documents provide more information on the System.Windows.Media.Color Structure:
            ' http://msdn.microsoft.com/en-us/library/system.windows.media.color(v=vs.95).aspx
            ' http://msdn.microsoft.com/en-us/library/system.windows.media.colors(v=vs.95).aspx
            ' 
            ' TIP:
            ' Use the Microsoft Calculator in the 'Programmer' mode see what a Dec and Hex equivalents are.
              
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Get the ArcGISImageServiceLayer defined in XAML.
              Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers(1)
              
              If rb_Black.IsChecked = True Then
                
                ' The NoData values that were defined in the ArcGIS Server ArcGISImageServiceLayer are BLACK. Only when
                ' the ArcGISImageServiceLayer.NoDataColor value exactly matches will the NoData pixels be displayed
                ' as transparent.
                '
                ' The following three code-behind Options all produce the same result:
                
                'Option #1
                myArcGISImageServiceLayer.NoDataColor = Colors.Black
                
                'Option #2
                'Dim myNoDataColor? As Color = Color.FromArgb(0, 0, 0, 0)
                'myArcGISImageServiceLayer.NoDataColor = myNoDataColor
                
                'Option #2a
                'Dim myNoDataColor2 As Nullable(Of Color) = Color.FromArgb(0, 0, 0, 0)
                'myArcGISImageServiceLayer.NoDataColor = myNoDataColor2
                
              ElseIf rb_Red.IsChecked = True Then
                
                ' Since the color RED does not exactly match the NoDataColor defined in the ArcGIS Server ArcGISImageServiceLayer,
                ' the NoData pixels will be displayed.
                '
                ' The following three code-behind Options all produce the same result:
                
                'Option #1
                myArcGISImageServiceLayer.NoDataColor = Colors.Red
                
                'Option #2
                'Dim myNoDataColor? As Color = Color.FromArgb(0, 255, 0, 0)
                'myArcGISImageServiceLayer.NoDataColor = myNoDataColor
                
                'Option #2a
                'Dim myNoDataColor2 As Nullable(Of Color) = Color.FromArgb(0, 255, 0, 0)
                'myArcGISImageServiceLayer.NoDataColor = myNoDataColor2
                
              End If
              
              ' Call the ArcGISImageServiceLayer.Refresh Method to force a round trip to the ArcGIS Server and display
              ' the changes made to the ArcGISImageServiceLayer.NoDataColor values.
              myArcGISImageServiceLayer.Refresh()
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.Token">
            <summary>Gets or sets the token for accessing a secure ArcGIS service.</summary>
            <value>The token.</value>
            <remarks>
            ArcGIS Server services may be secured using token authentication. 
            Use 
            <a href="javascript:ApiToConcept('01660000001w000000', '01n700000004000000', '011v00000007000000')" target="_top">Services Directory</a> 
            to determine if a service requires a token to be used. A token is an 
            encrypted string generated by a token service on the same ArcGIS 
            Server site and the secured service. The token service can be 
            accessed in a browser via the Get Token link in Services Explorer or 
            by navigating to the main token service page (e.g. 
            <a href="http://www.example.com/ArcGIS/tokens/gettoken.html">http://www.example.com/ArcGIS/tokens/gettoken.html</a>).
            See the discussion topic on 
            <a href="javascript:ApiToConcept('016600000022000000', '01n700000022000000', '011v0000000n000000')" target="_top">secure services</a> 
            for more info.
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.Name">
             <summary>
             Gets the name of the ArcGISImageServiceLayer in the REST service.
             </summary>		
             <example>
                 <code title="Example CS1" description="" lang="CS">
                 private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                 {
                   
                   // The Map1 object (a Map object) was defined previously in XAML.
                   
                   // Create an ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
            
                   // Create an Event Handler.
                   myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                 
                   // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer);
                 
                 }
                 
                 private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                 {
                 
                   // The Map1 object (a Map object) and TextBlock_Name (a TextBlock object) were defined previously in XAML.
                 
                   // Access a specific ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                   
                   // Name Property (Read Only).
                   TextBlock_Name.Text = myArcGISImageServiceLayer.Name;
                 
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                 
                   ' The Map1 object (a Map object) was defined previously in XAML.
                 
                   ' Create an ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                 
                   ' Create an Event Handler.
                   AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                 
                   ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer)
                 
                 End Sub
                 
                 Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                 
                   ' The Map1 object (a Map object) and TextBlock_Name (a TextBlock object) were defined previously in XAML.
                 
                   ' Access a specific ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                   
                   ' Name Property (Read Only).
                   TextBlock_Name.Text = myArcGISImageServiceLayer.Name
                 
                 End Sub        
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.PixelSizeX">
             <summary>
             Gets the width of a pixel in map units for an ArcGISImageServiceLayer.
             </summary>
             <remarks>
             <para>
             Images are made up of one or more bands. Each band has a single measurable characteristic (such as temperature, 
             elevation, electromagnetic spectrum value, etc.) per pixel.
             </para>
             <para>
             Theoretical information related to imagery can be found for the following topics:
             </para>
             <list type="bullet">
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_is_raster_data/009t00000002000000/" target="_top">What is raster data?</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Essential_raster_data_vocabulary/009t00000003000000/" target="_top">Essential raster data vocabulary</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Raster_bands/009t00000005000000/" target="_top">Raster Bands</a></item>
             </list>
             </remarks>
             <example>
                 <code title="Example CS1" description="" lang="CS">
                 private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                 {
                   
                   // The Map1 object (a Map object) was defined previously in XAML.
                   
                   // Create an ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
            
                   // Create an Event Handler.
                   myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                 
                   // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer);
                 
                 }
                 
                 private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                 {
                 
                   // The Map1 object (a Map object) and TextBlock_PixelSizeX (a TextBlock object) were defined previously in XAML.
                 
                   // Access a specific ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                 
                   // PixelSizeX Property (Read Only).
                   TextBlock_PixelSizeX.Text = myArcGISImageServiceLayer.PixelSizeX.ToString();
                 
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                 
                   ' The Map1 object (a Map object) was defined previously in XAML.
                 
                   ' Create an ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                 
                   ' Create an Event Handler.
                   AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                 
                   ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer)
                 
                 End Sub
                 
                 Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                 
                   ' The Map1 object (a Map object) and TextBlock_PixelSizeX (a TextBlock object) were defined previously in XAML.
                 
                   ' Access a specific ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                   
                   ' PixelSizeX Property (Read Only).
                   TextBlock_PixelSizeX.Text = myArcGISImageServiceLayer.PixelSizeX.ToString
                 
                 End Sub        
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.PixelSizeY">
             <summary>
             Gets the height of a pixel in map units for an ArcGISImageServiceLayer.
             </summary>
             <remarks>
             <para>
             Images are made up of one or more bands. Each band has a single measurable characteristic (such as temperature, 
             elevation, electromagnetic spectrum value, etc.) per pixel.
             </para>
             <para>
             Theoretical information related to imagery can be found for the following topics:
             </para>
             <list type="bullet">
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_is_raster_data/009t00000002000000/" target="_top">What is raster data?</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Essential_raster_data_vocabulary/009t00000003000000/" target="_top">Essential raster data vocabulary</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Raster_bands/009t00000005000000/" target="_top">Raster Bands</a></item>
             </list>
             </remarks>
             <example>
                 <code title="Example CS1" description="" lang="CS">
                 private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                 {
                   
                   // The Map1 object (a Map object) was defined previously in XAML.
                   
                   // Create an ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
            
                   // Create an Event Handler.
                   myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                 
                   // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer);
                 
                 }
                 
                 private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                 {
                 
                   // The Map1 object (a Map object) and TextBlock_PixelSizeY (a TextBlock object) were defined previously in XAML.
                 
                   // Access a specific ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                 
                   // PixelSizeY Property (Read Only).
                   TextBlock_PixelSizeY.Text = myArcGISImageServiceLayer.PixelSizeY.ToString();
                 
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                 
                   ' The Map1 object (a Map object) was defined previously in XAML.
                 
                   ' Create an ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                 
                   ' Create an Event Handler.
                   AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                 
                   ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer)
                 
                 End Sub
                 
                 Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                 
                   ' The Map1 object (a Map object) and TextBlock_PixelSizeY (a TextBlock object) were defined previously in XAML.
                 
                   ' Access a specific ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                   
                   ' PixelSizeY Property (Read Only).
                   TextBlock_PixelSizeY.Text = myArcGISImageServiceLayer.PixelSizeY.ToString
                 
                 End Sub        
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.MinPixelSize">
            <summary>
            Internal implementation (do not use). Always returns 0.0.
            </summary>
            <remarks>
            <para>
            The MinPixelSize is lower limit of a pixel cell size for which the raster dataset should be used as part of a 
            Mosaic dataset for viewing the ArcGISImageServiceLayer at a particular scale. Currently, the MinPixelSize always
            returns 0.0 and thus ArcGISImageServiceLayer images are always displayed irrespective of it's scale.
            </para>
            <para>
            For information on how the MaxPixelSize and MinPixelSize is used in ArcGIS Desktop see the following document:
            </para>
            <list type="bullet">
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Cell_size_ranges_in_a_mosaic_dataset/009t00000042000000/" target="_top">Cell size ranges in a mosaic dataset</a></item>
            </list>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.MaxPixelSize">
            <summary>
            Internal implementation (do not use). Always returns 0.0.
            </summary>
            <remarks>
            <para>
            The MaxPixelSize is upper limit of a pixel cell size for which the raster dataset should be used as part of a 
            Mosaic dataset for viewing the ArcGISImageServiceLayer at a particular scale. Currently, the MaxPixelSize always
            returns 0.0 and thus ArcGISImageServiceLayer images are always displayed irrespective of it's scale.
            </para>
            <para>
            For information on how the MaxPixelSize and MinPixelSize is used in ArcGIS Desktop see the following document:
            </para>
            <list type="bullet">
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Cell_size_ranges_in_a_mosaic_dataset/009t00000042000000/" target="_top">Cell size ranges in a mosaic dataset</a></item>
            </list>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ServiceDataType">
            <summary>
            Gets the image service data type for the ArcGISImageServiceLayer.
            </summary>
            <remarks>
            The string values that can be returned are:
            <list type="bullet">
            <item>esriImageServiceDataTypeGeneric</item>
            <item>esriImageServiceDataTypeRGB</item>
            <item>esriImageServiceDataTypeElevation</item>
            <item>esriImageServiceDataTypeThematic</item>
            <item>esriImageServiceDataTypeProcessed</item>
            </list>
            </remarks>
            <example>
                <code title="Example CS1" description="" lang="CS">
                private void ArcGISImageServiceLayer_Initialized(object sender, System.EventArgs e)
                {
                    // The myArcGISImageServiceLayer (an ArcGISImageServiceLayer object) and TextBlock_ServiceDataType
                    // (a TextBlock object) were defined previously in the XAML or code-behind.
                
                    // Get the first layer in the LayerInfo collection. 
                    ArcGISImageServiceLayer myArcGISImageServiceLayer = (ArcGISDynamicMapServiceLayer)Map1.Layers[0];
                    
                    // ServiceDataType Property (Read Only).
                    TextBlock_ServiceDataType.Text = myArcGISImageServiceLayer.ServiceDataType;
                }
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                Private Sub ArcGISImageServiceLayer_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
                    ' The myArcGISImageServiceLayer (an ArcGISImageServiceLayer object) and TextBlock_ServiceDataType
                    ' (a TextBlock object) were defined previously in the XAML or code-behind.
                    
                    ' Get the first layer in the LayerInfo collection. 
                    Dim myArcGISImageServiceLayer As ArcGISImageServiceLayer = Map1.Layers.Item(0)
                    
                    ' ServiceDataType Property (Read Only).
                    TextBlock_ServiceDataType.Text = myArcGISImageServiceLayer.ServiceDataType
                End Sub
                </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.MinValues">
             <summary>
             Gets the minimum numerical value for each band in an ArcGISImageServiceLayer.
             </summary>
             <remarks>
             <para>
             Images are made up of one or more bands. Each band has a single measurable characteristic (such as temperature, 
             elevation, electromagnetic spectrum value, etc.) per pixel.
             </para>
             <para>
             Theoretical information related to imagery can be found for the following topics:
             </para>
             <list type="bullet">
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_is_raster_data/009t00000002000000/" target="_top">What is raster data?</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Essential_raster_data_vocabulary/009t00000003000000/" target="_top">Essential raster data vocabulary</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Raster_bands/009t00000005000000/" target="_top">Raster Bands</a></item>
             </list>
             </remarks>
             <example>
                 <code title="Example CS1" description="" lang="CS">
                 private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                 {
                   
                   // The Map1 object (a Map object) was defined previously in XAML.
                   
                   // Create an ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
            
                   // Create an Event Handler.
                   myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                 
                   // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer);
                 
                 }
                 
                 private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                 {
                 
                   // The Map1 object (a Map object) and TextBlock_MinValues (a TextBlock object) were defined previously in XAML.
                 
                   // Access a specific ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                 
                   // MinValues (Read Only)
                   System.Double[] myMinValues = myArcGISImageServiceLayer.MinValues;
                   if (myMinValues != null)
                   {
                     string myMinValuesText = "Num MinValues: " + myMinValues.Length.ToString();
                     string myMinValuesText2 = "";
                     int i2 = 0;
                     for (i2 = 0; i2 &lt; myMinValues.Length; i2++)
                     {
                       myMinValuesText2 = myMinValuesText2 + " " + myMinValues[i2].ToString();
                     }
                     TextBlock_MinValues.Text = myMinValuesText + ". MinValues: " + myMinValuesText2;
                   }
                   else
                   {
                     TextBlock_MinValues.Text = "[NO MinValues SET]";
                   }
                 
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                 
                   ' The Map1 object (a Map object) was defined previously in XAML.
                 
                   ' Create an ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                 
                   ' Create an Event Handler.
                   AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                 
                   ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer)
                 
                 End Sub
                 
                 Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                 
                   ' The Map1 object (a Map object) and TextBlock_MinValues (a TextBlock object) were defined previously in XAML.
                 
                   ' Access a specific ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                   
                   ' MinValues (Read Only)
                   Dim myMinValues() As System.Double = myArcGISImageServiceLayer.MinValues
                   If myMinValues IsNot Nothing Then
                     Dim myMinValuesText As String = "Num MinValues: " + myMinValues.Length.ToString
                     Dim myMinValuesText2 As String = ""
                     Dim i2 As Integer
                     For i2 = 0 To myMinValues.Length - 1
                       myMinValuesText2 = myMinValuesText2 + " " + myMinValues(i2).ToString
                     Next
                     TextBlock_MinValues.Text = myMinValuesText + ". MinValues: " + myMinValuesText2
                   Else
                     TextBlock_MinValues.Text = "[NO MinValues SET]"
                   End If
                 
                 End Sub        
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.MaxValues">
             <summary>
             Gets the maximum numerical value for each band in an ArcGISImageServiceLayer.
             </summary>
             <remarks>
             <para>
             Images are made up of one or more bands. Each band has a single measurable characteristic (such as temperature, 
             elevation, electromagnetic spectrum value, etc.) per pixel.
             </para>
             <para>
             Theoretical information related to imagery can be found for the following topics:
             </para>
             <list type="bullet">
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_is_raster_data/009t00000002000000/" target="_top">What is raster data?</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Essential_raster_data_vocabulary/009t00000003000000/" target="_top">Essential raster data vocabulary</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Raster_bands/009t00000005000000/" target="_top">Raster Bands</a></item>
             </list>
             </remarks>
             <example>
                 <code title="Example CS1" description="" lang="CS">
                 private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                 {
                   
                   // The Map1 object (a Map object) was defined previously in XAML.
                   
                   // Create an ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
            
                   // Create an Event Handler.
                   myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                 
                   // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer);
                 
                 }
                 
                 private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                 {
                 
                   // The Map1 object (a Map object) and TextBlock_MaxValues (a TextBlock object) were defined previously in XAML.
                 
                   // Access a specific ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                 
                   // MaxValues (Read Only)
                   System.Double[] myMaxValues = myArcGISImageServiceLayer.MaxValues;
                   if (myMaxValues != null)
                   {
                     string myMaxValuesText = "Num MaxValues: " + myMaxValues.Length.ToString();
                     string myMaxValuesText2 = "";
                     int i2 = 0;
                     for (i2 = 0; i2 &lt; myMaxValues.Length; i2++)
                     {
                       myMaxValuesText2 = myMaxValuesText2 + " " + myMaxValues[i2].ToString();
                     }
                     TextBlock_MaxValues.Text = myMaxValuesText + ". MaxValues: " + myMaxValuesText2;
                   }
                   else
                   {
                     TextBlock_MaxValues.Text = "[NO MaxValues SET]";
                   }
                 
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                 
                   ' The Map1 object (a Map object) was defined previously in XAML.
                 
                   ' Create an ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                 
                   ' Create an Event Handler.
                   AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                 
                   ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer)
                 
                 End Sub
                 
                 Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                 
                   ' The Map1 object (a Map object) and TextBlock_MaxValues (a TextBlock object) were defined previously in XAML.
                 
                   ' Access a specific ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                   
                   ' MaxValues (Read Only)
                   Dim myMaxValues() As System.Double = myArcGISImageServiceLayer.MaxValues
                   If myMaxValues IsNot Nothing Then
                     Dim myMaxValuesText As String = "Num MaxValues: " + myMaxValues.Length.ToString
                     Dim myMaxValuesText2 As String = ""
                     Dim i2 As Integer
                     For i2 = 0 To myMaxValues.Length - 1
                       myMaxValuesText2 = myMaxValuesText2 + " " + myMaxValues(i2).ToString
                     Next
                     TextBlock_MaxValues.Text = myMaxValuesText + ". MaxValues: " + myMaxValuesText2
                   Else
                     TextBlock_MaxValues.Text = "[NO MaxValues SET]"
                   End If
                 
                 End Sub        
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.MeanValues">
             <summary>
             Gets the mean of all the numerical value for each band in an ArcGISImageServiceLayer.
             </summary>
             <remarks>
             <para>
             Images are made up of one or more bands. Each band has a single measurable characteristic (such as temperature, 
             elevation, electromagnetic spectrum value, etc.) per pixel. Depending on how the statistics are created for the
             ArcGISImageServiceLayer the NoData value may or may not be included in the calculation of the mean for each
             band. Contact the author of the ArcGISImageServiceLayer to determine how the statistics were created.
             </para>
             <para>
             Theoretical information related to imagery can be found for the following topics:
             </para>
             <list type="bullet">
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_is_raster_data/009t00000002000000/" target="_top">What is raster data?</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Essential_raster_data_vocabulary/009t00000003000000/" target="_top">Essential raster data vocabulary</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Raster_bands/009t00000005000000/" target="_top">Raster Bands</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/NoData_in_raster_datasets/009t0000002v000000/" target="_top">NoData in raster datasets</a></item>
             </list>
             </remarks>
             <example>
                 <code title="Example CS1" description="" lang="CS">
                 private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                 {
                   
                   // The Map1 object (a Map object) was defined previously in XAML.
                   
                   // Create an ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
            
                   // Create an Event Handler.
                   myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                 
                   // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer);
                 
                 }
                 
                 private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                 {
                 
                   // The Map1 object (a Map object) and TextBlock_MeanValues (a TextBlock object) were defined previously in XAML.
                 
                   // Access a specific ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                 
                   // MeanValues (Read Only)
                   System.Double[] myMeanValues = myArcGISImageServiceLayer.MeanValues;
                   if (myMeanValues != null)
                   {
                     string myMeanValuesText = "Num MeanValues: " + myMeanValues.Length.ToString();
                     string myMeanValuesText2 = "";
                     int i2 = 0;
                     for (i2 = 0; i2 &lt; myMeanValues.Length; i2++)
                     {
                       myMeanValuesText2 = myMeanValuesText2 + " " + myMeanValues[i2].ToString();
                     }
                     TextBlock_MeanValues.Text = myMeanValuesText + ". MeanValues: " + myMeanValuesText2;
                   }
                   else
                   {
                     TextBlock_MeanValues.Text = "[NO MeanValues SET]";
                   }
                 
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                 
                   ' The Map1 object (a Map object) was defined previously in XAML.
                 
                   ' Create an ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                 
                   ' Create an Event Handler.
                   AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                 
                   ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer)
                 
                 End Sub
                 
                 Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                 
                   ' The Map1 object (a Map object) and TextBlock_MeanValues (a TextBlock object) were defined previously in XAML.
                 
                   ' Access a specific ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                   
                   ' MeanValues (Read Only)
                   Dim myMeanValues() As System.Double = myArcGISImageServiceLayer.MeanValues
                   If myMeanValues IsNot Nothing Then
                     Dim myMeanValuesText As String = "Num MeanValues: " + myMeanValues.Length.ToString
                     Dim myMeanValuesText2 As String = ""
                     Dim i2 As Integer
                     For i2 = 0 To myMeanValues.Length - 1
                       myMeanValuesText2 = myMeanValuesText2 + " " + myMeanValues(i2).ToString
                     Next
                     TextBlock_MeanValues.Text = myMeanValuesText + ". MeanValues: " + myMeanValuesText2
                   Else
                     TextBlock_MeanValues.Text = "[NO MeanValues SET]"
                   End If
                 
                 End Sub        
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.StdvValues">
             <summary>
             Gets the standard deviation of all the numerical value for each band in an ArcGISImageServiceLayer.
             </summary>
             <remarks>
             <para>
             Images are made up of one or more bands. Each band has a single measurable characteristic (such as temperature, 
             elevation, electromagnetic spectrum value, etc.) per pixel. Depending on how the statistics are created for the
             ArcGISImageServiceLayer the NoData value may or may not be included in the calculation of the standard deviation 
             for each band. Contact the author of the ArcGISImageServiceLayer to determine how the statistics were created.
             </para>
             <para>
             Theoretical information related to imagery can be found for the following topics:
             </para>
             <list type="bullet">
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_is_raster_data/009t00000002000000/" target="_top">What is raster data?</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Essential_raster_data_vocabulary/009t00000003000000/" target="_top">Essential raster data vocabulary</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Raster_bands/009t00000005000000/" target="_top">Raster Bands</a></item>
             <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/NoData_in_raster_datasets/009t0000002v000000/" target="_top">NoData in raster datasets</a></item>
             </list>
             </remarks>
             <example>
                 <code title="Example CS1" description="" lang="CS">
                 private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                 {
                   
                   // The Map1 object (a Map object) was defined previously in XAML.
                   
                   // Create an ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
            
                   // Create an Event Handler.
                   myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                 
                   // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer);
                 
                 }
                 
                 private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                 {
                 
                   // The Map1 object (a Map object) and TextBlock_StdValues (a TextBlock object) were defined previously in XAML.
                 
                   // Access a specific ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                 
                   // StdValues (Read Only)
                   System.Double[] myStdValues = myArcGISImageServiceLayer.StdValues;
                   if (myStdValues != null)
                   {
                     string myStdValuesText = "Num StdValues: " + myStdValues.Length.ToString();
                     string myStdValuesText2 = "";
                     int i2 = 0;
                     for (i2 = 0; i2 &lt; myStdValues.Length; i2++)
                     {
                       myStdValuesText2 = myStdValuesText2 + " " + myStdValues[i2].ToString();
                     }
                     TextBlock_StdValues.Text = myStdValuesText + ". StdValues: " + myStdValuesText2;
                   }
                   else
                   {
                     TextBlock_StdValues.Text = "[NO StdValues SET]";
                   }
                 
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                 
                   ' The Map1 object (a Map object) was defined previously in XAML.
                 
                   ' Create an ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                 
                   ' Create an Event Handler.
                   AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                 
                   ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer)
                 
                 End Sub
                 
                 Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                 
                   ' The Map1 object (a Map object) and TextBlock_StdValues (a TextBlock object) were defined previously in XAML.
                 
                   ' Access a specific ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                   
                   ' StdValues (Read Only)
                   Dim myStdValues() As System.Double = myArcGISImageServiceLayer.StdValues
                   If myStdValues IsNot Nothing Then
                     Dim myStdValuesText As String = "Num StdValues: " + myStdValues.Length.ToString
                     Dim myStdValuesText2 As String = ""
                     Dim i2 As Integer
                     For i2 = 0 To myStdValues.Length - 1
                       myStdValuesText2 = myStdValuesText2 + " " + myStdValues(i2).ToString
                     Next
                     TextBlock_StdValues.Text = myStdValuesText + ". StdValues: " + myStdValuesText2
                   Else
                     TextBlock_StdValues.Text = "[NO StdValues SET]"
                   End If
                 
                 End Sub        
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.Fields">
            <summary>
            Gets the List of <see cref="T:ESRI.ArcGIS.Client.Field">Field</see> objects associated with an attribute 
            table for ArcGISImageServiceLayer that is based on Mosaic datasets.  
            </summary>
            <remarks>
            <para>
            The <see cref="T:ESRI.ArcGIS.Client.Field">Field</see>s that are returned are metadata for each 
            raster dataset (or band) that compose a mosaic dataset. Storing metadata as attributes enables parameters 
            to be managed easily as well as enabling fast queries to enable selections. The table listing the raster 
            items in the mosaic dataset can include information about such things as the pixel sizes, source name, the 
            shape (outline) that the raster dataset covers, acquisition date, etc. Typically there is one record per 
            raster dataset.  
            </para>
            <para>
            The List of Field objects that are returned from the Fields Property should not be confused with fields 
            associated with raster dataset attribute tables. Images are made up of one or more bands. Each band has 
            a single measurable characteristic (such as temperature, elevation, electromagnetic spectrum value, etc.) 
            per pixel. Raster attribute tables enable the creation of classes, groups, categories, and memberships 
            based upon pixel values. 
            </para>
            <para>
            If an ArcGISImageServiceLayer is not a mosaic dataset there will not be any Fields to be obtained.
            </para>
            <para>
            The Fields property always returns a List object. Check to see if the List is empty (meaning the 
            count will be 0) before iterating over the list for and individual Field.
            </para>
            <para>
            Unfortunatley, the 
            <a href="http://msdn.microsoft.com/en-us/library/6sh2ey19(v=VS.95).aspx" target="_top">List(Of T)</a>&gt; 
            Class is not an 
            <a href="http://msdn.microsoft.com/en-us/library/ms668604(v=VS.95).aspx" target="_top">ObservableCollection</a> 
            and therefore does not raise any notification when its value changes. This means that it is not possible to 
            bind the Fields Property in XAML and get an accurate Fields.Count. Therefore the following XAML 
            will always return 0:
            <code>
                    &lt;TextBlock Name="TextBlock_Fields" Height="23" Width="50" Margin="0,0,0,0"  
                               HorizontalAlignment="Left" VerticalAlignment="Top"  
                               Text="{Binding ElementName=Map1, Path=Layers[0].Fields.Count}"/&gt;
            </code>
            Obtaining an accurate Fields.Count in the code-behind works as expected.
            </para>
            <para>
            Theoretical information related to imagery can be found for the following topics:
            </para>
            <list type="bullet">
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_is_raster_data/009t00000002000000/" target="_top">What is raster data?</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Essential_raster_data_vocabulary/009t00000003000000/" target="_top">Essential raster data vocabulary</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_is_a_mosaic_dataset/009t00000037000000/" target="_top">What is a mosaic dataset?</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Raster_dataset_attribute_tables/009t00000009000000/" target="_top">Raster dataset attribute tables</a></item>
            </list>
            <para>
            The following screenshot demonstrates an ArcGISImageServiceLayer that is based on Mosaic datasets which have 
            a List of Field objects defined in the ArcGISImageServiceLayer.Fields Property. Using the technique of Binding 
            it is possible to display Property values for each Field object in a ListBox. The screenshot corresonds with 
            the code in this document.
            </para>
            <para>
            <img border="0" alt="Displaying the ArcGISImageServiceLayer.Fields Properties of Name and Type." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISImageServiceLayer.Fields.png"/>
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;UserControl.Resources&gt;
              &lt;DataTemplate x:Key="myCustomResources"&gt;
                &lt;StackPanel Orientation="Horizontal"&gt;
                  &lt;TextBlock  Text="{Binding Path=Name}"/&gt;
                  &lt;TextBlock Text=" ("/&gt;
                  &lt;TextBlock Text="{Binding Path=Type}"/&gt;
                  &lt;TextBlock Text=")"/&gt;
                &lt;/StackPanel&gt;
              &lt;/DataTemplate&gt;
            &lt;/UserControl.Resources&gt;
            
            &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,63,0,0" Name="Map1" 
                        VerticalAlignment="Top" Height="525" Width="383" BorderThickness="5" BorderBrush="#FF30EBEB"&gt;
               
                &lt;!-- Add the ArcGISImageServiceLayer to the LayerCollection of the Map. --&gt;
                &lt;esri:ArcGISImageServiceLayer 
                      Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer" /&gt;
                    
              &lt;/esri:Map&gt;
            
              &lt;!--
              This example shows two ways of displaying information obtained by the ArcGISImageServiceLayer.Fields.
              Both ways produce the same results. Change which method us being used by commenting one out and 
              uncommmenting the other.
              Method #1: Uses a StaticResource in the UserControl to define a DataTemplate to format the way the Properties 
              of the List of Fields is displayed in the ListBox Control.
              Method #2: Uses the DataTemplate directly in the ListBoxes XAML code to format the way the Properties of 
              the List of Fields is displayed in the ListBox Control. 
              --&gt;
            
              &lt;!-- Method #1: Review the &lt;UserControl.Resources&gt; tags above to see how the "myCustomResources" were made. --&gt;
              &lt;ListBox Height="525" HorizontalAlignment="Left" Margin="401,63,0,0" Name="ListBox_Fields" 
                       VerticalAlignment="Top" Width="187" 
                       ItemsSource="{Binding ElementName=Map1, Path=Layers[0].Fields}"
                       ItemTemplate="{StaticResource myCustomResources}"/&gt;
            
              &lt;!-- Method #2  
              &lt;ListBox Height="525" HorizontalAlignment="Left" Margin="401,63,0,0" Name="ListBox_Fields" 
                       VerticalAlignment="Top" Width="187"
                       ItemsSource="{Binding ElementName=Map1, Path=Layers[0].Fields}"&gt;
                &lt;ListBox.ItemTemplate&gt;
                  &lt;DataTemplate&gt;
                    &lt;StackPanel Orientation="Horizontal"&gt;
                      &lt;TextBlock  Text="{Binding Path=Name}"/&gt;
                      &lt;TextBlock Text=" ("/&gt;
                      &lt;TextBlock Text="{Binding Path=Type}"/&gt;
                      &lt;TextBlock Text=")"/&gt;
                    &lt;/StackPanel&gt;
                  &lt;/DataTemplate&gt;
                &lt;/ListBox.ItemTemplate&gt;
              &lt;/ListBox&gt;
              --&gt;
            
            &lt;/Grid&gt;
            </code>
              
            <code title="Example CS1" description="" lang="CS">
            private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
            {
              
              // The Map1 object (a Map object) was defined previously in XAML.
              
              // Create an ArcGISImageServiceLayer.
              ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
              myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
              
              // Create an Event Handler.
              // In this example there are two Event Handlers to demonstrate the same functionality but using two different
              // mechanisms. Change which Event Handler is being used by commenting one out and uncommenting the other.
              myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized1);
              //myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized2);
              
              // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
              Map1.Layers.Add(myArcGISImageServiceLayer);
              
            }
              
            private void ArcGISImageServiceLayer_Intialized1(object sender, EventArgs e)
            {
              
              // This example shows how to display the Fields that are available in the mosaic dataset by using
              // a DataTemplate that is defined in the Resources of the XAML file in a ListBox. The Field 
              // Properties that are shown include: Name and Type.
              //
              // An example of the XAML code for the Static Resource is shown here:
              // &lt;UserControl.Resources&gt;
              //   &lt;DataTemplate x:Key="myCustomResources"&gt;
              //     &lt;StackPanel Orientation="Horizontal"&gt;
              //       &lt;TextBlock  Text="{Binding Path=Name}"/&gt;
              //       &lt;TextBlock Text=" ("/&gt;
              //       &lt;TextBlock Text="{Binding Path=Type}"/&gt;
              //       &lt;TextBlock Text=")"/&gt;
              //     &lt;/StackPanel&gt;
              //   &lt;/DataTemplate&gt;
              // &lt;/UserControl.Resources&gt;
              //      
              // The Map1 object (a Map object) TextBlock_Fields (a TextBlock object) and ListBox_Fields (a 
              // ListBox object) were defined previously in XAML.
              
              // Access a specific ArcGISImageServiceLayer.
              ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
              
              // Fields Property (Read Only). Always returns a List object (even if empty).
              System.Collections.Generic.List&lt;ESRI.ArcGIS.Client.Field&gt; myFields = myArcGISImageServiceLayer.Fields;
              int myFieldsCount = myFields.Count;
              
              if (myFieldsCount &gt; 0)
              {
              
                // One or more Field's present. Must be a mosaic dataset.
                
                // Display the number of Fields.
                TextBlock_Fields.Text = "Num Fields: " + myFieldsCount.ToString();
              
                // Display the Field Propeties of Name and Type in a ListBox.
                ListBox_Fields.ItemsSource = myFields;
                DataTemplate myDataTemplate = new DataTemplate();
                myDataTemplate = (DataTemplate)Resources["myCustomResources"];
                ListBox_Fields.ItemTemplate = myDataTemplate;
              
              }
              else
              {
              
                // No Fields available.
                TextBlock_Fields.Text = "Num Fields: " + myFieldsCount.ToString();
              
              }
              
            }
              
            private void ArcGISImageServiceLayer_Intialized2(object sender, EventArgs e)
            {
              
              // This example shows how to display the Fields that are available in the mosaic dataset by using
              // a DataTemplate that is constructed on the fly using the XamlReader Static Class in a 
              // ListBox. The Field Properties that are shown include: Name and Type.
              //       
              // The Map1 object (a Map object) TextBlock_Fields (a TextBlock object) and ListBox_Fields (a 
              // ListBox object) were defined previously in XAML.
              
              // Access a specific ArcGISImageServiceLayer.
              ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
              
              // Fields Property (Read Only). Always returns a List object (even if empty).
              System.Collections.Generic.List&lt;ESRI.ArcGIS.Client.Field&gt; myFields = myArcGISImageServiceLayer.Fields;
              int myFieldsCount = myFields.Count;
              
              if (myFieldsCount &gt; 0)
              {
              
                // One or more Field's present. Must be a mosaic dataset.
                
                // Display the number of Fields.
                TextBlock_Fields.Text = "Num Fields: " + myFieldsCount.ToString();
              
                // Construct a StringBuilder that will hold XAML text to define the DataTemplate. 
                System.Text.StringBuilder stringBuilderDataTemplate = new System.Text.StringBuilder();
                stringBuilderDataTemplate.Append("&lt;DataTemplate ");
                stringBuilderDataTemplate.Append("xmlns='http://schemas.microsoft.com/winfx/");
                stringBuilderDataTemplate.Append("2006/xaml/presentation' ");
                stringBuilderDataTemplate.Append("xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml' ");
              
                // IMPORTANT: Provide the correct string for your applications Namespace. In the case of this
                // example, the Namespace is "ArcGISImageServiceLayer_Fields_CS".
                stringBuilderDataTemplate.Append("xmlns:local = 'clr-namespace:ArcGISImageServiceLayer_Fields_CS");
              
                // IMPORTANT: Provide the correct string for your applications Assembly. In the case of this
                // example, the Assembly is "ArcGISImageServiceLayer_Fields_CS".
                stringBuilderDataTemplate.Append(";assembly=ArcGISImageServiceLayer_Fields_CS'&gt;");
              
                stringBuilderDataTemplate.Append("&lt;StackPanel Orientation=\"Horizontal\"&gt;");
                stringBuilderDataTemplate.Append("&lt;TextBlock  Text=\"{Binding Path=Name}\"/&gt;");
                stringBuilderDataTemplate.Append("&lt;TextBlock Text=\" (\"/&gt;");
                stringBuilderDataTemplate.Append("&lt;TextBlock Text=\"{Binding Path=Type}\"/&gt;");
                stringBuilderDataTemplate.Append("&lt;TextBlock Text=\")\"/&gt;");
                stringBuilderDataTemplate.Append("&lt;/StackPanel&gt;");
                stringBuilderDataTemplate.Append("&lt;/DataTemplate&gt;");
              
                // Display the Field Propeties of Name and Type in a ListBox.
                ListBox_Fields.ItemsSource = myFields;
                DataTemplate myDataTemplate = new DataTemplate();
                myDataTemplate = (DataTemplate)System.Windows.Markup.XamlReader.Load(stringBuilderDataTemplate.ToString());
                ListBox_Fields.ItemTemplate = myDataTemplate;
              
              }
              else
              {
              
                // No Fields available.
                TextBlock_Fields.Text = "Num Fields: " + myFieldsCount.ToString();
              
              }
              
            }
            </code>
                
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
              
              ' The Map1 object (a Map object) was defined previously in XAML.
              
              ' Create an ArcGISImageServiceLayer.
              Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
              myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
              
              ' Create an Event Handler.
              ' In this example there are two Event Handlers to demonstrate the same functionality but using two different
              ' mechanisms. Change which Event Handler is being used by commenting one out and uncommenting the other.
              AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized1
              'AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized2
              
              ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
              Map1.Layers.Add(myArcGISImageServiceLayer)
              
            End Sub
              
            Private Sub ArcGISImageServiceLayer_Intialized1(ByVal sender As Object, ByVal e As EventArgs)
              
              ' This example shows how to display the Fields that are available in the mosaic dataset by using
              ' a DataTemplate that is defined in the Resources of the XAML file in a ListBox. The Field 
              ' Properties that are shown include: Name and Type.
              '
              ' An example of the XAML code for the Static Resource is shown here:
              ' &lt;UserControl.Resources&gt;
              '   &lt;DataTemplate x:Key="myCustomResources"&gt;
              '     &lt;StackPanel Orientation="Horizontal"&gt;
              '       &lt;TextBlock  Text="{Binding Path=Name}"/&gt;
              '       &lt;TextBlock Text=" ("/&gt;
              '       &lt;TextBlock Text="{Binding Path=Type}"/&gt;
              '       &lt;TextBlock Text=")"/&gt;
              '     &lt;/StackPanel&gt;
              '   &lt;/DataTemplate&gt;
              ' &lt;/UserControl.Resources&gt;
              '          
              ' The Map1 object (a Map object) TextBlock_Fields (a TextBlock object) and ListBox_Fields (a 
              ' ListBox object) were defined previously in XAML.
              
              ' Access a specific ArcGISImageServiceLayer.
              Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
              
              ' Fields Property (Read Only). Always returns a List object (even if empty).
              Dim myFields As System.Collections.Generic.List(Of ESRI.ArcGIS.Client.Field) = myArcGISImageServiceLayer.Fields
              Dim myFieldsCount As Integer = myFields.Count
              
              If myFieldsCount &gt; 0 Then
              
                  ' One or more Field's present. Must be a mosaic dataset.
              
                  ' Display the number of Fields.
                  TextBlock_Fields.Text = "Num Fields: " + myFieldsCount.ToString
              
                  ' Display the Field Propeties of Name and Type in a ListBox.
                  ListBox_Fields.ItemsSource = myFields
                  Dim myDataTemplate As New DataTemplate
                  myDataTemplate = Resources("myCustomResources")
                  ListBox_Fields.ItemTemplate = myDataTemplate
              
              Else
              
                  ' No Fields available.
                  TextBlock_Fields.Text = "Num Fields: " + myFieldsCount.ToString
              
              End If
              
            End Sub
              
            Private Sub ArcGISImageServiceLayer_Intialized2(ByVal sender As Object, ByVal e As EventArgs)
              
              ' This example shows how to display the Fields that are available in the mosaic dataset by using
              ' a DataTemplate that is constructed on the fly using the XamlReader Static Class in a 
              ' ListBox. The Field Properties that are shown include: Name and Type.
              '          
              ' The Map1 object (a Map object) TextBlock_Fields (a TextBlock object) and ListBox_Fields (a 
              ' ListBox object) were defined previously in XAML.
              
              ' Access a specific ArcGISImageServiceLayer.
              Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
              
              ' Fields Property (Read Only). Always returns a List object (even if empty).
              Dim myFields As System.Collections.Generic.List(Of ESRI.ArcGIS.Client.Field) = myArcGISImageServiceLayer.Fields
              Dim myFieldsCount As Integer = myFields.Count
              
              If myFieldsCount &gt; 0 Then
              
                  ' One or more Field's present. Must be a mosaic dataset.
              
                  ' Display the number of Fields.
                  TextBlock_Fields.Text = "Num Fields: " + myFieldsCount.ToString
              
                  ' Construct a StringBuilder that will hold XAML text to define the DataTemplate. 
                  Dim stringBuilderDataTemplate As New System.Text.StringBuilder
                  stringBuilderDataTemplate.Append("&lt;DataTemplate ")
                  stringBuilderDataTemplate.Append("xmlns='http://schemas.microsoft.com/winfx/")
                  stringBuilderDataTemplate.Append("2006/xaml/presentation' ")
                  stringBuilderDataTemplate.Append("xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml' ")
              
                  ' IMPORTANT: Provide the correct string for your applications Namespace. In the case of this
                  ' example, the Namespace is "ArcGISImageServiceLayer_Fields_VB".
                  stringBuilderDataTemplate.Append("xmlns:local = 'clr-namespace:ArcGISImageServiceLayer_Fields_VB")
              
                  ' IMPORTANT: Provide the correct string for your applications Assembly. In the case of this
                  ' example, the Assembly is "ArcGISImageServiceLayer_Fields_VB".
                  stringBuilderDataTemplate.Append(";assembly=ArcGISImageServiceLayer_Fields_VB'&gt;")
              
                  stringBuilderDataTemplate.Append("&lt;StackPanel Orientation=""Horizontal""&gt;")
                  stringBuilderDataTemplate.Append("&lt;TextBlock  Text=""{Binding Path=Name}""/&gt;")
                  stringBuilderDataTemplate.Append("&lt;TextBlock Text="" (""/&gt;")
                  stringBuilderDataTemplate.Append("&lt;TextBlock Text=""{Binding Path=Type}""/&gt;")
                  stringBuilderDataTemplate.Append("&lt;TextBlock Text="")""/&gt;")
                  stringBuilderDataTemplate.Append("&lt;/StackPanel&gt;")
                  stringBuilderDataTemplate.Append("&lt;/DataTemplate&gt;")
              
                  ' Display the Field Propeties of Name and Type in a ListBox.
                  ListBox_Fields.ItemsSource = myFields
                  Dim myDataTemplate As New DataTemplate
                  myDataTemplate = System.Windows.Markup.XamlReader.Load(stringBuilderDataTemplate.ToString)
                  ListBox_Fields.ItemTemplate = myDataTemplate
              
              Else
              
                  ' No Fields available.
                  TextBlock_Fields.Text = "Num Fields: " + myFieldsCount.ToString
              
              End If
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ObjectIdField">
             <summary>
             Gets the name (string) of the object ID field associated with an attribute table for 
             ArcGISImageServiceLayer that is based on Mosaic datasets.  
             </summary>	
             <remarks>
             <para>
             If an ArcGISImageServiceLayer is not a Mosaic dataset there will not be any 
             <see cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.Fields">ArcGISImageServiceLayer.Fields</see> to 
             be obtained and hence only a zero length string is returned for the ObjectID Property. The ObjectID Property always 
             returns a string value and not a Nothing/null. Only ArcGISImageServiceLayer's that are based on Mosaic 
             datasets will return a non-zero length string for the ObjectID Property.
             </para>
             </remarks>
             <example>
                 <code title="Example CS1" description="" lang="CS">
                 private void MainPage_Loaded(object sender, System.Windows.RoutedEventArgs e)
                 {
                   
                   // The Map1 object (a Map object) was defined previously in XAML.
                   
                   // Create an ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = new ESRI.ArcGIS.Client.ArcGISImageServiceLayer();
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer";
            
                   // Create an Event Handler.
                   myArcGISImageServiceLayer.Initialized += new System.EventHandler&lt;EventArgs&gt;(ArcGISImageServiceLayer_Intialized);
                 
                   // Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer);
                 
                 }
                 
                 private void ArcGISImageServiceLayer_Intialized(object sender, EventArgs e)
                 {
                 
                   // The Map1 object (a Map object) and TextBlock_ObjectIdField (a TextBlock object) were defined previously in XAML.
                 
                   // Access a specific ArcGISImageServiceLayer.
                   ESRI.ArcGIS.Client.ArcGISImageServiceLayer myArcGISImageServiceLayer = (ESRI.ArcGIS.Client.ArcGISImageServiceLayer)Map1.Layers[0];
                   
                   // ObjectIdField Property (Read Only).
                   TextBlock_ObjectIdField.Text = myArcGISImageServiceLayer.ObjectIdField;
                 
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
                 Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
                 
                   ' The Map1 object (a Map object) was defined previously in XAML.
                 
                   ' Create an ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As New ESRI.ArcGIS.Client.ArcGISImageServiceLayer
                   myArcGISImageServiceLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Portland/CascadeLandsat/ImageServer"
                 
                   ' Create an Event Handler.
                   AddHandler myArcGISImageServiceLayer.Initialized, AddressOf ArcGISImageServiceLayer_Intialized
                 
                   ' Add the ArcGISImageServiceLayer to the LayerCollection of the Map.
                   Map1.Layers.Add(myArcGISImageServiceLayer)
                 
                 End Sub
                 
                 Private Sub ArcGISImageServiceLayer_Intialized(ByVal sender As Object, ByVal e As EventArgs)
                 
                   ' The Map1 object (a Map object) and TextBlock_ObjectIdField (a TextBlock object) were defined previously in XAML.
                 
                   ' Access a specific ArcGISImageServiceLayer.
                   Dim myArcGISImageServiceLayer As ESRI.ArcGIS.Client.ArcGISImageServiceLayer = Map1.Layers.Item(0)
                   
                   ' ObjectIdField Property (Read Only).
                   TextBlock_ObjectIdField.Text = myArcGISImageServiceLayer.ObjectIdField
                 
                 End Sub        
                 </code>
             </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.Version">
            <summary>
            Gets the version of ArcGIS Server where the map service is published.
            </summary>
            <remarks>Examples are 9.3, 9.31, 10, 10.01.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.AttributionTemplate">
            <summary>
            Gets the attribution template of the layer.
            </summary>
            <value>The attribution template.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceImageFormat">
            <summary>Output image formats supported by ArcGIS image services.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceImageFormat.PNG24">
            <summary>24bit PNG</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceImageFormat.JPG">
            <summary>JPEG</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceImageFormat.PNG8">
            <summary>8-bit PNG</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceImageFormat.JPGPNG">
            <summary>JPG | PNG</summary>
            <remarks>Note that support for the jpgpng format was added at 10.0 This 
            format returns a JPG if there are no transparent pixels in the requested 
            extent, otherwise it returns a PNG.</remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceInterpolation">
            <summary>
            The resampling process of extrapolating the pixel values while transforming
            the raster dataset when it undergoes warping or when it changes coordinate space.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceInterpolation.NearestNeighbor">
            <summary>Nearest Neighbor interpolation</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceInterpolation.BilinearInterpolation">
            <summary>Bilinear Neighbor interpolation</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceInterpolation.CubicConvolution">
            <summary>Cubic Convolution interpolation</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceInterpolation.Majority">
            <summary>Majority interpolation</summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.RenderingRule">
            <summary>
            Specifies the rendering rule for how custom images requested for an ArcGISImageServiceLayer should be 
            rendered. 
            </summary>
            <remarks>
            <para>
            Using the RenderingRule Class was added for services provided by ArcGIS Server version 10.0 and later.
            </para>
            <para>
            The following lists the rendering rule functions, with hyperlinks to conceptual documentation, that are 
            supported by the RenderingRule Class: 
            </para>
            <list type="bullet">
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Aspect_function/009t00000047000000/" target="_top">Aspect</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Colormap_function/009t00000049000000/" target="_top">Colormap</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Hillshade_function/009t0000004z000000/" target="_top">Hillshade</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/NDVI_function/009t00000052000000/" target="_top">NDVI</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Shaded_Relief_function/009t00000055000000/" target="_top">ShadedRelief</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Slope_function/009t00000056000000/" target="_top">Slope</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Statistics_function/009t00000058000000/" target="_top">Statistics</a></item>
            <item><a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/Stretch_function/009t00000059000000/" target="_top">Stretch</a></item>
            </list>
            <para>
            Each rendering rule function requires a different set of arguments when defining a RenderingRule object. 
            All of the rendering rule functions require setting a 
            <see cref="P:ESRI.ArcGIS.Client.RenderingRule.RasterFunctionName">RenderingRule.RasterFunctionName</see> Property. All 
            but the 'Aspect' rendering rule function requires setting the 
            <see cref="P:ESRI.ArcGIS.Client.RenderingRule.RasterFunctionArguments">RenderingRule.RasterFunctionArguments</see> 
            and <see cref="P:ESRI.ArcGIS.Client.RenderingRule.VariableName">RenderingRule.VariableName</see> Properties. 
            Creating a RenderingRule object can be tricky as the input arguments for the RasterFunction, 
            RasterFunctionArguments, and VariableName Properties do not accept Enumerations or other strongly typed data 
            to drive the creation of the rendering rule functions. Rather most of the input arguments to the 
            RenderingRule Properties are either Strings or a Dictionary of String/Object value pairs.
            </para>
            <para>
            C# and VB.NET Code examples for each of the listed rendering rule functions can be found in the 
            <see cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.RenderingRule">ArcGISImageServiceLayer.RenderingRule</see>  
            Property documentation.
            </para>
            <para>
            The following is a generic description with with general arguments (pseudo-code) for each of the rendering 
            rule functions:
            </para>
            <table><tbody>
            
            <tr>
            <td>
            <strong>RenderingRule function: 'Aspect'</strong><br/>
            Aspect identifies the down slope direction of the maximum rate of change in value from each cell to its 
            neighbors. Aspect can be thought of as the slope direction.<br/><br/>
            Arguments:<br/>
            {<br/>
              "RasterFunctionName" : "Aspect"<br/>
            }<br/>
            <br/>
            Note: Only the RasterFunctionName property is used. Do not use the RasterFunctionArguments
            or VariableName properties.<br/>
            </td>
            </tr>
            
            <tr>
            <td>
            <strong>RenderingRule function: 'Colormap'</strong><br/>
            The Colormap function transforms the pixel values to display the raster data as either a 
            grayscale or a red, green, blue (RGB) image based on a color map.<br/><br/>
            Arguments:<br/>
            {<br/>
              "RasterFunctionName" : "Colormap",<br/>
              "RasterFunctionArguments" :<br/> 
                {<br/>
                  "ColormapName" : "&lt;Random | NDVI | Elevation | Gray&gt;", // do not use in combination with Colormap<br/>
                  "Colormap" : // do not use in combination with ColormapName<br/>
                    [<br/>
                      [&lt;PixelValue1&gt;, &lt;Red1&gt;, &lt;Green1&gt;, &lt;Blue1&gt;], // [integer, integer, integer, integer]<br/>
                      [&lt;PixelValue2&gt;, &lt;Red2&gt;, &lt;Green2&gt;, &lt;Blue2&gt;], // [integer, integer, integer, integer]<br/>
                      [&lt;PixelValueN&gt;, &lt;RedN&gt;, &lt;GreenN&gt;, &lt;BlueN&gt;], // [integer, integer, integer, integer]<br/>
                    ]<br/>
                },<br/>
              "VariableName" : "Raster"<br/>
            }<br/>
            <br/>
            Note: Use either the ColormapName or Colormap (arrays) string/object pair in the RasterFunctionArgument 
            property but not both. If using Colormap for each array that contains a PixelValue the Red, Green, and 
            Blue integer values range from 0 to 255.<br/>
            </td>
            </tr>
            
            <tr>
            <td>
            <strong>RenderingRule function: 'Hillshade'</strong><br/>
            A hillshade is a grayscale 3D model of the surface, with the sun's relative position taken into 
            account for shading the image.<br/><br/>
            Arguments:<br/>
            {<br/>
              "RasterFunctionName" : "Hillshade",<br/>
              "RasterFunctionArguments" :<br/> 
                {<br/>
                  "Azimuth" : &lt;Azimuth&gt;, // double (e.g. 215.0)<br/>
                  "Altitude" : &lt;Altitude&gt;, // double (e.g. 75.0)<br/>
                  "ZFactor" : &lt;ZFactor&gt; // double (e.g. 0.3)<br/>
                },<br/>
              "VariableName" : "DEM"<br/>
            }<br/>
            <br/>
            Note: Azimuth integer values range from 0 to 360. Altitude integer values range from 0 to 90. 
            ZFactor is a scaling number to provide vertical exaggeration for visual effect.
            </td>
            </tr>
            
            <tr>
            <td>
            <strong>RenderingRule function: 'NDVI'</strong><br/>
            The Normalized Difference Vegetation Index (NDVI) is a standardized index allowing you to generate 
            an image displaying greenness (relative biomass). This index takes advantage of the contrast of 
            the characteristics of two bands from a multispectral raster dataset—the chlorophyll pigment 
            absorptions in the red band and the high reflectivity of plant materials in the near-infrared 
            (NIR) band.<br/><br/>
            Arguments:<br/>
            {<br/>
              "RasterFunctionName" : "NDVI",<br/>
              "RasterFunctionArguments" : <br/>
                {<br/>
                  "VisibleBandID" : &lt;VisibleBandID&gt;, // integer (zero-based band id, e.g. 2)<br/>
                  "InfraredBandID" : &lt;InfraredBandID&gt; // integer (zero-based band id, e.g. 1)<br/>
                },<br/>
              "VariableName" : "Raster"<br/>
            }<br/>
            <br/>
            Note: The NDVI function does not work on single band images.<br/>
            </td>
            </tr>
            
            <tr>
            <td>
            <strong>RenderingRule function: 'ShadedRelief'</strong><br/>
            A color 3D model of the terrain, created by merging the images from the Elevation-coded and 
            Hillshade methods.<br/><br/>
            Arguments:<br/>
            {<br/>
              "RasterFunctionName" : "ShadedRelief",<br/>
              "RasterFunctionArguments" : <br/>
                {<br/>
                  "Azimuth" : &lt;Azimuth&gt;, // double (e.g. 215.0)<br/>
                  "Altitude" : &lt;Altitude&gt;, // double (e.g. 75.0)<br/>
                  "ZFactor" : &lt;ZFactor&gt; // double (e.g. 0.3)<br/>
                  "Colormap" :<br/>
                    [<br/>
                      [&lt;PixelValue1&gt;, &lt;Red1&gt;, &lt;Green1&gt;, &lt;Blue1&gt;], // [integer, integer, integer, integer]<br/>
                      [&lt;PixelValue2&gt;, &lt;Red2&gt;, &lt;Green2&gt;, &lt;Blue2&gt;], // [integer, integer, integer, integer]<br/>
                      [&lt;PixelValueN&gt;, &lt;RedN&gt;, &lt;GreenN&gt;, &lt;BlueN&gt;], // [integer, integer, integer, integer]<br/>
                    ]<br/>
                },<br/>
              "VariableName" : "Raster"<br/>
            }<br/>
            <br/>
            Note: Azimuth integer values range from 0 to 360. Altitude integer values range from 0 to 90. 
            ZFactor is a scaling number to provide vertical exaggeration for visual effect. For the 
            Colormap for each array that contains a PixelValue the Red, Green, and Blue integer values 
            range from 0 to 255.<br/>
            </td>
            </tr>
            
            <tr>
            <td>
            <strong>RenderingRule function: 'Slope'</strong><br/>
            Slope represents the rate of change of elevation for each Digital Elevation Model (DEM) cell.<br/>
            Arguments:<br/><br/>
            {<br/>
              "RasterFunctionName" : "Slope",<br/>
              "RasterFunctionArguments" : <br/>
                {<br/>
                  "ZFactor" : &lt;ZFactor&gt; // double (e.g. 0.3)<br/>
                },<br/>
              "VariableName" : "DEM"<br/>
            }<br/>
            <br/>
            Note: ZFactor is a scaling number to provide vertical exaggeration for visual effect.<br/>
            </td>
            </tr>
            
            <tr>
            <td>
            <strong>RenderingRule function: 'Statistics'</strong><br/>
            The Statistics function calculates focal statistics for each pixel of an image based on a defined 
            focal neighborhood.<br/><br/>
            Arguments:<br/>
            {<br/>
              "RasterFunctionName" : "Statistics",<br/>
              "RasterFunctionArguments" :<br/> 
                {<br/>
                  "Type" : "&lt;Min | Max | Mean | StandardDeviation&gt;", <br/>
                  "KernelColumns" : &lt;KernelColumns&gt;, // integer (e.g. 3)<br/>
                  "KernelRows" : &lt;KernelRows&gt; // integer (e.g. 3)<br/>
                },<br/>
              "VariableName" : "Raster"<br/>
            }<br/>
            <br/>
            Note: It is typical to have both the KernalColumns and KernalRows use the same integer value.<br/>
            </td>
            </tr>
            
            <tr>
            <td>
            <strong>RenderingRule function: 'Stretch'</strong><br/>
            The Stretch function enhances an image by changing properties such as brightness, contrast, and 
            gamma through multiple stretch types.<br/><br/>
            Arguments:<br/>
            {<br/>
              "RasterFunctionName" : "Stretch",<br/>
              "RasterFunctionArguments" :<br/> 
                {<br/>
                  "StretchType" : &lt;StretchType&gt;, // integer (0 = None, 3 = StandardDeviation, 4 = Histogram Equalization, 5 = MinMax)<br/>
                  "NumberOfStandardDeviations" : &lt;NumberOfStandardDeviations&gt;, // integer (e.g. 2)<br/>
                  "Statistics" :<br/>
                    [<br/>
                      [&lt;Min1&gt;, &lt;Max1&gt;, &lt;Mean1&gt;, &lt;StandardDeviation1&gt;], // [double, double, double, double]<br/>
                      [&lt;Min2&gt;, &lt;Max2&gt;, &lt;Mean2&gt;, &lt;StandardDeviation2&gt;], // [double, double, double, double]<br/>
                      [&lt;MinN&gt;, &lt;MaxN&gt;, &lt;MeanN&gt;, &lt;StandardDeviationN&gt;], // [double, double, double, double]<br/>
                    ]<br/>
                  "Gamma" : [&lt;Gamma1&gt;, &lt;Gamma2&gt;, &lt;GammaN&gt;] // array of doubles<br/>
                },<br/>
              "VariableName" : "Raster"<br/>
            }<br/>
            <br/>
            Note: The values for each array in Statistics can be obtained only for Mosaic datasets by:<br/>
            Min = <see cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.MinValues">ArcGISImageServiceLayer.MinValues Property</see><br/>
            Max = <see cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.MaxValues">ArcGISImageServiceLayer.MaxValues Property</see><br/>
            Mean = <see cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.MeanValues">ArcGISImageServiceLayer.MeanValues Property</see><br/>
            StandardDeviation = <see cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.StdvValues">ArcGISImageServiceLayer.StdvValues Property</see><br/>
            </td>
            </tr>
            
            </tbody></table>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.RenderingRule.RasterFunctionName">
            <summary>
            Gets or sets the name of the raster function.
            </summary>
            <value>The name of the raster function.</value>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.RenderingRule.RasterFunctionArguments">
            <summary>
            Gets or sets the raster function arguments.
            </summary>
            <value>The raster function arguments.</value>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.RenderingRule.VariableName">
            <summary>
            Gets or sets the name of the variable.
            </summary>
            <value>The name of the variable.</value>		
        </member>
        <member name="T:ESRI.ArcGIS.Client.MosaicRule">
            <summary>
            Specifies the mosaic rule when defining how individual 
            images should be mosaicked. It specifies selection, 
            mosaic method, sort order, overlapping pixel resolution, etc. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MosaicRule.MosaicMethod">
            <summary>
            Gets or sets the mosaic method.
            </summary>
            <value>The mosaic method.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MosaicRule.Where">
            <summary>
            Gets or sets the where.
            </summary>
            <value>filter parameters.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MosaicRule.SortField">
            <summary>
            Gets or sets the sort field.
            </summary>
            <value>The name of the field to be sorted.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MosaicRule.SortValue">
            <summary>
            Gets or sets the sort value.
            </summary>
            <value>The value to sort by.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MosaicRule.Ascending">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ESRI.ArcGIS.Client.MosaicRule"/> 
            is ascending.
            </summary>
            <value>If <c>true</c> the results will be sorted in ascending order. 
            If <c>false</c> the results will be sorted in descending order.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MosaicRule.LockRasterIds">
            <summary>
            Gets or sets the lock raster ids.
            </summary>
            <value>The raster ids that will be locked.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MosaicRule.Viewpoint">
            <summary>
            Gets or sets the viewpoint.
            </summary>
            <value>The viewpoint.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MosaicRule.FIDs">
            <summary>
            Gets or sets the FIDs.
            </summary>
            <value>The fids.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.MosaicRule.MosaicOperation">
            <summary>
            Gets or sets the mosaic operation.
            </summary>
            <value>How the tiles will be rendered.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.FeatureType">
            <summary>
            A feature type describes a sub-type of features in a feature layer.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.FeatureType.GetFieldByName(System.String,System.Collections.Generic.List{ESRI.ArcGIS.Client.Field})">
            <summary>
            Allows you to get a reference to a field by just searching for the 
            fields name.
            </summary>
            <param name="FieldName">The field to search for.</param>
            <param name="fields">The list of fields to seach through.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.FeatureType.ValidateFieldValue(System.Object,System.String,System.Collections.Generic.List{ESRI.ArcGIS.Client.Field})">
            <summary>
            Makes sure Value is of the correct data type to be saved back to the
            field indicated. If the value is the corrct data type it will be returned.
            If the value is not the correct data type there will be an attempt to
            convert it to the correct data type and return that value. If conversion 
            fails or there is not supported conversion between the two types the 
            function will return Value.
            </summary>
            <param name="Value">The value you want to validate.</param>
            <param name="FieldName">The field name of the field you want the 
            type validateion to be preformed against.</param>
            <param name="fields">The fields to search through.</param>
            <returns>Returns the value in the correct data taype for the field or returns
            the value.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.FeatureType.CanConvertTo``1(System.Object)">
            <summary>
            Checks to see if the Type of the type passed in can be converted 
            to Type T.
            </summary>
            <typeparam name="T">the type we need to convert to.</typeparam>
            <param name="type">the type we need to convert from.</param>
            <returns>Returns true if datatype conversion is possible between 
            these two data types.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.FeatureType.ConvertTo``1(System.Object)">
            <summary>
            Converts value to datatype T.
            </summary>
            <typeparam name="T">Type to convert to</typeparam>
            <param name="value">Value to be converted</param>
            <returns>Returns the converted value</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureType.Id">
            <summary>
            The ID of the feature type.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureType.Name">
            <summary>
            The name of the feature type
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureType.Templates">
            <summary>
            The templates for the feature type indexed by template id.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureType.Domains">
            <summary>
            Domains indexed by field names
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol">
            <summary>
            <see cref="T:ESRI.ArcGIS.Client.Symbols.FillSymbol"/> class used to draw fills of type Image
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol"/> class.
            FOR INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.SourceProperty">
            <summary>
            Identifies the Image Source dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.BorderStyleProperty">
            <summary>
            Identifies the BorderStyle dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.WidthProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.Width"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.HeightProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.Height"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.ColorProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.Color"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.OpacityProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.Opacity"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.SelectionColorProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.Color"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.ToJson">
            <summary>
            Serializes the picture fill symbol to JSON
            </summary>
            <returns>
            A JSON string representation of the picture fill symbol.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source of the Image to use for the fill.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.BorderStyle">
            <summary>
            Gets or sets a pre-defined Dash Array using the LineStyle enumeration
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.Width">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.Height">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.Opacity">
            <summary>
            Gets or sets the opacity of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbol.SelectionColor">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.SimpleRenderer">
            <summary>
            Simple graphics renderer returning one symbol.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.SimpleRenderer.GetSymbol(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Gets a symbol based on a graphic.
            </summary>
            <param name="graphic">The graphic.</param>
            <returns>Symbol</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.SimpleRenderer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of a layer using this renderer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> containing the collection of legenditems coresponding to the renderer.
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.SimpleRenderer.ToJson">
            <summary>
            Serializes the simple renderer to JSON
            </summary>
            <returns>
            A JSON string representation of the simple renderer
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.SimpleRenderer.Symbol">
            <summary>
            Gets or sets the symbol.
            </summary>
            <value>The symbol.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.SimpleRenderer.Label">
            <summary>
            Gets or sets the label.
            </summary>        
        </member>
        <member name="P:ESRI.ArcGIS.Client.SimpleRenderer.Description">
            <summary>
            Gets or sets the description.
            </summary>        
        </member>
        <member name="E:ESRI.ArcGIS.Client.SimpleRenderer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.SimpleRenderer.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Input.Manipulation.TargetIsHit(System.Windows.Point,System.Windows.UIElement)">
            <summary>
            Checks if the target is hit by going through all UIElements beginning from the topmost UIElement reported on TouchDown.
            </summary>
            <param name="position">The position.</param>
            <param name="topmost">The topmost UIElement.</param>
            <returns></returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Input.ManipulationDelta">
            <summary>
            Contains transformation data that is accumulated when manipulation events
            occur.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Input.ManipulationVelocities">
            <summary>
            Describes the speed at which manipulations occurs.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Input.ManipulationVelocities.ExpansionVelocity">
            <summary>
            Gets the rate at which the manipulation is resized.
            </summary>
            <value>The rate at which the manipulation is resized in device-independent 
            units (1/96th inch per unit) per millisecond.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Input.ManipulationVelocities.LinearVelocity">
            <summary>
            Gets the speed of the linear motion.
            </summary>
            <value>The speed of linear motion in device-independent units 
            (1/96th inch per unit) per millisecond..</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Input.ManipulationStartedEventArgs">
            <summary>
            Provides data for the ManipulationStarted event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Input.ManipulationStartedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Input.ManipulationStartedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Input.ManipulationStartedEventArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Input.ManipulationStartedEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled. Setting to true
                prevents most handlers along the event route from handling the same event
                again.
            </summary>
            <value> true to mark the routed event handled; false to leave the routed event unhandled,
                which permits the event to potentially route further. The default is false.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Input.ManipulationStartedEventArgs.ManipulationContainer">
            <summary>
            Gets the container that defines the coordinates for the manipulation.
            </summary>
            <value>The container element.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Input.ManipulationStartedEventArgs.ManipulationOrigin">
            <summary>
            Gets the point from which the manipulation originated.
            </summary>
            <remarks>
            If two points of contact initiate the manipulation, the ManipulationOrigin
            property is the point between the two points of contact. 
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Input.ManipulationDeltaEventArgs">
            <summary>
            Provides data for the ManipulationDelta event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Input.ManipulationDeltaEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Input.ManipulationDeltaEventArgs"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Input.ManipulationDeltaEventArgs.CumulativeManipulation">
            <summary>
             Gets the accumulated changes of the current manipulation, as a ManipulationDelta.
            </summary>
            <value> The accumulated changes of the current manipulation.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Input.ManipulationDeltaEventArgs.DeltaManipulation">
            <summary>
            Gets the most recent changes of the current manipulation, as a ManipulationDelta.
            </summary>
            <value>The most recent changes of the current manipulation.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Input.ManipulationDeltaEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled. Setting to true
            prevents most handlers along the event route from handling the same event
            again.
            </summary>
            <value>true to mark the routed event handled; false to leave the routed event unhandled,
            which permits the event to potentially route further. The default is false.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Input.ManipulationDeltaEventArgs.IsInertial">
            <summary>
            Gets whether the System.Windows.UIElement.ManipulationDelta event occurs
            during inertia.
            </summary>
            <value>
             true if the System.Windows.UIElement.ManipulationDelta event occurs during
            inertia; false if the event occurs while the user's input device has contact
            with the element.
            </value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Input.ManipulationCompletedEventArgs">
            <summary>
            Provides data for the ManipulationCompleted event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Input.ManipulationCompletedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Input.ManipulationCompletedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.GestureType">
            <summary>
            Contains values that represent different multitouch gestures. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GestureType.Tap">
            <summary>
            The user briefly touched a single point on the screen.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GestureType.DoubleTap">
            <summary>
            The user tapped the screen twice in quick succession. This always is 
            preceded by a Tap gesture.<br/>
            If the time between taps is too great to be considered a DoubleTap,
            two Tap gestures will be generated instead.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GestureType.Hold">
            <summary>
            The user touched a single point on the screen for approximately one 
            second. This is a single event, and not continuously generated while
            the user is holding the touchpoint.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GestureType.Drag">
            <summary>
            The user touched the screen, and then performed a free-form drag gesture.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GestureType.Flick">
            <summary>
            The user performed a touch combined with a quick swipe of the screen.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GestureType.Pinch">
            <summary>
            The user touched two points on the screen, and then converged or 
            diverged them. Pinch behaves like a two-finger drag. When this gesture
            is enabled.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GestureType.Started">
            <summary>
            A gesture was started (ie the user started touching the screen).
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.GestureType.Completed">
            <summary>
            A gesture was completed. This signals only completion. No position 
            or delta data is valid for this sample.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Editing.Cut">
            <summary>
            Enables cut graphics using a polyline.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Cut.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Cut.OnIsEnabledChanged">
            <summary>
            Overrides to enable verb
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Cut.SetDrawMode">
            <summary>
            Overrides to set draw mode for cut
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Cut.Execute(ESRI.ArcGIS.Client.GraphicsLayer,System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.Polyline)">
            <summary>
            Executes cut on the graphics to cut using polyline cutter.
            </summary>
            <param name="layer">Graphics layer that contains graphics to cut</param>
            <param name="toCut">Graphics to cut</param>
            <param name="cutter">Polyline to cut with</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Cut.Execute(ESRI.ArcGIS.Client.Geometry.Polyline)">
            <summary>
            Executes cut on all selected graphics using polyline cutter.
            </summary>
            <param name="cutter">Polyline to cut with</param>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FeatureService.Editing.Cut.CutCompleted">
            <summary>
            Occurs when cut has completed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.LegendSymbol">
            <summary>
            A control that displays a symbol for the legend.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LegendSymbol.#ctor(ESRI.ArcGIS.Client.Symbols.Symbol)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.LegendSymbol"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LegendSymbol.ToImageSource">
            <summary>
            Convert synchronously the legend symbol to an image source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LegendSymbol.ToImageSource(System.Action{System.Windows.Media.ImageSource})">
            <summary>
            Convert asynchronously the legend symbol to an image source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LegendSymbol.MeasureOverride(System.Windows.Size)">
            <summary>
            Overrides MeasureOverride
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LegendSymbol.StrokeThickness">
            <summary>
            Returns the greatest path strokethickness (generally there is only one, but it's possible to design symbols with multi paths).
            </summary>
            <returns></returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LegendSymbol.Symbol">
            <summary>
            The symbol to display
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LegendSymbol.Attributes">
            <summary>
            The attributes. Required for data binding.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.LegendSymbol.WaitResources">
            <summary>
            Fires an event when all resources in the visual tree of an object are loaded and so ready to be rendered. 
            At this time, the only resources that are taken in care are:
                 - Images --> wait for image opened (or failed)
                 - Shapes when Fill color is an ImageBrush --> wait for image opened (or failed)
                 - Panel when background color is an ImageBrush (needed for FeatureService/PictureFillSymbol)
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.VisualTreeHelperExtension.GetDescendantsAndSelf``1(System.Windows.DependencyObject)">
            <summary>
            Extension method enumerating the elements of type T in the visual tree of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of type T.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.VisualTreeHelperExtension.GetDescendantsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Extension method enumerating the visual tree descendants of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of the element and the element itself.</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.SpatialRelationship">
            <summary>
            SpatialRelationship enumeration.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.SpatialRelationship.esriSpatialRelIntersects">
            <summary>
            Part of a feature from feature class 1 is contained in a feature from feature class 2. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.SpatialRelationship.esriSpatialRelContains">
            <summary>
            Part or all of a feature from feature class 1 is contained within a feature from feature class 2.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.SpatialRelationship.esriSpatialRelCrosses">
            <summary>
            The feature from feature class 1 crosses a feature from feature class 2. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.SpatialRelationship.esriSpatialRelEnvelopeIntersects">
            <summary>
            The envelope of feature class 1 intersects with the envelope of feature class 2.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.SpatialRelationship.esriSpatialRelIndexIntersects">
            <summary>
            The envelope of the query feature class intersects the index entry for the target feature class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.SpatialRelationship.esriSpatialRelOverlaps">
            <summary>
            Features from feature class 1 overlap features in feature class 2.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.SpatialRelationship.esriSpatialRelTouches">
            <summary>
            The feature from feature class 1 touches the border of a feature from feature class 2. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.SpatialRelationship.esriSpatialRelWithin">
            <summary>
            The feature from feature class 1 is completely enclosed by the feature from feature class 2. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.SpatialRelationship.esriSpatialRelRelation">
            <summary>
            Indicates that a spatial relationship function will be used.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.RouteResult">
            <summary>
            Represents the route result - which, together with barriers 
            and messages make up the <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteEventArgs"/>. 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteResult.#ctor(ESRI.ArcGIS.Client.Tasks.DirectionsFeatureSet,ESRI.ArcGIS.Client.Graphic,System.String,System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteResult"/> class.
            </summary>
            <param name="directions">Directions of the route.</param>
            <param name="route">Route graphics.</param>
            <param name="routeName">Name of the route.</param>
            <param name="stops">Stops in route.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteResult.Directions">
            <summary>
            Route directions are returned if <see cref="P:ESRI.ArcGIS.Client.Tasks.RouteParameters.ReturnDirections"/> was set to true
            (the default is false).
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteResult.Route">
            <summary>
            Route graphic (a polyline) is returned if returnRoutes is true (the default) and 
            outputLines is not "esriNAOutputLineNone" (no line at all).
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteResult.RouteName">
            <summary>
            The name of the route.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteResult.Stops">
            <summary>
            Collection of stops.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.RouteEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveCompleted"/> event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteEventArgs.#ctor(ESRI.ArcGIS.Client.Graphic[],ESRI.ArcGIS.Client.Graphic[],ESRI.ArcGIS.Client.Graphic[],ESRI.ArcGIS.Client.Graphic[],ESRI.ArcGIS.Client.Graphic[],ESRI.ArcGIS.Client.Tasks.GPMessage[],ESRI.ArcGIS.Client.Tasks.RouteResult[],ESRI.ArcGIS.Client.Graphic[],ESRI.ArcGIS.Client.Graphic[],System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteEventArgs"/> class.
            </summary>
            <param name="barriers">The barries that were returned from the completion of the operation.</param>
            <param name="polylineBarriers">The polyline barriers that were returned from the completion of the operation.</param>
            <param name="polygonBarriers">The polygon barriers that were returned from the completion of the operation.</param>
            <param name="facilities">The facilities that were returned from the completion of the operation.</param>
            <param name="incidents">The incidents that were returned from the completion of the operation.</param>
            <param name="messages">The messages that were returned from the completion of the operation.</param>
            <param name="routeResults">The route results that were returned from the completion of the operation.</param>
            <param name="serviceAreaPolygons">The service area polygons that were returned from the completion of the operation.</param>
            <param name="serviceAreaPolylines">The service area polylines that were returned from the completion of the operation.</param>
            <param name="userToken">The user token that were returned from the completion of the operation.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteEventArgs.Barriers">
            <summary>
            Barriers are returned only if <see cref="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.ReturnBarriers"/> was set 
            to true (which is not the default). If you send in the barriers as a featureSet (instead of using
            DataLayer), you already have the barriers and might not need to request them back from the server.
            </summary>		
            <value>The barriers.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteEventArgs.PolylineBarriers">
            <summary>
            Polyline barriers are returned only if <see cref="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.ReturnPolylineBarriers"/> was set 
            to true (which is not the default). 
            </summary>
            <value>The polyline barriers.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteEventArgs.PolygonBarriers">
            <summary>
            Polygon barriers are returned only if <see cref="P:ESRI.ArcGIS.Client.Tasks.BaseRouteParameters.ReturnPolygonBarriers"/> was set 
            to true (which is not the default). 
            </summary>		
            <value>The polygon barriers.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteEventArgs.Messages">
            <summary>
            The solution messages (if returned in the server response) are an array of <see cref="T:ESRI.ArcGIS.Client.Tasks.GPMessage"/> instances.
            </summary>
            <value>The messages.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteEventArgs.RouteResults">
            <summary>
            The route results is an array of RouteResult instances.
            </summary>
            <value>The route results.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteEventArgs.Facilities">
            <summary>
            Facilities are returned only if <see cref="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.ReturnFacilities"/> or <see cref="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.ReturnFacilities"/> was set 
            to true. 
            </summary>		
            <value>The facilities.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteEventArgs.Incidents">
            <summary>
            Incidents are returned only if <see cref="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.ReturnIncidents"/> was set 
            to true (which is not the default). 
            </summary>		
            <value>The incidents.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteEventArgs.ServiceAreaPolygons">
            <summary>
            Service area polygons are returned from <see cref="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveClosestFacilityAsync(ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters,System.Object)"/>
            </summary>				
            <value>The service area polygons.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteEventArgs.ServiceAreaPolylines">
            <summary>
            Service area polylines are returned from <see cref="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveClosestFacilityAsync(ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters,System.Object)"/>
            </summary>			
            <value>The service area polylines.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.RelationshipResult">
            <summary>
            The result returned after the ExecuteRelationshipQuery or 
            ExecuteRelationshipQueryAsync is performed by the QueryTask.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RelationshipResult.Fields">
            <summary>
            Gets the fields. Returns a collection of fields that define the 
            schema of the related records.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RelationshipResult.RelatedRecordsGroup">
            <summary>
            Gets or sets the related records group. Contains the matching 
            results of each object id.
            </summary>
            <value>The related records group.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.esriJobStatus">
            <summary>
            The status of a geoprocessing job.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriJobStatus.esriJobNew">
            <summary>
            The job is new.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriJobStatus.esriJobSubmitted">
            <summary>
            The job has been submitted.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriJobStatus.esriJobWaiting">
            <summary>
            The job is waiting to be executed.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriJobStatus.esriJobExecuting">
            <summary>
            The job is executing.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriJobStatus.esriJobSucceeded">
            <summary>
            The job has completed successfully. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriJobStatus.esriJobFailed">
            <summary>
            The job execution has failed.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriJobStatus.esriJobTimedOut">
            <summary>
            The job execution has timed out.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriJobStatus.esriJobCancelling">
            <summary>
            The job is being cancelled.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriJobStatus.esriJobCancelled">
            <summary>
            The job has been cancelled.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriJobStatus.esriJobDeleting">
            <summary>
            The job is being deleted.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriJobStatus.esriJobDeleted">
            <summary>
            The job has been deleted.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.JobInfo">
            <summary>
            Represents information pertaining to the execution of an asynchronous geoprocessing task on the server.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.JobInfo.JobId">
            <summary>
            The unique job ID assigned by ArcGIS Server.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.JobInfo.JobStatus">
            <summary>
            The job status.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.JobInfo.Messages">
            <summary>
            An array of messages that include the message type and a description.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPMessageType">
            <summary>
            An enumeration containing the types of messages returned from a geoprocessing task. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GPMessageType.Informative">
            <summary>
            An informative message.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GPMessageType.Warning">
            <summary>
            A warning message.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GPMessageType.Error">
            <summary>
            An error message.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GPMessageType.Empty">
            <summary>
            An empty message.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GPMessageType.Abort">
            <summary>
            The task execution was aborted.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.DistanceParameters">
            <summary>
            Parameters contains additional properties that defines how the distance 
            task will be preformed.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DistanceParameters.DistanceUnit">
            <summary>
            Gets or sets the unit of measurement that will used for the distance
            task.
            </summary>
            <value>The distance unit.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DistanceParameters.Geodesic">
            <summary>
            Gets or sets a value indicating whether the results will be 
            calculated based on a geodesic coordinate system.
            </summary>
            <value><c>true</c> if geodesic; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.Envelope">
            <summary>
            Axis Aligned envelope
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Envelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.Envelope"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Envelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.Envelope"/> class.
            </summary>
            <param name="x1">x min</param>
            <param name="y1">y min</param>
            <param name="x2">x max</param>
            <param name="y2">y max</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Envelope.#ctor(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.Envelope"/> class.
            </summary>
            <param name="p1">First corner</param>
            <param name="p2">Second corner</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Envelope.Clone">
            <summary>
            Creates a deep clone of the current Object.
            </summary>
            <returns>Returns a deep clone of the current Object.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Envelope.GetCenter">
            <summary>
            Gets the center of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Envelope.Intersection(ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Calculates the intersection between this instance and the specified envelope.
            </summary>
            <param name="extent">Envelope to intersect with</param>
            <returns>The intersecting envelope or null if they don't intersect.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Envelope.Intersects(ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Returns true if this instance intersects an envelope.
            </summary>
            <param name="other">Envelope to test against</param>
            <returns>True if they intersect</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Envelope.Union(ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Returns the union of this instance and the specified envelope.
            </summary>
            <param name="extent">The envelope to union with.</param>
            <returns>Envelope containing both envelope</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Envelope.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Envelope.Equals(ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Envelope.Expand(System.Double)">
            <summary>
            Creates a new envelope expanded by the amount specified.
            </summary>
            <param name="factor">Expansion factor. Factor must be 0 or greater. 
            Values greater than 1 creates a larger envelope, and less then one shrinks it.</param>
            <returns>Expanded envelope</returns>
            <example>
            Example: Expand the envelope by 10%:
            <code lang="C#">
            Envelope expanded = myEnvelope.Expand(1.1);
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Envelope.NormalizeX(System.Double,System.Double)">
            <summary>
            Shifts x to within x/- 180 span
            </summary>
            <param name="x"></param>
            <param name="dateline"></param>
            <returns></returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Envelope.XMin">
            <summary>
            Gets or sets Xmin.
            </summary>
            <value>The X min.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Envelope.YMin">
            <summary>
            Gets or sets Ymin.
            </summary>
            <value>The Y min.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Envelope.XMax">
            <summary>
            Gets or sets Xmax.
            </summary>
            <value>The X max.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Envelope.YMax">
            <summary>
            Gets or sets Ymax.
            </summary>
            <value>The Y max.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Envelope.Width">
            <summary>
            Gets the width of the instance.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Envelope.Height">
            <summary>
            Gets the height of the instance.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Envelope.Extent">
            <summary>
            Gets the minimum enclosing envelope of the instance
            </summary>
            <returns>Envelope</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Services.GPResultImageResponse">
            <summary>
            The response from a geoprocessor map image result request.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.GPResultImageResponse.paramName">
            <summary>
            Gets or sets the name of the param.
            </summary>
            <value>The name of the param.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.GPResultImageResponse.dataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.GPResultImageResponse.value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Services.GPMapValue">
            <summary>
            A map image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.GPMapValue.mapImage">
            <summary>
            Gets or sets the map image.
            </summary>
            <value>The map image.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.RangeDomain`1">
            <summary>
            A range domain describes a range of values that can be assigned to a field.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Domain">
            <summary>
            Describes limits on the values that can be assigned to a field: either in terms of a range of values in code-description format,
            or in terms of a range of values.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Domain.Name">
            <summary>
            The name of the domain.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.RangeDomain`1.MinimumValue">
            <summary>
            The minimum value of the range.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.RangeDomain`1.MaximumValue">
            <summary>
            The maximum value of the range.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Editing.ClearSelection">
            <summary>
            Clears selection on a graphics layer.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.ClearSelection.Invoke">
            <summary>
            Invokes the clear selection.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.ClearSelection.Map">
            <summary>
            Map on which the selection is cleared.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.ClearSelection.Layers">
            <summary>
            Gets or sets the layers to clear selection on.
            </summary>
            <value>The layers to clear selection on..</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Editing.Add">
            <summary>
            Enables adding graphics to a graphics layer by sketching out the geometries.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Add.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Add.OnIsEnabledChanged">
            <summary>
            Overrides to enable verb
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Add.Restart">
            <summary>
            Enables draw with new properties
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.Add.Execute(ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Executes add given the geometry to add.
            </summary>
            <param name="toAdd">Geometry to add</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.Add.PolygonLayers">
            <summary>
            Gets or sets the polygon layers for auto complete.
            </summary>
            <value>The polygon layers.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.Add.SelectedPolygons">
            <summary>
            Gets or sets the selected polygons for auto complete.
            </summary>
            <value>The selected polygons.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.Add.Layer">
            <summary>
            Gets or sets the <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> to add features to.
            </summary>
            <value>The <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/>.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.Add.FeatureType">
            <summary>
            Gets or sets the FeatureType of the feature to draw.
            </summary>
            <value>The FeatureType.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.Add.FeatureTemplate">
            <summary>
            Gets or sets the FeatureTemplate of the feature to draw.
            </summary>
            <value>The FeatureTemplate.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.Add.GeometryServiceUrl">
            <summary>
            Gets or sets the url to the geometry service used for simplifying geometries as well as for AutoComplete.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.Add.ProxyUrl">
            <summary>
            Gets or sets the proxy URL.
            </summary>
            <value>The proxy URL.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.Add.AutoComplete">
            <summary>
            Whether the polygon is drawn using AutoComplete.  Applies only to polygon layers.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.Add.AutoSelect">
            <summary>
            Whether selection is done automatically for autocomplete.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.Add.Freehand">
            <summary>
            Whether the polyline or polygon is drawn freehand.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FeatureService.Editing.Add.AddCompleted">
            <summary>
            Occurs when add has completed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.Geodesic">
            <summary>
            Geodesic utility methods for densification and measure on the ellipsoid.
            </summary>
            <remarks>
            <para>
            The term <a href="http://en.wikipedia.org/wiki/Geodesic" target="_blank">Geodesic</a> means calculating 
            the shortest distance between two points on a sphere. Using Geodesic algorithms to calculate distances 
            provides a highly accurate way to obtain length and area of measurements of geographic features. The 
            Geodesic algorithm uses the concept of a 
            <a href="http://en.wikipedia.org/wiki/Great_circle" target="_blank">great circle</a> to obtain the 
            shortest route between two points along the Earth’s surface. The length and area measurements obtained 
            via the Geodesic functions are superior to those of the 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Euclidian">Euclidian</see> functions, as the Euclidian functions 
            are based upon a projection (i.e. a flat 2D representation of a 3D surface) which introduces distortion.  
            </para>
            <para>
            The functions of <see cref="M:ESRI.ArcGIS.Client.Geometry.Geodesic.Area(ESRI.ArcGIS.Client.Geometry.Polygon,System.Double)">Geodesic. Area</see>, 
            <see cref="M:ESRI.ArcGIS.Client.Geometry.Geodesic.Densify(ESRI.ArcGIS.Client.Geometry.Geometry,System.Double)">Geodesic.Densify</see>, 
            <see cref="M:ESRI.ArcGIS.Client.Geometry.Geodesic.Length(ESRI.ArcGIS.Client.Geometry.Polygon)">Geodesic.Length(Polygon)</see>, 
            and <see cref="M:ESRI.ArcGIS.Client.Geometry.Geodesic.Length(ESRI.ArcGIS.Client.Geometry.Polyline)">Geodesic.Length(Polyline)</see> 
            are Shared/Static functions which means that you do not use the <b>new</b> keyword to instantiate them 
            as objects.
            </para>
            <para>
            The <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline">Polyline</see> and 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon">Polygon</see> Geometries that are used as parameters 
            in the Geodesic functions require that the  
            <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> be in 
            <a href="http://help.arcgis.com/en/webapi/javascript/arcgis/help/jshelp/gcs.htm" target="_blank">Geographic Coordinate System</a> 
            based upon latitude and longitude coordinates. The SpatialReference is a combination of an ellipsoid, datum, 
            and a coordinate system used to display geographic data of the three dimensional Earth on a two dimensional 
            surface (such as a piece of paper of computer monitor). A good article for describing how a spatial reference 
            works can be found 
            <a href="http://www.sharpgis.net/post/2007/05/Spatial-references2c-coordinate-systems2c-projections2c-datums2c-ellipsoids-e28093-confusing.aspx" target="_blank">here</a>. 
            If the SpatialReference of the geometries in the layer are in a 
            <a href="http://help.arcgis.com/en/webapi/javascript/arcgis/help/jshelp/pcs.htm" target="_blank">Projected Coordinate System</a> 
            then it will be required to converted those geometries into a Geographic Coordinate System via Methods 
            like: <see cref="M:ESRI.ArcGIS.Client.Projection.WebMercator.ToGeographic(ESRI.ArcGIS.Client.Geometry.Geometry)">Projection.WebMercator.ToGeographic</see> or 
            <see cref="M:ESRI.ArcGIS.Client.IProjectionService.ProjectAsync(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.SpatialReference)">IProjectionService.ProjectAsync</see>.
            </para>
            <para>
            When using the <see cref="M:ESRI.ArcGIS.Client.Geometry.Geodesic.Area(ESRI.ArcGIS.Client.Geometry.Polygon,System.Double)">Geodesic. Area</see> Method, in order 
            to obtain positive area values, the vertices that make up the 
            <see cref="P:ESRI.ArcGIS.Client.Geometry.Polygon.Rings">Rings</see> of the 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon">Polygon</see> need to be oriented in a 
            clock-wise fashion. If the vertices that make up the Rings of the Polygon are in a counter-clock-wise 
            fashion the Geodesic.Area that is calculated will be negative. Use 
            <see cref="M:ESRI.ArcGIS.Client.Tasks.GeometryService.SimplifyAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic})">GeometryService.SimplifyAsync(IList&lt;Graphic&gt;)</see> to 
            correct orientation of vertices to ensure positive Geodesic.Area calculations. See the following visual depiction:
            </para>
            <para>
            <img border="0" alt="How the orientation of vertices in the Rings of a Polygon effect the Geodesic.Area calculations." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Geometry.Geodesic.Area1.png"/>
            </para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geodesic.Densify(ESRI.ArcGIS.Client.Geometry.Geometry,System.Double)">
            <summary>
            Densifies a <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline"/> or <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/> along the great circle using the WGS84 Ellipsoid.
            </summary>
            <param name="geom">Geometry to densify.</param>
            <param name="maxSegmentLength">Maximum segment length in meters.</param>
            <returns>Densified geometry.</returns>
            <remarks>
            <para>
            The Geodesic.Densify algorithm takes an input Geometry (Polyline or Polygon) and returns that same Geometry type
            but with more verticies that give a better approximation of the shortest distance along a sphere.
            </para>
            <para>
            The term <a href="http://en.wikipedia.org/wiki/Geodesic" target="_blank">Geodesic</a> means calculating 
            the shortest distance between two points on a sphere. Using Geodesic algorithms to calculate distances 
            provides a highly accurate way to obtain length and area of measurements of geographic features. The 
            Geodesic algorithm uses the concept of a 
            <a href="http://en.wikipedia.org/wiki/Great_circle" target="_blank">great circle</a> to obtain the 
            shortest route between two points along the Earth’s surface. The length and area measurements obtained 
            via the Geodesic functions are superior to those of the 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Euclidian">Euclidian</see> functions, as the Euclidian functions 
            are based upon a projection (i.e. a flat 2D representation of a 3D surface) which introduces distortion.  
            </para>
            <para>
            The Geodesic.Densify function is Shared/Static which means that you do not use the <b>new</b> keyword to 
            instantiate it as an object. The input parameter <b>maxSegmentLength</b> for the Geodesic.Densify Method
            is the maximum segment length in meters.
            </para>
            <para>
            The <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline">Polyline</see> and 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon">Polygon</see> Geometries that are used as parameters 
            in the Geodesic functions require that the  
            <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> be in 
            <a href="http://help.arcgis.com/en/webapi/javascript/arcgis/help/jshelp/gcs.htm" target="_blank">Geographic Coordinate System</a> 
            based upon latitude and longitude coordinates. The SpatialReference is a combination of an ellipsoid, datum, 
            and a coordinate system used to display geographic data of the three dimensional Earth on a two dimensional 
            surface (such as a piece of paper of computer monitor). A good article for describing how a spatial reference 
            works can be found 
            <a href="http://www.sharpgis.net/post/2007/05/Spatial-references2c-coordinate-systems2c-projections2c-datums2c-ellipsoids-e28093-confusing.aspx" target="_blank">here</a>. 
            If the SpatialReference of the geometries in the layer are in a 
            <a href="http://help.arcgis.com/en/webapi/javascript/arcgis/help/jshelp/pcs.htm" target="_blank">Projected Coordinate System</a> 
            then it will be required to converted those geometries into a Geographic Coordinate System via Methods 
            like: <see cref="M:ESRI.ArcGIS.Client.Projection.WebMercator.ToGeographic(ESRI.ArcGIS.Client.Geometry.Geometry)">Projection.WebMercator.ToGeographic</see> or 
            <see cref="M:ESRI.ArcGIS.Client.IProjectionService.ProjectAsync(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.SpatialReference)">IProjectionService.ProjectAsync</see>.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click on a RadioButton (Polyline or Polygon) to draw a simple Graphic generated in code-behind on the Map Control 
            (Note: the verticies that make up that Polyline or Polygon will also be added). Then click the Button add a new 
            Graphic based upon the Geometry.Geodesic.Densify Method from the input Polyline or Polygon. Notice how the shape 
            of the new Graphic is based upon the 'great circle' geodesic algorithm (Note: the verticies that make up the new 
            Geodesic Polyline or Polygon will also be added).
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Demonstrating the Geometry.Geodesic.Densify algorithm visually." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Geometry.Geodesic.Densify.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map control. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,107,0,0" Name="Map1" 
                      VerticalAlignment="Top" Height="318" Width="483"  WrapAround="True"
                        Extent="-119.35,-27.77,50.44,84.02"&gt;
              
                &lt;!--  Add a backdrop ArcGISTiledMapServiceLayer. The SpatialReference = 4326 (Geographic Coordinate System).--&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                       Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- 
              Add two RadioButtons that use the same Click Event handlers to draw a Polyline or Polygon
              Graphics on the Map control in the code-behind. Each RadioButton has a 'Tag' attribute set that 
              will be used to decide which Geometry type to draw. 
              --&gt;
              &lt;RadioButton Content="Polyline" Height="16" HorizontalAlignment="Left" Margin="12,85,0,0" Name="rbPolyline" 
                         VerticalAlignment="Top" Tag="Polyline" Click="rb_Click"/&gt;
              &lt;RadioButton Content="Polygon" Height="16" HorizontalAlignment="Left" Margin="108,85,0,0" Name="rbPolygon" 
                         VerticalAlignment="Top" Tag="Polygon" Click="rb_Click"/&gt;
              
              &lt;!-- 
              Add a button to perform a Geodesic.Densify on an existing Polyline or Polygon in the Map to create
              a 'densified' version of the same type and add it to the Map.
              --&gt;
              &lt;Button Content="Geometry.Geodesic.Densify" Height="23" HorizontalAlignment="Left" Margin="230,78,0,0" 
                      Name="Button_Geometry_GeoDesicDensify" VerticalAlignment="Top" Width="265" 
                      Click="Button_Geometry_GeoDesicDensify_Click" Visibility="Collapsed"/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="79" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="757" TextWrapping="Wrap" 
                         Text="Click on a RadioButton (Polyline or Polygon) to draw a simple Graphic generated in code-behind on the Map 
                         Control (Note: the verticies that make up that Polyline or Polygon will also be added). Then click the Button 
                         add a new Graphic based upon the Geometry.Geodesic.Densify Method from the input Polyline or Polygon. Notice
                         how the shape of the new Graphic is based upon the 'great circle' geodesic algorithm (Note: the verticies that 
                         make up the new Geodesic Polyline or Polygon will also be added)." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void rb_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Cast the sender object to a RadioButton.
              System.Windows.Controls.RadioButton theRadioButton = (System.Windows.Controls.RadioButton)sender;
              
              // Get the Tag Property (a String) of the RadioButton that was set in XAML. Possible options for the Tag
              // Property are: "Polyline" and "Polygon".
              string theGraphicType = theRadioButton.Tag.ToString();
              
              // Remove any existing GraphicsLayer objects that are in the Map. This allows the user to choose the
              // different RadioButtons over and over.
              if (Map1.Layers.Count &gt; 1)
              {
                Map1.Layers.RemoveAt(1);
              }
              
              // Create a new instance of the GraphicsLayer object.
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = new ESRI.ArcGIS.Client.GraphicsLayer();
              theGraphicsLayer.ID = "MyGraphicsLayer";
              
              // Call the function that generates a single Graphic based upon the RadioButton Tag and add it to the GraphicsLayer.
              ESRI.ArcGIS.Client.Graphic theGraphic = GetAGraphicFromStaticSource(theGraphicType);
              theGraphicsLayer.Graphics.Add(theGraphic);
              
              // Add the GraphicsLayer to the Layers collection of the Map. 
              Map1.Layers.Add(theGraphicsLayer);
              
              // Make the Button to perform the Geodesic.Densify work visible.
              Button_Geometry_GeoDesicDensify.Visibility = Windows.Visibility.Visible;
              
              // Add the verticies that make up the Graphic to the Map for easy visualization.
              AddVisualVertices(theGraphic, 
                                theGraphicsLayer, 
                                ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square, 
                                Colors.Yellow, 
                                12);
            }
              
            private void Button_Geometry_GeoDesicDensify_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Get the GraphicsLayer.
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = (ESRI.ArcGIS.Client.GraphicsLayer)(Map1.Layers["MyGraphicsLayer"]);
              
              // Create a new instance of one Graphic.
              ESRI.ArcGIS.Client.Graphic aGraphic = new ESRI.ArcGIS.Client.Graphic();
              
              // Loop through all of the Graphics in the GraphicsLayer.
              foreach (ESRI.ArcGIS.Client.Graphic theGraphic in theGraphicsLayer)
              {
                // Get the Geometry from the Graphic.
                ESRI.ArcGIS.Client.Geometry.Geometry theGeometry = theGraphic.Geometry;
                
                // Create a placeholder for the new Geometry that will be created from the Shared/static Geometry.Geodesic.Densify Method.
                ESRI.ArcGIS.Client.Geometry.Geometry theGeometry2 = null;
                
                if ((theGeometry) is ESRI.ArcGIS.Client.Geometry.Polyline)
                {
                  // For Polyline Geometries do the following:
                  
                  // Do the densification.
                  theGeometry2 = ESRI.ArcGIS.Client.Geometry.Geodesic.Densify(theGeometry, 1000000); // Examples: 10, 100, 1000, 10000, 100000
                  
                  // Create a new instance of a SimpleLineSymbol and set its Color, Style, and Width Properties.
                  ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol theSimpleLineSymbol = CreateSimpleLineSymbol(Colors.Red, 
                                                                                                           ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Solid, 
                                                                                                           2);
                  
                  // Apply the Graphic's Geometry and Symbol Properties.
                  aGraphic.Geometry = theGeometry2;
                  aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)theSimpleLineSymbol;
                }
                else if ((theGeometry) is ESRI.ArcGIS.Client.Geometry.Polygon)
                {
                  // For Polygon Geometries do the following:
                  
                  // Do the densification.
                  theGeometry2 = ESRI.ArcGIS.Client.Geometry.Geodesic.Densify(theGeometry, 1000000); // Examples: 10, 100, 1000, 10000, 100000
                  
                  // Create a new instance of a SimpleFillSymbol and set its Color, BorderBrush, BorderThickness, and Opacity Properties.
                  ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol theSimpleFillSymbol = CreateSimpleFillSymbol(Colors.Blue, Colors.Red, 2, 0.5);
                  
                  // Apply the Graphic's Geometry and Symbol Properties.
                  aGraphic.Geometry = theGeometry2;
                  aGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)theSimpleFillSymbol;
                }
              }
              
              // Add the 'densified' Graphics into the GraphicsLayer.
              theGraphicsLayer.Graphics.Add(aGraphic);
              
              // Add the verticies that make up the Graphic to the Map for easy visualization.
              AddVisualVertices(aGraphic, 
                                theGraphicsLayer, 
                                ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle, 
                                Colors.Red, 
                                6);
            }
              
            public void AddVisualVertices(ESRI.ArcGIS.Client.Graphic aGraphic, 
                                          ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer, 
                                          ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle theSimpleMarkerSytle, 
                                          System.Windows.Media.Color theColor, double theSize)
            {
              // This function displays the verticies of the Densifiy Geometry.
              
              // Create an ObservableCollection&lt;PointCollection&gt;
              Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt; theCollectonOfPointCollections = null;
              
              if (aGraphic.Geometry is ESRI.ArcGIS.Client.Geometry.Polyline)
              {
                // For Polyline Geometries do the following:
                
                // Cast the generic Geometry into a Polyline.
                ESRI.ArcGIS.Client.Geometry.Polyline theDensifiedPolyline = (ESRI.ArcGIS.Client.Geometry.Polyline)aGraphic.Geometry;
                
                // Set the ObservableCollecton&lt;PointCollection&gt; to the Polyline.Paths 
                theCollectonOfPointCollections = theDensifiedPolyline.Paths;
              }
              else if (aGraphic.Geometry is ESRI.ArcGIS.Client.Geometry.Polygon)
              {
                // For Polygon Geometries do the following:
                
                // Cast the generic Geometry into a Polygon.
                ESRI.ArcGIS.Client.Geometry.Polygon theDensifiedPolygon = (ESRI.ArcGIS.Client.Geometry.Polygon)aGraphic.Geometry;
                
                // Set the ObservableCollecton&lt;PointCollection&gt;) to the Polygon.Rings 
                theCollectonOfPointCollections = theDensifiedPolygon.Rings;
              }
              
              // We are only interested in the first PointCollection.
              ESRI.ArcGIS.Client.Geometry.PointCollection theFirstPointCollection = theCollectonOfPointCollections[0];
              
              // Loop through each MapPoint in the first PointCollection.
              foreach (ESRI.ArcGIS.Client.Geometry.MapPoint theMapPoint in theFirstPointCollection)
              {
                // Create a SimpleMarkerSymbol and set it's Color, Size, and Style.
                ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol theSimpleMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
                theSimpleMarkerSymbol.Color = new System.Windows.Media.SolidColorBrush(theColor);
                theSimpleMarkerSymbol.Size = theSize;
                theSimpleMarkerSymbol.Style = theSimpleMarkerSytle;
                
                // Create a new Graphic based upon the MapPoint's of the densified Geometry. Use the SimpleMarkerSymbol just defined.
                ESRI.ArcGIS.Client.Graphic theGraphic = new ESRI.ArcGIS.Client.Graphic();
                ESRI.ArcGIS.Client.Geometry.MapPoint densifyGeometry = new ESRI.ArcGIS.Client.Geometry.MapPoint(theMapPoint.X, theMapPoint.Y);
                theGraphic.Geometry = densifyGeometry;
                theGraphic.Symbol = theSimpleMarkerSymbol;
                
                // Add the new Graphic to the GraphicsLayer.
                theGraphicsLayer.Graphics.Add(theGraphic);
              }
            }
            
            #region Utility Functions
            
              public ESRI.ArcGIS.Client.Graphic GetAGraphicFromStaticSource(string theGraphicType)
              {
                // Create a new instance of one Graphic.
                ESRI.ArcGIS.Client.Graphic theGraphic = new ESRI.ArcGIS.Client.Graphic();
                
                // Create a SpatialReference for the Graphic using the Geographic Coordinate System of WKID=4326. 
                ESRI.ArcGIS.Client.Geometry.SpatialReference theSpatialReference = new ESRI.ArcGIS.Client.Geometry.SpatialReference(4326);
                
                // Create a new PointCollection used to add vertices to the Geometry.
                ESRI.ArcGIS.Client.Geometry.PointCollection thePointCollection = new ESRI.ArcGIS.Client.Geometry.PointCollection();
                
                // Generate a single Graphic based upon the user-specified type to be created. 
                if (theGraphicType == "Polyline")
                {
                  // Add MapPoints into the PointCollection.
                  AddMapPointsToPointCollection(14.94, 50.11, theSpatialReference, thePointCollection);
                  AddMapPointsToPointCollection(-87.82, 30.65, theSpatialReference, thePointCollection);
                  
                  // The PointCollection needs to be added to a new instance of an ObservableCollection.
                  System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt; theObservableCollection = new System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt;();
                  theObservableCollection.Add(thePointCollection);
                  
                  // Create a new instance of a Polyline object and set the Paths and SpatialReference Properties.
                  ESRI.ArcGIS.Client.Geometry.Polyline thePolyline = new ESRI.ArcGIS.Client.Geometry.Polyline();
                  thePolyline.Paths = theObservableCollection;
                  thePolyline.SpatialReference = theSpatialReference;
                  
                  // Create a new instance of a SimpleLineSymbol and set its Color, Style, and Width Properties.
                  ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol theSimpleLineSymbol = CreateSimpleLineSymbol(Colors.Yellow, 
                                                                                                           ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Solid, 
                                                                                                           2);
                  
                  // Apply the Graphic's Geometry and Symbol Properties.
                  theGraphic.Geometry = (ESRI.ArcGIS.Client.Geometry.Geometry)thePolyline;
                  theGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)theSimpleLineSymbol;
                }
                else if (theGraphicType == "Polygon")
                {
                  // Add MapPoints into the PointCollection.
                  AddMapPointsToPointCollection(23.66, 56.42, theSpatialReference, thePointCollection);
                  AddMapPointsToPointCollection(13.39, 2.95, theSpatialReference, thePointCollection);
                  AddMapPointsToPointCollection(-87.82, 38.58, theSpatialReference, thePointCollection);
                  AddMapPointsToPointCollection(23.66, 56.42, theSpatialReference, thePointCollection);
                  
                  // The PointCollection needs to be added to a new instance of an ObservableCollection.
                  System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt; theObservableCollection = new System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt;();
                  theObservableCollection.Add(thePointCollection);
                  
                  // Create a new instance of a Polygon object and set the Rings and SpatialReference Properties.
                  ESRI.ArcGIS.Client.Geometry.Polygon thePolygon = new ESRI.ArcGIS.Client.Geometry.Polygon();
                  thePolygon.Rings = theObservableCollection;
                  thePolygon.SpatialReference = theSpatialReference;
                  
                  // Create a new instance of a SimpleFillSymbol and set its Color, BorderBrush, BorderThickness, and Opacity Properties.
                  ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol theSimpleFillSymbol = CreateSimpleFillSymbol(Colors.Green, Colors.Yellow, 2, 1);
                  
                  // Apply the Graphic's Geometry and Symbol Properties.
                  theGraphic.Geometry = (ESRI.ArcGIS.Client.Geometry.Geometry)thePolygon;
                  theGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)theSimpleFillSymbol;
                }
                
                // Return the created Graphic. 
                return theGraphic;
              }
              
              public void AddMapPointsToPointCollection(double theX, 
                                                        double theY, 
                                                        ESRI.ArcGIS.Client.Geometry.SpatialReference theSpatialReference, 
                                                        ESRI.ArcGIS.Client.Geometry.PointCollection thePointCollection)
              {
                // Utility function to create and add a MapPoint to a PointCollection.
                ESRI.ArcGIS.Client.Geometry.MapPoint theMapPoint = new ESRI.ArcGIS.Client.Geometry.MapPoint(theX, theY, theSpatialReference);
                thePointCollection.Add(theMapPoint);
              }
              
              public ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol CreateSimpleFillSymbol(System.Windows.Media.Color theFillColor, 
                                                                                        System.Windows.Media.Color theBorderBrushColor, 
                                                                                        double theBorderThickness, 
                                                                                        double theOpacity)
              {
                // Utility function to create a SimpleFillSymbol with various Properties.
                ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol theSimpleFillSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
                theSimpleFillSymbol.Fill = new System.Windows.Media.SolidColorBrush(theFillColor);
                theSimpleFillSymbol.BorderBrush = new System.Windows.Media.SolidColorBrush(theBorderBrushColor);
                theSimpleFillSymbol.BorderThickness = theBorderThickness;
                theSimpleFillSymbol.Fill.Opacity = theOpacity;
                
                return (theSimpleFillSymbol);
              }
              
              public ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol CreateSimpleLineSymbol(System.Windows.Media.Color theColor, 
                                                                                        ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle theStyle, 
                                                                                        double theWidth)
              {
                // Utility function to create a SimpleLineSymbol with various Properties.
                ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol theSimpleLineSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol();
                theSimpleLineSymbol.Color = new System.Windows.Media.SolidColorBrush(theColor);
                theSimpleLineSymbol.Style = theStyle;
                theSimpleLineSymbol.Width = theWidth;
                
                return theSimpleLineSymbol;
              }
            #endregion
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub rb_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Cast the sender object to a RadioButton.
              Dim theRadioButton As System.Windows.Controls.RadioButton = CType(sender, System.Windows.Controls.RadioButton)
              
              ' Get the Tag Property (a String) of the RadioButton that was set in XAML. Possible options for the Tag
              ' Property are: "Polyline" and "Polygon".
              Dim theGraphicType As String = theRadioButton.Tag.ToString
              
              ' Remove any existing GraphicsLayer objects that are in the Map. This allows the user to choose the
              ' different RadioButtons over and over.
              If Map1.Layers.Count &gt; 1 Then
                Map1.Layers.RemoveAt(1)
              End If
              
              ' Create a new instance of the GraphicsLayer object.
              Dim theGraphicsLayer As New ESRI.ArcGIS.Client.GraphicsLayer
              theGraphicsLayer.ID = "MyGraphicsLayer"
              
              ' Call the function that generates a single Graphic based upon the RadioButton Tag and add it to the GraphicsLayer.
              Dim theGraphic As ESRI.ArcGIS.Client.Graphic = GetAGraphicFromStaticSource(theGraphicType)
              theGraphicsLayer.Graphics.Add(theGraphic)
               
              ' Add the GraphicsLayer to the Layers collection of the Map. 
              Map1.Layers.Add(theGraphicsLayer)
              
              ' Make the Button to perform the Geodesic.Densify work visible.
              Button_Geometry_GeoDesicDensify.Visibility = Windows.Visibility.Visible
              
              ' Add the verticies that make up the Graphic to the Map for easy visualization.
              AddVisualVertices(theGraphic, 
                                theGraphicsLayer, 
                                ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square, 
                                Colors.Yellow, 
                                12)
              
            End Sub
            
            Private Sub Button_Geometry_GeoDesicDensify_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs)
              
              ' Get the GraphicsLayer.
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer = CType(Map1.Layers("MyGraphicsLayer"), ESRI.ArcGIS.Client.GraphicsLayer)
              
              ' Create a new instance of one Graphic.
              Dim aGraphic As New ESRI.ArcGIS.Client.Graphic
              
              ' Loop through all of the Graphics in the GraphicsLayer.
              For Each theGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicsLayer
                
                ' Get the Geometry from the Graphic.
                Dim theGeometry As ESRI.ArcGIS.Client.Geometry.Geometry = theGraphic.Geometry
                
                ' Create a placeholder for the new Geometry that will be created from the Shared/static Geometry.Geodesic.Densify Method.
                Dim theGeometry2 As ESRI.ArcGIS.Client.Geometry.Geometry
                
                If TypeOf (theGeometry) Is ESRI.ArcGIS.Client.Geometry.Polyline Then
                  
                  ' For Polyline Geometries do the following:
                    
                  ' Do the densification.
                  theGeometry2 = ESRI.ArcGIS.Client.Geometry.Geodesic.Densify(theGeometry, 1000000) ' Examples: 10, 100, 1000, 10000, 100000
                    
                  ' Create a new instance of a SimpleLineSymbol and set its Color, Style, and Width Properties.
                  Dim theSimpleLineSymbol As ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol = CreateSimpleLineSymbol(Colors.Red, 
                                                                                                                  ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Solid, 
                                                                                                                  2)
                  
                  ' Apply the Graphic's Geometry and Symbol Properties.
                  aGraphic.Geometry = theGeometry2
                  aGraphic.Symbol = CType(theSimpleLineSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                  
                ElseIf TypeOf (theGeometry) Is ESRI.ArcGIS.Client.Geometry.Polygon Then
                  
                  ' For Polygon Geometries do the following:
                  
                  ' Do the densification.
                  theGeometry2 = ESRI.ArcGIS.Client.Geometry.Geodesic.Densify(theGeometry, 1000000) ' Examples: 10, 100, 1000, 10000, 100000
                  
                  ' Create a new instance of a SimpleFillSymbol and set its Color, BorderBrush, BorderThickness, and Opacity Properties.
                  Dim theSimpleFillSymbol As ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol = CreateSimpleFillSymbol(Colors.Blue, 
                                                                                                                  Colors.Red, 
                                                                                                                  2, 
                                                                                                                  0.5)
                    
                  ' Apply the Graphic's Geometry and Symbol Properties.
                  aGraphic.Geometry = theGeometry2
                  aGraphic.Symbol = CType(theSimpleFillSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                  
                End If
                
              Next
              
              ' Add the 'densified' Graphics into the GraphicsLayer.
              theGraphicsLayer.Graphics.Add(aGraphic)
              
              ' Add the verticies that make up the Graphic to the Map for easy visualization.
              AddVisualVertices(aGraphic, 
                                theGraphicsLayer, 
                                ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle, 
                                Colors.Red, 
                                6)
              
            End Sub
            
            Public Sub AddVisualVertices(aGraphic As ESRI.ArcGIS.Client.Graphic, 
                                         theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer, 
                                         theSimpleMarkerSytle As ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle, 
                                         theColor As System.Windows.Media.Color, 
                                         theSize As Double)
              
              ' This function displays the verticies of the Densifiy Geometry.
                
              ' Create an ObservableCollection(Of PointCollection)
              Dim theCollectonOfPointCollections As Collections.ObjectModel.ObservableCollection(Of ESRI.ArcGIS.Client.Geometry.PointCollection) = Nothing
              
              If TypeOf aGraphic.Geometry Is ESRI.ArcGIS.Client.Geometry.Polyline Then
                
                ' For Polyline Geometries do the following:
                
                ' Cast the generic Geometry into a Polyline.
                Dim theDensifiedPolyline As ESRI.ArcGIS.Client.Geometry.Polyline = CType(aGraphic.Geometry, ESRI.ArcGIS.Client.Geometry.Polyline)
                
                ' Set the ObservableCollecton(Of PointCollection) to the Polyline.Paths 
                theCollectonOfPointCollections = theDensifiedPolyline.Paths
                
              ElseIf TypeOf aGraphic.Geometry Is ESRI.ArcGIS.Client.Geometry.Polygon Then
                
                ' For Polygon Geometries do the following:
                
                ' Cast the generic Geometry into a Polygon.
                Dim theDensifiedPolygon As ESRI.ArcGIS.Client.Geometry.Polygon = CType(aGraphic.Geometry, ESRI.ArcGIS.Client.Geometry.Polygon)
                
                ' Set the ObservableCollecton(Of PointCollection) to the Polygon.Rings 
                theCollectonOfPointCollections = theDensifiedPolygon.Rings
                
              End If
              
              ' We are only interested in the first PointCollection.
              Dim theFirstPointCollection As ESRI.ArcGIS.Client.Geometry.PointCollection = theCollectonOfPointCollections.Item(0)
              
              ' Loop through each MapPoint in the first PointCollection.
              For Each theMapPoint As ESRI.ArcGIS.Client.Geometry.MapPoint In theFirstPointCollection
              
                ' Create a SimpleMarkerSymbol and set it's Color, Size, and Style.
                Dim theSimpleMarkerSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
                theSimpleMarkerSymbol.Color = New System.Windows.Media.SolidColorBrush(theColor)
                theSimpleMarkerSymbol.Size = theSize
                theSimpleMarkerSymbol.Style = theSimpleMarkerSytle
                
                ' Create a new Graphic based upon the MapPoint's of the densified Geometry. Use the SimpleMarkerSymbol just defined.
                Dim theGraphic As New ESRI.ArcGIS.Client.Graphic
                Dim densifyGeometry As New ESRI.ArcGIS.Client.Geometry.MapPoint(theMapPoint.X, theMapPoint.Y)
                theGraphic.Geometry = densifyGeometry
                theGraphic.Symbol = theSimpleMarkerSymbol
                
                ' Add the new Graphic to the GraphicsLayer.
                theGraphicsLayer.Graphics.Add(theGraphic)
                
              Next
              
            End Sub
            
            #Region "Utility Functions"
            
              Public Function GetAGraphicFromStaticSource(ByVal theGraphicType As String) As ESRI.ArcGIS.Client.Graphic
            
                ' Create a new instance of one Graphic.
                Dim theGraphic As New ESRI.ArcGIS.Client.Graphic
                
                ' Create a SpatialReference for the Graphic using the Geographic Coordinate System of WKID=4326. 
                Dim theSpatialReference As New ESRI.ArcGIS.Client.Geometry.SpatialReference(4326)
                
                ' Create a new PointCollection used to add vertices to the Geometry.
                Dim thePointCollection As New ESRI.ArcGIS.Client.Geometry.PointCollection
                
                ' Generate a single Graphic based upon the user-specified type to be created. 
                If theGraphicType = "Polyline" Then
                  
                  ' Add MapPoints into the PointCollection.
                  AddMapPointsToPointCollection(14.94, 50.11, theSpatialReference, thePointCollection)
                  AddMapPointsToPointCollection(-87.82, 30.65, theSpatialReference, thePointCollection)
                  
                  ' The PointCollection needs to be added to a new instance of an ObservableCollection.
                  Dim theObservableCollection As New System.Collections.ObjectModel.ObservableCollection(Of ESRI.ArcGIS.Client.Geometry.PointCollection)
                  theObservableCollection.Add(thePointCollection)
                  
                  ' Create a new instance of a Polyline object and set the Paths and SpatialReference Properties.
                  Dim thePolyline As New ESRI.ArcGIS.Client.Geometry.Polyline
                  thePolyline.Paths = theObservableCollection
                  thePolyline.SpatialReference = theSpatialReference
                  
                  ' Create a new instance of a SimpleLineSymbol and set its Color, Style, and Width Properties.
                  Dim theSimpleLineSymbol As ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol = CreateSimpleLineSymbol(Colors.Yellow, 
                                                                                                                  ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Solid, 
                                                                                                                  2)
                  
                  ' Apply the Graphic's Geometry and Symbol Properties.
                  theGraphic.Geometry = CType(thePolyline, ESRI.ArcGIS.Client.Geometry.Geometry)
                  theGraphic.Symbol = CType(theSimpleLineSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                  
                ElseIf theGraphicType = "Polygon" Then
                  
                  ' Add MapPoints into the PointCollection.
                  AddMapPointsToPointCollection(23.66, 56.42, theSpatialReference, thePointCollection)
                  AddMapPointsToPointCollection(13.39, 2.95, theSpatialReference, thePointCollection)
                  AddMapPointsToPointCollection(-87.82, 38.58, theSpatialReference, thePointCollection)
                  AddMapPointsToPointCollection(23.66, 56.42, theSpatialReference, thePointCollection)
                  
                  ' The PointCollection needs to be added to a new instance of an ObservableCollection.
                  Dim theObservableCollection As New System.Collections.ObjectModel.ObservableCollection(Of ESRI.ArcGIS.Client.Geometry.PointCollection)
                  theObservableCollection.Add(thePointCollection)
                  
                  ' Create a new instance of a Polygon object and set the Rings and SpatialReference Properties.
                  Dim thePolygon As New ESRI.ArcGIS.Client.Geometry.Polygon
                  thePolygon.Rings = theObservableCollection
                  thePolygon.SpatialReference = theSpatialReference
                  
                  ' Create a new instance of a SimpleFillSymbol and set its Color, BorderBrush, BorderThickness, and Opacity Properties.
                  Dim theSimpleFillSymbol As ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol = CreateSimpleFillSymbol(Colors.Green, 
                                                                                                                  Colors.Yellow, 
                                                                                                                  2, 
                                                                                                                  1)
                  
                  ' Apply the Graphic's Geometry and Symbol Properties.
                  theGraphic.Geometry = CType(thePolygon, ESRI.ArcGIS.Client.Geometry.Geometry)
                  theGraphic.Symbol = CType(theSimpleFillSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                  
                End If
                  
                ' Return the created Graphic. 
                Return theGraphic
                
              End Function
              
              Public Sub AddMapPointsToPointCollection(theX As Double,
                                                       theY As Double,
                                                       theSpatialReference As ESRI.ArcGIS.Client.Geometry.SpatialReference,
                                                       thePointCollection As ESRI.ArcGIS.Client.Geometry.PointCollection)
                
                ' Utility function to create and add a MapPoint to a PointCollection.
                Dim theMapPoint As New ESRI.ArcGIS.Client.Geometry.MapPoint(theX, theY, theSpatialReference)
                thePointCollection.Add(theMapPoint)
                
              End Sub
              
              Public Function CreateSimpleFillSymbol(theFillColor As System.Windows.Media.Color,
                                                     theBorderBrushColor As System.Windows.Media.Color,
                                                     theBorderThickness As Double,
                                                     theOpacity As Double) As ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
                
                ' Utility function to create a SimpleFillSymbol with various Properties.
                Dim theSimpleFillSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
                theSimpleFillSymbol.Fill = New System.Windows.Media.SolidColorBrush(theFillColor)
                theSimpleFillSymbol.BorderBrush = New System.Windows.Media.SolidColorBrush(theBorderBrushColor)
                theSimpleFillSymbol.BorderThickness = theBorderThickness
                theSimpleFillSymbol.Fill.Opacity = theOpacity
                
                Return (theSimpleFillSymbol)
                
              End Function
              
              Public Function CreateSimpleLineSymbol(theColor As System.Windows.Media.Color,
                                                     theStyle As ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle,
                                                     theWidth As Double) As ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol
                
                ' Utility function to create a SimpleLineSymbol with various Properties.
                Dim theSimpleLineSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol
                theSimpleLineSymbol.Color = New System.Windows.Media.SolidColorBrush(theColor)
                theSimpleLineSymbol.Style = theStyle
                theSimpleLineSymbol.Width = theWidth
                
                Return theSimpleLineSymbol
                
              End Function
              
            #End Region
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geodesic.Length(ESRI.ArcGIS.Client.Geometry.Polygon)">
            <summary>
            Calculates the Geodesic length of the perimeter of a polygon in meters using WGS84-ellipsoid great circles 
            between each vertex.
            </summary>
            <param name="polygon">The polygon to calculate the length for.</param>
            <returns>Length in meters</returns>
            <remarks>
            <para>
            The term <a href="http://en.wikipedia.org/wiki/Geodesic" target="_blank">Geodesic</a> means calculating 
            the shortest distance between two points on a sphere. Using Geodesic algorithms to calculate distances 
            provides a highly accurate way to obtain length and area of measurements of geographic features. The 
            Geodesic algorithm uses the concept of a 
            <a href="http://en.wikipedia.org/wiki/Great_circle" target="_blank">great circle</a> to obtain the 
            shortest route between two points along the Earth’s surface. The length and area measurements obtained 
            via the Geodesic functions are superior to those of the 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Euclidian">Euclidian</see> functions, as the Euclidian functions 
            are based upon a projection (i.e. a flat 2D representation of a 3D surface) which introduces distortion.  
            </para>
            <para>
            The Geodesic.Length(Polygon) function is Shared/Static which means that you do not use the <b>new</b> 
            keyword to instantiate it as an object. The output return value from the Geodesic.Length(Polygon) Method
            is length in meters.
            </para>
            <para>
            The <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline">Polyline</see> and 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon">Polygon</see> Geometries that are used as parameters 
            in the Geodesic functions require that the  
            <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> be in 
            <a href="http://help.arcgis.com/en/webapi/javascript/arcgis/help/jshelp/gcs.htm" target="_blank">Geographic Coordinate System</a> 
            based upon latitude and longitude coordinates. The SpatialReference is a combination of an ellipsoid, datum, 
            and a coordinate system used to display geographic data of the three dimensional Earth on a two dimensional 
            surface (such as a piece of paper of computer monitor). A good article for describing how a spatial reference 
            works can be found 
            <a href="http://www.sharpgis.net/post/2007/05/Spatial-references2c-coordinate-systems2c-projections2c-datums2c-ellipsoids-e28093-confusing.aspx" target="_blank">here</a>. 
            If the SpatialReference of the geometries in the layer are in a 
            <a href="http://help.arcgis.com/en/webapi/javascript/arcgis/help/jshelp/pcs.htm" target="_blank">Projected Coordinate System</a> 
            then it will be required to converted those geometries into a Geographic Coordinate System via Methods 
            like: <see cref="M:ESRI.ArcGIS.Client.Projection.WebMercator.ToGeographic(ESRI.ArcGIS.Client.Geometry.Geometry)">Projection.WebMercator.ToGeographic</see> or 
            <see cref="M:ESRI.ArcGIS.Client.IProjectionService.ProjectAsync(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.SpatialReference)">IProjectionService.ProjectAsync</see>.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click on the Button to calcuate the Geodesic.Length of the perimiter of the state of Alaska. The FeatureLayer 
            that has the Polygon geometries are in the SpatialReference.WKID = 102100 (3857) which is a Projected 
            Coordinate System. This means that in order to calculate the perimeter Length accurately using the 
            Geodesic.Length Shared/static Method, it is required to first convert the Polygon Geometry of Alaska into 
            SpatialReference.WKID = 4326 in the Geographic Coordinate System.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Calculating the perimeter Geodesic.Length of the Polgon feature for the state of Alaksa. Before the area calculation can occur, first the feature must be converted from WKID=102100 to WKID=4326." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Geometry.Geodesic.Length.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
            
              &lt;!-- Add a Map control. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,107,0,0" Name="Map1" 
                      VerticalAlignment="Top" Height="318" Width="483"  WrapAround="True"
                        Extent="-22198191,5927190,-11909781,12700926"&gt;
                  
                &lt;!-- Add a background ArcGISTiledImageServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="BaseMap" 
                             Url="http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer" /&gt;
            
                &lt;!-- 
                Add a FeatureLayer of the United States polygons. Set a Where clause to only return the state of Alaska. The 
                SpatialReference.WKID = 102100 (3857) which is a Projected Coordinate System. This means that in order to calculate 
                the perimeter Length accurately using the Geodesic.Length Shared/static Method, it is required to first convert the
                Polygon Geometry of Alaska into SpatialReference.WKID = 4326 in the Geographic Coordinate System.
                --&gt;
                &lt;esri:FeatureLayer ID="USStates" Where="ST_ABBREV = 'AK'" OutFields="*"
                      Url="http://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_1990-2000_Population_Change/MapServer/4"/&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!-- Add a button to calculate the Geodesic.Length--&gt;
              &lt;sdk:Label Height="17" HorizontalAlignment="Left" Margin="258,82,0,0" Name="Label_Length" 
                         VerticalAlignment="Top" Width="99" Content="Length (meters): "/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="355,82,0,0" Name="TextBox_Length" 
                       VerticalAlignment="Top" Width="140" /&gt;
              &lt;Button Content="Get the Geodesic.Length" Height="23" HorizontalAlignment="Left" Margin="12,82,0,0" 
                      Name="Button1" VerticalAlignment="Top" Width="222" Click="Button1_Click"/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="67" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="670" 
                       TextWrapping="Wrap" Margin="2,9,0,0" 
                       Text="Click on the Button to calcuate the Geodesic.Length of the perimiter of the state of Alaska.
                       The FeatureLayer that has the Polygon geometries are in the SpatialReference.WKID = 102100 (3857) 
                       which is a Projected Coordinate System. This means that in order to calculate the perimeter Length 
                       accurately using the Geodesic.Length Shared/static Method, it is required to first convert the 
                       Polygon Geometry of Alaska into SpatialReference.WKID = 4326 in the Geographic Coordinate System." /&gt;
            
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Get the FeatureLayer that was defined in XAML. All of the features in the FeatureLayer are based upon
              // the SpatialReference.WKID = 102100 (3857) Projected Coordinate System.
              ESRI.ArcGIS.Client.FeatureLayer theFeatureLayer = (ESRI.ArcGIS.Client.FeatureLayer)(Map1.Layers["USStates"]);
              
              // Get the GraphicCollection from the FeatureLayer.
              ESRI.ArcGIS.Client.GraphicCollection theGraphicCollection = theFeatureLayer.Graphics;
              
              // Loop through all of the Graphics. We should only have one, Alaksa, since there was a restrictive
              // Where clause placed on the FeatureLayer defined in XAML.
              foreach (ESRI.ArcGIS.Client.Graphic aGraphic in theGraphicCollection)
              {
                // Get the Geometry of the Graphic. 
                ESRI.ArcGIS.Client.Geometry.Geometry theGeometry = aGraphic.Geometry;
                
                // Define a new WebMercator utility object.
                ESRI.ArcGIS.Client.Projection.WebMercator myWebMercator = new ESRI.ArcGIS.Client.Projection.WebMercator();
                
                // Define a new Geometry object that will have the SpatialReference.WKID = 4326 Geographic Coordinate System. 
                // The new Geometry object is obtained using the WebMercator.ToGeographic utility helper Method.
                ESRI.ArcGIS.Client.Geometry.Geometry WGS84GeographicGeometry = myWebMercator.ToGeographic(theGeometry);
                
                // Only process Polygon type of geometries.
                if (WGS84GeographicGeometry is ESRI.ArcGIS.Client.Geometry.Polygon)
                {
                  // Cast the generic Geometry to the specific Polygon type.
                  ESRI.ArcGIS.Client.Geometry.Polygon thePolygon = (ESRI.ArcGIS.Client.Geometry.Polygon)WGS84GeographicGeometry;
                  
                  // Obtain the Geodesic.Length from the Polygon.
                  double theLength = ESRI.ArcGIS.Client.Geometry.Geodesic.Length(thePolygon);
                 
                  // Display the results to the user.
                  TextBox_Length.Text = theLength.ToString();
                }
              }
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' Get the FeatureLayer that was defined in XAML. All of the features in the FeatureLayer are based upon
              ' the SpatialReference.WKID = 102100 (3857) Projected Coordinate System.
              Dim theFeatureLayer As ESRI.ArcGIS.Client.FeatureLayer = CType(Map1.Layers("USStates"), ESRI.ArcGIS.Client.FeatureLayer)
              
              ' Get the GraphicCollection from the FeatureLayer.
              Dim theGraphicCollection As ESRI.ArcGIS.Client.GraphicCollection = theFeatureLayer.Graphics
              
              ' Loop through all of the Graphics. We should only have one, Alaksa, since there was a restrictive
              ' Where clause placed on the FeatureLayer defined in XAML.
              For Each aGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicCollection
                
                ' Get the Geometry of the Graphic. 
                Dim theGeometry As ESRI.ArcGIS.Client.Geometry.Geometry = aGraphic.Geometry
                
                ' Define a new WebMercator utility object.
                Dim myWebMercator As New ESRI.ArcGIS.Client.Projection.WebMercator
                
                ' Define a new Geometry object that will have the SpatialReference.WKID = 4326 Geographic Coordinate System. 
                ' The new Geometry object is obtained using the WebMercator.ToGeographic utility helper Method.
                Dim WGS84GeographicGeometry As ESRI.ArcGIS.Client.Geometry.Geometry = myWebMercator.ToGeographic(theGeometry)
                
                ' Only process Polygon type of geometries.
                If TypeOf WGS84GeographicGeometry Is ESRI.ArcGIS.Client.Geometry.Polygon Then
                  
                  ' Cast the generic Geometry to the specific Polygon type.
                  Dim thePolygon As ESRI.ArcGIS.Client.Geometry.Polygon = CType(WGS84GeographicGeometry, ESRI.ArcGIS.Client.Geometry.Polygon)
                  
                  ' Obtain the Geodesic.Length from the Polygon.
                  Dim theLength As Double = ESRI.ArcGIS.Client.Geometry.Geodesic.Length(thePolygon)
                  
                  ' Display the results to the user.
                  TextBox_Length.Text = theLength.ToString
                  
                End If
                
              Next
              
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geodesic.Length(ESRI.ArcGIS.Client.Geometry.Polyline)">
            <summary>
            Calculates the length of a polyline using WGS84-ellipsoid great circles between each vertex.
            </summary>
            <param name="polyline">The polyline to calculate the length for.</param>
            <returns>Length in meters</returns>
            <remarks>
            <para>
            The term <a href="http://en.wikipedia.org/wiki/Geodesic" target="_blank">Geodesic</a> means calculating 
            the shortest distance between two points on a sphere. Using Geodesic algorithms to calculate distances 
            provides a highly accurate way to obtain length and area of measurements of geographic features. The 
            Geodesic algorithm uses the concept of a 
            <a href="http://en.wikipedia.org/wiki/Great_circle" target="_blank">great circle</a> to obtain the 
            shortest route between two points along the Earth’s surface. The length and area measurements obtained 
            via the Geodesic functions are superior to those of the 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Euclidian">Euclidian</see> functions, as the Euclidian functions 
            are based upon a projection (i.e. a flat 2D representation of a 3D surface) which introduces distortion.  
            </para>
            <para>
            The Geodesic.Length(Polyline) function is Shared/Static which means that you do not use the <b>new</b> 
            keyword to instantiate it as an object. The output return value from the Geodesic.Length(Polyline) Method
            is length in meters.
            </para>
            <para>
            The <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline">Polyline</see> and 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon">Polygon</see> Geometries that are used as parameters 
            in the Geodesic functions require that the  
            <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> be in 
            <a href="http://help.arcgis.com/en/webapi/javascript/arcgis/help/jshelp/gcs.htm" target="_blank">Geographic Coordinate System</a> 
            based upon latitude and longitude coordinates. The SpatialReference is a combination of an ellipsoid, datum, 
            and a coordinate system used to display geographic data of the three dimensional Earth on a two dimensional 
            surface (such as a piece of paper of computer monitor). A good article for describing how a spatial reference 
            works can be found 
            <a href="http://www.sharpgis.net/post/2007/05/Spatial-references2c-coordinate-systems2c-projections2c-datums2c-ellipsoids-e28093-confusing.aspx" target="_blank">here</a>. 
            If the SpatialReference of the geometries in the layer are in a 
            <a href="http://help.arcgis.com/en/webapi/javascript/arcgis/help/jshelp/pcs.htm" target="_blank">Projected Coordinate System</a> 
            then it will be required to converted those geometries into a Geographic Coordinate System via Methods 
            like: <see cref="M:ESRI.ArcGIS.Client.Projection.WebMercator.ToGeographic(ESRI.ArcGIS.Client.Geometry.Geometry)">Projection.WebMercator.ToGeographic</see> or 
            <see cref="M:ESRI.ArcGIS.Client.IProjectionService.ProjectAsync(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.SpatialReference)">IProjectionService.ProjectAsync</see>.
            </para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geodesic.Area(ESRI.ArcGIS.Client.Geometry.Polygon,System.Double)">
            <summary>
            Calculates the area of a polygon using WGS84-ellipsoid great circles between each vertex.
            </summary>
            <param name="polygon">The polygon to calculate area for.</param>
            <param name="maxSegmentLength">Maximum length of the segments in meters 
            when performing the area calculation (default: 10000 meters).</param>
            <returns>Area in square-meters.</returns>
            <remarks>
            <para>
            The term <a href="http://en.wikipedia.org/wiki/Geodesic" target="_blank">Geodesic</a> means calculating 
            the shortest distance between two points on a sphere. Using Geodesic algorithms to calculate distances 
            provides a highly accurate way to obtain length and area of measurements of geographic features. The 
            Geodesic algorithm uses the concept of a 
            <a href="http://en.wikipedia.org/wiki/Great_circle" target="_blank">great circle</a> to obtain the 
            shortest route between two points along the Earth’s surface. The length and area measurements obtained 
            via the Geodesic functions are superior to those of the 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Euclidian">Euclidian</see> functions, as the Euclidian functions 
            are based upon a projection (i.e. a flat 2D representation of a 3D surface) which introduces distortion.  
            </para>
            <para>
            The Geodesic.Area is a Shared/Static function which means that you do not use the <b>new</b> keyword to 
            instantiate it. The input optional parameter <b>maxSegmentLength</b> for the Geodesic.Area Method is the 
            maximum length of segments in meters when performing the area calculation; the default value is 10000
            meters.
            </para>
            <para>
            The <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline">Polyline</see> and 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon">Polygon</see> Geometries that are used as parameters 
            in the Geodesic functions require that the  
            <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">SpatialReference</see> be in 
            <a href="http://help.arcgis.com/en/webapi/javascript/arcgis/help/jshelp/gcs.htm" target="_blank">Geographic Coordinate System</a> 
            based upon latitude and longitude coordinates. The SpatialReference is a combination of an ellipsoid, datum, 
            and a coordinate system used to display geographic data of the three dimensional Earth on a two dimensional 
            surface (such as a piece of paper of computer monitor). A good article for describing how a spatial reference 
            works can be found 
            <a href="http://www.sharpgis.net/post/2007/05/Spatial-references2c-coordinate-systems2c-projections2c-datums2c-ellipsoids-e28093-confusing.aspx" target="_blank">here</a>. 
            If the SpatialReference of the geometries in the layer are in a 
            <a href="http://help.arcgis.com/en/webapi/javascript/arcgis/help/jshelp/pcs.htm" target="_blank">Projected Coordinate System</a> 
            then it will be required to converted those geometries into a Geographic Coordinate System via Methods 
            like: <see cref="M:ESRI.ArcGIS.Client.Projection.WebMercator.ToGeographic(ESRI.ArcGIS.Client.Geometry.Geometry)">Projection.WebMercator.ToGeographic</see> or 
            <see cref="M:ESRI.ArcGIS.Client.IProjectionService.ProjectAsync(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.SpatialReference)">IProjectionService.ProjectAsync</see>.
            </para>
            <para>
            When using the <see cref="M:ESRI.ArcGIS.Client.Geometry.Geodesic.Area(ESRI.ArcGIS.Client.Geometry.Polygon,System.Double)">Geodesic. Area</see> Method, in order 
            to obtain positive area values, the vertices that make up the 
            <see cref="P:ESRI.ArcGIS.Client.Geometry.Polygon.Rings">Rings</see> of the 
            <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon">Polygon</see> need to be oriented in a 
            clock-wise fashion. If the vertices that make up the Rings of the Polygon are in a counter-clock-wise 
            fashion the Geodesic.Area that is calculated will be negative. Use 
            <see cref="M:ESRI.ArcGIS.Client.Tasks.GeometryService.SimplifyAsync(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic})">GeometryService.SimplifyAsync(IList&lt;Graphic&gt;)</see> to 
            correct orientation of vertices to ensure positive Geodesic.Area calculations. See the following visual depiction:
            </para>
            <para>
            <img border="0" alt="How the orientation of vertices in the Rings of a Polygon effect the Geodesic.Area calculations." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Geometry.Geodesic.Area1.png"/>
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            Click the button to change the orientation of the vertices in the Ring of the Polygon from counter-clock-wise to 
            clock-wise. Then the Geodesic.Area calculation will return a positive number.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Deomonstrating how the orientation of the vertices in the Rings of Polygons can affect the results of Geodesic.Area calucations." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Geometry.Geodesic.Area.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
                
              &lt;!-- Define some Resources that can be used in other parts of the XAML file. --&gt;
              &lt;Grid.Resources&gt;
                
                &lt;!-- Define a SimpleFillSymbol to use as the initial display of the Polygon Graphic on the Map. --&gt;
                &lt;esri:SimpleFillSymbol x:Key="RedFillSymbol" BorderBrush="Black" BorderThickness="2" Fill="Red"/&gt;
                
                &lt;!-- Define a SimpleFillSymbol to use as the display of the Polygon Graphic on the Map after the user clicks the Button. --&gt;
                &lt;esri:SimpleFillSymbol x:Key="GreenFillSymbol" BorderBrush="Black" BorderThickness="2" Fill="Green"/&gt;
                
                &lt;!-- 
                Define a SpatialReference object that has the same WKID as the ArcGISTiledMapServiceLayer in
                the Map. This will allow for the Graphics in the GraphicsLayer to line up properly. 
                --&gt;
                &lt;esri:SpatialReference x:Key="theSpatialReference" WKID="4326"/&gt;
                
              &lt;/Grid.Resources&gt;
                
              &lt;!-- Add a Map control with an ArcGISTiledMapServiceLayer. --&gt;
              &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,107,0,0" Name="Map1" 
                      VerticalAlignment="Top" Height="318" Width="483"  WrapAround="True"
                        Extent="-58.53,-38.95,69.42,45.28"&gt;
              
                &lt;!--  Add a backdrop ArcGISTiledMapServiceLayer. The SpatialReference = 4326 (Geographic Coordinate System). --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="PhysicalTiledLayer" 
                       Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
              
                &lt;!-- 
                Add a GraphicsLayer with a single Polygon. It is important to provide the GraphicsLayer with an 'ID' 
                Attribute so to be able to access it in the code-behind file. 
                --&gt;
                &lt;esri:GraphicsLayer ID="MyGraphicsLayer"  Initialized="GraphicsLayer_Initialized"&gt;
                 
                  &lt;!--Add the Graphics to the GraphicsLayer. --&gt;
                  &lt;esri:GraphicsLayer.Graphics&gt;
                    
                    &lt;!-- 
                    Define a Polygon using the StaticResources for the Symbol and SpatialReference. The Geometry.Geodesic 
                    Shared/static Methods that will be used when clicking the Button should work on Graphic features based 
                    upon the Geographic Coordinate System (using Latitude/Longitude units).
                    --&gt;
                    &lt;esri:Graphic Symbol="{StaticResource RedFillSymbol}"&gt;
                      &lt;esri:Polygon SpatialReference="{StaticResource theSpatialReference}"&gt;
                        &lt;esri:Polygon.Rings&gt;
                          &lt;esri:PointCollection&gt;
                            &lt;esri:MapPoint X="15" Y="17" /&gt;
                            &lt;esri:MapPoint X="-18" Y="18" /&gt;
                            &lt;esri:MapPoint X="-40" Y="8" /&gt;
                            &lt;esri:MapPoint X="10" Y="-8" /&gt;
                            &lt;esri:MapPoint X="50" Y="5" /&gt;
                            &lt;esri:MapPoint X="15" Y="17" /&gt;
                          &lt;/esri:PointCollection&gt;
                        &lt;/esri:Polygon.Rings&gt;
                      &lt;/esri:Polygon&gt;
                    &lt;/esri:Graphic&gt;
              
                  &lt;/esri:GraphicsLayer.Graphics&gt;
                 &lt;/esri:GraphicsLayer&gt;
                
              &lt;/esri:Map&gt;
              
              &lt;!--Perform Geodesic.Areas calculations on the Polygon Graphic after it's Ring orientation has been corrected. --&gt;
              &lt;sdk:Label Height="17" HorizontalAlignment="Left" Margin="229,85,0,0" Name="Label_Areas" 
                         VerticalAlignment="Top" Width="131" Content="Area (Square Meters): "/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="355,82,0,0" Name="TextBox_Areas" 
                       VerticalAlignment="Top" Width="140" /&gt;
              &lt;Button Content="Change ring verticies to clockwise" Height="23" HorizontalAlignment="Left" Margin="12,82,0,0" 
                      Name="Button1" VerticalAlignment="Top" Width="198" Click="Button1_Click"/&gt;
                
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="57" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="493" 
                       TextWrapping="Wrap" Margin="2,9,0,0" 
                       Text="Click the button to change the orientation of the vertices in the Ring of the Polygon from
                         counter-clock-wise to clock-wise. Then the Geodesic.Area calculation will return a positive
                         number." /&gt;
                
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void GraphicsLayer_Initialized(object sender, System.EventArgs e)
            {
              // Once the GraphcsLayer has initialized call two different functions. One to perform the Geodesic.Area calculation
              // (via the DisplayArea function). The second to display the vertices of the Rings of the Polygon Graphic with a
              // TextSymbol so users can see the orientation of how the Polygon was constructed (via the 
              // DisplayPolygonVerticiesAsTextSymbol function). 
              DisplayArea();
              DisplayPolygonVerticesAsTextSymbol();
            }
              
            public void DisplayArea()
            {
              // Get the GraphicsLayer that was defined in XAML. It contain a single Polygon Graphic.
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = (ESRI.ArcGIS.Client.GraphicsLayer)(Map1.Layers["MyGraphicsLayer"]);
              
              // Loop through the Graphics in the GraphicsLayer (there should only be one Polygon graphic).
              foreach (ESRI.ArcGIS.Client.Graphic theGraphic in theGraphicsLayer)
              {
                // Get the Geometry of the Graphic.
                ESRI.ArcGIS.Client.Geometry.Geometry theGeometry = theGraphic.Geometry;
                
                // Define a variable to hold the Geodesic.Area calculation.
                double theArea = 0;
                
                // Only process Polygon Graphics.
                if ((theGeometry) is ESRI.ArcGIS.Client.Geometry.Polygon)
                {
                  // Cast the generic Geometry of the Graphic to a Polygon.
                  ESRI.ArcGIS.Client.Geometry.Polygon thePolygon = (ESRI.ArcGIS.Client.Geometry.Polygon)theGeometry;
                  
                  // Calculate the Geodesic.Area of the Polygon.
                  theArea = ESRI.ArcGIS.Client.Geometry.Geodesic.Area(thePolygon, 100);
                }
                
                // Display the Geodesic.Area to the user.
                TextBox_Areas.Text = theArea.ToString();
              }
            }
              
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Define a new GeometryService that will re-orient the Rings of the Polygon Graphic to be clock-wise.
              ESRI.ArcGIS.Client.Tasks.GeometryService geometryService = new ESRI.ArcGIS.Client.Tasks.GeometryService("http://tasks.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer");
              
              // Add an EventHandler to process when the GeometryService is complete.
              geometryService.SimplifyCompleted += GeometryService_SimplifyCompleted;
              
              // Add an EvenHandler in case there is a problem with the GeometryService.
              geometryService.Failed += GeometryService_Failed;
              
              // Get the GraphicsLayer that was created in XAML with the Polygon Graphic.
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = (ESRI.ArcGIS.Client.GraphicsLayer)(Map1.Layers["MyGraphicsLayer"]);
              
              // Create a new List&lt;Graphic&gt; object. This is needed as an input for the GeometryService.SimplifyAsync Method.
              List&lt;ESRI.ArcGIS.Client.Graphic&gt; graphicList = new List&lt;ESRI.ArcGIS.Client.Graphic&gt;();
              
              // Loop through each Graphic in the GraphicsLayer.
              foreach (ESRI.ArcGIS.Client.Graphic theGraphic in theGraphicsLayer)
              {
                // If we have a Polygon Graphic do more processing.
                if ((theGraphic.Geometry) is ESRI.ArcGIS.Client.Geometry.Polygon)
                {
                  // Add the Polygon Graphic into the GraphicList.
                  graphicList.Add(theGraphic);
                }
              }
              
              // Call the Asynchronous GeometryService.SimplifyAsync Method.
              geometryService.SimplifyAsync(graphicList);
            }
              
            private void GeometryService_SimplifyCompleted(object sender, ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs args)
            {
              // The GeometryService.SimplifyAsync Method has completed! 
              
              // Get the GraphicsLayer defined in XAML. At this point there will be several Graphics because some additonal
              // MapPoint's were added using TextSymbols to show the order of vertices used to make up the Rings of the
              // Polygon Graphic.
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = (ESRI.ArcGIS.Client.GraphicsLayer)(Map1.Layers["MyGraphicsLayer"]);
              
              // Clear out all the Graphics in the GraphicsLayer.
              theGraphicsLayer.ClearGraphics();
              
              // Create a new Graphic that will hold the new Polygon with the Ring using the correct (i.e. clock-wise) vertex 
              // orientation which will give a positive Geodesic.Area calculation.
              ESRI.ArcGIS.Client.Graphic aGraphic = new ESRI.ArcGIS.Client.Graphic();
              
              // Get the new Polygon Graphic's Geometry from the return result of the GeometryService.SimplifyAsync Method.
              aGraphic.Geometry = args.Results(0).Geometry;
              
              // Set the Symbol of the new Polygon Graphic using one defined in XAML.
              aGraphic.Symbol = LayoutRoot.Resources["GreenFillSymbol"] as ESRI.ArcGIS.Client.Symbols.Symbol;
              
              // Add the new Polygon Graphic to the GraphicsLayer.
              theGraphicsLayer.Graphics.Add(aGraphic);
              
              // Call the same functions to re-render the map that was used when the application initially started. One to perform 
              // the Geodesic.Area calculation (via the DisplayArea function). The second to display the vertices of the Rings of 
              // the Polygon Graphic with a TextSymbol so users can see the orientation of how the Polygon was constructed (via the 
              // DisplayPolygonVerticiesAsTextSymbol function).
              DisplayArea();
              DisplayPolygonVerticesAsTextSymbol();
            }
              
            private void GeometryService_Failed(object sender, ESRI.ArcGIS.Client.Tasks.TaskFailedEventArgs e)
            {
              // We have a problem with the GeometryService.SimplifyAsync Method. Display the issue to the user.
              MessageBox.Show("Geometry Service error: " + e.Error.Message);
            }
              
            public void DisplayPolygonVerticesAsTextSymbol()
            {
              // This function will show the order of the vertices for the Rings of the Polygon Graphic. This will help the 
              // user see visually whether the Rings are clock-wise (which yield a positive Geodesic.Area calculation) or
              // counter-clock-wise (which yield a negative Geodesic.Area calculation).
              
              // Get the GraphicsLayer that was defined in XAML.
              ESRI.ArcGIS.Client.GraphicsLayer theGraphicsLayer = (ESRI.ArcGIS.Client.GraphicsLayer)(Map1.Layers["MyGraphicsLayer"]);
              
              // Create a temporary Polygon that will be used to obtain the vertices in the Rings.
              ESRI.ArcGIS.Client.Geometry.Polygon theTemporaryPolygon = null;
              
              // Loop through all of the Graphics in the GraphicsLayer (we should just have one Polygon Graphic at this point).
              foreach (ESRI.ArcGIS.Client.Graphic theGraphic in theGraphicsLayer)
              {
                // Get the Geometry of the Graphic.
                ESRI.ArcGIS.Client.Geometry.Geometry theGeometry = theGraphic.Geometry;
                
                // Only process Polygon Graphics.
                if ((theGeometry) is ESRI.ArcGIS.Client.Geometry.Polygon)
                {
                  // Set the temporay Polygon to be the Geometry of the Polygon in the GraphicsLayer.
                  theTemporaryPolygon = (ESRI.ArcGIS.Client.Geometry.Polygon)theGeometry;
                }
              }
              
              // Get the ObservableCollection&lt;PointCollecton&gt; from the temporary Polygon. This has the Ring of vertices. 
              Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.Geometry.PointCollection&gt; theObservableCollectionOfPointCollection = theTemporaryPolygon.Rings;
              
              // Loop through each PointCollection in the ObservableCollection&lt;PointCollecton&gt;.
              foreach (ESRI.ArcGIS.Client.Geometry.PointCollection myPointCollection in theObservableCollectionOfPointCollection)
              {
                // Loop through all of the vertices in the Ring that defines the Polygon. Note: Don't process the last
                // vertex (i.e. myPointCollection.Count - 1) since the first and last vertex are the same in the Ring.
                for (int x = 0; x &lt;= myPointCollection.Count - 2; x++)
                {
                  // Create a new TextSymbol and define its look. The strings used to define the FontFamily can be
                  // found in the following MSDN documentation:
                  // http://msdn.microsoft.com/en-us/library/cc189010(v=VS.95).aspx
                  ESRI.ArcGIS.Client.Symbols.TextSymbol aTextSymbol = new ESRI.ArcGIS.Client.Symbols.TextSymbol();
                  aTextSymbol.FontFamily = new FontFamily("Arial");
                  aTextSymbol.FontSize = 20;
                  aTextSymbol.Foreground = new System.Windows.Media.SolidColorBrush(Colors.Black);
                  
                  // Set the TextSymbol.Text Property to the index order of the vertices in the Ring.
                  aTextSymbol.Text = x.ToString();
                  
                  // Assign the TextSymbol as the Graphic.Symbol as this was not previously done.
                  ESRI.ArcGIS.Client.Graphic myVertexGraphic = new ESRI.ArcGIS.Client.Graphic();
                  myVertexGraphic.Geometry = myPointCollection[x];
                  myVertexGraphic.Symbol = (ESRI.ArcGIS.Client.Symbols.Symbol)aTextSymbol;
                  
                  // Add the MapPoints that display the vertex order to the GraphicsLayer.
                  theGraphicsLayer.Graphics.Add(myVertexGraphic);
                }
              }
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub GraphicsLayer_Initialized(sender As System.Object, e As System.EventArgs)
              
              ' Once the GraphcsLayer has initialized call two different functions. One to perform the Geodesic.Area calculation
              ' (via the DisplayArea function). The second to display the vertices of the Rings of the Polygon Graphic with a
              ' TextSymbol so users can see the orientation of how the Polygon was constructed (via the 
              ' DisplayPolygonVerticiesAsTextSymbol function). 
              DisplayArea()
              DisplayPolygonVerticesAsTextSymbol()
              
            End Sub
              
            Public Sub DisplayArea()
              
              ' Get the GraphicsLayer that was defined in XAML. It contain a single Polygon Graphic.
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer = CType(Map1.Layers("MyGraphicsLayer"), ESRI.ArcGIS.Client.GraphicsLayer)
                
              ' Loop through the Graphics in the GraphicsLayer (there should only be one Polygon graphic).
              For Each theGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicsLayer
                
                ' Get the Geometry of the Graphic.
                Dim theGeometry As ESRI.ArcGIS.Client.Geometry.Geometry = theGraphic.Geometry
                
                ' Define a variable to hold the Geodesic.Area calculation.
                Dim theArea As Double = Nothing
                 
                ' Only process Polygon Graphics.
                If TypeOf (theGeometry) Is ESRI.ArcGIS.Client.Geometry.Polygon Then
                    
                  ' Cast the generic Geometry of the Graphic to a Polygon.
                  Dim thePolygon As ESRI.ArcGIS.Client.Geometry.Polygon = CType(theGeometry, ESRI.ArcGIS.Client.Geometry.Polygon)
                   
                  ' Calculate the Geodesic.Area of the Polygon.
                  theArea = ESRI.ArcGIS.Client.Geometry.Geodesic.Area(thePolygon, 100)
                End If
                
                ' Display the Geodesic.Area to the user.
                TextBox_Areas.Text = theArea.ToString
                
              Next
              
            End Sub
            
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
                
              ' Define a new GeometryService that will re-orient the Rings of the Polygon Graphic to be clock-wise.
              Dim geometryService As New ESRI.ArcGIS.Client.Tasks.GeometryService("http://tasks.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer")
              
              ' Add an EventHandler to process when the GeometryService is complete.
              AddHandler geometryService.SimplifyCompleted, AddressOf GeometryService_SimplifyCompleted
                
              ' Add an EvenHandler in case there is a problem with the GeometryService.
              AddHandler geometryService.Failed, AddressOf GeometryService_Failed
              
              ' Get the GraphicsLayer that was created in XAML with the Polygon Graphic.
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer = CType(Map1.Layers("MyGraphicsLayer"), ESRI.ArcGIS.Client.GraphicsLayer)
                
              ' Create a new List(Of Graphic) object. This is needed as an input for the GeometryService.SimplifyAsync Method.
              Dim graphicList As New List(Of ESRI.ArcGIS.Client.Graphic)()
              
              ' Loop through each Graphic in the GraphicsLayer.
              For Each theGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicsLayer
                
                ' If we have a Polygon Graphic do more processing.
                If TypeOf (theGraphic.Geometry) Is ESRI.ArcGIS.Client.Geometry.Polygon Then
                  
                  ' Add the Polygon Graphic into the GraphicList.
                  graphicList.Add(theGraphic)
                  
                End If
                
              Next
              
              ' Call the Asynchronous GeometryService.SimplifyAsync Method.
              geometryService.SimplifyAsync(graphicList)
              
            End Sub
            
            Private Sub GeometryService_SimplifyCompleted(ByVal sender As Object, ByVal args As ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs)
              
              ' The GeometryService.SimplifyAsync Method has completed! 
              
              ' Get the GraphicsLayer defined in XAML. At this point there will be several Graphics because some additonal
              ' MapPoint's were added using TextSymbols to show the order of vertices used to make up the Rings of the
              ' Polygon Graphic.
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer = CType(Map1.Layers("MyGraphicsLayer"), ESRI.ArcGIS.Client.GraphicsLayer)
              
              ' Clear out all the Graphics in the GraphicsLayer.
              theGraphicsLayer.ClearGraphics()
              
              ' Create a new Graphic that will hold the new Polygon with the Ring using the correct (i.e. clock-wise) vertex 
              ' orientation which will give a positive Geodesic.Area calculation.
              Dim aGraphic As New ESRI.ArcGIS.Client.Graphic
              
              ' Get the new Polygon Graphic's Geometry from the return result of the GeometryService.SimplifyAsync Method.
              aGraphic.Geometry = args.Results(0).Geometry
               
              ' Set the Symbol of the new Polygon Graphic using one defined in XAML.
              aGraphic.Symbol = TryCast(LayoutRoot.Resources("GreenFillSymbol"), ESRI.ArcGIS.Client.Symbols.Symbol)
               
              ' Add the new Polygon Graphic to the GraphicsLayer.
              theGraphicsLayer.Graphics.Add(aGraphic)
              
              ' Call the same functions to re-render the map that was used when the application initially started. One to perform 
              ' the Geodesic.Area calculation (via the DisplayArea function). The second to display the vertices of the Rings of 
              ' the Polygon Graphic with a TextSymbol so users can see the orientation of how the Polygon was constructed (via the 
              ' DisplayPolygonVerticiesAsTextSymbol function).
              DisplayArea()
              DisplayPolygonVerticesAsTextSymbol()
              
            End Sub
             
            Private Sub GeometryService_Failed(ByVal sender As Object, ByVal e As ESRI.ArcGIS.Client.Tasks.TaskFailedEventArgs)
              
              ' We have a problem with the GeometryService.SimplifyAsync Method. Display the issue to the user.
              MessageBox.Show("Geometry Service error: " + e.Error.Message)
              
            End Sub
            
            Public Sub DisplayPolygonVerticesAsTextSymbol()
              
              ' This function will show the order of the vertices for the Rings of the Polygon Graphic. This will help the 
              ' user see visually whether the Rings are clock-wise (which yield a positive Geodesic.Area calculation) or
              ' counter-clock-wise (which yield a negative Geodesic.Area calculation).
              
              ' Get the GraphicsLayer that was defined in XAML.
              Dim theGraphicsLayer As ESRI.ArcGIS.Client.GraphicsLayer = CType(Map1.Layers("MyGraphicsLayer"), ESRI.ArcGIS.Client.GraphicsLayer)
              
              ' Create a temporary Polygon that will be used to obtain the vertices in the Rings.
              Dim theTemporaryPolygon As ESRI.ArcGIS.Client.Geometry.Polygon = Nothing
              
              ' Loop through all of the Graphics in the GraphicsLayer (we should just have one Polygon Graphic at this point).
              For Each theGraphic As ESRI.ArcGIS.Client.Graphic In theGraphicsLayer
                
                ' Get the Geometry of the Graphic.
                Dim theGeometry As ESRI.ArcGIS.Client.Geometry.Geometry = theGraphic.Geometry
                 
                ' Only process Polygon Graphics.
                If TypeOf (theGeometry) Is ESRI.ArcGIS.Client.Geometry.Polygon Then
                  
                  ' Set the temporay Polygon to be the Geometry of the Polygon in the GraphicsLayer.
                  theTemporaryPolygon = CType(theGeometry, ESRI.ArcGIS.Client.Geometry.Polygon)
                End If
                
              Next
              
              ' Get the ObservableCollection(OfPointCollecton) from the temporary Polygon. This has the Ring of vertices. 
              Dim theObservableCollectionOfPointCollection As Collections.ObjectModel.ObservableCollection(Of ESRI.ArcGIS.Client.Geometry.PointCollection) = theTemporaryPolygon.Rings
              
              ' Loop through each PointCollection in the ObservableCollection(OfPointCollecton).
              For Each myPointCollection As ESRI.ArcGIS.Client.Geometry.PointCollection In theObservableCollectionOfPointCollection
                
                ' Loop through all of the vertices in the Ring that defines the Polygon. Note: Don't process the last
                ' vertex (i.e. myPointCollection.Count - 1) since the first and last vertex are the same in the Ring.
                For x As Integer = 0 To myPointCollection.Count - 2
                  
                  ' Create a new TextSymbol and define its look. The strings used to define the FontFamily can be
                  ' found in the following MSDN documentation:
                  ' http://msdn.microsoft.com/en-us/library/cc189010(v=VS.95).aspx
                  Dim aTextSymbol As New ESRI.ArcGIS.Client.Symbols.TextSymbol
                  aTextSymbol.FontFamily = New FontFamily("Arial")
                  aTextSymbol.FontSize = 20
                  aTextSymbol.Foreground = New System.Windows.Media.SolidColorBrush(Colors.Black)
                  
                  ' Set the TextSymbol.Text Property to the index order of the vertices in the Ring.
                  aTextSymbol.Text = x.ToString
                  
                  ' Assign the TextSymbol as the Graphic.Symbol as this was not previously done.
                  Dim myVertexGraphic As New ESRI.ArcGIS.Client.Graphic
                  myVertexGraphic.Geometry = myPointCollection.Item(x)
                  myVertexGraphic.Symbol = CType(aTextSymbol, ESRI.ArcGIS.Client.Symbols.Symbol)
                  
                  ' Add the MapPoints that display the vertex order to the GraphicsLayer.
                  theGraphicsLayer.Graphics.Add(myVertexGraphic)
                Next
                
              Next
              
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geodesic.directGeodeticSolver(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="lat1">Latitude in radians</param>
            <param name="lon1">Longitude in radians</param>
            <param name="alpha1">Alpha in radians</param>
            <param name="s">Distance in meters</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Geodesic.inverseGeodeticSolver(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Inverses the geodetic solver.
            </summary>
            <param name="lat1">Latitude in radians</param>
            <param name="lon1">Longitude in radians</param>
            <param name="lat2">Latitude in radians</param>
            <param name="lon2">Longitude in radians</param>
            <param name="azimuth">The azimuth.</param>
            <param name="geodesicDistance">The geodesic distance.</param>
            <param name="reverseAzimuth">The reverse azimuth.</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.Geodesic.EqualAreaProjection">
            <summary>
            Projects geographic coordinates to a simple Equal Area Projection,
            used for simplifying area calculation.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ValueConverters.MultiplicationConverter">
            <summary>
            For internal use only. Multiplies one number value with another value.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ValueConverters.MultiplicationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ValueConverters.MultiplicationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters">
            <summary>
            Parameters indicate guidlines that are required 
            when determining what the service area of a facility.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.Facilities">
            <summary>
             Collection of facility locations.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.ReturnFacilities">
            <summary>
             If <c>true</c>, facilities will be returned in the 
             facilities property of <see cref="P:ESRI.ArcGIS.Client.Tasks.RouteEventArgs.Facilities"/>.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.TravelDirection">
            <summary>
            Indicates which order the travel directions will be return. 		
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.OverlapLines">
            <summary>
            Indicates if the lines should overlap from multiple facilities. The 
            default is defined in the network analysis.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.OverlapPolygons">
            <summary>
            Indicates if the polygons for all facilities should overlap. 
            The default is defined in the network analysis layer.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.SplitLineAtBreaks">
            <summary>
            Lines will be split at breaks. The default is defined in 
            the network analysis layer.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.SplitPolygonsAtBreaks">
            <summary>
            polygons will be split at breaks. The default is defined 
            in the network analysis layer.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.TrimOuterPolygon">
            <summary>
             the outermost polygon (at the maximum break value) will be trimmed. 
             The default is defined in the network analysis layer.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.TrimPolygonDistance">
            <summary>
             If polygons are being trimmed, provides the distance to trim. 
             The default is defined in the network analysis layer. 
            </summary>
            <value>The trim polygon distance.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.TrimPolygonDistanceUnits">
            <summary>
            If polygons are being trimmed, specifies the units of the trimPolygonDistance. 
            The default is defined in the network analysis layer. 
            </summary>
            <value>The trim polygon distance units.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.OutputPolygons">
            <summary>
            The type of polygon(s) generated. The default is as defined in the network analysis layer.
            </summary>
            <value>esriNAOutputPolygonNone | esriNAOutputPolygonSimplified | esriOutputPolygonDetailed</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.DefaultBreaks">
            <summary>
            A comma-separated list of doubles.
            </summary>
            <value>The default breaks.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.ExcludeSourcesFromPolygons">
            <summary>
            A comma-separated list of string names.
            </summary>
            <value>The exclude sources from polygons.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteServiceAreaParameters.MergeSimilarPolygonRanges">
            <summary>
            Similar ranges will be merged in the result polygons.
            </summary>
            <value>The merge similar polygon ranges.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.Locator">
            <summary>
            Represents a geocode service resource exposed by the ArcGIS Server REST 
            API. It is used to generate candidates for an address. It also used to 
            find an address for a given location. 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Locator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.Locator"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Locator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.Locator"/> class.
            </summary>
            <param name="URL">The URL of the REST API geocode service.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Locator.AddressToLocationsAsync(ESRI.ArcGIS.Client.Tasks.AddressToLocationsParameters)">
            <summary>
            Sends a request to the ArcGIS REST geocode resource to find candidates 
            for a single address specified in the address argument. On completion, 
            the AddressToLocationComplete event is fired and the optional callback 
            function is invoked. 
            </summary>
            <param name="parameters">The various address fields accepted by the 
            corresponding geocode service along with an optional list of fields 
            to be included in the returned results. 
            </param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Locator.AddressToLocationsAsync(ESRI.ArcGIS.Client.Tasks.AddressToLocationsParameters,System.Object)">
            <summary>
            Sends a request to the ArcGIS REST geocode resource to find candidates 
            for a single address specified in the address argument. On completion, 
            the AddressToLocationComplete event is fired and the optional callback 
            function is invoked. 
            </summary>
            <param name="parameters">The various address fields accepted by the 
            corresponding geocode service along with an optional list of fields 
            to be included in the returned results. 
            </param>
            <param name="userToken"> A user-defined object that is passed to the 
            method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Locator.OnAddressToLocationsCompleted(ESRI.ArcGIS.Client.Tasks.AddressToLocationsEventArgs)">
            <summary>
            Raises the <see cref="E:AddressToLocationsComplete"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.AddressToLocationsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Locator.LocationToAddressAsync(ESRI.ArcGIS.Client.Geometry.MapPoint,System.Double)">
            <summary>
            Sends a request to the ArcGIS REST geocode resource to Locates an 
            address based on a given point. On completion, the 
            AddressToLocationComplete event is fired and the optional callback 
            function is invoked. 
            </summary>
            <param name="location">The point at which to search for the closest 
            address. The location should be in the same spatial reference as that 
            of the geocode service. 
            </param>
            <param name="distance">The distance in meters from the given location 
            within which a matching address should be searched.
            </param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Locator.LocationToAddressAsync(ESRI.ArcGIS.Client.Geometry.MapPoint,System.Double,System.Object)">
            <summary>
            Sends a request to the ArcGIS REST geocode resource to Locates an 
            address based on a given point. On completion, the 
            AddressToLocationComplete event is fired and the optional callback 
            function is invoked. 
            </summary>
            <param name="location">The point at which to search for the closest 
            address. The location should be in the same spatial reference as that 
            of the geocode service. 
            </param>
            <param name="distance">The distance in meters from the given location 
            within which a matching address should be searched.
            </param>
            <param name="userToken"> A user-defined object that is passed to the 
            method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Locator.OnLocationToAddressCompleted(ESRI.ArcGIS.Client.Tasks.AddressEventArgs)">
            <summary>
            Raises the <see cref="E:LocationToAddressComplete"/> event.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Locator.AddressToLocationsLastResult">
            <summary>
            The last result of the AddressToLocations operation.
            </summary>
            <value>The AddressToLocations last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.Locator.AddressToLocationsCompleted">
            <summary>
            Occurs when the AddressToLocations operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Locator.LocationToAddressLastResult">
            <summary>
            The last result of the LocationToAddress operation.
            </summary>
            <value>The LocationToAddress last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.Locator.LocationToAddressCompleted">
            <summary>
            Occurs when the LocationToAddress operation completes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPRecordSet">
            <summary>
            Represents a GPRecordSet geoprocessing task inputs.
            For a large set of records, you can specify the Url property to the input records stored 
            in a JSON structure in a file on a public server. 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPRecordSet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPRecordSet"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPRecordSet.#ctor(System.String,ESRI.ArcGIS.Client.Tasks.FeatureSet)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPRecordSet"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="features">The FeatureSet to be contained by the GPRecordSet.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPRecordSet.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPRecordSet"/> class.
            Use this constructor when specifying an input file on a public server
            that contains the records in JSON format.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="url">The URL to the location of the input file.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPRecordSet.ToJson(System.Boolean)">
            <summary>
            Serializes the parameter to JSON.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPRecordSet.ToJson">
            <summary>
            Serializes the parameter to JSON.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPRecordSet.Url">
            <summary>
            The URL to the location of the input raster data file.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPRecordSet.FeatureSet">
            <summary>
            The set of features.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPMessage">
            <summary>
            Represents a message generated during the execution of a geoprocessing task. It includes 
            information such as when the processing started, what parameter values are being used, 
            the task progress, warnings of potential problems and errors. 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPMessage.#ctor(System.String,ESRI.ArcGIS.Client.Tasks.GPMessageType)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPMessage"/> class.
            </summary>
            <param name="description">The message description.</param>
            <param name="messageType">The message type.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPMessage.Description">
            <summary>
            A description of the geoprocessing message.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPMessage.MessageType">
            <summary>
            The geoprocessing message type
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.Geoprocessor">
            <summary>
            Represents a geoprocessing task service resource exposed by the ArcGIS 
            Server REST API. A geoprocessing task resource represents a single task 
            in a geoprocessing service published using the ArcGIS Server and it 
            supports one of the following two main operations:
                Execute - performed on a geoprocessing task resource when the 
                	execution type is synchronous. The only applicable events are 
                	ExecuteComplete and Fault. 
                SubmitJob - performed on an asynchronous geoprocessing task resource. 
                	The only applicable events are JobComplete, Cancel, and Fault. 
                In addition, for a jobId: 
                GetInput - checks status of the job identified by jobId. The only 
                	applicable events are GetInputComplete and Fault.
                    GetResultData - checks status of the job identified by jobId. 
                    The only applicable events are GetResultDataComplete and Fault. 
                    GetResultImageLayer - checks status of the job identified by 
                    jobId. The only applicable events are GetResultImageComplete and 
                    Fault. 
                    CheckStatus - checks status of the job identified by jobId. The 
                    only applicable events are StatusUpdate and Fault.
            Set the Url to the ArcGIS Server REST resource that receives the 
            geoprocessing request.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.Geoprocessor"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.Geoprocessor"/> class.
            </summary>
            <param name="Url">The URL of the REST API Geoprocessing service.
            </param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.ExecuteAsync(System.Collections.Generic.List{ESRI.ArcGIS.Client.Tasks.GPParameter})">
            <summary>
            Executes the task.
            Raises the <see cref="E:ExecuteCompleted"/> event on success, or
            the <see cref="E:Failed"/> event on failure.
            </summary>
            <param name="parameters">The parameters to use to execute the task.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.ExecuteAsync(System.Collections.Generic.List{ESRI.ArcGIS.Client.Tasks.GPParameter},System.Object)">
            <summary>
            Executes the task.
            Raises the <see cref="E:ExecuteCompleted"/> event on success, or
            the <see cref="E:Failed"/> event on failure.
            </summary>
            <param name="parameters">The parameters to use to execute the task.</param>
            <param name="userToken"> A user-defined object that is passed to 
            the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.OnExecuteCompleted(ESRI.ArcGIS.Client.Tasks.GPExecuteCompleteEventArgs)">
            <summary>
            Raises the <see cref="E:ExecuteCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GPExecuteCompleteEventArgs"/> containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.SubmitJobAsync(System.Collections.Generic.List{ESRI.ArcGIS.Client.Tasks.GPParameter})">
            <summary>
            Submits a job request to the server to execute an asynchronous 
            geoprocessing task.
            Raises the <see cref="E:JobComplete"/> event on success, or
            the <see cref="E:Fault"/> event on failure.
            </summary>
            <param name="parameters">The parameters to use to submit a job to 
            the task.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.checkJobCompleted(System.Object,System.Net.DownloadStringCompletedEventArgs)">
            <summary>
            Called by the webclient when the request initiated in submitJob_Completed is complete.
            This is constantly called with <see cref="P:ESRI.ArcGIS.Client.Tasks.Geoprocessor.UpdateDelay"/> interval until the job has completed.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.OnStatusUpdated(ESRI.ArcGIS.Client.Tasks.JobInfoEventArgs)">
            <summary>
            Raises the <see cref="E:StatusUpdated"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.JobInfoEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.OnJobCompleted(ESRI.ArcGIS.Client.Tasks.JobInfoEventArgs)">
            <summary>
            Raises the <see cref="E:JobComplete"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.JobInfoEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.CheckJobStatusAsync(System.String)">
            <summary>
            Sends a request to the geoprocessing task for the current state of 
            the job identified by jobId. Raises the <see cref="E:StatusUpdate"/> 
            event on success, or the <see cref="E:Fault"/> event on failure.
            </summary>
            <param name="jobId">A string that uniquely identifies a job on the 
            server. It is created when a job is submitted for execution and 
            later used to check its status and retrieve the results.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultDataAsync(System.String,System.String)">
            <summary>
            Sends a request to the Geoprocessor task to get the task result 
            identified by jobId and parameterName. Raises the 
            <see cref="E:GetResultDataComplete"/> event on success, or the 
            <see cref="E:Fault"/> event on failure.
            </summary>
            <param name="jobId">A string that uniquely identifies a job on the 
            server. It is created when a job is submitted for execution and 
            later used to check its status and retrieve the results.</param>
            <param name="parameterName">The name of the result parameter as 
            defined in ArcGIS Services Directory.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultDataAsync(System.String,System.String,System.Object)">
            <summary>
            Sends a request to the Geoprocessor task to get the task result 
            identified by jobId and parameterName. Raises the 
            <see cref="E:GetResultDataComplete"/> event on success, or the 
            <see cref="E:Fault"/> event on failure.
            </summary>
            <param name="jobId">A string that uniquely identifies a job on the 
            server. It is created when a job is submitted for execution and 
            later used to check its status and retrieve the results.</param>
            <param name="parameterName">The name of the result parameter as 
            defined in ArcGIS Services Directory.</param>
            <param name="userToken"> A user-defined object that is passed to the 
            method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.OnGetResultDataCompleted(ESRI.ArcGIS.Client.Tasks.GPParameterEventArgs)">
            <summary>
            Raises the <see cref="E:GetResultDataCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GPParameterEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetInputAsync(System.String,System.String)">
            <summary>
            Sends a request to the Geoprocessor task to get the task input 
            identified by jobId and parameterName. Raises the 
            <see cref="E:GetInputComplete"/> event on success, or the 
            <see cref="E:Fault"/> event on failure.
            </summary>
            <param name="jobId">A string that uniquely identifies a job on the 
            server. It is created when a job is submitted for execution and 
            later used to check its status and retrieve the results.</param>
            <param name="parameterName">The name of the input parameter as 
            defined in ArcGIS Services Directory.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetInputAsync(System.String,System.String,System.Object)">
            <summary>
            Sends a request to the Geoprocessor task to get the task input 
            identified by jobId and parameterName. Raises the 
            <see cref="E:GetInputComplete"/> event on success, or the 
            <see cref="E:Fault"/> event on failure.
            </summary>
            <param name="jobId">A string that uniquely identifies a job on the 
            server. It is created when a job is submitted for execution and 
            later used to check its status and retrieve the results.</param>
            <param name="parameterName">The name of the input parameter as 
            defined in ArcGIS Services Directory.</param>
            <param name="userToken"> A user-defined object that is passed to the 
            method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.OnGetInputCompleted(ESRI.ArcGIS.Client.Tasks.GPParameterEventArgs)">
            <summary>
            Raises the <see cref="E:GetInputComplete"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GPParameterEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultImageAsync(System.String,System.String)">
            <summary>
            Sends a request to the Geoprocessor task to get the task result 
            identified by jobId and parameterName. Raises the 
            <see cref="E:GetResultImageComplete"/> event on success, or the 
            <see cref="E:Fault"/> event on failure. </summary>
            <param name="jobId">A string that uniquely identifies a job on the 
            server. It is created when a job is submitted for execution and 
            later used to check its status and retrieve the results.</param>
            <param name="parameterName">The name of the result parameter as 
            defined in ArcGIS Services Directory.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultImageAsync(System.String,System.String,System.Object)">
            <summary>
            Sends a request to the Geoprocessor task to get the task result 
            identified by jobId and parameterName. Raises the 
            <see cref="E:GetResultImageComplete"/> event on success, or the 
            <see cref="E:Fault"/> event on failure. </summary>
            <param name="jobId">A string that uniquely identifies a job on the 
            server. It is created when a job is submitted for execution and 
            later used to check its status and retrieve the results.</param>
            <param name="parameterName">The name of the result parameter as 
            defined in ArcGIS Services Directory.</param>
            <param name="userToken"> A user-defined object that is passed to the 
            method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.OnGetResultImageCompleted(ESRI.ArcGIS.Client.Tasks.GetResultImageEventArgs)">
            <summary>
            Raises the <see cref="E:GetResultImageCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GetResultImageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultImageLayerAsync(System.String,System.String)">
            <summary>
            Sends a request to the Geoprocessor task to get the task result 
            identified by jobId and parameterName. Creates and configures a 
            GPResultImageLayer instance ready to be added to a Map. Raises the 
            <see cref="E:GetResultImageLayerComplete"/> event on success, or
            the <see cref="E:Fault"/> event on failure.
            </summary>
            <param name="jobId">A string that uniquely identifies a job on the 
            server. It is created when a job is submitted for execution and 
            later used to check its status and retrieve the results.</param>
            <param name="parameterName">The name of the result parameter as 
            defined in ArcGIS Services Directory.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.OnGetResultImageLayerCompleted(ESRI.ArcGIS.Client.Tasks.GetResultImageLayerEventArgs)">
            <summary>
            Raises the <see cref="E:GetResultImageLayerCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.GetResultImageLayerEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Geoprocessor.CancelJobStatusUpdates(System.String)">
            <summary>
            Cancels the periodic job status updates initiated automatically when 
            submitJob() is invoked for the job identified by jobId. You can 
            still obtain the status of this job by calling the CheckStatus() 
            method at your own discretion.
            </summary>
            <param name="jobId">The job id.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Geoprocessor.OutputSpatialReference">
            <summary>
            The spatial reference of the output geometries. If not specified, 
            the output geometries are in the spatial reference of the input 
            geometries. If ProcessSpatialReference is specified and 
            OutputSpatialReference is not specified, the output geometries are 
            in the spatial reference of the process spatial reference.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Geoprocessor.ProcessSpatialReference">
            <summary>
            The spatial reference that the model will use to perform geometry 
            operations. If specified and OutputSpatialReference is not 
            specified, the output geometries are in the spatial reference of the 
            process spatial reference.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Geoprocessor.UpdateDelay">
            <summary>
            The time interval in milliseconds between each job 
            status request sent to an asynchronous geoprocessing task.
            The default is 1000.
            </summary>
            <value>The update delay.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Geoprocessor.ExecuteLastResult">
            <summary>
            The last result of the Execute operation.
            </summary>
            <value>The Execute last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.ExecuteCompleted">
            <summary>
            Occurs when the Execute operation completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Geoprocessor.SubmitJobLastResult">
            <summary>
            The last result of the SubmitJob operation.
            </summary>
            <value>The SubmitJob last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.StatusUpdated">
            <summary>
            Occurs when a CheckStatus operation of the geoprocessing task successfully completes.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.JobCompleted">
            <summary>
            Occurs when a SubmitJob operation of the geoprocessing task successfully completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultDataLastResult">
            <summary>
            The result from the last GetResultData call.
            </summary>
            <value>The GetResultData last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultDataCompleted">
            <summary>
            Occurs when the GetResultData request completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetInputLastResult">
            <summary>
            The result from the last GetInput call.
            </summary>
            <value>The GetInput last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetInputCompleted">
            <summary>
            Occurs when the GetInput request completes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultImageLastResult">
            <summary>
            The result from the last GetResultImage call.
            </summary>
            <value>The GetResultImage last result.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultImageCompleted">
            <summary>
            Occurs when the GetResultImage request completes.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultImageLayerCompleted">
            <summary>
            Occurs when the GetResultImageLayer request completes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GeometryRelationPair">
            <summary>
            Contains the indices of the geometries from the set of geometries passed to the 
            Relation operation of the geometry service.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryRelationPair.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GeometryRelationPair"/> class.
            </summary>
            <param name="graphic1Index">Index of the Graphic from graphic1 list of graphics passed to the Relation operation.</param>
            <param name="graphic2Index">Index of the Graphic from graphic2 list of graphics passed to the Relation operation.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryRelationPair.Graphic1Index">
            <summary>
            Index of the Graphic from graphic1 list of graphics passed to the Relation operation.
            </summary>
            <value>The index of the graphic.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryRelationPair.Graphic2Index">
            <summary>
            Index of the Graphic from graphic2 list of graphics passed to the Relation operation.
            </summary>
            <value>The index of the graphic.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs">
            <summary>
            EventArgs for service operations that return a list of Graphic objects.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs.#ctor(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="graphics">The Graphics returned by the service operation.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GraphicsEventArgs.Results">
            <summary>
            The Graphics returned by the service.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.CutEventArgs">
            <summary>
            EventArgs for service operations that return a list of 
            Graphic objects and a Integer array of cut indexes.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.CutEventArgs.CutIndexes">
            <summary>
            The indexes of the new geometries that were derived from the original geometry.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.CutEventArgs.#ctor(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Object,System.Int32[])">
            <summary>
            Constructor.
            </summary>
            <param name="graphics">The Graphics returned by the service operation.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked.</param>
            <param name="cutIndexes">The cut indexes of which geometry the new geometries where derived.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.CutEventArgs.Results">
            <summary>
            The Graphics returned by the service.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GeometryEventArgs">
            <summary>
            EventArgs for service operations that return a single Geometry object.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GeometryEventArgs.#ctor(ESRI.ArcGIS.Client.Geometry.Geometry,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="geometry">The Geometry returned by the service operation.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GeometryEventArgs.Result">
            <summary>
            The Geometry returned by the service.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.TaskFailedEventArgs">
            <summary>
            EventArgs for the Fault task event.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TaskFailedEventArgs.Error">
            <summary>
            The error returned from executing the task.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.QueryEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteCompleted"/> event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.QueryEventArgs.#ctor(ESRI.ArcGIS.Client.Tasks.FeatureSet,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="featureSet">The FeatureSet returned by the QueryTask.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.QueryEventArgs.FeatureSet">
            <summary>
            The FeatureSet returned by the QueryTask.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.QueryCountEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.QueryTask.ExecuteCountCompleted"/> event.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.QueryCountEventArgs.Count">
            <summary>
            Get the number of features the query would return.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.IdentifyEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.IdentifyTask.ExecuteCompleted"/> event of the <see cref="T:ESRI.ArcGIS.Client.Tasks.IdentifyTask"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.IdentifyEventArgs.#ctor(System.Collections.Generic.List{ESRI.ArcGIS.Client.Tasks.IdentifyResult},System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="results">The list of IdentifyResult returned by the IdentifyTask.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyEventArgs.IdentifyResults">
            <summary>
            The features returned by the IdentifyTask.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.FindEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.FindTask.ExecuteCompleted"/> event of the <see cref="T:ESRI.ArcGIS.Client.Tasks.FindTask"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FindEventArgs.#ctor(System.Collections.Generic.List{ESRI.ArcGIS.Client.Tasks.FindResult},System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="results">The list of FindResult returned by the FindTask.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindEventArgs.FindResults">
            <summary>
            The features returned by the FindTask.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.LengthsEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.LengthsCompleted"/> event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.LengthsEventArgs.#ctor(System.Collections.Generic.List{System.Double},System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="lengths">The list of lengths returned by the Lengths geometry service operation.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.LengthsEventArgs.Results">
            <summary>
            The lengths returned by the geometry service.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.DistanceEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.DistanceCompleted"/> event
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.DistanceEventArgs.#ctor(System.Double,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.DistanceEventArgs"/> class.
            </summary>
            <param name="distance">The distance returned by the Distance geometry service operation.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.DistanceEventArgs.Distance">
            <summary>
            Gets the distance returned by the geometry service.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.AreasAndLengthsEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.GeometryService.AreasAndLengthsCompleted"/> event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.AreasAndLengthsEventArgs.#ctor(ESRI.ArcGIS.Client.Tasks.AreasAndLengths,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="areasAndLengths">The AreasAndLengths returned by the AreasAndLengths geometry service operation.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AreasAndLengthsEventArgs.Results">
            <summary>
            The AreasAndLengths returned by the geometry service.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.RelationEventArgs">
            <summary>
            EventArgs for the relation geometry service operation.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RelationEventArgs.#ctor(System.Collections.Generic.List{ESRI.ArcGIS.Client.Tasks.GeometryRelationPair},System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="results">The relations returned by the service operation.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RelationEventArgs.Results">
            <summary>
            The Graphics returned by the service.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.AddressToLocationsEventArgs">
            <summary>
            EventArgs for the AddressToLocations <see cref="T:ESRI.ArcGIS.Client.Tasks.Locator"/> geocode service operation.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.AddressToLocationsEventArgs.#ctor(System.Collections.Generic.List{ESRI.ArcGIS.Client.Tasks.AddressCandidate},System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="results">The address candidates returned by the service operation.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AddressToLocationsEventArgs.Results">
            <summary>
            The address candidates returned by the service.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPExecuteCompleteEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.ExecuteCompleted"/> geoprocessor event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPExecuteCompleteEventArgs.#ctor(ESRI.ArcGIS.Client.Tasks.GPExecuteResults,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="results">The result returned by the geoprocessing task.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPExecuteCompleteEventArgs.Results">
            <summary>
            The geoprocessing task execution results.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.JobInfoEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.StatusUpdated"/> and <see cref="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.JobCompleted"/> geoprocessor events.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.JobInfoEventArgs.#ctor(ESRI.ArcGIS.Client.Tasks.JobInfo,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="jobInfo">The JobInfo for the geoprocessing task.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.JobInfoEventArgs.JobInfo">
            <summary>
            The JobInfo.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPParameterEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultDataCompleted"/> and <see cref="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetInputCompleted"/> geoprocessor events.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPParameterEventArgs.#ctor(ESRI.ArcGIS.Client.Tasks.GPParameter,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPParameterEventArgs.Parameter">
            <summary>
            The geoprocessing task parameter.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GetResultImageEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultImageCompleted"/> geoprocessor event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GetResultImageEventArgs.#ctor(ESRI.ArcGIS.Client.MapImage,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="mapImage">The MapImage.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GetResultImageEventArgs.MapImage">
            <summary>
            The MapImage.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GetResultImageLayerEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.Geoprocessor.GetResultImageLayerCompleted"/> geoprocessor event.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GetResultImageLayerEventArgs.#ctor(ESRI.ArcGIS.Client.Tasks.GPResultImageLayer,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="layer">The GPResultImageLayer.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GetResultImageLayerEventArgs.GPResultImageLayer">
            <summary>
            The GPResultImageLayer.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.AddressEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.Locator.LocationToAddressCompleted"/> event.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AddressEventArgs.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.LayerCollectionCanvas">
            <summary>
            Canvas used for holding a collection of <see cref="T:ESRI.ArcGIS.Client.LayerCanvas"/>.
            </summary>
            <remarks>
            It adds a set of properties for easily managing zoom animations.
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerCollectionCanvas.Dispose">
            <summary>
            Calling dispose removes the collection the map
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerCollectionCanvas.ScaleTransform">
            <summary>
            Gets the scale transform.
            </summary>
            <value>The scale transform.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerCollectionCanvas.TranslateTransform">
            <summary>
            Gets the translate transform.
            </summary>
            <value>The translate transform.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol">
            <summary>
            A symbol that is used to draw <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/> objects in the graphics layer
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol"/> class.
            FOR INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.StyleProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.Style"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.ColorProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.Color"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.SelectionColorProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.Color"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.BorderStyleProperty">
            <summary>
            Identifies the LineStyle dependency property
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.ToJson">
            <summary>
            Serializes the simple fill symbol to JSON
            </summary>
            <returns>
            A JSON string representation of the simple fill symbol.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.Style">
            <summary>
            Gets or sets the symbol style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.SelectionColor">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.BorderStyle">
            <summary>
            Gets or sets a pre-defined Dash Array using the LineStyle enumeration
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.SimpleFillStyle">
            <summary>
            <see cref="T:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol"/> style
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.SimpleFillStyle.Solid">
            <summary>
            Solid
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.SimpleFillStyle.BackwardDiagonal">
            <summary>
            BackwardDiagonal
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.SimpleFillStyle.ForwardDiagonal">
            <summary>
            ForwardDiagonal
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.SimpleFillStyle.Horizontal">
            <summary>
            Horizontal
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.SimpleFillStyle.Vertical">
            <summary>
            Vertical
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleFillSymbol.SimpleFillStyle.Null">
            <summary>
            Null
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.esriUnits">
            <summary>
            ESRI measurement units.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriUnknownUnits">
            <summary>Unknown.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriInches">
            <summary>Inches.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriPoints">
            <summary>Points.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriFeet">
            <summary>Feet.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriYards">
            <summary>Yards.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriMiles">
            <summary>Miles.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriNauticalMiles">
            <summary>Nautical miles.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriMillimeters">
            <summary>Millimeters.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriCentimeters">
            <summary>Centimeters.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriMeters">
            <summary>Meters.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriKilometers">
            <summary>Kilometers.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriDecimalDegrees">
            <summary>Decimal degrees.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.esriUnits.esriDecimeters">
            <summary>Decimeters.</summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.SpatialReference">
            <summary>
            SpatialReference class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.SpatialReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.SpatialReference.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference"/> class.
            </summary>
            <param name="WKID">The Well-known ID that represents the Spatial Reference.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.SpatialReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference"/> class.
            </summary>
            <param name="wkt">The Well known text that represents the Spatial Reference.
            <see cref="P:ESRI.ArcGIS.Client.Geometry.SpatialReference.WKID"/> will be set to 0 when using WKT.
            </param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.SpatialReference.Clone">
            <summary>
            Creates a deep clone of the current Object.
            </summary>
            <returns>Returns a deep clone of the current Object.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.SpatialReference.Equals(ESRI.ArcGIS.Client.Geometry.SpatialReference)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.SpatialReference.AreEqual(ESRI.ArcGIS.Client.Geometry.SpatialReference,ESRI.ArcGIS.Client.Geometry.SpatialReference,System.Boolean)">
            <summary>
            Ares the equal.
            </summary>
            <param name="sref1">The first spatial reference.</param>
            <param name="sref2">The spatial reference to sompare to..</param>
            <param name="ignoreNulls">if set to <c>true</c> if one <see cref="T:ESRI.ArcGIS.Client.Geometry.SpatialReference"/> is null and the other is not, the two will be considered the same.</param>
            <returns><c>true</c> is the two spatial references are the same.
            If both spatial references has a <see cref="P:ESRI.ArcGIS.Client.Geometry.SpatialReference.WKID"/> set and is 1 or greater, this will take precedence in 
            the comparison and <see cref="P:ESRI.ArcGIS.Client.Geometry.SpatialReference.WKT"/> will be ignored. Secondary WKT will be compared using a
            simple non-case-sensitive comparison.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.SpatialReference.WorldWidth(ESRI.ArcGIS.Client.Geometry.SpatialReference)">
            <summary>
            Returns the "width" of the world in map units for the spatial references that supports WrapAround mode. Returns NaN for unsupported spatial references.
            </summary>
            <param name="sref">Spatial Reference</param>
            <returns>The width of the world in map units for the given spatial reference, or NaN if the spatial reference doesn't support WrapAround.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.SpatialReference.WKID">
            <summary>
            Gets or sets the Well-known Spatial Reference ID.
            </summary>
            <value>The Well-known ID.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.SpatialReference.WKT">
            <summary>
            Gets or sets the Well-known Spatial Reference Text.
            </summary>
            <value>The Well-known Spatial Reference Text.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.SpatialReference.Dateline">
            <summary>
            Gets the value where the valid world extent stops (ie. dateline)
            equivalent to 180 degrees east. The same value applies with negative
            for 180 degrees west, so it's a requirement that "greenwich" is at 0 
            and there is no false easting.
            Only 4326 and WebMercator is supported. Everything else returns double.NaN.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.PanAnimation">
            <summary>
            Creates the pan animation used to pan the map
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.PanAnimation.DeltaPan(System.Double,System.Double,System.TimeSpan)">
            <summary>
            Pans the element the specified number of pixels
            </summary>
            <param name="dX">Delta X</param>
            <param name="dY">Delta Y</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">
             <summary>
             A custom graphics renderer where the symbology of a Layer is displayed via groups based upon numerical data.
             </summary>
             <remarks>
             <para>The following image depicts how a Map would look that corresponds to XAML code with a 
             ClassBreaksRenderer defined for a FeatureLayer.</para>
             <para>
             <img border="0" alt="Example of how XAML code using a ClassBreaksRenderer on a FeatureLayer would look visually in the Map." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ClassBreaksRenderer.png"/>
             </para>
             <para>
             A ClassBreaksRenderer should have 2 or more <see cref="T:ESRI.ArcGIS.Client.ClassBreakInfo">
             ClassBreakInfo</see> objects defined by the <see cref="P:ESRI.ArcGIS.Client.ClassBreaksRenderer.Classes">
             Classes</see> Property (meaning classification or grouping) to delineate the different symbology and 
             class break information. Otherwise, use a <see cref="T:ESRI.ArcGIS.Client.SimpleRenderer">
             SimpleRenderer</see> if just one type of symbology needs to be rendered.
             </para>
             <para>
             The name of the <see cref="T:ESRI.ArcGIS.Client.Field">Field</see> that is specified for the 
             <see cref="P:ESRI.ArcGIS.Client.ClassBreaksRenderer.Field">Field</see> Property must be a 
             numeric (Double, Integer,  SmallInteger, or Single) <see cref="T:ESRI.ArcGIS.Client.Field.FieldType">
             Field.FieldType</see>. To render groups of Strings use the 
             <see cref="T:ESRI.ArcGIS.Client.UniqueValueRenderer">UniqueValueRenderer</see> instead.
             </para>
             Defining a <see cref="P:ESRI.ArcGIS.Client.ClassBreaksRenderer.DefaultSymbol">DefaultSymbol</see> 
             provides a 'catch all' to draw the features for which no <see cref="T:ESRI.ArcGIS.Client.ClassBreakInfo">
             ClassBreakInfo's</see> have been defined. If a DefaultSymbol is not defined, the Layer features will not 
             be drawn on the Map when there is no grouping defined by the ClassBreakInfo's. For example: assume that 
             a Layer has numerical observations that range from 1 to 90. If three ClassBreakInfo objects were defined 
             that covered the grouped ranges of: (#1) 10 to 30, (#2) 30 to 60, and (#3) 60 to 90, unless a 
             DefaultSymbol is defined there will be no visual representations visible on the map for the 
             numerical range of 1 to 9.
             </remarks>
             <example>
             
             	<code title="Example XAML1" description="" lang="XAML">
             	&lt;!-- 
             	Important information regarding this code:
             	This XAML provides three examples of using the ClassBreaksRenderer with different symbology
             	(Marker, Line, and Fill). Each example is nested within it's own &lt;Grid/&gt; block. Copy just
             	one example within each <Grid/> into your test project. Do not copy this entire XAML code
             	into your test project as it will not work with three &lt;Grid/&gt;'s overlapping.
             	--&gt;
             	
             	&lt;Grid x:Name="LayoutRoot" Background="White"&gt;
             	  &lt;!-- 
             	  Marker Example:
             	  This example shows how to draw Markers (aka. Points) on a FeatureLayer using the ClassBreaksRenderer 
             	  Class. This example takes two Map controls as arguments to compare the effect of applying a 
             	  ClassBreaksRenderer. Map1 will show a basic FeatureLayer that comes by default from ArcGIS Server. 
             	  Map2 will show the same FeatureLayer but with a specific ClassBreaksRenderer applied, to 
             	  compare the differences.
             	  --&gt;
             	
             	  &lt;!--
             	  Display the default FeatureLayer in myMap1:
             	  Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The ArcGISTiledMapsServiceLayer 
             	  layer is first Layer added to the Map's Layers Collection and is drawn on the bottom. A FeatureLayer 
             	  is then added to the map and draws on top of the background layer.
             	  Set the Map1 Extent to zoom to the continental United States.
             	  --&gt;
             	  &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,227,0,0" 
             	        Name="Map1" VerticalAlignment="Top" Height="375" Width="375" 
             	        Extent="-130,10,-70,60" &gt;
             	            
             	    &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer1"
             	                                     Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
             	
             	    &lt;!--
             	    The FeatureLayer contains United States cities as Markers (aka. Points). The Where clause for 
             	    the FeatureLayer is optional. The Where clause is necessary when more that 500/1000 records 
             	    returned. In ArcGIS Server 9.3.1 and prior, the default maximum is 500 records returned per 
             	    FeatureLayer. In ArcGIS Server 10 the default is 1000. This setting is configurable per map 
             	    service using ArcCatalog or ArcGIS Server Manager (on the Parameters tab).
             	    --&gt;
             	     &lt;esri:FeatureLayer ID="MyFeatureLayer1"
             	                        Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/0" 
             	                        Where="POP1990 &gt; 100000" /&gt;
             	  &lt;/esri:Map&gt;
             	
             	
             	  &lt;!--
             	  Display the FeatureLayer in myMap2 that has a ClassBreaksRenderer applied:
             	  Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The ArcGISTiledMapsServiceLayer 
             	  layer is first Layer added to the Map's Layers Collection and is drawn on the bottom. A FeatureLayer 
             	  is then added to the map and draws on top of the background layer.
             	  Set the Map2 Extent to zoom to the continental United States.
             	  --&gt;
             	  &lt;esri:Map Background="White" Height="375" HorizontalAlignment="Left" Margin="408,227,0,0" 
             	            Name="Map2" VerticalAlignment="Top" Width="375" 
             	            Extent="-130,10,-70,60" &gt;
             	    &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer2"
             	                                     Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
             	
             	    &lt;!--
             	    The FeatureLayer contains United States cities as Markers (aka. Points). The Where clause for 
             	    the FeatureLayer is optional. The Where clause is necessary when more that 500/1000 records 
             	    returned. In ArcGIS Server 9.3.1 and prior, the default maximum is 500 records returned per 
             	    FeatureLayer. In ArcGIS Server 10 the default is 1000. This setting is configurable per map 
             	    service using ArcCatalog or ArcGIS Server Manager (on the Parameters tab). Specify the 
             	    Outfields Property to specify which Fields are returned on which the 
             	    ClassBreaksRenderer.Field can use. Specifying the wildcard (*) character in the Add 
             	    Property will return all Fields. 
             	    --&gt;
             	    &lt;esri:FeatureLayer ID="MyFeatureLayer2"
             	                       Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/0" 
             	                       Where="POP1990 &gt; 100000" 
             	                       OutFields="POP1990"&gt;
             	    
             	      &lt;!--
             	      Create the ClassBreakRenderer. Specify which field (via its string name) 
             	      the ClassBreaksRenderer will use for breaking the rendering of the Symbols into groups. 
             	      Note: The Field that is specified for the Field Property MUST be a numeric (Double, 
             	      Integer, SmallInteger, or Single) Field.FieldType. To Render groups of Strings use
             	      the UniqueValueRenderer instead.
             	      --&gt;
             	      &lt;esri:FeatureLayer.Renderer&gt;
             	        &lt;esri:ClassBreaksRenderer Field="POP1990"&gt;
             	        
             	          &lt;!--
             	          Define a default SimpleMarkerSymbol for a 'catch all' to draw the features 
             	          for which no ClassBreaksInfo has been defined. In this example, only cities 
             	          with a population (POP1990) from 20,000 to 100,000,000 have a defined 
             	          ClassBreakInfo category and yet all cities with a population greater than 
             	          100,000 will be returned. Defining a default SimpleMarkerSymbol will provide 
             	          symbology for those features that are greater than 100,000 but less than 
             	          200,000. If a ClassBreaksRenderer.DefaultSymbol was not defined these features
             	          would not be drawn on the Map.
             	          --&gt;
             	          &lt;esri:ClassBreaksRenderer.DefaultSymbol&gt;
             	            &lt;esri:SimpleMarkerSymbol Color="Red" Size="3"/&gt;
             	          &lt;/esri:ClassBreaksRenderer.DefaultSymbol&gt;
             	                  
             	          &lt;!--
             	          NOTE: By default if no Style is specified the is specified for a SimpleMarkerSymbol 
             	          the SimpleMarkerStyle.Circle is set.
             	                  
             	          A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning 
             	          classification or grouping) to delineate the different symbology and class break 
             	          information. The next three sections of code define 3 different ClassBreakInfo 
             	          Classes (or groups) and their associated symbology.
             	          --&gt;
             	                
             	          &lt;!--
             	          Group #1: Create a ClassBreakInfo object as a container of information for each 
             	          group. Define the minimum and maximum values for the numeric grouping of the 
             	          Field defined as the ClassBreaksRenderer.Field. Add a description and label.
             	          --&gt;
             	          &lt;esri:ClassBreakInfo MinimumValue="200000" MaximumValue="300000"
             	                                  Description="200K to 300K people" Label="A cyan circle size 6"&gt;
             	            &lt;esri:SimpleMarkerSymbol Color="Cyan" Size="6"/&gt;
             	          &lt;/esri:ClassBreakInfo&gt;
             	                
             	          &lt;!--
             	          Group #2: Create a ClassBreakInfo object as a container of information for each 
             	          group. Define the minimum and maximum values for the numeric grouping of the 
             	          Field defined as the ClassBreaksRenderer.Field. Each ClassBreakInfo grouping 
             	          needs a symbol to display. In this case the SimpleMarkerSymbol Style was specified 
             	          to be a Triangle (rather than the default Circle).  Add a description and label.
             	          --&gt;
             	          &lt;esri:ClassBreakInfo MinimumValue="300000" MaximumValue="750000"
             	                                  Description="300K to 750 people" Label="An olive triangle size 10"&gt;
             	            &lt;esri:SimpleMarkerSymbol Color="Olive" Size="10" Style="Triangle"/&gt;
             	          &lt;/esri:ClassBreakInfo&gt;
             	                
             	          &lt;!--
             	          Group #3: Create a ClassBreakInfo object as a container of information for each 
             	          group. Define the minimum and maximum values for the numeric grouping of the 
             	          Field defined as the ClassBreaksRenderer.Field. Each ClassBreakInfo grouping 
             	          needs a symbol to display. In this case the SimpleMarkerSymbol Style was specified 
             	          to be a Square (rather than the default Circle). Add a description and label.
             	          --&gt;
             	          &lt;esri:ClassBreakInfo MinimumValue="750000" MaximumValue="100000000"
             	                                  Description="750K to 100M people" Label="A black square size 14"&gt;
             	            &lt;esri:SimpleMarkerSymbol Color="Black" Size="14" Style="Square"/&gt;
             	          &lt;/esri:ClassBreakInfo&gt;
             	                                    
                         &lt;/esri:ClassBreaksRenderer&gt;
                       &lt;/esri:FeatureLayer.Renderer&gt;
                     &lt;/esri:FeatureLayer&gt;
                   &lt;/esri:Map&gt;
                 &lt;/Grid&gt;
                 
                 &lt;Grid x:Name="LayoutRoot"&gt;
                   &lt;!-- 
                   Line Example:
                   This example shows how to draw Lines (aka. Polylines) on a FeatureLayer using the ClassBreaksRenderer 
                   Class. This example takes two Map controls as arguments to compare the effect of applying a 
                   ClassBreaksRenderer. Map1 will show a basic FeatureLayer that comes by default from ArcGIS Server. 
                   Map2 will show the same FeatureLayer but with a specific ClassBreaksRenderer applied, to 
                   compare the differences.
                   --&gt;
                 
                   &lt;!--
                   Display the default FeatureLayer in myMap1:
                   Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The ArcGISTiledMapsServiceLayer 
                   layer is first Layer added to the Map's Layers Collection and is drawn on the bottom. A FeatureLayer 
                   is then added to the map and draws on top of the background layer.
                   Set the Map1 Extent to zoom to the continental United States.
                   --&gt;
                   &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,227,0,0" 
                             Name="Map1" VerticalAlignment="Top" Height="375" Width="375" 
                             Extent="-130,10,-70,60" &gt;
                             
                     &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer1"
                                                      Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                   
                     &lt;!--
                     The FeatureLayer contains United States Interstate roads as Lines (aka. Polylines). The Where 
                     clause for the FeatureLayer is optional. The Where clause is necessary when more that 500/1000 
                     records returned. In ArcGIS Server 9.3.1 and prior, the default maximum is 500 records returned 
                     per FeatureLayer. In ArcGIS Server 10 the default is 1000. This setting is configurable per map 
                     service using ArcCatalog or ArcGIS Server Manager (on the Parameters tab).
                     --&gt;
                     &lt;esri:FeatureLayer ID="MyFeatureLayer1"
                                        Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/0" 
                                        Where="ADMN_Class='Interstate'" /&gt;
                   &lt;/esri:Map&gt;
                     
                     
                   &lt;!--
                   Display the FeatureLayer in myMap2 that has a ClassBreaksRenderer applied:
                   Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The ArcGISTiledMapsServiceLayer 
                   layer is first Layer added to the Map's Layers Collection and is drawn on the bottom. A FeatureLayer 
                   is then added to the map and draws on top of the background layer.
                   Set the Map2 Extent to zoom to the continental United States.
                   --&gt;
                   &lt;esri:Map Background="White" Height="375" HorizontalAlignment="Left" Margin="408,227,0,0" 
                             Name="Map2" VerticalAlignment="Top" Width="375" 
                             Extent="-130,10,-70,60" &gt;
                                 
                     &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer2"
                                                      Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                     
                     &lt;!--
                     The FeatureLayer contains United States Interstate roads as Lines (aka. Polylines). The Where 
                     clause for the FeatureLayer is optional. The Where clause is necessary when more that 500/1000 
                     records returned. In ArcGIS Server 9.3.1 and prior, the default maximum is 500 records returned 
                     per FeatureLayer. In ArcGIS Server 10 the default is 1000. This setting is configurable per map 
                     service using ArcCatalog or ArcGIS Server Manager (on the Parameters tab). Specify the 
                     Outfields Property to specify which Fields are returned on which the 
                     ClassBreaksRenderer.Field can use. Specifying the wildcard (*) character in the Add 
                     Property will return all Fields. 
                     --&gt;
                     &lt;esri:FeatureLayer ID="MyFeatureLayer2"
                                        Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/0" 
                                        Where="ADMN_Class='Interstate'" OutFields="LENGTH"&gt;
                       
                       &lt;!--
                       Create the ClassBreakRenderer. Specify which Field field (via its string name) 
                       the ClassBreaksRenderer will use for breaking the rendering of the Symbols into groups. 
                       Note: The Field that is specified for the Field Property MUST be a numeric (Double, 
                       Integer, SmallInteger, or Single) Field.FieldType. To Render groups of Strings use
                       the UniqueValueRenderer instead.
                       --&gt;
                       &lt;esri:FeatureLayer.Renderer&gt;
                         &lt;esri:ClassBreaksRenderer Field="LENGTH"&gt;
                             
                           &lt;!--
                           Define a default SimpleLineSymbol for a 'catch all' to draw the features 
                           for which no ClassBreaksInfo has been defined. In this example, only Interstate 
                           roads with a road-length (LENGTH) from 50 to 1,000 miles have a defined 
                           ClassBreakInfo category and yet all the Interstate roads will be returned (really 
                           only the first 500 features are returned due to the ArcGIS Service configuration). 
                           Defining a default SimpleLineSymbol will provide symbology for those features that 
                           have road lengths greater than 0 but less than 50 miles long. If a 
                           ClassBreaksRenderer.DefaultSymbol was not defined these features would not be 
                           drawn on the Map.
                           --&gt;
                           &lt;esri:ClassBreaksRenderer.DefaultSymbol&gt;
                             &lt;esri:SimpleLineSymbol Color="Yellow" Width="5"/&gt;
                           &lt;/esri:ClassBreaksRenderer.DefaultSymbol&gt;
                           
                           &lt;!--
                           NOTE: By default if no LineStyle is specified the is specified for a 
                           SimpleLineSymbol the LineStyle.Solid is set.
                           
                           A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning 
                           classification or grouping) to delineate the different symbology and class break 
                           information. The next three sections of code define 3 different ClassBreakInfo 
                           Classes (or groups) and their associated symbology.
                           --&gt;
                           
                           &lt;!--
                           Group #1: Create a ClassBreakInfo object as a container of information for each 
                           group. Define the minimum and maximum values for the numeric grouping of the 
                           Field defined as the ClassBreaksRenderer.Field. Add a description and label.
                           --&gt;
                           &lt;esri:ClassBreakInfo MinimumValue="50" MaximumValue="100"
                                                   Description="50 to 100 miles long" Label="A cyan solid line, width 3"&gt;
                             &lt;esri:SimpleLineSymbol Color="Cyan" Width="3"/&gt;
                           &lt;/esri:ClassBreakInfo&gt;
                          
                           &lt;!--
                           Group #2: Create a ClassBreakInfo object as a container of information for each 
                           group. Define the minimum and maximum values for the numeric grouping of the 
                           Field defined as the ClassBreaksRenderer.Field. Each ClassBreakInfo grouping 
                           needs a symbol to display. In this case the SimpleLineSymbol LineStyle was 
                           specified to be a Dash (rather than the default Solid). Add a description and label.
                           --&gt;
                           &lt;esri:ClassBreakInfo MinimumValue="100" MaximumValue="200"
                                                   Description="100 to 200 miles long" Label="An olive dash line, width 1"&gt;
                             &lt;esri:SimpleLineSymbol Color="Olive" Width="1" Style="Dash"/&gt;
                           &lt;/esri:ClassBreakInfo&gt;
                          
                           &lt;!--
                           Group #3: Create a ClassBreakInfo object as a container of information for each 
                           group. Define the minimum and maximum values for the numeric grouping of the 
                           Field defined as the ClassBreaksRenderer.Field. Each ClassBreakInfo grouping 
                           needs a symbol to display. In this case the SimpleLineSymbol LineStyle was 
                           specified to be a Dot (rather than the default Solid). Add a description and label.
                           --&gt;
                           &lt;esri:ClassBreakInfo MinimumValue="200" MaximumValue="1000"
                                                   Description="200 to 1000 miles long" Label="A black dot line, width 2"&gt;
                             &lt;esri:SimpleLineSymbol Color="Black" Width="2" Style="Dot"/&gt;
                           &lt;/esri:ClassBreakInfo&gt;
                         
                         &lt;/esri:ClassBreaksRenderer&gt;
                       &lt;/esri:FeatureLayer.Renderer&gt;
                     &lt;/esri:FeatureLayer&gt;
                   &lt;/esri:Map&gt;
                 &lt;/Grid&gt;
                 
                 &lt;Grid x:Name="LayoutRoot"&gt;
                   
                   &lt;!-- 
                   Fill Example:
                   This example shows how to draw Fills (aka. Polygons) on a FeatureLayer using the ClassBreaksRenderer 
                   Class. This example takes two Map controls as arguments to compare the effect of applying a 
                   ClassBreaksRenderer. Map1 will show a basic FeatureLayer that comes by default from ArcGIS Server. 
                   Map2 will show the same FeatureLayer but with a specific ClassBreaksRenderer applied, to 
                   compare the differences.
             	  --&gt;
             	  
             	  &lt;!--
             	  Display the default FeatureLayer in myMap1:
             	  Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The ArcGISTiledMapsServiceLayer 
             	  layer is first Layer added to the Map's Layers Collection and is drawn on the bottom. A FeatureLayer 
             	  is then added to the map and draws on top of the background layer.
             	  Set the Map1 Extent to zoom to the continental United States.
             	  -&gt;
             	  &lt;esri:Map Background="White" HorizontalAlignment="Left" Margin="12,227,0,0" 
             	            Name="Map1" VerticalAlignment="Top" Height="375" Width="375" 
             	            Extent="-130,10,-70,60" &gt;
             	    
             	    &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer1"
             	                                     Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
             	    
             	    &lt;!--
             	    The FeatureLayer contains US States as Fills (aka. Polygons). The Where clause for the 
             	    FeatureLayer is optional. The Where clause is necessary when more that 500/1000 records 
             	    returned. In ArcGIS Server 9.3.1 and prior, the default maximum is 500 records returned 
             	    per FeatureLayer. In ArcGIS Server 10 the default is 1000. This setting is configurable 
             	    per map service using ArcCatalog or ArcGIS Server Manager (on the Parameters tab). 
             	    Tip: The syntax "1=1" for the Where clauses returns all records!
             	    --&gt;
             	    &lt;esri:FeatureLayer ID="MyFeatureLayer1"
             	                       Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/2" 
             	                       Where="1=1" /&gt;
             	  &lt;/esri:Map&gt;
             	  
             	          
             	  &lt;!--
             	  Display the FeatureLayer in myMap2 that has a ClassBreaksRenderer applied:
             	  Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The ArcGISTiledMapsServiceLayer 
             	  layer is first Layer added to the Map's Layers Collection and is drawn on the bottom. A FeatureLayer 
             	  is then added to the map and draws on top of the background layer.
             	  Set the Map2 Extent to zoom to the continental United States.
             	  --&gt;
             	  &lt;esri:Map Background="White" Height="375" HorizontalAlignment="Left" Margin="408,227,0,0" 
             	            Name="Map2" VerticalAlignment="Top" Width="375" 
             	            Extent="-130,10,-70,60" &gt;
             	    
             	    &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer2"
             	                                     Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
             	    
             	    &lt;!--
             	    The FeatureLayer contains US States as Fills (aka. Polygons). The Where clause for the 
             	    FeatureLayer is optional. The Where clause is necessary when more that 500/1000 records 
             	    returned. In ArcGIS Server 9.3.1 and prior, the default maximum is 500 records returned 
             	    per FeatureLayer. In ArcGIS Server 10 the default is 1000. This setting is configurable 
             	    per map service using ArcCatalog or ArcGIS Server Manager (on the Parameters tab). 
             	    Tip: The syntax "1=1" for the Where clauses returns all records!
             	    --&gt;
             	    &lt;esri:FeatureLayer ID="MyFeatureLayer2"
             	                       Url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/2" 
             	                       Where="1=1" OutFields="*"&gt;
                       
                       &lt;!--
                       Create the ClassBreakRenderer. Specify which attribute field (via its string name) 
                       the ClassBreaksRenderer will use for breaking the rendering of the Symbols into groups. 
                       Note: The Field that is specified for the Field Property MUST be a numeric (Double, 
                       Integer, SmallInteger, or Single) Field.FieldType. To Render groups of Strings use
                       the UniqueValueRenderer instead.
                       --&gt;
                       &lt;esri:FeatureLayer.Renderer&gt;
                         &lt;esri:ClassBreaksRenderer Field="POP1990"&gt;
                           
                           &lt;!--
                           Define a default SimpleLineSymbol for a 'catch all' to draw the features 
                           for which no ClassBreaksInfo has been defined. In this example, only states 
                           with a population (POP1990) from 1,000,000 to 100,000,000 persons have a 
                           defined ClassBreakInfo category and yet all states will be returned. Defining a 
                           default SimpleFillSymbol will provide symbology for those features that are 
                           greater than 0 but less than 1,000,000. If a ClassBreaksRenderer.DefaultSymbol 
                           was not defined these features would not be drawn on the Map.
                           --&gt;
                           &lt;esri:ClassBreaksRenderer.DefaultSymbol&gt;
                             &lt;esri:SimpleFillSymbol Fill="Yellow"/&gt;
                           &lt;/esri:ClassBreaksRenderer.DefaultSymbol&gt;
                           
                           &lt;!--
                           A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning 
                           classification or grouping) to delineate the different symbology and class break 
                           information. The next three sections of code define 3 different ClassBreakInfo 
                           Classes (or groups) and their associated symbology.
                           --&gt;
                           
                           &lt;!--
                           Group #1: Create a ClassBreakInfo object as a container of information for each 
                           group. Define the minimum and maximum values for the numeric grouping of the 
                           Field defined as the ClassBreaksRenderer.Field. Add a description and label.
                           --&gt;
                           &lt;esri:ClassBreakInfo MinimumValue="1000000" MaximumValue="3000000"
                                                   Description="1M to 3M people" Label="A cyan solid fill"&gt;
                             &lt;esri:SimpleFillSymbol Fill="Cyan"/&gt;
                           &lt;/esri:ClassBreakInfo&gt;
                           
                           &lt;!--
                           Group #2: Create a ClassBreakInfo object as a container of information for each 
                           group. Define the minimum and maximum values for the numeric grouping of the 
                           Field defined as the ClassBreaksRenderer.Field. Add a description and label.
                           --&gt;
                           &lt;esri:ClassBreakInfo MinimumValue="3000000" MaximumValue="10000000"
                                                   Description="3M to 10M people" Label="An olive solid fill"&gt;
                             &lt;esri:SimpleFillSymbol Fill="Olive"/&gt;
                           &lt;/esri:ClassBreakInfo&gt;
                           
                           &lt;!--
                           Group #3: Create a ClassBreakInfo object as a container of information for each 
                           group. Define the minimum and maximum values for the numeric grouping of the 
                           Field defined as the ClassBreaksRenderer.Field. Add a description and label.
                           --&gt;
                           &lt;esri:ClassBreakInfo MinimumValue="10000000" MaximumValue="100000000
                                                   Description="10M to 100M people" Label="A black solid fill""&gt;
                             &lt;esri:SimpleFillSymbol Fill="Black"/&gt;
                           &lt;/esri:ClassBreakInfo&gt;
                         
                         &lt;/esri:ClassBreaksRenderer&gt;
                       &lt;/esri:FeatureLayer.Renderer&gt;
                     &lt;/esri:FeatureLayer&gt;
                   &lt;/esri:Map&gt;
                 &lt;/Grid&gt;
            
                 </code>
                 
                 <code title="Example CS1" description="" lang="CS">
                 public void MarkerClassBreaksRenderer(ESRI.ArcGIS.Client.Map myMap1, ESRI.ArcGIS.Client.Map myMap2)
                 {
                   
                   // This example shows how to draw Markers (aka. Points) on a FeatureLayer using the ClassBreaksRenderer 
                   // Class. This example takes two Map controls as arguments to compare the effect of applying a 
                   // ClassBreaksRenderer. Map1 will show a basic FeatureLayer that comes by default from ArcGIS Server. 
                   // Map2 will show the same FeatureLayer but with a specific ClassBreaksRenderer applied, to 
                   // compare the differences.
                   
                   // ---------------------------------------------------------------------------------------------------------------------
                   
                   // Clear the Layers in the Map's for runs of the function. 
                   myMap1.Layers.Clear();
                   myMap2.Layers.Clear();
                   
                   // ---------------------------------------------------------------------------------------------------------------------
                   
                   // Display the default FeatureLayer in myMap1
                   // ==========================================
                   
                   // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
                   // Layers Collection is on the bottom and the other Layer is added on the top.
                   ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
                   myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
                   myMap1.Layers.Add(myArcGISTiledMapServiceLayer1);
                   
                   
                   // Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
                   ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer1 = new ESRI.ArcGIS.Client.FeatureLayer();
                   
                   // This FeatureLayer contains United States cities as Markers (aka. Points).
                   myFeatureLayer1.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/0";
                   
                   // The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
                   // 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
                   // default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
                   // (on the Parameters tab). 
                   myFeatureLayer1.Where = "POP1990 &gt; 100000";
                   
                   // Add the myFeatureLayer1 to the Map1 Layer Collection. 
                   myMap1.Layers.Add(myFeatureLayer1);
                   
                   // Zoom to the continental United States.
                   ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope1 = new ESRI.ArcGIS.Client.Geometry.Envelope();
                   myEnvelope1.XMin = -130;
                   myEnvelope1.YMin = 10;
                   myEnvelope1.XMax = -70;
                   myEnvelope1.YMax = 60;
                   myMap1.Extent = myEnvelope1;
                   
                   // -----------------------------------------------------------------------------------------------------------------------
                   
                   // Display the FeatureLayer in myMap2 that has a ClassBreaksRenderer applied
                   // =========================================================================
                   
                   // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
                   // Layers Collection is on the bottom and the other Layer is added on the top.
                   ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
                   myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
                   myMap2.Layers.Add(myArcGISTiledMapServiceLayer2);
                   
                   
                   // Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
                   ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer2 = new ESRI.ArcGIS.Client.FeatureLayer();
                   
                   // This FeatureLayer contains United States cities as Markers (aka. Points).
                   myFeatureLayer2.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/0";
                   
                   // The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
                   // 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
                   // default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
                   // (on the Parameters tab). 
                   myFeatureLayer2.Where = "POP1990 &gt; 100000";
                   
                   // Specify the Outfields Property to specify which Fields are returned on which the 
                   // ClassBreaksRenderer.Field can use. Specifying the wildcard (*) character in the Add Property will 
                   // return all Fields. 
                   myFeatureLayer2.OutFields.Add("POP1990");
                   
                   // Create the ClassBreakRenderer.
                   ESRI.ArcGIS.Client.ClassBreaksRenderer myClassBreaksRenderer = new ESRI.ArcGIS.Client.ClassBreaksRenderer();
                   
                   // Specify which Field (via its string name) the ClassBreaksRenderer will use for breaking the rendering
                   // of the Symbols into groups. Note: The Field that is specified for the Field Property MUST be a
                   // numeric (Double, Integer, SmallInteger, or Single) Field.FieldType. To Render groups of Strings use
                   // the UniqueValueRenderer instead.
                   myClassBreaksRenderer.Field = "POP1990"; // Requires a numeric Field
                   
                   
                   // Define a default SimpleMarkerSymbol for a 'catch all' to draw the features for which no ClassBreaksInfo
                   // has been defined. In this example, only cities with a population (POP1990) from 20,000 to 100,000,000 
                   // have a defined ClassBreakInfo category and yet all cities with a population greater than 100,000 will
                   // be returned. Defining a default SimpleMarkerSymbol will provide symbology for those features that are
                   // greater than 100,000 but less than 200,000. If a ClassBreaksRenderer.DefaultSymbol was not defined 
                   // these features would not be drawn on the Map.
                   ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol defaultSimpleMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
                   System.Windows.Media.SolidColorBrush defaultBrush = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 0, 0)); //Red
                   defaultSimpleMarkerSymbol.Color = defaultBrush;
                   defaultSimpleMarkerSymbol.Size = 3; 
                   myClassBreaksRenderer.DefaultSymbol = defaultSimpleMarkerSymbol;
                   
                   // NOTE: By default if no .Style is specified the is specified for a SimpleMarkerSymbol the
                   // ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle is set.
                   
                   // A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning classification or grouping)
                   // to delineate the different symbology and class break information. The next three sections of code
                   // define 3 different ClassBreakInfo Classes (or groups) and their associated symbology.
                   
                   // Group #1
                   // ========
                   // Create a ClassBreakInfo object as a container of information for each group. 
                   ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo1 = new ESRI.ArcGIS.Client.ClassBreakInfo();
                   
                   // Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   // ClassBreaksRenderer.Field.
                   myClassBreakInfo1.MinimumValue = 200000;
                   myClassBreakInfo1.MaximumValue = 300000;
                   
                   // Add an informational description and label for the group.
                   myClassBreakInfo1.Description = "200K to 300K people";
                   myClassBreakInfo1.Label = "A cyan circle size 6";
                   
                   // Each ClassBreakInfo grouping needs a symbol to display
                   ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol1 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
                   System.Windows.Media.SolidColorBrush myBrush1 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 255)); //Cyan
                   mySimpleMarkerSymbol1.Color = myBrush1;
                   mySimpleMarkerSymbol1.Size = 6; 
                   myClassBreakInfo1.Symbol = mySimpleMarkerSymbol1;
                   
                   // Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo1);
                   
                   // Group #2
                   // ========
                   // Create a ClassBreakInfo object as a container of information for each group. 
                   ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo2 = new ESRI.ArcGIS.Client.ClassBreakInfo();
                   
                   // Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   // ClassBreaksRenderer.Field.
                   myClassBreakInfo2.MinimumValue = 300000;
                   myClassBreakInfo2.MaximumValue = 750000;
                   
                   // Add an informational description and label for the group.
                   myClassBreakInfo2.Description = "300K to 750 people";
                   myClassBreakInfo2.Label = "An olive triangle size 10";
                   
                   // Each ClassBreakInfo grouping needs a symbol to display. In this case the SimpleMarkerSymbol Style
                   // was specified to be a Triangle (rather than the default Circle).
                   ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol2 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
                   System.Windows.Media.SolidColorBrush myBrush2 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 107, 142, 35)); // Olive
                   mySimpleMarkerSymbol2.Color = myBrush2;
                   mySimpleMarkerSymbol2.Size = 10; 
                   mySimpleMarkerSymbol2.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Triangle;
                   myClassBreakInfo2.Symbol = mySimpleMarkerSymbol2;
                   
                   // Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo2);
                   
                   // Group #3
                   // ========
                   // Create a ClassBreakInfo object as a container of information for each group. 
                   ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo3 = new ESRI.ArcGIS.Client.ClassBreakInfo();
                   
                   // Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   // ClassBreaksRenderer.Field.
                   myClassBreakInfo3.MinimumValue = 750000;
                   myClassBreakInfo3.MaximumValue = 100000000;
                   
                   // Add an informational description and label for the group.
                   myClassBreakInfo3.Description = "750K to 100M people";
                   myClassBreakInfo3.Label = "A black square size 14";
                   
                   // Each ClassBreakInfo grouping needs a symbol to display. In this case the SimpleMarkerSymbol Style
                   // was specified to be a Square (rather than the default Circle).
                   ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol3 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
                   System.Windows.Media.SolidColorBrush myBrush3 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); //BLACK
                   mySimpleMarkerSymbol3.Color = myBrush3;
                   mySimpleMarkerSymbol3.Size = 14;
                   mySimpleMarkerSymbol3.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square;
                   myClassBreakInfo3.Symbol = mySimpleMarkerSymbol3;
                   
                   // Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo3);
                   
                   // Now that all of the ClassBreakInfo information has been added to the ClassBreaksRenderer object, 
                   // associate the ClassBreaksRenderer with the FeatuerLayer.Renderer Property.
                   myFeatureLayer2.Renderer = myClassBreaksRenderer;
                   
                   // Add the myFeatureLayer2 to the Map2 Layer Collection. 
                   Map2.Layers.Add(myFeatureLayer2);
                   
                   // Zoom to the continental United States.
                   ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope2 = new ESRI.ArcGIS.Client.Geometry.Envelope();
                   myEnvelope2.XMin = -130;
                   myEnvelope2.YMin = 10;
                   myEnvelope2.XMax = -70;
                   myEnvelope2.YMax = 60;
                   Map2.Extent = myEnvelope2;
                   
                 }
                   
                 public void LineClassBreaksRenderer(ESRI.ArcGIS.Client.Map myMap1, ESRI.ArcGIS.Client.Map myMap2)
                 {
                   
                   // This example shows how to draw Lines (aka. Polylines) on a FeatureLayer using the ClassBreaksRenderer 
                   // Class. This example takes two Map controls as arguments to compare the effect of applying a 
                   // ClassBreaksRenderer. Map1 will show a basic FeatureLayer that comes by default from ArcGIS Server. 
                   // Map2 will show the same FeatureLayer but with a specific ClassBreaksRenderer applied, to 
                   // compare the differences.
                   
                   // ---------------------------------------------------------------------------------------------------------------------
                   
                   // Clear the Layers in the Map's for runs of the function. 
                   myMap1.Layers.Clear();
                   myMap2.Layers.Clear();
                   
                   // ---------------------------------------------------------------------------------------------------------------------
                   
                   // Display the default FeatureLayer in myMap1
                   // ==========================================
                   
                   // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
                   // Layers Collection is on the bottom and the other Layer is added on the top.
                   ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
                   myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
                   myMap1.Layers.Add(myArcGISTiledMapServiceLayer1);
                   
                   
                   // Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
                   ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer1 = new ESRI.ArcGIS.Client.FeatureLayer();
                   
                   // This FeatureLayer contains United States Interstate roads as Lines (aka. Polylines).
                   myFeatureLayer1.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/0";
                   
                   // The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
                   // 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
                   // default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
                   // (on the Parameters tab). 
                   myFeatureLayer1.Where = "ADMN_Class='Interstate'";
                   
                   // Add the myFeatureLayer1 to the Map1 Layer Collection. 
                   myMap1.Layers.Add(myFeatureLayer1);
                   
                   // Zoom to the continental United States.
                   ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope1 = new ESRI.ArcGIS.Client.Geometry.Envelope();
                   myEnvelope1.XMin = -130;
                   myEnvelope1.YMin = 10;
                   myEnvelope1.XMax = -70;
                   myEnvelope1.YMax = 60;
                   myMap1.Extent = myEnvelope1;
                   
                   // -----------------------------------------------------------------------------------------------------------------------
                   
                   // Display the FeatureLayer in myMap2 that has a ClassBreaksRenderer applied
                   // =========================================================================
                   
                   // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
                   // Layers Collection is on the bottom and the other Layer is added on the top.
                   ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
                   myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
                   myMap2.Layers.Add(myArcGISTiledMapServiceLayer2);
                   
                   
                   // Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
                   ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer2 = new ESRI.ArcGIS.Client.FeatureLayer();
                   
                   // This FeatureLayer contains United States Interstate roads as Lines (aka. Polylines).
                   myFeatureLayer2.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/0";
                   
                   // The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
                   // 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
                   // default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
                   // (on the Parameters tab). 
                   myFeatureLayer2.Where = "ADMN_Class='Interstate'";
                   
                   // Specify the Outfields Property to specify which Fields are returned on which the 
                   // ClassBreaksRenderer.Field can use. Specifying the wildcard (*) character in the Add Property will 
                   // return all Fields. 
                   myFeatureLayer2.OutFields.Add("LENGTH");
                   
                   // Create the ClassBreakRenderer.
                   ESRI.ArcGIS.Client.ClassBreaksRenderer myClassBreaksRenderer = new ESRI.ArcGIS.Client.ClassBreaksRenderer();
                   
                   // Specify which Field (via its string name) the ClassBreaksRenderer will use for breaking the rendering
                   // of the Symbols into groups. Note: The Field that is specified for the Field Property MUST be a
                   // numeric (Double, Integer, SmallInteger, or Single) Field.FieldType. To Render groups of Strings use
                   // the UniqueValueRenderer instead.
                   myClassBreaksRenderer.Field = "LENGTH"; // Requires a numeric Field
                   
                   
                   // Define a default SimpleLineSymbol for a 'catch all' to draw the features for which no ClassBreaksInfo
                   // has been defined. In this example, only Interstate roads with a road-length (LENGTH) from 50 to 1,000 
                   // miles have a defined ClassBreakInfo category and yet all the Interstate roads will be returned (really 
                   // only the first 500 features are returned due to the ArcGIS Service configuration). Defining a default 
                   // SimpleLineSymbol will provide symbology for those features that have road lengths greater than 0 but 
                   // less than 50 miles long. If a ClassBreaksRenderer.DefaultSymbol was not defined these features would 
                   // not be drawn on the Map.
                   ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol defaultSimpleLineSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol();
                   System.Windows.Media.SolidColorBrush defaultBrush = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)); //Yellow
                   defaultSimpleLineSymbol.Color = defaultBrush;
                   defaultSimpleLineSymbol.Width = 5; 
                   myClassBreaksRenderer.DefaultSymbol = defaultSimpleLineSymbol;
                   
                   // NOTE: By default if no .LineStyle is specified the is specified for a SimpleLineSymbol the
                   // ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Solid is set.
                   
                   // A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning classification or grouping)
                   // to delineate the different symbology and class break information. The next three sections of code
                   // define 3 different ClassBreakInfo Classes (or groups) and their associated symbology.
                   
                   // Group #1
                   // ========
                   // Create a ClassBreakInfo object as a container of information for each group. 
                   ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo1 = new ESRI.ArcGIS.Client.ClassBreakInfo();
                   
                   // Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   // ClassBreaksRenderer.Field.
                   myClassBreakInfo1.MinimumValue = 50;
                   myClassBreakInfo1.MaximumValue = 100;
                   
                   // Add an informational description and label for the group.
                   myClassBreakInfo1.Description = "50 to 100 miles long";
                   myClassBreakInfo1.Label = "A cyan solid line, width 3";
                   
                   // Each ClassBreakInfo grouping needs a symbol to display
                   ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol mySimpleLineSymbol1 = new ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol();
                   System.Windows.Media.SolidColorBrush myBrush1 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 255)); //Cyan
                   mySimpleLineSymbol1.Color = myBrush1;
                   mySimpleLineSymbol1.Width = 3; 
                   myClassBreakInfo1.Symbol = mySimpleLineSymbol1;
                   
                   // Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo1);
                   
                   // Group #2
                   // ========
                   // Create a ClassBreakInfo object as a container of information for each group. 
                   ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo2 = new ESRI.ArcGIS.Client.ClassBreakInfo();
                   
                   // Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   // ClassBreaksRenderer.Field.
                   myClassBreakInfo2.MinimumValue = 100;
                   myClassBreakInfo2.MaximumValue = 200;
                   
                   // Add an informational description and label for the group.
                   myClassBreakInfo2.Description = "100 to 200 miles long";
                   myClassBreakInfo2.Label = "An olive dash line, width 1";
                   
                   // Each ClassBreakInfo grouping needs a symbol to display. In this case the SimpleLineSymbol LineStyle
                   // was specified to be a Dash (rather than the default Solid).
                   ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol mySimpleLineSymbol2 = new ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol();
                   System.Windows.Media.SolidColorBrush myBrush2 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 107, 142, 35)); // Olive
                   mySimpleLineSymbol2.Color = myBrush2;
                   mySimpleLineSymbol2.Width = 1; 
                   mySimpleLineSymbol2.Style = ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Dash;
                   myClassBreakInfo2.Symbol = mySimpleLineSymbol2;
                   
                   // Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo2);
                   
                   // Group #3
                   // ========
                   // Create a ClassBreakInfo object as a container of information for each group. 
                   ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo3 = new ESRI.ArcGIS.Client.ClassBreakInfo();
                   
                   // Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   // ClassBreaksRenderer.Field.
                   myClassBreakInfo3.MinimumValue = 200;
                   myClassBreakInfo3.MaximumValue = 1000;
                   
                   // Add an informational description and label for the group.
                   myClassBreakInfo3.Description = "200 to 1000 miles long";
                   myClassBreakInfo3.Label = "A black dot line, width 2";
                   
                   // Each ClassBreakInfo grouping needs a symbol to display. In this case the SimpleLineSymbol LineStyle
                   // was specified to be a Dot (rather than the default Solid).
                   ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol mySimpleLineSymbol3 = new ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol();
                   System.Windows.Media.SolidColorBrush myBrush3 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); //Black
                   mySimpleLineSymbol3.Color = myBrush3;
                   mySimpleLineSymbol3.Width = 2; 
                   mySimpleLineSymbol3.Style = ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Dot;
                   myClassBreakInfo3.Symbol = mySimpleLineSymbol3;
                   
                   // Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo3);
                   
                   // Now that all of the ClassBreakInfo information has been added to the ClassBreaksRenderer object, 
                   // associate the ClassBreaksRenderer with the FeatuerLayer.Renderer Property.
                   myFeatureLayer2.Renderer = myClassBreaksRenderer;
                   
                   // Add the myFeatureLayer2 to the Map2 Layer Collection. 
                   Map2.Layers.Add(myFeatureLayer2);
                   
                   // Zoom to the continental United States.
                   ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope2 = new ESRI.ArcGIS.Client.Geometry.Envelope();
                   myEnvelope2.XMin = -130;
                   myEnvelope2.YMin = 10;
                   myEnvelope2.XMax = -70;
                   myEnvelope2.YMax = 60;
                   Map2.Extent = myEnvelope2;
                   
                 }
                   
                 public void FillClassBreaksRenderer(ESRI.ArcGIS.Client.Map myMap1, ESRI.ArcGIS.Client.Map myMap2)
                 {
                   
                   // This example shows how to draw Fills (aka. Polygons) on a FeatureLayer using the ClassBreaksRenderer 
                   // Class. This example takes two Map controls as arguments to compare the effect of applying a 
                   // ClassBreaksRenderer. Map1 will show a basic FeatureLayer that comes by default from ArcGIS Server. 
                   // Map2 will show the same FeatureLayer but with a specific ClassBreaksRenderer applied, to 
                   // compare the differences.
                   
                   // ---------------------------------------------------------------------------------------------------------------------
                   
                   // Clear the Layers in the Map's for runs of the function. 
                   myMap1.Layers.Clear();
                   myMap2.Layers.Clear();
                   
                   // ---------------------------------------------------------------------------------------------------------------------
                   
                   // Display the default FeatureLayer in myMap1
                   // ==========================================
                   
                   // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
                   // Layers Collection is on the bottom and the other Layer is added on the top.
                   ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
                   myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
                   myMap1.Layers.Add(myArcGISTiledMapServiceLayer1);
                   
                   
                   // Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
                   ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer1 = new ESRI.ArcGIS.Client.FeatureLayer();
                   
                   // This FeatureLayer contains US states as Fills (aka. Polygons).
                   myFeatureLayer1.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/2";
                   
                   // The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
                   // 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
                   // default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
                   // (on the Parameters tab). 
                   myFeatureLayer1.Where = "1=1"; // Tip: The syntax "1=1" returns all records!
                   
                   // Add the myFeatureLayer1 to the Map1 Layer Collection. 
                   myMap1.Layers.Add(myFeatureLayer1);
                   
                   // Zoom to the continental United States.
                   ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope1 = new ESRI.ArcGIS.Client.Geometry.Envelope();
                   myEnvelope1.XMin = -130;
                   myEnvelope1.YMin = 10;
                   myEnvelope1.XMax = -70;
                   myEnvelope1.YMax = 60;
                   myMap1.Extent = myEnvelope1;
                   
                   // -----------------------------------------------------------------------------------------------------------------------
                   
                   // Display the FeatureLayer in myMap2 that has a ClassBreaksRenderer applied
                   // =========================================================================
                   
                   // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
                   // Layers Collection is on the bottom and the other Layer is added on the top.
                   ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
                   myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
                   myMap2.Layers.Add(myArcGISTiledMapServiceLayer2);
                   
                   
                   // Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
                   ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer2 = new ESRI.ArcGIS.Client.FeatureLayer();
                   
                   // This FeatureLayer contains US states as Fills (aka. Polygons).
                   myFeatureLayer2.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/2";
                   
                   // The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
                   // 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
                   // default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
                   // (on the Parameters tab). 
                   myFeatureLayer2.Where = "1=1"; // Tip: The syntax "1=1" returns all records!
                   
                   // Specify the Outfields Property to specify which Fields are returned on which the 
                   // ClassBreaksRenderer.Field can use. Specifying the wildcard (*) character in the Add Property will 
                   // return all Fields. 
                   myFeatureLayer2.OutFields.Add("*");
                   
                   // Create the ClassBreakRenderer.
                   ESRI.ArcGIS.Client.ClassBreaksRenderer myClassBreaksRenderer = new ESRI.ArcGIS.Client.ClassBreaksRenderer();
                   
                   // Specify which Field (via its string name) the ClassBreaksRenderer will use for breaking the rendering
                   // of the Symbols into groups. Note: The Field that is specified for the Field Property MUST be a
                   // numeric (Double, Integer, SmallInteger, or Single) Field.FieldType. To Render groups of Strings use
                   // the UniqueValueRenderer instead.
                   myClassBreaksRenderer.Field = "POP1990"; // Requires a numeric Field
                   
                   
                   // Define a default SimpleFillSymbol for a 'catch all' to draw the features for which no ClassBreaksInfo
                   // has been defined. In this example, only states with a population (POP1990) from 1,000,000 to 100,000,000 
                   // persons have a defined ClassBreakInfo category and yet all states will be returned. Defining a default 
                   // SimpleFillSymbol will provide symbology for those features that are greater than 0 but less than 
                   // 1,000,000. If a ClassBreaksRenderer.DefaultSymbol was not defined these features would not be drawn on 
                   // the Map.
                   ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol defaultSimpleFillSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
                   System.Windows.Media.SolidColorBrush defaultBrush = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)); //Yellow
                   defaultSimpleFillSymbol.Fill = defaultBrush;
                   myClassBreaksRenderer.DefaultSymbol = defaultSimpleFillSymbol;
                   
                   
                   // A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning classification or grouping)
                   // to delineate the different symbology and class break information. The next three sections of code
                   // define 3 different ClassBreakInfo Classes (or groups) and their associated symbology.
                   
                   // Group #1
                   // ========
                   // Create a ClassBreakInfo object as a container of information for each group. 
                   ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo1 = new ESRI.ArcGIS.Client.ClassBreakInfo();
                   
                   // Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   // ClassBreaksRenderer.Field.
                   myClassBreakInfo1.MinimumValue = 1000000;
                   myClassBreakInfo1.MaximumValue = 3000000;
                   
                   // Add an informational description and label for the group.
                   myClassBreakInfo1.Description = "1M to 3M people";
                   myClassBreakInfo1.Label = "A cyan solid fill";
                   
                   // Each ClassBreakInfo grouping needs a symbol to display
                   ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol mySimpleFillSymbol1 = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
                   System.Windows.Media.SolidColorBrush myBrush1 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 255)); //Cyan
                   mySimpleFillSymbol1.Fill = myBrush1;
                   myClassBreakInfo1.Symbol = mySimpleFillSymbol1;
                   
                   // Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo1);
                   
                   // Group #2
                   // ========
                   // Create a ClassBreakInfo object as a container of information for each group. 
                   ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo2 = new ESRI.ArcGIS.Client.ClassBreakInfo();
                   
                   // Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   // ClassBreaksRenderer.Field.
                   myClassBreakInfo2.MinimumValue = 3000000;
                   myClassBreakInfo2.MaximumValue = 10000000;
                   
                   // Add an informational description and label for the group.
                   myClassBreakInfo2.Description = "3M to 10M people";
                   myClassBreakInfo2.Label = "An olive solid fill";
                   
                   // Each ClassBreakInfo grouping needs a symbol to display. 
                   ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol mySimpleFillSymbol2 = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
                   System.Windows.Media.SolidColorBrush myBrush2 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 107, 142, 35)); // Olive
                   mySimpleFillSymbol2.Fill = myBrush2;
                   myClassBreakInfo2.Symbol = mySimpleFillSymbol2;
                   
                   // Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo2);
                   
                   // Group #3
                   // ========
                   // Create a ClassBreakInfo object as a container of information for each group. 
                   ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo3 = new ESRI.ArcGIS.Client.ClassBreakInfo();
                   
                   // Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   // ClassBreaksRenderer.Field.
                   myClassBreakInfo3.MinimumValue = 10000000;
                   myClassBreakInfo3.MaximumValue = 100000000;
                   
                   // Add an informational description and label for the group.
                   myClassBreakInfo3.Description = "10M to 100M people";
                   myClassBreakInfo3.Label = "A black solid fill";
                   
                   // Each ClassBreakInfo grouping needs a symbol to display. 
                   ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol mySimpleFillSymbol3 = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
                   System.Windows.Media.SolidColorBrush myBrush3 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); //BLACK
                   mySimpleFillSymbol3.Fill = myBrush3;
                   myClassBreakInfo3.Symbol = mySimpleFillSymbol3;
                   
                   // Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo3);
                   
                   // Now that all of the ClassBreakInfo information has been added to the ClassBreaksRenderer object, 
                   // associate the ClassBreaksRenderer with the FeatuerLayer.Renderer Property.
                   myFeatureLayer2.Renderer = myClassBreaksRenderer;
                   
                   // Add the myFeatureLayer2 to the Map2 Layer Collection. 
                   Map2.Layers.Add(myFeatureLayer2);
                   
                   // Zoom to the continental United States.
                   ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope2 = new ESRI.ArcGIS.Client.Geometry.Envelope();
                   myEnvelope2.XMin = -130;
                   myEnvelope2.YMin = 10;
                   myEnvelope2.XMax = -70;
                   myEnvelope2.YMax = 60;
                   Map2.Extent = myEnvelope2;
                   
                 }
                 </code>
                 
             	<code title="Example VB1" description="" lang="VB.NET">
             	Public Sub MarkerClassBreaksRenderer(ByVal myMap1 As ESRI.ArcGIS.Client.Map, ByVal myMap2 As ESRI.ArcGIS.Client.Map)
             	
             	  ' This example shows how to draw Markers (aka. Points) on a FeatureLayer using the ClassBreaksRenderer 
             	  ' Class. This example takes two Map controls as arguments to compare the effect of applying a 
             	  ' ClassBreaksRenderer. Map1 will show a basic FeatureLayer that comes by default from ArcGIS Server. 
             	  ' Map2 will show the same FeatureLayer but with a specific ClassBreaksRenderer applied, to 
             	  ' compare the differences.
             	  
             	  ' ---------------------------------------------------------------------------------------------------------------------
             	  
             	  ' Clear the Layers in the Map's for runs of the function. 
             	  myMap1.Layers.Clear()
             	  myMap2.Layers.Clear()
             	  
             	  ' ---------------------------------------------------------------------------------------------------------------------
             	  
             	  ' Display the default FeatureLayer in myMap1
             	  ' ==========================================
             	  
             	  ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
             	  ' Layers Collection is on the bottom and the other Layer is added on the top.
             	  Dim myArcGISTiledMapServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
             	  myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
             	  myMap1.Layers.Add(myArcGISTiledMapServiceLayer1)
             	  
             	  
             	  ' Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
                   Dim myFeatureLayer1 As New ESRI.ArcGIS.Client.FeatureLayer
             	  
                   ' This FeatureLayer contains United States cities as Markers (aka. Points).
                   myFeatureLayer1.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/0"
             	  
                   ' The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
                   ' 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
                   ' default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
                   ' (on the Parameters tab). 
                   myFeatureLayer1.Where = "POP1990 &gt; 100000"
             	  
                   ' Add the myFeatureLayer1 to the Map1 Layer Collection. 
                   myMap1.Layers.Add(myFeatureLayer1)
             	  
                   ' Zoom to the continental United States.
                   Dim myEnvelope1 As New ESRI.ArcGIS.Client.Geometry.Envelope
                   myEnvelope1.XMin = -130
                   myEnvelope1.YMin = 10
                   myEnvelope1.XMax = -70
                   myEnvelope1.YMax = 60
                   myMap1.Extent = myEnvelope1
             	  
                   ' -----------------------------------------------------------------------------------------------------------------------
             	  
                   ' Display the FeatureLayer in myMap2 that has a ClassBreaksRenderer applied
                   ' =========================================================================
             	  
                   ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
                   ' Layers Collection is on the bottom and the other Layer is added on the top.
                   Dim myArcGISTiledMapServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
                   myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
                   myMap2.Layers.Add(myArcGISTiledMapServiceLayer2)
             	  
             	  
                   ' Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
                   Dim myFeatureLayer2 As New ESRI.ArcGIS.Client.FeatureLayer
             	  
                   ' This FeatureLayer contains United States cities as Markers (aka. Points).
                   myFeatureLayer2.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/0"
             	  
                   ' The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
                   ' 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
                   ' default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
                   ' (on the Parameters tab). 
                   myFeatureLayer2.Where = "POP1990 &gt; 100000"
             	  
                   ' Specify the Outfields Property to specify which Fields are returned on which the 
                   ' ClassBreaksRenderer.Field can use. Specifying the wildcard (*) character in the Add Property will 
                   ' return all Fields. 
                   myFeatureLayer2.OutFields.Add("POP1990")
             	  
                   ' Create the ClassBreakRenderer.
                   Dim myClassBreaksRenderer As New ESRI.ArcGIS.Client.ClassBreaksRenderer
             	  
                   ' Specify which Field (via its string name) the ClassBreaksRenderer will use for breaking the rendering
                   ' of the Symbols into groups. Note: The Field that is specified for the Field Property MUST be a
                   ' numeric (Double, Integer, SmallInteger, or Single) Field.FieldType. To Render groups of Strings use
                   ' the UniqueValueRenderer instead.
                   myClassBreaksRenderer.Field = "POP1990" ' Requires a numeric Field
             	  
             	  
                   ' Define a default SimpleMarkerSymbol for a 'catch all' to draw the features for which no ClassBreaksInfo
                   ' has been defined. In this example, only cities with a population (POP1990) from 20,000 to 100,000,000 
                   ' have a defined ClassBreakInfo category and yet all cities with a population greater than 100,000 will
                   ' be returned. Defining a default SimpleMarkerSymbol will provide symbology for those features that are
                   ' greater than 100,000 but less than 200,000. If a ClassBreaksRenderer.DefaultSymbol was not defined 
                   ' these features would not be drawn on the Map.
                   Dim defaultSimpleMarkerSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
                   Dim defaultBrush As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 0, 0)) 'Red
                   defaultSimpleMarkerSymbol.Color = defaultBrush
                   defaultSimpleMarkerSymbol.Size = 3 ' Defining the size of the SimpleMarkerSymbol is optional.
                   myClassBreaksRenderer.DefaultSymbol = defaultSimpleMarkerSymbol
             	  
                   ' NOTE: By default if no .Style is specified the is specified for a SimpleMarkerSymbol the
                   ' ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle is set.
             	  
                   ' A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning classification or grouping)
                   ' to delineate the different symbology and class break information. The next three sections of code
                   ' define 3 different ClassBreakInfo Classes (or groups) and their associated symbology.
             	  
                   ' Group #1
                   ' ========
                   ' Create a ClassBreakInfo object as a container of information for each group. 
                   Dim myClassBreakInfo1 As New ESRI.ArcGIS.Client.ClassBreakInfo
             	  
                   ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   ' ClassBreaksRenderer.Field.
                   myClassBreakInfo1.MinimumValue = 200000
                   myClassBreakInfo1.MaximumValue = 300000
                   
                   ' Add an informational description and label for the group.
                   myClassBreakInfo1.Description = "200K to 300K people"
                   myClassBreakInfo1.Label = "A cyan circle size 6"
                   
                   ' Each ClassBreakInfo grouping needs a symbol to display
                   Dim mySimpleMarkerSymbol1 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
                   Dim myBrush1 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 255)) 'Cyan
                   mySimpleMarkerSymbol1.Color = myBrush1
                   mySimpleMarkerSymbol1.Size = 6
                   myClassBreakInfo1.Symbol = mySimpleMarkerSymbol1
             	  
                   ' Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo1)
             	  
                   ' Group #2
                   ' ========
                   ' Create a ClassBreakInfo object as a container of information for each group. 
                   Dim myClassBreakInfo2 As New ESRI.ArcGIS.Client.ClassBreakInfo
             	  
                   ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   ' ClassBreaksRenderer.Field.
                   myClassBreakInfo2.MinimumValue = 300000
                   myClassBreakInfo2.MaximumValue = 750000
                   
                   ' Add an informational description and label for the group.
                   myClassBreakInfo2.Description = "300K to 750 people"
                   myClassBreakInfo2.Label = "An olive triangle size 10"
                   
                   ' Each ClassBreakInfo grouping needs a symbol to display. In this case the SimpleMarkerSymbol Style
                   ' was specified to be a Triangle (rather than the default Circle).
                   Dim mySimpleMarkerSymbol2 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
                   Dim myBrush2 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 107, 142, 35)) ' Olive
                   mySimpleMarkerSymbol2.Color = myBrush2
                   mySimpleMarkerSymbol2.Size = 10
                   mySimpleMarkerSymbol2.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Triangle
                   myClassBreakInfo2.Symbol = mySimpleMarkerSymbol2
             	  
                   ' Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo2)
             	  
                   ' Group #3
                   ' ========
                   ' Create a ClassBreakInfo object as a container of information for each group. 
                   Dim myClassBreakInfo3 As New ESRI.ArcGIS.Client.ClassBreakInfo
             	  
                   ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   ' ClassBreaksRenderer.Field.
                   myClassBreakInfo3.MinimumValue = 750000
                   myClassBreakInfo3.MaximumValue = 100000000
                   
                   ' Add an informational description and label for the group.
                   myClassBreakInfo3.Description = "750K to 100M people"
                   myClassBreakInfo3.Label = "A black square size 14"
             	  
                   ' Each ClassBreakInfo grouping needs a symbol to display. In this case the SimpleMarkerSymbol Style
                   ' was specified to be a Square (rather than the default Circle).
                   Dim mySimpleMarkerSymbol3 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
                   Dim myBrush3 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) 'BLACK
                   mySimpleMarkerSymbol3.Color = myBrush3
                   mySimpleMarkerSymbol3.Size = 14
                   mySimpleMarkerSymbol3.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square
                   myClassBreakInfo3.Symbol = mySimpleMarkerSymbol3
             	  
                   ' Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo3)
             	  
                   ' Now that all of the ClassBreakInfo information has been added to the ClassBreaksRenderer object, 
                   ' associate the ClassBreaksRenderer with the FeatuerLayer.Renderer Property.
                   myFeatureLayer2.Renderer = myClassBreaksRenderer
             	  
                   ' Add the myFeatureLayer2 to the Map2 Layer Collection. 
                   Map2.Layers.Add(myFeatureLayer2)
             	  
                   ' Zoom to the continental United States.
                   Dim myEnvelope2 As New ESRI.ArcGIS.Client.Geometry.Envelope
                   myEnvelope2.XMin = -130
                   myEnvelope2.YMin = 10
                   myEnvelope2.XMax = -70
                   myEnvelope2.YMax = 60
                   Map2.Extent = myEnvelope2
             	  
                 End Sub
             	  
                 Public Sub LineClassBreaksRenderer(ByVal myMap1 As ESRI.ArcGIS.Client.Map, ByVal myMap2 As ESRI.ArcGIS.Client.Map)
             	  
                   ' This example shows how to draw Lines (aka. Polylines) on a FeatureLayer using the ClassBreaksRenderer 
                   ' Class. This example takes two Map controls as arguments to compare the effect of applying a 
                   ' ClassBreaksRenderer. Map1 will show a basic FeatureLayer that comes by default from ArcGIS Server. 
                   ' Map2 will show the same FeatureLayer but with a specific ClassBreaksRenderer applied, to 
                   ' compare the differences.
             	  
                   ' ---------------------------------------------------------------------------------------------------------------------
                   
                   ' Clear the Layers in the Map's for runs of the function. 
                   myMap1.Layers.Clear()
                   myMap2.Layers.Clear()
             	  
                   ' ---------------------------------------------------------------------------------------------------------------------
             	  
                   ' Display the default FeatureLayer in myMap1
                   ' ==========================================
             	  
                   ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
                   ' Layers Collection is on the bottom and the other Layer is added on the top.
                   Dim myArcGISTiledMapServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
                   myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
                   myMap1.Layers.Add(myArcGISTiledMapServiceLayer1)
             	  
             	  
                   ' Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
                   Dim myFeatureLayer1 As New ESRI.ArcGIS.Client.FeatureLayer
             	  
                   ' This FeatureLayer contains United States Interstate roads as Lines (aka. Polylines).
                   myFeatureLayer1.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/0"
             	  
                   ' The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
                   ' 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
                   ' default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
                   ' (on the Parameters tab). 
                   myFeatureLayer1.Where = "ADMN_Class='Interstate'"
             	  
                   ' Add the myFeatureLayer1 to the Map1 Layer Collection. 
                   myMap1.Layers.Add(myFeatureLayer1)
             	  
                   ' Zoom to the continental United States.
                   Dim myEnvelope1 As New ESRI.ArcGIS.Client.Geometry.Envelope
                   myEnvelope1.XMin = -130
                   myEnvelope1.YMin = 10
                   myEnvelope1.XMax = -70
                   myEnvelope1.YMax = 60
                   myMap1.Extent = myEnvelope1
             	  
                   ' -----------------------------------------------------------------------------------------------------------------------
                   /// 	  
                   ' Display the FeatureLayer in myMap2 that has a ClassBreaksRenderer applied
                   ' =========================================================================
             	  
                   ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
                   ' Layers Collection is on the bottom and the other Layer is added on the top.
                   Dim myArcGISTiledMapServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
                   myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
                   myMap2.Layers.Add(myArcGISTiledMapServiceLayer2)
             	  
             	  
                   ' Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
                   Dim myFeatureLayer2 As New ESRI.ArcGIS.Client.FeatureLayer
             	  
                   ' This FeatureLayer contains United States Interstate roads as Lines (aka. Polylines).
                   myFeatureLayer2.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/0"
             	  
                   ' The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
                   ' 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
                   ' default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
                   ' (on the Parameters tab). 
                   myFeatureLayer2.Where = "ADMN_Class='Interstate'"
             	  
                   ' Specify the Outfields Property to specify which Fields are returned on which the 
                   ' ClassBreaksRenderer.Field can use. Specifying the wildcard (*) character in the Add Property will 
                   ' return all Fields. 
                   myFeatureLayer2.OutFields.Add("LENGTH")
             	  
                   ' Create the ClassBreakRenderer.
                   Dim myClassBreaksRenderer As New ESRI.ArcGIS.Client.ClassBreaksRenderer
             	  
                   ' Specify which Field (via its string name) the ClassBreaksRenderer will use for breaking the rendering
                   ' of the Symbols into groups. Note: The Field that is specified for the Field Property MUST be a
                   ' numeric (Double, Integer, SmallInteger, or Single) Field.FieldType. To Render groups of Strings use
                   ' the UniqueValueRenderer instead.
                   myClassBreaksRenderer.Field = "LENGTH" ' Requires a numeric Field
             	  
             	  
                   ' Define a default SimpleLineSymbol for a 'catch all' to draw the features for which no ClassBreaksInfo
                   ' has been defined. In this example, only Interstate roads with a road-length (LENGTH) from 50 to 1,000 
                   ' miles have a defined ClassBreakInfo category and yet all the Interstate roads will be returned (really 
                   ' only the first 500 features are returned due to the ArcGIS Service configuration). Defining a default 
                   ' SimpleLineSymbol will provide symbology for those features that have road lengths greater than 0 but 
                   ' less than 50 miles long. If a ClassBreaksRenderer.DefaultSymbol was not defined these features would 
                   ' not be drawn on the Map.
                   Dim defaultSimpleLineSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol
                   Dim defaultBrush As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)) 'Yellow
                   defaultSimpleLineSymbol.Color = defaultBrush
                   defaultSimpleLineSymbol.Width = 5
                   myClassBreaksRenderer.DefaultSymbol = defaultSimpleLineSymbol
             	  
                   ' NOTE: By default if no .LineStyle is specified the is specified for a SimpleLineSymbol the
                   ' ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Solid is set.
             	  
                   ' A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning classification or grouping)
                   ' to delineate the different symbology and class break information. The next three sections of code
                   ' define 3 different ClassBreakInfo Classes (or groups) and their associated symbology.
             	  
                   ' Group #1
                   ' ========
                   ' Create a ClassBreakInfo object as a container of information for each group. 
                   Dim myClassBreakInfo1 As New ESRI.ArcGIS.Client.ClassBreakInfo
             	  
                   ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   ' ClassBreaksRenderer.Field.
                   myClassBreakInfo1.MinimumValue = 50
                   myClassBreakInfo1.MaximumValue = 100
                   
                   ' Add an informational description and label for the group.
                   myClassBreakInfo1.Description = "50 to 100 miles long"
                   myClassBreakInfo1.Label = "A cyan solid line, width 3"
                   
                   ' Each ClassBreakInfo grouping needs a symbol to display
                   Dim mySimpleLineSymbol1 As New ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol
                   Dim myBrush1 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 255)) 'Cyan
                   mySimpleLineSymbol1.Color = myBrush1
                   mySimpleLineSymbol1.Width = 3
                   myClassBreakInfo1.Symbol = mySimpleLineSymbol1
             	  
                   ' Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo1)
             	  
                   ' Group #2
                   ' ========
                   ' Create a ClassBreakInfo object as a container of information for each group. 
                   Dim myClassBreakInfo2 As New ESRI.ArcGIS.Client.ClassBreakInfo
             	  
                   ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   ' ClassBreaksRenderer.Field.
                   myClassBreakInfo2.MinimumValue = 100
                   myClassBreakInfo2.MaximumValue = 200
                   
                   ' Add an informational description and label for the group.
                   myClassBreakInfo2.Description = "100 to 200 miles long"
                   myClassBreakInfo2.Label = "An olive dash line, width 1"
             	  
                   ' Each ClassBreakInfo grouping needs a symbol to display. In this case the SimpleLineSymbol LineStyle
                   ' was specified to be a Dash (rather than the default Solid).
                   Dim mySimpleLineSymbol2 As New ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol
                   Dim myBrush2 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 107, 142, 35)) ' Olive
                   mySimpleLineSymbol2.Color = myBrush2
                   mySimpleLineSymbol2.Width = 1
                   mySimpleLineSymbol2.Style = ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Dash
                   myClassBreakInfo2.Symbol = mySimpleLineSymbol2
             	  
                   ' Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo2)
             	  
                   ' Group #3
                   ' ========
                   ' Create a ClassBreakInfo object as a container of information for each group. 
                   Dim myClassBreakInfo3 As New ESRI.ArcGIS.Client.ClassBreakInfo
             	  
                   ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   ' ClassBreaksRenderer.Field.
                   myClassBreakInfo3.MinimumValue = 200
                   myClassBreakInfo3.MaximumValue = 1000
                   
                   ' Add an informational description and label for the group.
                   myClassBreakInfo3.Description = "200 to 1000 miles long"
                   myClassBreakInfo3.Label = "A black dot line, width 2"
             	  
                   ' Each ClassBreakInfo grouping needs a symbol to display. In this case the SimpleLineSymbol LineStyle
                   ' was specified to be a Dot (rather than the default Solid).
                   Dim mySimpleLineSymbol3 As New ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol
                   Dim myBrush3 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) 'Black
                   mySimpleLineSymbol3.Color = myBrush3
                   mySimpleLineSymbol3.Width = 2
                   mySimpleLineSymbol3.Style = ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle.Dot
                   myClassBreakInfo3.Symbol = mySimpleLineSymbol3
             	  
                   ' Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo3)
             	  
                   ' Now that all of the ClassBreakInfo information has been added to the ClassBreaksRenderer object, 
                   ' associate the ClassBreaksRenderer with the FeatuerLayer.Renderer Property.
                   myFeatureLayer2.Renderer = myClassBreaksRenderer
             	  
                   ' Add the myFeatureLayer2 to the Map2 Layer Collection. 
                   Map2.Layers.Add(myFeatureLayer2)
             	  
                   ' Zoom to the continental United States.
                   Dim myEnvelope2 As New ESRI.ArcGIS.Client.Geometry.Envelope
                   myEnvelope2.XMin = -130
                   myEnvelope2.YMin = 10
                   myEnvelope2.XMax = -70
                   myEnvelope2.YMax = 60
                   Map2.Extent = myEnvelope2
             	  
                 End Sub
             	  
                 Public Sub FillClassBreaksRenderer(ByVal myMap1 As ESRI.ArcGIS.Client.Map, ByVal myMap2 As ESRI.ArcGIS.Client.Map)
             	  
                   ' This example shows how to draw Fills (aka. Polygons) on a FeatureLayer using the ClassBreaksRenderer 
                   ' Class. This example takes two Map controls as arguments to compare the effect of applying a 
                   ' ClassBreaksRenderer. Map1 will show a basic FeatureLayer that comes by default from ArcGIS Server. 
                   ' Map2 will show the same FeatureLayer but with a specific ClassBreaksRenderer applied, to 
                   ' compare the differences.
             	  
                   ' ---------------------------------------------------------------------------------------------------------------------
             	  
                   ' Clear the Layers in the Map's for runs of the function. 
                   myMap1.Layers.Clear()
                   myMap2.Layers.Clear()
             	  
                   ' ---------------------------------------------------------------------------------------------------------------------
             	  
                   ' Display the default FeatureLayer in myMap1
                   ' ==========================================
             	  
                   ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
                   ' Layers Collection is on the bottom and the other Layer is added on the top.
                   Dim myArcGISTiledMapServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
                   myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
                   myMap1.Layers.Add(myArcGISTiledMapServiceLayer1)
             	  
             	  
                   ' Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
                   Dim myFeatureLayer1 As New ESRI.ArcGIS.Client.FeatureLayer
             	  
                   ' This FeatureLayer contains US states as Fills (aka. Polygons).
                   myFeatureLayer1.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/2"
             	  
                   ' The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
                   ' 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
                   ' default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
                   ' (on the Parameters tab). 
                   myFeatureLayer1.Where = "1=1" ' Tip: The syntax "1=1" returns all records!
             	  
                   ' Add the myFeatureLayer1 to the Map1 Layer Collection. 
                   myMap1.Layers.Add(myFeatureLayer1)
             	  
                   ' Zoom to the continental United States.
                   Dim myEnvelope1 As New ESRI.ArcGIS.Client.Geometry.Envelope
                   myEnvelope1.XMin = -130
                   myEnvelope1.YMin = 10
                   myEnvelope1.XMax = -70
                   myEnvelope1.YMax = 60
                   myMap1.Extent = myEnvelope1
             	  
                   ' -----------------------------------------------------------------------------------------------------------------------
             	  
                   ' Display the FeatureLayer in myMap2 that has a ClassBreaksRenderer applied
                   ' =========================================================================
             	  
                   ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
                   ' Layers Collection is on the bottom and the other Layer is added on the top.
                   Dim myArcGISTiledMapServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
                   myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
                   myMap2.Layers.Add(myArcGISTiledMapServiceLayer2)
             	  
             	  
                   ' Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
                   Dim myFeatureLayer2 As New ESRI.ArcGIS.Client.FeatureLayer
             	  
                   ' This FeatureLayer contains US states as Fills (aka. Polygons).
                   myFeatureLayer2.Url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/2"
             	  
                   ' The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
                   ' 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
                   ' default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
                   ' (on the Parameters tab). 
                   myFeatureLayer2.Where = "1=1" ' Tip: The syntax "1=1" returns all records!
             	  
                   ' Specify the Outfields Property to specify which Fields are returned on which the 
                   ' ClassBreaksRenderer.Field can use. Specifying the wildcard (*) character in the Add Property will 
                   ' return all Fields. 
                   myFeatureLayer2.OutFields.Add("*")
             	  
                   ' Create the ClassBreakRenderer.
                   Dim myClassBreaksRenderer As New ESRI.ArcGIS.Client.ClassBreaksRenderer
             	  
                   ' Specify which Field (via its string name) the ClassBreaksRenderer will use for breaking the rendering
                   ' of the Symbols into groups. Note: The Field that is specified for the Field Property MUST be a
                   ' numeric (Double, Integer, SmallInteger, or Single) Field.FieldType. To Render groups of Strings use
                   ' the UniqueValueRenderer instead.
                   myClassBreaksRenderer.Field = "POP1990" ' Requires a numeric Field
             	  
             	  
                   ' Define a default SimpleFillSymbol for a 'catch all' to draw the features for which no ClassBreaksInfo
                   ' has been defined. In this example, only states with a population (POP1990) from 1,000,000 to 100,000,000 
                   ' persons have a defined ClassBreakInfo category and yet all states will be returned. Defining a default 
                   ' SimpleFillSymbol will provide symbology for those features that are greater than 0 but less than 
                   ' 1,000,000. If a ClassBreaksRenderer.DefaultSymbol was not defined these features would not be drawn on 
                   ' the Map.
                   Dim defaultSimpleFillSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
                   Dim defaultBrush As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)) 'Yellow
                   defaultSimpleFillSymbol.Fill = defaultBrush
                   myClassBreaksRenderer.DefaultSymbol = defaultSimpleFillSymbol
             	  
             	  
                   ' A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning classification or grouping)
                   ' to delineate the different symbology and class break information. The next three sections of code
                   ' define 3 different ClassBreakInfo Classes (or groups) and their associated symbology.
             	  
                   ' Group #1
                   ' ========
                   ' Create a ClassBreakInfo object as a container of information for each group. 
                   Dim myClassBreakInfo1 As New ESRI.ArcGIS.Client.ClassBreakInfo
             	  
                   ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   ' ClassBreaksRenderer.Field.
                   myClassBreakInfo1.MinimumValue = 1000000
                   myClassBreakInfo1.MaximumValue = 3000000
                   
                   ' Add an informational description and label for the group.
                   myClassBreakInfo1.Description = "1M to 3M people"
                   myClassBreakInfo1.Label = "A cyan solid fill"
             	  
                   ' Each ClassBreakInfo grouping needs a symbol to display
                   Dim mySimpleFillSymbol1 As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
                   Dim myBrush1 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 255)) 'Cyan
                   mySimpleFillSymbol1.Fill = myBrush1
                   myClassBreakInfo1.Symbol = mySimpleFillSymbol1
             	  
                   ' Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo1)
             	  
                   ' Group #2
                   ' ========
                   ' Create a ClassBreakInfo object as a container of information for each group. 
                   Dim myClassBreakInfo2 As New ESRI.ArcGIS.Client.ClassBreakInfo
             	  
                   ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   ' ClassBreaksRenderer.Field.
                   myClassBreakInfo2.MinimumValue = 3000000
                   myClassBreakInfo2.MaximumValue = 10000000
                   
                   ' Add an informational description and label for the group.
                   myClassBreakInfo2.Description = "3M to 10M people"
                   myClassBreakInfo2.Label = "An olive solid fill"
                   
                   ' Each ClassBreakInfo grouping needs a symbol to display. 
                   Dim mySimpleFillSymbol2 As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
                   Dim myBrush2 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 107, 142, 35)) ' Olive
                   mySimpleFillSymbol2.Fill = myBrush2
                   myClassBreakInfo2.Symbol = mySimpleFillSymbol2
             	  
                   ' Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo2)
             	  
                   ' Group #3
                   ' ========
                   ' Create a ClassBreakInfo object as a container of information for each group. 
                   Dim myClassBreakInfo3 As New ESRI.ArcGIS.Client.ClassBreakInfo
             	  
                   ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
                   ' ClassBreaksRenderer.Field.
                   myClassBreakInfo3.MinimumValue = 10000000
                   myClassBreakInfo3.MaximumValue = 100000000
                   
                   ' Add an informational description and label for the group.
                   myClassBreakInfo3.Description = "10M to 100M people"
                   myClassBreakInfo3.Label = "A black solid fill"
             	  
                   ' Each ClassBreakInfo grouping needs a symbol to display. 
                   Dim mySimpleFillSymbol3 As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
                   Dim myBrush3 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) 'BLACK
                   mySimpleFillSymbol3.Fill = myBrush3
                   myClassBreakInfo3.Symbol = mySimpleFillSymbol3
             	  
                   ' Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
                   myClassBreaksRenderer.Classes.Add(myClassBreakInfo3)
             	  
                   ' Now that all of the ClassBreakInfo information has been added to the ClassBreaksRenderer object, 
                   ' associate the ClassBreaksRenderer with the FeatuerLayer.Renderer Property.
                   myFeatureLayer2.Renderer = myClassBreaksRenderer
             	  
                   ' Add the myFeatureLayer2 to the Map2 Layer Collection. 
                   Map2.Layers.Add(myFeatureLayer2)
             	  
                   ' Zoom to the continental United States.
                   Dim myEnvelope2 As New ESRI.ArcGIS.Client.Geometry.Envelope
                   myEnvelope2.XMin = -130
                   myEnvelope2.YMin = 10
                   myEnvelope2.XMax = -70
                   myEnvelope2.YMax = 60
                   Map2.Extent = myEnvelope2
             	  
                 End Sub
                 </code>
                 
             </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ClassBreaksRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ClassBreaksRenderer.GetSymbol(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Gets a symbol based on a graphic.
            </summary>
            <param name="graphic">The graphic.</param>
            <returns>Symbol</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ClassBreaksRenderer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of a layer using this renderer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> containing the collection of legenditems coresponding to the renderer.
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ClassBreaksRenderer.ToJson">
            <summary>
            Serializes the class breaks renderer to JSON
            </summary>
            <returns>
            A JSON string representation of the class breaks renderer
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ClassBreaksRenderer.Classes">
            <summary>
            Gets the collection of <see cref="T:ESRI.ArcGIS.Client.ClassBreakInfo">ClassBreakInfo</see> objects 
            which define each group of numerical observations being symbolized in a Layer.
            </summary>
            <remarks>
            <para>
            A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning classification or 
            grouping) to delineate the different symbology and class break information. Otherwise use a
            <see cref="T:ESRI.ArcGIS.Client.SimpleRenderer">SimpleRenderer</see> if just one type of
            symbology needs to be rendered.
            </para>
            <para>
            When a ClassBreaksRenderer object is created the ObservableCollection (Of ClassBreakInfo) object
            is also created that is accessable from the ClassBreaksRenderer.Classes Property. Although the 
            Classes Property is ReadOnly, meaning you can only get the ObservableCollection (Of ClassBreakInfo)
            object, you can use its Members to like: Add, Clear, Remove, etc. to define how the 
            ClassBreaksRenderer behaves.
            </para>
            <para>
            To see a full example of how to set and use the Classes Property in a ClassBreaksRenderer 
            review the <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see> Class documentation.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ClassBreaksRenderer.Attribute">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the ClassBreaksRenderer.Field Property instead.
            </para>
            <para>
            Gets or sets the name of the <see cref="T:ESRI.ArcGIS.Client.Field">Field</see> that will be 
            symbolized via groups using <see cref="T:ESRI.ArcGIS.Client.ClassBreakInfo">ClassBreakInfo</see> 
            objects in the ClassBreaksRenderer.
            </para>
            </summary>
            <remarks>
            <para>
            The name of the <see cref="T:ESRI.ArcGIS.Client.Field">Field</see> that is specified for the 
            Field Property must be a numeric (Double, Integer,  SmallInteger, or Single) 
            <see cref="T:ESRI.ArcGIS.Client.Field.FieldType">Field.FieldType</see>. To render groups of 
            Strings use the <see cref="T:ESRI.ArcGIS.Client.UniqueValueRenderer">UniqueValueRenderer</see> 
            instead.
            </para>
            <para>
            To see a full example of how to set and use the Field Property in a ClassBreaksRenderer 
            review the <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see> Class documentation.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ClassBreaksRenderer.Field">
            <summary>
            Gets or sets the name of the <see cref="T:ESRI.ArcGIS.Client.Field">Field</see> that will be 
            symbolized via groups using <see cref="T:ESRI.ArcGIS.Client.ClassBreakInfo">ClassBreakInfo</see> 
            objects in the ClassBreaksRenderer.
            </summary>
            <remarks>
            <para>
            The name of the <see cref="T:ESRI.ArcGIS.Client.Field">Field</see> that is specified for the 
            Field Property must be a numeric (Double, Integer,  SmallInteger, or Single) 
            <see cref="T:ESRI.ArcGIS.Client.Field.FieldType">Field.FieldType</see>. To render groups of 
            Strings use the <see cref="T:ESRI.ArcGIS.Client.UniqueValueRenderer">UniqueValueRenderer</see> 
            instead.
            </para>
            <para>
            To see a full example of how to set and use the Field Property in a ClassBreaksRenderer 
            review the <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see> Class documentation.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ClassBreaksRenderer.DefaultSymbol">
            <summary>
            Gets or sets the default symbol that will be used by the ClassBreakRenderer when there is no 
            group specified by the <see cref="T:ESRI.ArcGIS.Client.ClassBreakInfo">ClassBreakInfo's</see> 
            objects for a particular observation.
            </summary>
            <remarks>
            <para>
            Defining a DefaultSymbol provides a 'catch all' to draw the features for which no 
            <see cref="T:ESRI.ArcGIS.Client.ClassBreakInfo">ClassBreakInfo's</see> have been defined. If a 
            DefaultSymbol is not defined, the Layer features will not be drawn on the Map when there is no 
            grouping defined by the ClassBreakInfo's. For example: assume that a Layer has numerical 
            observations that range from 1 to 90. If three ClassBreakInfo objects were defined that
            covered the grouped ranges of: (#1) 10 to 30, (#2) 30 to 60, and (#3) 60 to 90, unless a 
            DefaultSymbol is defined there will be no visual representations visible on the map for the 
            numerical range of 1 to 9.
            </para>
            <para>
            To see a full example of how to set and use the DefaultSymbol Property in a ClassBreaksRenderer 
            review the <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see> Class documentation.
            </para>
            </remarks>
        </member>
        <member name="E:ESRI.ArcGIS.Client.ClassBreaksRenderer.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.ClassBreaksRenderer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ClassBreakInfo">
            <summary>
            An object to group (or classify) symbology and class breaks information for a 
            <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see>.  
            </summary>
            <remarks>
            <para>The following image depicts how a Map would look that corresponds to XAML code with a 
            ClassBreaksRenderer defined for a FeatureLayer.</para>
            <para>
            <img border="0" alt="Example of how XAML code using a ClassBreaksRenderer on a FeatureLayer would look visually in the Map." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ClassBreaksRenderer.png"/>
            </para>
            <para>
            A <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see> should have 2 or 
            more ClassBreakInfo objects obtained by the <see cref="P:ESRI.ArcGIS.Client.ClassBreaksRenderer.Classes">
            ClassBreaksRenderer.Classes</see> Property. The ClassBreaksRenderer.Classes object is an 
            ObservableCollection of ClassBreakInfo objects that are essenitally classifications (or groupings) 
            used to delineate the different symbology and class breaks information. If just one type of symbology 
            needs to be rendered for a FeatureLayer use a 
            <see cref="T:ESRI.ArcGIS.Client.SimpleRenderer"> SimpleRenderer</see> instead.
            </para>
            <para>
            The name of the <see cref="T:ESRI.ArcGIS.Client.Field">Field</see> that is specified for the 
            <see cref="P:ESRI.ArcGIS.Client.ClassBreaksRenderer.Attribute">ClassBreaksRenderer.Attribute</see> 
            Property must be a numeric (Double, Integer,  SmallInteger, or Single) 
            <see cref="T:ESRI.ArcGIS.Client.Field.FieldType"> Field.FieldType</see>. The 
            <see cref="P:ESRI.ArcGIS.Client.ClassBreakInfo.MaximumValue">MaximumValue</see> and 
            <see cref="P:ESRI.ArcGIS.Client.ClassBreakInfo.MinimumValue">MinimumValue</see> Properties define 
            the upper and lower values per grouping based upon what the ClassBreaksRenderer.Attribute
            is set to. To render groups of Strings use the 
            <see cref="T:ESRI.ArcGIS.Client.UniqueValueRenderer">UniqueValueRenderer</see> instead.
            </para>
            <para>
            Each ClassBreakInfo group needs a <see cref="P:ESRI.ArcGIS.Client.RendererInfo.Symbol">RendererInfo.Symbol</see> 
            that visually represents features in the layer that fall between the MinimumValue and MaximumValue.
            </para>
            <para>
            To see an example of how to set and use ClassBreakInfo objects in a ClassBreaksRenderer 
            review the <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see> Class documentation.
            </para>
            </remarks>
            <example>
                
                <code title="Example CS1" description="" lang="CS">
                public void ShowClassBreakInfoDetails(ESRI.ArcGIS.Client.ClassBreaksRenderer myClassBreaksRenderer)
                {
                  // Obtain the ObservableCollection grouping of ClassBreakInfo objects.
                  System.Collections.ObjectModel.ObservableCollection&lt;ESRI.ArcGIS.Client.ClassBreakInfo&gt; myObservableCollection = null;
                  myObservableCollection = myClassBreaksRenderer.Classes;
                
                  // Since the ClassBreaksRenderer.Classes always returns an ObservableCollection, do a test
                  // to ensure that at least one grouping exists.
                  int count = myObservableCollection.Count;
                  if (count &gt; 0)
                  {
                    // For each ClassBreakInfo grouping in the ObservableCollection obtain all of the
                    // relevent information about the group and display in a MessageBox.
                    foreach (ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo in myObservableCollection)
                    {
                      string myDescription = myClassBreakInfo.Description;
                      string myLabel = myClassBreakInfo.Label;
                      string myMinimumValue = myClassBreakInfo.MinimumValue.ToString();
                      string myMaximumValue = myClassBreakInfo.MaximumValue.ToString();
                      ESRI.ArcGIS.Client.Symbols.Symbol mySymbol = myClassBreakInfo.Symbol;
                      string mySymbolType = mySymbol.GetType().ToString();
                    
                      MessageBox.Show("ClassBreakInfo Descripton: " + myDescription + System.Environment.NewLine + 
                                      "ClassBreakInfo Descripton: " + myLabel + System.Environment.NewLine + 
                                      "MinimumValue: " + myMinimumValue + System.Environment.NewLine + 
                                      "MaximumValue: " + myMaximumValue + System.Environment.NewLine + 
                                      "Symbol Type: " + mySymbolType);
                    }
                  }
                  else
                  {
                    MessageBox.Show("The ClassBreaksRenderer has no ClassBreakInfo groups defined!");
                  }
                }
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
            	Public Sub ShowClassBreakInfoDetails(ByVal myClassBreaksRenderer As ESRI.ArcGIS.Client.ClassBreaksRenderer)
            	
            	  ' Obtain the ObservableCollection grouping of ClassBreakInfo objects.
            	  Dim myObservableCollection As Collections.ObjectModel.ObservableCollection(Of ESRI.ArcGIS.Client.ClassBreakInfo)
            	  myObservableCollection = myClassBreaksRenderer.Classes
            	  
            	  ' Since the ClassBreaksRenderer.Classes always returns an ObservableCollection, do a test
            	  ' to ensure that at least one grouping exists.
            	  Dim count As Integer = myObservableCollection.Count
            	  If count &gt; 0 Then
            	  
            	    ' For each ClassBreakInfo grouping in the ObservableCollection obtain all of the
            	    ' relevent information about the group and display in a MessageBox.
            	    Dim myClassBreakInfo As ESRI.ArcGIS.Client.ClassBreakInfo
            	    For Each myClassBreakInfo In myObservableCollection
            	      Dim myDescription As String = myClassBreakInfo.Description
            	      Dim myLabel As String = myClassBreakInfo.Label
            	      Dim myMinimumValue As String = myClassBreakInfo.MinimumValue.ToString
            	      Dim myMaximumValue As String = myClassBreakInfo.MaximumValue.ToString
            	      Dim mySymbol As ESRI.ArcGIS.Client.Symbols.Symbol = myClassBreakInfo.Symbol
            	      Dim mySymbolType As String = mySymbol.GetType.ToString
            	  
            	      MessageBox.Show("ClassBreakInfo Descripton: " + myDescription + vbCrLf + _
            	                      "ClassBreakInfo Descripton: " + myLabel + vbCrLf + _
            	                      "MinimumValue: " + myMinimumValue + vbCrLf + _
            	                      "MaximumValue: " + myMaximumValue + vbCrLf + _
            	                      "Symbol Type: " + mySymbolType)
            	    Next
            	  Else
            	    MessageBox.Show("The ClassBreaksRenderer has no ClassBreakInfo groups defined!")
            	  End If
            	End Sub
                </code>
                
            </example>
        </member>
        <member name="T:ESRI.ArcGIS.Client.RendererInfo">
            <summary>
            Base class for RendererInfo
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.RendererInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.RendererInfo"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.RendererInfo.Label">
            <summary>
            Gets or sets the label.
            </summary>        
        </member>
        <member name="P:ESRI.ArcGIS.Client.RendererInfo.Description">
            <summary>
            Gets or sets the description.
            </summary>        
        </member>
        <member name="P:ESRI.ArcGIS.Client.RendererInfo.Symbol">
            <summary>
            Gets or sets the symbol.        
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.RendererInfo.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.RendererInfo.PropertyChangedEventArgsEx">
            <summary>
            Internal subclass of PropertyChangedEventArgs containing the old value of the property (so we can unsubscribe to events)
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ClassBreakInfo.ToJson">
            <summary>
            Serializes the class break info to JSON
            </summary>
            <returns>
            A JSON string representation of the class break info
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ClassBreakInfo.MinimumValue">
            <summary>
            Gets or sets the minimum value for this class. The value is included.
            </summary>
            <remarks>
            <para>
            The name of the <see cref="T:ESRI.ArcGIS.Client.Field">Field</see> that is specified for the 
            <see cref="P:ESRI.ArcGIS.Client.ClassBreaksRenderer.Attribute">ClassBreaksRenderer.Attribute</see> 
            Property must be a numeric (Double, Integer,  SmallInteger, or Single) 
            <see cref="T:ESRI.ArcGIS.Client.Field.FieldType"> Field.FieldType</see>. The 
            <see cref="P:ESRI.ArcGIS.Client.ClassBreakInfo.MaximumValue">MaximumValue</see> and 
            MinimumValue Properties define 
            the upper and lower values per grouping based upon what the ClassBreaksRenderer.Attribute
            is set to.
            </para>
            <para>
            To see a full example of how to set and use ClassBreakInfo objects in a ClassBreaksRenderer 
            review the <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see> Class documentation.
            </para>
            </remarks>
            <example>
            
            	<code title="Example XAML1" description="" lang="XAML">
            	&lt;!--
            	Create a ClassBreakInfo object as a container of information for each 
            	group. Define the minimum and maximum values for the numeric grouping of the 
            	Field defined as the ClassBreaksRenderer.Attribute. Add a description and label.
            	--&gt;
            	&lt;esri:ClassBreakInfo MinimumValue="1000000" MaximumValue="3000000"
            	                     Description="1M to 3M people" Label="A cyan solid fill"&gt;
            	  &lt;esri:SimpleFillSymbol Fill="Cyan"/&gt;
            	&lt;/esri:ClassBreakInfo&gt;
            	
            	&lt;!-- 
            	An alternative but rather long-winded approach to writing in XAML.
            	Note: to use the sys: qualifier specify the following namespace: 
            	xmlns:sys="clr-namespace:System;assembly=mscorlib" 
            	--&gt;
            	&lt;esri:ClassBreakInfo&gt;
            	  &lt;esri:ClassBreakInfo.MinimumValue&gt;
            	    &lt;sys:Double&gt;3000000&lt;/sys:Double&gt;
            	  &lt;/esri:ClassBreakInfo.MinimumValue&gt;
            	  &lt;esri:ClassBreakInfo.MaximumValue&gt;
            	    &lt;sys:Double&gt;10000000&lt;/sys:Double&gt;
            	  &lt;/esri:ClassBreakInfo.MaximumValue&gt;
            	  &lt;esri:ClassBreakInfo.Description&gt;
            	    &lt;sys:String&gt;3M to 10M people&lt;/sys:String&gt;
            	  &lt;/esri:ClassBreakInfo.Description&gt;
            	  &lt;esri:ClassBreakInfo.Label&gt;
            	    &lt;sys:String&gt;An olive solid fill&lt;/sys:String&gt;
            	  &lt;/esri:ClassBreakInfo.Label&gt;
            	  &lt;esri:SimpleFillSymbol&gt;
            	    &lt;esri:SimpleFillSymbol.Fill&gt;Olive&lt;/esri:SimpleFillSymbol.Fill&gt;
            	  &lt;/esri:SimpleFillSymbol&gt;
            	&lt;/esri:ClassBreakInfo&gt;
                </code>
                
                <code title="Example CS1" description="" lang="CS">
                // Create a ClassBreakInfo object as a container of information for each group. 
                ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo1 = new ESRI.ArcGIS.Client.ClassBreakInfo();
                
                // Define the minimum and maximum values for the numeric grouping of the Field defined as the
                // ClassBreaksRenderer.Attribute.
                myClassBreakInfo1.MinimumValue = 1000000;
                myClassBreakInfo1.MaximumValue = 3000000;
                
                // Add an informational description and label for the group.
                myClassBreakInfo1.Description = "1M to 3M people";
                myClassBreakInfo1.Label = "A cyan solid fill";
                
                // Each ClassBreakInfo grouping needs a symbol to display
                ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol mySimpleFillSymbol1 = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
                System.Windows.Media.SolidColorBrush myBrush1 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 255)); //Cyan
                mySimpleFillSymbol1.Fill = myBrush1;
                myClassBreakInfo1.Symbol = mySimpleFillSymbol1;
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                ' Create a ClassBreakInfo object as a container of information for each group. 
                Dim myClassBreakInfo1 As New ESRI.ArcGIS.Client.ClassBreakInfo
                
                ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
                ' ClassBreaksRenderer.Attribute.
                myClassBreakInfo1.MinimumValue = 1000000
                myClassBreakInfo1.MaximumValue = 3000000
                
                ' Add an informational description and label for the group.
                myClassBreakInfo1.Description = "1M to 3M people"
                myClassBreakInfo1.Label = "A cyan solid fill"
                
                ' Each ClassBreakInfo grouping needs a symbol to display
                Dim mySimpleFillSymbol1 As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
                Dim myBrush1 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 255)) 'Cyan
                mySimpleFillSymbol1.Fill = myBrush1
                myClassBreakInfo1.Symbol = mySimpleFillSymbol1
                </code>
                
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ClassBreakInfo.MaximumValue">
            <summary>
            Gets or sets the maximum value. The value is excluded.
            </summary>
            <remarks>
            <para>
            The name of the <see cref="T:ESRI.ArcGIS.Client.Field">Field</see> that is specified for the 
            <see cref="P:ESRI.ArcGIS.Client.ClassBreaksRenderer.Attribute">ClassBreaksRenderer.Attribute</see> 
            Property must be a numeric (Double, Integer,  SmallInteger, or Single) 
            <see cref="T:ESRI.ArcGIS.Client.Field.FieldType"> Field.FieldType</see>. The 
            MaximumValue and 
            <see cref="P:ESRI.ArcGIS.Client.ClassBreakInfo.MinimumValue">MinimumValue</see> Properties define 
            the upper and lower values per grouping based upon what the ClassBreaksRenderer.Attribute
            is set to.
            </para>
            <para>
            To see a full example of how to set and use ClassBreakInfo objects in a ClassBreaksRenderer 
            review the <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see> Class documentation.
            </para>
            </remarks>
            <example>
            
            	<code title="Example XAML1" description="" lang="XAML">
            	&lt;!--
            	Create a ClassBreakInfo object as a container of information for each 
            	group. Define the minimum and maximum values for the numeric grouping of the 
            	Field defined as the ClassBreaksRenderer.Attribute. Add a description and label.
            	--&gt;
            	&lt;esri:ClassBreakInfo MinimumValue="1000000" MaximumValue="3000000"
            	                     Description="1M to 3M people" Label="A cyan solid fill"&gt;
            	  &lt;esri:SimpleFillSymbol Fill="Cyan"/&gt;
            	&lt;/esri:ClassBreakInfo&gt;
            	
            	&lt;!-- 
            	An alternative but rather long-winded approach to writing in XAML.
            	Note: to use the sys: qualifier specify the following namespace: 
            	xmlns:sys="clr-namespace:System;assembly=mscorlib" 
            	--&gt;
            	&lt;esri:ClassBreakInfo&gt;
            	  &lt;esri:ClassBreakInfo.MinimumValue&gt;
            	    &lt;sys:Double&gt;3000000&lt;/sys:Double&gt;
            	  &lt;/esri:ClassBreakInfo.MinimumValue&gt;
            	  &lt;esri:ClassBreakInfo.MaximumValue&gt;
            	    &lt;sys:Double&gt;10000000&lt;/sys:Double&gt;
            	  &lt;/esri:ClassBreakInfo.MaximumValue&gt;
            	  &lt;esri:ClassBreakInfo.Description&gt;
            	    &lt;sys:String&gt;3M to 10M people&lt;/sys:String&gt;
            	  &lt;/esri:ClassBreakInfo.Description&gt;
            	  &lt;esri:ClassBreakInfo.Label&gt;
            	    &lt;sys:String&gt;An olive solid fill&lt;/sys:String&gt;
            	  &lt;/esri:ClassBreakInfo.Label&gt;
            	  &lt;esri:SimpleFillSymbol&gt;
            	    &lt;esri:SimpleFillSymbol.Fill&gt;Olive&lt;/esri:SimpleFillSymbol.Fill&gt;
            	  &lt;/esri:SimpleFillSymbol&gt;
            	&lt;/esri:ClassBreakInfo&gt;
                </code>
                
                <code title="Example CS1" description="" lang="CS">
                // Create a ClassBreakInfo object as a container of information for each group. 
                ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo1 = new ESRI.ArcGIS.Client.ClassBreakInfo();
                
                // Define the minimum and maximum values for the numeric grouping of the Field defined as the
                // ClassBreaksRenderer.Attribute.
                myClassBreakInfo1.MinimumValue = 1000000;
                myClassBreakInfo1.MaximumValue = 3000000;
                
                // Add an informational description and label for the group.
                myClassBreakInfo1.Description = "1M to 3M people";
                myClassBreakInfo1.Label = "A cyan solid fill";
                
                // Each ClassBreakInfo grouping needs a symbol to display
                ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol mySimpleFillSymbol1 = new ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol();
                System.Windows.Media.SolidColorBrush myBrush1 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 255)); //Cyan
                mySimpleFillSymbol1.Fill = myBrush1;
                myClassBreakInfo1.Symbol = mySimpleFillSymbol1;
                </code>
                
            	<code title="Example VB1" description="" lang="VB.NET">
                ' Create a ClassBreakInfo object as a container of information for each group. 
                Dim myClassBreakInfo1 As New ESRI.ArcGIS.Client.ClassBreakInfo
                
                ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
                ' ClassBreaksRenderer.Attribute.
                myClassBreakInfo1.MinimumValue = 1000000
                myClassBreakInfo1.MaximumValue = 3000000
                
                ' Add an informational description and label for the group.
                myClassBreakInfo1.Description = "1M to 3M people"
                myClassBreakInfo1.Label = "A cyan solid fill"
                
                ' Each ClassBreakInfo grouping needs a symbol to display
                Dim mySimpleFillSymbol1 As New ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol
                Dim myBrush1 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 255)) 'Cyan
                mySimpleFillSymbol1.Fill = myBrush1
                myClassBreakInfo1.Symbol = mySimpleFillSymbol1
                </code>
                
            </example>
        </member>
        <member name="T:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer">
            <summary>
            Custom graphics renderer
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer.GetSymbol(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Gets a symbol based on a graphic.
            </summary>
            <param name="graphic">The graphic.</param>
            <returns>Symbol</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of a layer using this renderer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> containing the collection of legenditems coresponding to the renderer.
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer.ToJson">
            <summary>
            Serializes the unique value multi-fields renderer to JSON
            </summary>
            <returns>
            A JSON string representation of the unique value multi-fields renderer
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer.Infos">
            <summary>
            Gets the collection of <see cref="T:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsInfo"/>.
            </summary>
            <value>The infos.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer.Attributes">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the UniqueValueMultipleFieldsRenderer.Field Property instead.
            </para>
            <para>
            Gets or sets the attribute to use for classes.
            </para>
            </summary>
            <remarks>
            Gets or sets the attribute to use for classes.
            </remarks>
            <value>The attribute fields.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer.Fields">
            <summary>
            Gets or sets the attribute to use for classes.
            </summary>
            <value>The fields to use.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer.DefaultSymbol">
            <summary>
            Gets or sets the default symbol.
            </summary>
            <value>The default symbol.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer.FieldDelimiter">
            <summary>
            Gets or sets the field delimiter.
            </summary>
            <value>The field delimiter.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer.DefaultLabel">
            <summary>
            Gets or sets the default label.
            </summary>
            <value>The default label.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsRenderer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsInfo">
            <summary>
            UniqueValueMultipleFieldsInfo for the <see cref="T:ESRI.ArcGIS.Client.UniqueValueRenderer"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsInfo.ToJson">
            <summary>
            Serializes the unique value multi-fields info to JSON
            </summary>
            <returns>
            A JSON string representation of the unique value multi-fields info
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsInfo.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueMultipleFieldsInfo.ValueString">
            <summary>
            Gets or sets the value string.
            </summary>
            <value>The value string.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.RampInterpolator">
            <summary>
            Display a gradual change in symbology across a specified 
            <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> for a 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> of a 
            <see cref="T:ESRI.ArcGIS.Client.FeatureLayer">FeatureLayer</see>.
            </summary>
            <remarks>
            <para>
            The RampInterpolator will modify the rendering of the entire set of features and graduate the symbology 
            based upon the set properties. The RampInterpolator overrides the default symbology that is specified 
            for the <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.ObservationRenderer">ObservationRenderer</see> Property 
            of a TemporalRenderer. The Style of the default symbol does not change during the ramping process; only the 
            Color, Size, and Opacity of the symbol change as part of the RampInterpolator. The 
            <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.LatestObservationRenderer">LatestObservationRenderer</see> of 
            the TemporalRenderer is not overridden by the RampInterpolator.
            </para>
            <para>
            The following image provides a visual example of how a square Symbol would look via the RampInterpolator 
            for the properties of <see cref="P:ESRI.ArcGIS.Client.RampInterpolator.ColorRange">ColorRange</see>, 
            <see cref="P:ESRI.ArcGIS.Client.RampInterpolator.SizeRange">SizeRange</see>, and 
            <see cref="P:ESRI.ArcGIS.Client.RampInterpolator.OpacityRange">OpacityRange</see> that is graduated over 
            five time periods as defined by the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="Visual representation of a square symbol via ColorRange, SizeRange, and OpacityRange." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.png"/>
            </para>
            <para>
            The following screen shot depicts earthquakes from 1970 to 2000 where at least one death has occurred. The 
            default symbol that is specified for the ObservationRenderer is a triangle. Newest earthquakes will be shown 
            as triangles that are large and red. The oldest earthquakes will be triangles that are small and green. An 
            automatic ramping of the triangle's color and size will occur over the temporal period. The screen shot 
            corresponds to the example code in this document.
            </para>
            <para>
            <img border="0" alt="Earthquakes between 1970 and 2000 for which at least one death occured renderer using the RampInterpolator." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator2.png"/>
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
              
              &lt;!--
              Display the FeatureLayer in myMap2 that has a TemporalRenderer applied:
                      
              Add an ArcGISTiledMapsServiceLayer as a background to the map. The ArcGISTiledMapsServiceLayer 
              layer is first Layer added to the Map's Layers Collection and is drawn on the bottom. A FeatureLayer 
              is then added to the map and draws on top of the background layer.
              
              Set the Map2 Extent to zoom to the North and South America.
              
              Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
              within the set TimeExtent will then be shown. In the case of this example the TimeExtent for the 
              earthquakes is shortened to a smaller temporal window to display the various rendering effects clearly.
              
              Manually setting the TimeExtent of the Map2. Could have bound to a TimeSlider for more interactiveness.
              --&gt;
              &lt;esri:Map Background="White" Height="375" HorizontalAlignment="Left" Margin="408,227,0,0" 
                         Name="Map2" VerticalAlignment="Top" Width="375" 
                         Extent="-166.2,-57.0,-34.36,74.47" 
                         TimeExtent="1970/01/15 00:00:00 UTC,2000/01/15 00:00:00 UTC"&gt;
              
                &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer"
                                                 Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
              
                &lt;!--
                The FeatureLayer contains earthquake events data from the USGS as Markers (aka. Points). 
                
                The Where clause for the FeatureLayer is optional. The Where clause is necessary when more that 
                500/1000 records returned. In ArcGIS Server 9.3.1 and prior, the default maximum is 500 records 
                returned per FeatureLayer. In ArcGIS Server 10 the default is 1000. This setting is configurable 
                per map service using ArcCatalog or ArcGIS Server Manager (on the Parameters tab). This Where
                clause only displays earthquakes where one or more deaths have occurred.
                --&gt;
                &lt;esri:FeatureLayer ID="MyFeatureLayer"
                                   Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer/0" 
                                   Where="Num_Deaths &gt; 1"&gt;
                  
                  &lt;esri:FeatureLayer.Renderer&gt;
                      
                    &lt;!--
                    Create the TemporalRenderer.  
                    --&gt;
                    &lt;esri:TemporalRenderer&gt;
                      
                      &lt;!--
                      ObservationRenderer Property:
                      Define the default symbology for the FeatureLayer.TemporalRenderer.ObservationRenderer. Use a 
                      SimpleRenderer so that each temporal observation has some type of symbology. Only need to 
                      specify the Symbol.Style property (a triangle). There is no need to specify the Symbol.Color 
                      or Symbol.Size as a RampInterpolator will be used to graduate the symbology across the 
                      specified temporal window (i.e. Map.TimeExtent). 
                      --&gt;
                      &lt;esri:TemporalRenderer.ObservationRenderer&gt;
                        &lt;esri:SimpleRenderer&gt;
                          &lt;esri:SimpleMarkerSymbol Style="Triangle"/&gt;
                        &lt;/esri:SimpleRenderer&gt;
                      &lt;/esri:TemporalRenderer.ObservationRenderer&gt;
                              
                      &lt;!--
                      SymbolAger Property:
                      The default symbol specified by the ObservationRenderer will have the color and size ramped 
                      across the Map.TimeExtent specified.
                      In this example code: newer earthquakes will be shown as triangles that are large and red. 
                      The oldest earthquakes will be trinagles that are small and green. An automatic ramping of 
                      the triangle's color and size will occur automatically over the temporal period. 
                      --&gt;
                      &lt;esri:TemporalRenderer.SymbolAger&gt;
                        &lt;esri:RampInterpolator&gt;
                          &lt;esri:RampInterpolator.ColorRange&gt;
                            &lt;esri:ColorRange From="Red" To="Green"/&gt;
                          &lt;/esri:RampInterpolator.ColorRange&gt;
                          &lt;esri:RampInterpolator.SizeRange&gt;
                            &lt;esri:SizeRange From="20" To="5"/&gt;
                          &lt;/esri:RampInterpolator.SizeRange&gt;
                        &lt;/esri:RampInterpolator&gt;    
                      &lt;/esri:TemporalRenderer.SymbolAger&gt;
                    
                    &lt;/esri:TemporalRenderer&gt;
                  &lt;/esri:FeatureLayer.Renderer&gt;
                &lt;/esri:FeatureLayer&gt;
              &lt;/esri:Map&gt;
            &lt;/Grid&gt;
            </code>
                
            <code title="Example CS1" description="" lang="CS">
            public void DrawRampInterpolator(ESRI.ArcGIS.Client.Map myMap)
            {
              
              // Display the FeatureLayer in myMap that has a TemporalRenderer applied
              // =====================================================================
              
              // Clear the Layers in the Map's for runs of the function.
              myMap.Layers.Clear();
              
              // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
              // Layers Collection is on the bottom and the other Layer is added on the top.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              myMap.Layers.Add(myArcGISTiledMapServiceLayer2);
              
              // Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
              ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer = new ESRI.ArcGIS.Client.FeatureLayer();
              
              // This FeatureLayer contains historical earthquake data as Markers (aka. Points).
              myFeatureLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer/0";
              
              // The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
              // 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
              // default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
              // (on the Parameters tab). 
              myFeatureLayer.Where = "Num_Deaths &gt; 1"; //Only display earthquakes events for which 1 or more deaths have occurred.
              
              // Further restrict the earthquake data to just the temporal window specified.
              ESRI.ArcGIS.Client.TimeExtent myTimeExtent = new ESRI.ArcGIS.Client.TimeExtent();
              System.DateTime dateStart = DateTime.Parse("1/15/1970");
              myTimeExtent.Start = dateStart;
              System.DateTime dateEnd = DateTime.Parse("1/15/2000");
              myTimeExtent.End = dateEnd;
              
              // Manually setting the TimeExtent of the myMap. Could have used a TimeSlider for more inter-activeness.
              myMap.TimeExtent = myTimeExtent;
              
              // Create the TemporalRenderer object.
              ESRI.ArcGIS.Client.TemporalRenderer myTemporalRenderer = new ESRI.ArcGIS.Client.TemporalRenderer();
              
              // Define the default symbology for the FeatureLayer.TemporalRenderer.ObservationRenderer. Use a SimpleRenderer
              // so that each temporal observation has some type of symbology. Only need to specify the Symbol.Style property 
              // (a triangle). There is no need to specify the Symbol.Color or Symbol.Size as a RampInterpolator will be used
              // to graduate the symbology across the specified temporal window (i.e. Map.TimeExtent). 
              ESRI.ArcGIS.Client.SimpleRenderer mySimpleRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              mySimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Triangle;
              
              // NOTE: you could uncomment the next three lines but it will not make a difference in the FeatureLayer's
              // rendering because the RampInterpolator will override the Symbol.Color and Symbol.Size.
              //Dim mySolidColorBrush As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)) 'Yellow
              //mySimpleMarkerSymbol.Color = mySolidColorBrush
              //mySimpleMarkerSymbol.Size = 7
              
              // Apply the default symbology to the ObservationRenderer
              mySimpleRenderer.Symbol = mySimpleMarkerSymbol;
              myTemporalRenderer.ObservationRenderer = mySimpleRenderer;
              
              
              // Use a RampInterpolator for the SymbolAger. The default symbol specified by the ObservationRenderer
              // will have the color and size ramped across the Map.TimeExtent specified.
              // In this example code: newer earthquakes will be shown as triangles that are large and red. The oldest
              // earthquakes will be triangles that are small and green. An automatic ramping of the triangle's color
              // and size will occur automatically over the temporal period. 
              ESRI.ArcGIS.Client.RampInterpolator myRampInterpolator = new ESRI.ArcGIS.Client.RampInterpolator();
              ESRI.ArcGIS.Client.ColorRange myColorRange = new ESRI.ArcGIS.Client.ColorRange();
              myColorRange.From = Color.FromArgb(255, 255, 0, 0); //Red
              myColorRange.To = Color.FromArgb(255, 0, 255, 0); //Green
              myRampInterpolator.ColorRange = myColorRange;
              ESRI.ArcGIS.Client.SizeRange mySizeRange = new ESRI.ArcGIS.Client.SizeRange();
              mySizeRange.From = 20;
              mySizeRange.To = 5;
              myRampInterpolator.SizeRange = mySizeRange;
              
              // You could also specify an opacity (i.e. amount of visibility) for the triangles as well. Uncomment
              // the next three lines to see this effect.
              //Dim myOpacityRange As New ESRI.ArcGIS.Client.OpacityRange
              //myOpacityRange.From = 1 '1 = solid
              //myOpacityRange.To = 0.1 '0 = invisible
              //myRampInterpolator.OpacityRange = myOpacityRange
              
              // Apply the RampInterpolator as the TemporalRenderer.SymbolAger
              myTemporalRenderer.SymbolAger = myRampInterpolator;
              
              // Apply the TemporalRenderer as the Renderer of the FeatureLayer.
              myFeatureLayer.Renderer = myTemporalRenderer;
              
              // Add the myFeatureLayer to the myMap Layer Collection. 
              myMap.Layers.Add(myFeatureLayer);
              
              // Zoom to the North and South America.
              ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope2 = new ESRI.ArcGIS.Client.Geometry.Envelope();
              myEnvelope2.XMin = -166.2;
              myEnvelope2.YMin = -57.0;
              myEnvelope2.XMax = -34.36;
              myEnvelope2.YMax = 74.47;
              myMap.Extent = myEnvelope2;
              
            }
            </code>
                
            <code title="Example VB1" description="" lang="VB.NET">
            Public Sub DrawRampInterpolator(ByVal myMap As ESRI.ArcGIS.Client.Map)
            
              ' Display the FeatureLayer in myMap that has a TemporalRenderer applied
              ' =====================================================================
              
              ' Clear the Layers in the Map's for runs of the function.
              myMap.Layers.Clear()
              
              ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
              ' Layers Collection is on the bottom and the other Layer is added on the top.
              Dim myArcGISTiledMapServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              myMap.Layers.Add(myArcGISTiledMapServiceLayer2)
              
              ' Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
              Dim myFeatureLayer As New ESRI.ArcGIS.Client.FeatureLayer
              
              ' This FeatureLayer contains historical earthquake data as Markers (aka. Points).
              myFeatureLayer.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer/0"
              
              ' The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
              ' 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
              ' default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
              ' (on the Parameters tab). 
              myFeatureLayer.Where = "Num_Deaths &gt; 1" 'Only display earthquakes events for which 1 or more deaths have occurred.
              
              ' Further restrict the earthquake data to just the temporal window specified.
              Dim myTimeExtent As New ESRI.ArcGIS.Client.TimeExtent
              Dim dateStart As Date = #1/15/1970#
              myTimeExtent.Start = dateStart
              Dim dateEnd As Date = #1/15/2000#
              myTimeExtent.End = dateEnd
              
              ' Manually setting the TimeExtent of the myMap. Could have used a TimeSlider for more inter-activeness.
              myMap.TimeExtent = myTimeExtent
              
              ' Create the TemporalRenderer object.
              Dim myTemporalRenderer As New ESRI.ArcGIS.Client.TemporalRenderer
              
              ' Define the default symbology for the FeatureLayer.TemporalRenderer.ObservationRenderer. Use a SimpleRenderer
              ' so that each temporal observation has some type of symbology. Only need to specify the Symbol.Style property 
              ' (a triangle). There is no need to specify the Symbol.Color or Symbol.Size as a RampInterpolator will be used
              ' to graduate the symbology across the specified temporal window (i.e. Map.TimeExtent). 
              Dim mySimpleRenderer As New ESRI.ArcGIS.Client.SimpleRenderer
              Dim mySimpleMarkerSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              mySimpleMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Triangle
              
              ' NOTE: you could uncomment the next three lines but it will not make a difference in the FeatureLayer's
              ' rendering because the RampInterpolator will override the Symbol.Color and Symbol.Size.
              'Dim mySolidColorBrush As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)) 'Yellow
              'mySimpleMarkerSymbol.Color = mySolidColorBrush
              'mySimpleMarkerSymbol.Size = 7
              
              ' Apply the default symbology to the ObservationRenderer
              mySimpleRenderer.Symbol = mySimpleMarkerSymbol
              myTemporalRenderer.ObservationRenderer = mySimpleRenderer
              
              
              ' Use a RampInterpolator for the SymbolAger. The default symbol specified by the ObservationRenderer
              ' will have the color and size ramped across the Map.TimeExtent specified.
              ' In this example code: newer earthquakes will be shown as triangles that are large and red. The oldest
              ' earthquakes will be triangles that are small and green. An automatic ramping of the triangle's color
              ' and size will occur automatically over the temporal period. 
              Dim myRampInterpolator As New ESRI.ArcGIS.Client.RampInterpolator
              Dim myColorRange As New ESRI.ArcGIS.Client.ColorRange
              myColorRange.From = Color.FromArgb(255, 255, 0, 0) 'Red
              myColorRange.To = Color.FromArgb(255, 0, 255, 0) 'Green
              myRampInterpolator.ColorRange = myColorRange
              Dim mySizeRange As New ESRI.ArcGIS.Client.SizeRange
              mySizeRange.From = 20
              mySizeRange.To = 5
              myRampInterpolator.SizeRange = mySizeRange
              
              ' You could also specify an opacity (i.e. amount of visibility) for the triangles as well. Uncomment
              ' the next three lines to see this effect.
              'Dim myOpacityRange As New ESRI.ArcGIS.Client.OpacityRange
              'myOpacityRange.From = 1 '1 = solid
              'myOpacityRange.To = 0.1 '0 = invisible
              'myRampInterpolator.OpacityRange = myOpacityRange
              
              ' Apply the RampInterpolator as the TemporalRenderer.SymbolAger
              myTemporalRenderer.SymbolAger = myRampInterpolator
              
              ' Apply the TemporalRenderer as the Renderer of the FeatureLayer.
              myFeatureLayer.Renderer = myTemporalRenderer
              
              ' Add the myFeatureLayer to the myMap Layer Collection. 
              myMap.Layers.Add(myFeatureLayer)
              
              ' Zoom to the North and South America.
              Dim myEnvelope2 As New ESRI.ArcGIS.Client.Geometry.Envelope
              myEnvelope2.XMin = -166.2
              myEnvelope2.YMin = -57.0
              myEnvelope2.XMax = -34.36
              myEnvelope2.YMax = 74.47
              myMap.Extent = myEnvelope2
              
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.RampInterpolator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.RampInterpolator"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.RampInterpolator.GetInterpolatedSymbol(ESRI.ArcGIS.Client.Symbols.Symbol,ESRI.ArcGIS.Client.Graphic,System.Double,System.Double,System.Double)">
            <summary>
            Gets the interpolated symbol.
            </summary>
            <param name="symbol">The symbol to interpolate.</param>
            <param name="graphic">The graphic/feature being rendered.</param>
            <param name="startValue">The start value.</param>
            <param name="endValue">The end value.</param>
            <param name="objectValue">The object value.</param>
            <returns>Interpolated symbol</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.RampInterpolator.SizeRange">
            <summary>
            Gets or sets the range of size’s applied to a Symbol being rendered via the RampInterpolator for a set of 
            temporal features in a <see cref="T:ESRI.ArcGIS.Client.FeatureLayer">FeatureLayer</see> as defined by the 
            <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see>.
            </summary>
            <remarks>
            <para>
            The double that is used in the <see cref="P:ESRI.ArcGIS.Client.SizeRange.From">SizeRange.From</see> and 
            <see cref="P:ESRI.ArcGIS.Client.SizeRange.To">SizeRange.To</see> Properties of the SizeRange are based in 
            pixels. The newest temporal observation specified by the Map.TimeExtent matches the <b>From</b> size value. 
            The oldest temporal observation specified by the Map.TimeExtent matches the <b>To</b> size value.
            </para>
            <para>
            The following image provides a visual example of how a square Symbol would look via the RampInterpolator 
            for the SizeRange Property that is graduated over five time periods as defined by the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="SizeRange example for the symbol size ranging from 10 to 2." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.SizeRange.png"/>
            </para>
            <para>
            Code examples for using the SizeRange can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.RampInterpolator.OpacityRange">
            <summary>
            Gets or sets the range of opacity (i.e. visibility) applied to a Symbol being rendered via the 
            RampInterpolator for a set of temporal features in a <see cref="T:ESRI.ArcGIS.Client.FeatureLayer">FeatureLayer</see> 
            as defined by the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see>.
            </summary>
            <remarks>
            <para>
            The double that is used in the <see cref="P:ESRI.ArcGIS.Client.OpacityRange.From">OpacityRange.From</see> and 
            <see cref="P:ESRI.ArcGIS.Client.OpacityRange.To">OpacityRange.To</see> Properties of the Opacity range in value 
            from 0 to 1. 0 means invisible and 1 means completely visible. The newest temporal observation specified 
            by the Map.TimeExtent matches the <b>From</b> opacity value. The oldest temporal observation specified by the 
            Map.TimeExtent matches the <b>To</b> opacity value.
            </para>
            <para>
            The following image provides a visual example of how a square Symbol (with the default color being red) 
            would look via the RampInterpolator for the OpacityRange Property that is graduated over five time 
            periods as defined by the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="OpacityRange example for visibility going from 1 to .2." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.OpacityRange.png"/>
            </para>
            <para>
            Code examples for using the OpacityRange can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.RampInterpolator.ColorRange">
            <summary>
            Gets or sets the range of color’s applied to a Symbol being rendered via the RampInterpolator for a set of 
            temporal features in a <see cref="T:ESRI.ArcGIS.Client.FeatureLayer">FeatureLayer</see> as defined by the 
            <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see>.
            </summary>
            <remarks>
            <para>
            Colors are graduated between a <see cref="P:ESRI.ArcGIS.Client.ColorRange.From">ColorRange.From</see> color and a 
            <see cref="P:ESRI.ArcGIS.Client.ColorRange.To">ColorRange.To</see> color based upon the
            <a href="http://en.wikipedia.org/wiki/Color_wheel" target="_top">Color Wheel</a>.
            The newest temporal observation specified by the Map.TimeExtent matches the <b>From</b> color. The oldest temporal 
            observation specified by the Map.TimeExtent matches the <b>To</b> color.
            </para>
            <para>
            The following image provides a visual example of how a square Symbol would look via the RampInterpolator 
            for the ColorRange Property that is graduated over five time periods as defined by the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="ColorRange example for the symbol going from Red to Yellow." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.ColorRange.png"/>
            </para>
            <para>
            Code examples for using the ColorRange can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.SizeRange">
            <summary>
            Utility class used to define a range of interpolated sizes of a Symbol using a starting and 
            ending pair of doubles.
            </summary>
            <remarks>
            <para>
            The SizeRange Class is used by the 
            <see cref="P:ESRI.ArcGIS.Client.RampInterpolator.SizeRange">RampInterpolator.SizeRange</see> Property 
            for aging the symbology of temporal observations of a FeatureLayer. The size of a set of symbols is 
            graduated between the <see cref="P:ESRI.ArcGIS.Client.SizeRange.From">From</see> and 
            <see cref="P:ESRI.ArcGIS.Client.SizeRange.To">To</see>values specified. The double that is used in the 
            <b>From</b> and <b>To</b> Properties of the SizeRange are based in pixels. The newest temporal 
            observation specified by the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> matches 
            the <b>From</b> size value. The oldest temporal observation specified by the Map.TimeExtent matches 
            the <b>To</b> size value.
            </para>
            <para>
            The following image provides a visual example of how a square Symbol would look via the 
            RampInterpolator for the SizeRange Property that is graduated over five time periods as defined 
            by the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="Visual example of a SizeRange going from 10 to 2." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.SizeRange.png"/>
            </para>
            <para>
            Code examples for using the SizeRange can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.SizeRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.SizeRange"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.SizeRange.From">
            <summary>
            Gets of sets the size that corresponds to the symbology of the oldest temporal observation 
            specified by the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see>.
            </summary>
            <remarks>
            <para>
            The following image provides a visual example of how a square Symbol would look via the 
            RampInterpolator for the SizeRange Property that is graduated over five time periods as defined 
            by the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="Visual example of a SizeRange going from 10 to 2." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.SizeRange.png"/>
            </para>
            <para>
            Code examples for using the SizeRange can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.SizeRange.To">
            <summary>
            Gets of sets the size that corresponds to the symbology of the newest temporal observation 
            specified by the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see>.
            </summary>
            <remarks>
            <para>
            The following image provides a visual example of how a square Symbol would look via the 
            RampInterpolator for the SizeRange Property that is graduated over five time periods as defined 
            by the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="Visual example of a SizeRange going from 10 to 2." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.SizeRange.png"/>
            </para>
            <para>
            Code examples for using the SizeRange can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ColorRange">
            <summary>
            Utility class used to define a range of interpolated Colors via a Color Wheel using a starting 
            and ending pair of Colors.
            </summary>
            <remarks>
            <para>
            Colors are graduated between a <see cref="P:ESRI.ArcGIS.Client.ColorRange.From">From</see> color and a 
            <see cref="P:ESRI.ArcGIS.Client.ColorRange.To">To</see> color based upon the 
            <a href="http://en.wikipedia.org/wiki/Color_wheel" target="_top">Color Wheel</a>. The ColorRange 
            Class is used by the <see cref="P:ESRI.ArcGIS.Client.RampInterpolator.ColorRange">RampInterpolator.ColorRange</see> 
            Property for aging the symbology of temporal observations of a FeatureLayer. The newest temporal 
            observation specified by the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> 
            matches the <b>From</b> color. The oldest temporal observation specified by the Map.TimeExtent 
            matches the <b>To</b> color.
            </para>
            <para>
            The following image provides a visual example of how a square Symbol would look via the 
            RampInterpolator for the ColorRange Property that is graduated over five time periods as defined by 
            the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="Visual example of a ColorRange going from red to yellow." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.ColorRange.png"/>
            </para>
            <para>
            Code examples for using the ColorRange can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ColorRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.ColorRange"/> class.        
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ColorRange.From">
            <summary>
            Gets of sets the Color that corresponds to the symbology of the newest temporal observation 
            specified by the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see>.
            </summary>
            <remarks>
            <para>
            The following image provides a visual example of how a square Symbol would look via the 
            RampInterpolator for the ColorRange Property that is graduated over five time periods as defined by 
            the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="Visual example of a ColorRange going from red to yellow." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.ColorRange.png"/>
            </para>
            <para>
            Code examples for using the ColorRange can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ColorRange.To">
            <summary>
            Gets of sets the Color that corresponds to the symbology of the oldest temporal observation 
            specified by the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see>.
            </summary>
            <remarks>
            <para>
            The following image provides a visual example of how a square Symbol would look via the 
            RampInterpolator for the ColorRange Property that is graduated over five time periods as defined by 
            the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="Visual example of a ColorRange going from red to yellow." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.ColorRange.png"/>
            </para>
            <para>
            Code examples for using the ColorRange can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.OpacityRange">
            <summary>
            Utility class used to define a range of interpolated opacity (i.e. visibility) of a Symbol using a 
            starting and ending pair of doubles.
            </summary>
            <remarks>
            <para>
            The OpacityRange Class is used by the 
            <see cref="P:ESRI.ArcGIS.Client.RampInterpolator.OpacityRange">RampInterpolator.OpacityRange</see> Property 
            for aging the symbology of temporal observations of a FeatureLayer. The opacity (i.e. visibility) of a 
            set of symbols is graduated between the <see cref="P:ESRI.ArcGIS.Client.OpacityRange.From">From</see> and 
            <see cref="P:ESRI.ArcGIS.Client.OpacityRange.To">To</see> values specified. The double that is used in 
            the <b>From</b> and <b>To</b> Properties of the Opacity range in value from 0 to 1. 0 means invisible 
            and 1 means completely visible. The newest temporal observation specified by the 
            <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> matches the <b>From</b> opacity value. 
            The oldest temporal observation specified by the Map.TimeExtent matches the <b>To</b> opacity value. 
            </para>
            <para>
            The following image provides a visual example of how a square Symbol (with the default color being 
            red) would look via the RampInterpolator for the OpacityRange Property that is graduated over five 
            time periods as defined by the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="Visual example of a OpacityRange going from 1.0 to 0.2." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.OpacityRange.png"/>
            </para>
            <para>
            Code examples for using the OpacityRange can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.OpacityRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.OpacityRange"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.OpacityRange.From">
            <summary>
            Gets of sets the amount of opacity (i.e visibility) that corresponds to the symbology of the 
            newest temporal observation specified by the 
            <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see>.
            </summary>
            <remarks>
            <para>
            The double that is used in the <b>From</b> Property of the Opacity range in value from 0 to 1. 
            0 means invisible and 1 means completely visible. The newest temporal observation specified by 
            the Map.TimeExtent matches the <b>From</b> opacity value.
            </para>
            <para>
            The following image provides a visual example of how a square Symbol (with the default color being 
            red) would look via the RampInterpolator for the OpacityRange Property that is graduated over five 
            time periods as defined by the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="Visual example of a OpacityRange going from 1.0 to 0.2." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.OpacityRange.png"/>
            </para>
            <para>
            Code examples for using the OpacityRange can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.OpacityRange.To">
            <summary>
            Gets of sets the amount of opacity (i.e visibility) that corresponds to the symbology of the 
            oldest temporal observation specified by the 
            <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see>.
            </summary>
            <remarks>
            <para>
            The double that is used in the <b>To</b> Property of the Opacity range in value from 0 to 1. 
            0 means invisible and 1 means completely visible. The oldest temporal observation specified by 
            the Map.TimeExtent matches the <b>To</b> opacity value.
            </para>
            <para>
            The following image provides a visual example of how a square Symbol (with the default color being 
            red) would look via the RampInterpolator for the OpacityRange Property that is graduated over five 
            time periods as defined by the Map.TimeExtent.
            </para>
            <para>
            <img border="0" alt="Visual example of a OpacityRange going from 1.0 to 0.2." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.RampInterpolator.OpacityRange.png"/>
            </para>
            <para>
            Code examples for using the OpacityRange can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.LegendItemInfo">
            <summary>
            Information about a legend item (a label, an image and, optionaly a description).
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LegendItemInfo.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Creates a legend item info from a JSON dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="layerUrl">The service URL used to determine where relative image URLs can be found under.</param>
            <returns></returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LegendItemInfo.Label">
            <summary>
            Legend item label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LegendItemInfo.ImageSource">
            <summary>
            The image source to display in the legend.
            </summary>
            <value>The image source.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LegendItemInfo.Description">
            <summary>
            The description of the legend item.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Projection.WebMercator">
            <summary>
            Helper methods for converting geometries between 
            Bing Maps WebMercator projection (SRID=3857) and WGS84 
            Geographic coordinate system (SRID=4326).
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Projection.WebMercator.FromGeographic(ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Helper method for quickly projecting coordinates from 
            geographic WGS84 coordinates (WKID=4326) to web mercator (WKID=102100).
            </summary>
            <remarks>
            Latitude values must fall within -90 and 90. X values outside +/-180 
            will assumed going round earth. ex. 181W is equivalent to 179E.
            </remarks>
            <param name="geo">Geometry in geographic coordinates.</param>
            <returns>Geometry projected to WebMercator</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Projection.WebMercator.ToGeographic(ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Helper method for quickly unprojecting coordinates from
            webmercator (WKID=102100) to geographic WGS84 coordinates (WKID=4326).
            </summary>
            <param name="proj">The geometry in WebMercator units.</param>
            <returns>Geometry projected to WGS84 Geographic</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.ArcGISJsonWriter.GraphicsToFeatureServiceJson(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},System.Boolean)">
            <summary>
            Converts a graphics collection to JSON acceptable by a Feature Service
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="normalize">if set to <c>true</c> normalize for anti meridian.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.ArcGISJsonWriter.GraphicsToFeatureServiceJson(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic},System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Converts a graphics collection to JSON acceptable by a Feature Service
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="normalize">if set to <c>true</c> normalize for anti meridian.</param>
            <param name="onlyDirty">if set to <c>true</c> only writes out attributes and geometry if it is marked dirty by the FeatureLayer.</param>		
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.ArcGISJsonWriter.BrushToJsonColor(System.Windows.Media.Brush)">
            <summary>
            Gets the JSON Color of Brush
            </summary>
            <param name="brush">The brush.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.ArcGISJsonWriter.ColorToJsonColor(System.Windows.Media.Color)">
            <summary>
            Gets the JSON Color of Color
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.ArcGISJsonWriter.FromPixelsToPoints(System.Double)">
            <summary>
            Converts pixel units to points.
            </summary>
            <param name="pixels">The pixels.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.ArcGISJsonReader.JsonArrayToColor(System.Object)">
            <summary>
            Converts a json array to a color
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.ArcGISJsonReader.JsonArrayToColorBrush(System.Object)">
            <summary>
            Converts a json array into a color brush.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.ArcGISJsonReader.makeNegative(System.Object)">
            <summary>
            Convers object to a negative double.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.ArcGISJsonReader.fromPointsToPixels(System.Object)">
            <summary>
            Converts points to pixel units.
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.ArcGISJsonReader.ToDouble(System.Object)">
            <summary>
            Converts value to double.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.ArcGISJsonReader.JsonDictionaryToSymbol(System.Collections.Generic.Dictionary{System.String,System.Object},System.Windows.Media.Brush,System.String)">
            <summary>
            Converts JSON dictionary to a symbol.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="selectionColor">Color of the selection.</param>
            <param name="serviceUrl">The service URL used to determine where relative image URLs can be found under.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Utils.JSON.ArcGISJsonReader.GetSLSProperties(System.Collections.Generic.Dictionary{System.String,System.Object},System.Double@,ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol.LineStyle@,System.Windows.Media.Brush@)">
            <summary>
            Gets simple line symbol properties from the passed-in JSON dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="width"></param>
            <param name="lineStyle"></param>
            <param name="color"></param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters">
            <summary>
            Input parameters for a <see cref="M:ESRI.ArcGIS.Client.Tasks.RouteTask.SolveClosestFacilityAsync(ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters,System.Object)"/>. 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.UseHierarchy">
            <summary>
             If true, the hierarchy attribute for the network should be used in analysis. The default is as defined
             in the specific routing network layer used in your RouteTask.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.Incidents">
            <summary>
             The set of incidents loaded as network locations during analysis. Can be either an instance of DataLayer or FeatureSet.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.Facilities">
            <summary>
             The set of facilites loaded as network locations during analysis. Can be either an instance of DataLayer or FeatureSet.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.ReturnIncidents">
            <summary>
             If <c>true</c>, incidents will be returned in the facilities property of RouteSolveClosestFacilityResult.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.ReturnFacilities">
            <summary>
             If <c>true</c>, facilities will be returned in the facilities property of RouteSolveResult.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.ReturnRoutes">
            <summary>
             If true, routes will be generated and returned in the route property of each <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteResult"/> of the <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteEventArgs"/>.
            </summary>
            <remarks>The default value is <c>true</c>.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.ReturnDirections">
            <summary>
             If <c>true</c>, directions will be generated and returned in the directions property of each <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteResult"/> of the <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteEventArgs"/>.
            </summary>
            <remarks>The default value is <c>false</c>.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.TravelDirection">
            <summary>
            Options for traveling to or from the facility.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.FacilityReturnType">
            <summary>
            The type of facility to be returned. The defaulit 
            is <see cref="F:ESRI.ArcGIS.Client.Tasks.FacilityReturnType.ServerFacilityReturnAll"/>.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.DefaultCutoff">
            <summary>
            Default cutoff value to stop traversing.
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.DefaultTargetFacilityCount">
            <summary>
            Default number of facilities to find
            </summary>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.DirectionsLanguage">
            <summary>
            The language to be used when computing directions. The default is as defined
            in the specific routing network layer used in your RouteTask. By default,
            NAServer gets installed with en_US only - it is up to the server administrator
            to add additional languages. 
            </summary>
            <value>The directions language.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.DirectionsLengthUnits">
            <summary>
            The length units to use when computing directions. The default is as defined
            in the specific routing network layer used in your <see cref="T:ESRI.ArcGIS.Client.Tasks.RouteTask"/>.
            Possible values are "esriFeet", "esriKilometers", "esriMeters",
            "esriMiles", "esriNauticalMiles" and "esriYards". 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RouteClosestFacilityParameters.DirectionsTimeAttribute">
            <summary>
            The name of network attribute to use for the drive time when computing directions.
            The default is as defined in the specific routing network layer used in your RouteTask. 
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.AddressToLocationsParameters">
            <summary>
            Parameters for the AddressToLocations geocode service operation.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.AddressToLocationsParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.AddressToLocationsParameters"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AddressToLocationsParameters.Address">
            <summary>
            A Dictionary that contains key/value pairs representing the various 
            address fields accepted by the corresponding geocode service. These 
            fields are listed in the addressFields property of the associated 
            geocode service resource.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AddressToLocationsParameters.OutFields">
            <summary>
            The list of fields to include in a returned result set. If you 
            specify the shape field in the list of return fields, it is ignored. 
            For non-intersection addresses you can specify the candidate fields 
            as defined in the geocode service. For intersection addresses you 
            can specify the intersection candidate fields.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AddressToLocationsParameters.OutSpatialReference">
            <summary>
            Gets or sets the output spatial reference for the returning 
            coordinates.
            </summary>
            <value>The output spatial reference.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.Address">
            <summary>
            An address.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Address.#ctor(ESRI.ArcGIS.Client.Geometry.MapPoint,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.Address"/> class.
            </summary>
            <param name="location">The location of the address.</param>
            <param name="attributes">The attributes of the address.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Address.Attributes">
            <summary>
            The attributes.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Address.Location">
            <summary>
            The location.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyEventArgs">
            <summary>
            EventArgs for the <see cref="E:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyTask.ExecuteCompleted"/> event of the <see cref="T:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyTask"/>.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyEventArgs.Results">
            <summary>
            The features returned by the IdentifyImageServiceTask for a image service layer.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.IdentifyParameters">
            <summary>
            The parameters used to execute the <see cref="T:ESRI.ArcGIS.Client.Tasks.IdentifyTask"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.Geometry">
            <summary>
            The geometry to identify on. The valid geometry types are Envelope, 
            Point, Multipoint, Polyline, or Polygon. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.SpatialReferenceWKID">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the IdentifyParameters.SpatialReference property.
            </para>
            <para>
            The well-known ID of the spatial reference of the input and output geometries as well 
            as the mapExtent. If not specified, the geometry and the mapExtent are assumed 
            to be in the spatial reference of the mapservice, and the output geometries are also in the 
            spatial reference of the map.
            </para>
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.SpatialReference">
            <summary>
            The spatial reference of the input and output geometries as well as 
            the mapExtent. If sr is not specified, the geometry and the 
            mapExtent are assumed to be in the spatial reference of the map, 
            and the output geometries are also in the spatial reference of the 
            map. The SpatialReference supports wkid as well as wkt for custom
            spatial references.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.ReturnGeometry">
            <summary>
            If true, each returned feature includes the geometry. Since the 
            geometry makes up a significant portion of the result, only use when 
            you plan to use the geometry of the feature, for example, to include 
            them on a map. By default, this is true.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.LayerOption">
            <summary>
            Specifies which method to use when using Identify. "Top": Only the 
            topmost visible layer is identified. "Visible": All visible layers 
            are identified. "All": All layers are identified, even if they are 
            not visible. Performance note: if your service has many layers, a 
            request using "All" will not perform well. A visible layer means you 
            can see it in the map at the current extent. If a layer is turned 
            off or not in range based on its scale dependency settings, it 
            cannot be identified.
            
            To idenfity sub-layers that are not visible in the default map service definition, 
            you may need to use the "All" option to return results.  
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.LayerIds">
            <summary>
            Optional. When layer Ids are specified, the server treats it as a 
            boolean "AND" operator. For example, if the LayerOption Visible is 
            specified and the LayerIds are set to [2,5], only layers with Ids 2 
            and 5, if visible, are identified.
            
            To idenfity sub-layers that are not visible in the default map service definition, 
            you may need to use the "All" LayerOption to return results. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.Tolerance">
            <summary>
            The distance in screen pixels from the specified geometry within 
            which the identify should be performed.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.MapExtent">
            <summary>
            The extent or bounding box of the map currently being viewed. Unless 
            the SpatialReferenceWKID parameter has been specified, the mapExtent 
            is assumed to be in the spatial reference of the map.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.Width">
            <summary>
            Width of the map currently being viewed in pixels.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.Height">
            <summary>
            Height of the map currently being viewed in pixels.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.DPI">
            <summary>
            Resolution of the current map view in dots per inch. The default is 
            96.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.LayerDefinitions">
            <summary>
            Collection of layer definition expressions that allows you to filter 
            the features of individual layers in the exported map image. 
            Definition expressions for layers that are currently not visible 
            will be ignored by the server.
            </summary>
            <value>The layer definitions.</value>
            <see cref="T:ESRI.ArcGIS.Client.LayerDefinition"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.MaxAllowableOffset">
            <summary>
            Gets or sets the max allowable offset. This option can be used to 
            specify the maximum allowable offset to be used for generalizing 
            geometries returned by the identify operation.
            </summary>
            <value>The max allowable offset.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.TimeExtent">
            <summary>
            Gets or sets the time instant or the time extent to identify.
            </summary>
            <remarks>Supported in ArcGIS REST Server v.10+</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyParameters.TimeOptions">
            <summary>
            Gets or sets the layer time options. Time options can be set to 
            indicate whether or not the layer should use the time extent 
            specified by the time parameter or not, whether to draw the layer 
            features cumulatively or not and the time offsets for the layer. 
            </summary>
            <value>The layer time options.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.TimeOption">
            <summary>
            Contains properties to indicate how to render an individual sub-layer of a time-enabled ArcGISDynamicMapServiceLayer.
            </summary>
            <remarks>
            <para>
            The TimeOption object indicates whether or 
            not the sub-layer of an ArcGISDynamicMapServiceLayer should use the 
            <see cref="T:ESRI.ArcGIS.Client.TimeExtent">TimeExtent</see> specified by 
            the time parameter or not (see 
            <see cref="P:ESRI.ArcGIS.Client.Tasks.TimeOption.UseTime">TimeOption.UseTime</see> and
            <see cref="T:ESRI.ArcGIS.Client.LayerTimeOptionCollection">LayerTimeOptionCollection</see>), 
            whether to draw the layer features cumulatively or not (see 
            <see cref="P:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeDataCumulative">TimeOption.TimeDataCumulative</see>), 
            and if any time offsets will be used for the layer (see 
            <see cref="P:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeOffset">TimeOption.TimeOffset</see>).
            </para>
            <para>
            Using the Read/Get of the 
            <see cref="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerTimeOptions">ArcGISDynamicMapServiceLayer.LayerTimeOptions</see> 
            Property returns null/Nothing unless it has been explicitly 
            set by the developer (it is not automatically set as a Property in the ArcGIS Server web service for the 
            ArcGISDynamicMapServiceLayer). Developers need to create a new 
            <see cref="T:ESRI.ArcGIS.Client.LayerTimeOptionCollection">LayerTimeOptionCollection</see>, add the 
            TimeOption object(s) to it, and then set the new LayerTimeOptionCollection to the 
            ArcGISDynamicMapServiceLayer.LayerTimeOptions Property. An ArcGISDynamicMapServiceLayer can have multiple 
            TimeOption objects; one for each sub-layer in the ArcGISDynamicMapServiceLayer.
            </para>
            <para>
            It is the <see cref="M:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> that controls what features 
            are displayed based upon the temporal information in the ArcGISDynamicMapServiceLayer. The 
            Map.TimeExtent acts as to limit the features displayed based upon the window-of-time specified by 
            the <see cref="M:ESRI.ArcGIS.Client.TimeExtent.Start">TimeExtent.Start</see> and 
            <see cref="M:ESRI.ArcGIS.Client.TimeExtent.End">TimeExtent.End</see>. One analogy you can think of is that 
            the Map.TimeExtent is like a window in a house. Depending on the size of the window, allows how much you 
            can see outside (i.e. the features in the ArcGISDynamicMapServiceLayer). See the visual analogy depiction.
            </para>
            <para>
            <img border="0" alt="Analogy of how the Map.TimeExtent limits the temporal features being displayed in a layer is like looking out a window only allow certain visual images to be seen based upon the size of the window." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.LayerTimeOptions.WindowOfTimeAnalogy.png"/>
            </para>
            <para>
            The <see cref="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerDefinitions">ArcGISDynamicMapServiceLayer.LayerDefinitions</see> 
            take precedence over other data restriction techniques like those of the 
            <see cref="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerTimeOptions">ArcGISDynamicMapServiceLayer.LayerTimeOptions</see>. 
            In other words, the ArcGISDynamicMapServiceLayer.LayerDefinitions acts to limit the data in the 
            ArcGISDynamciMapServiceLayer that the ArcGISDynamicMapServiceLayer.LayerTimeOptions can operate on.
            </para>
            <para>
            If the <see cref="P:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeDataCumulative">TimeOption.TimeDataCumulative</see> 
            = True then the data in the ArcGISDynamicMapServiceLayer returned is based upon the TimeExtent.Start of 
            the REST service. If the TimeOption.TimeDataCumulative = False then the data in the 
            ArcGISDynamicMapServiceLayer returned is based upon TimeExtent.Start of the Map Control.
            </para>
            <para>
            If the <see cref="P:ESRI.ArcGIS.Client.Tasks.TimeOption.UseTime">TimeOption.UseTime</see> = True then 
            the data in the ArcGISDynamicMapServiceLayer returned is based upon occurrences between the 
            TimeExtent.Start and TimeExtent.End of the Map Control. If the TimeOption.UseTime 
            = False then time based queries are disabled for the ArcGISDynamicMapServiceLayer (meaning all of the 
            records will be returned subject to any LayerDefinitons that may be set).
            </para>
            <para>
            The <see cref="P:ESRI.ArcGIS.Client.Tasks.TimeOption.LayerId">TimeOption.LayerId</see> is a String. 
            Developers should cast the <see cref="M:ESRI.ArcGIS.Client.LayerInfo.ID">ArcGISDynamicMapServiceLayer.Layers.ID</see> 
            (an Integer) to a String when setting the TimeOption.LayerId.
            </para>
            <para>
            Normally the <see cref="M:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> determines what features 
            will be displayed for a time-enabled ArcGISDynamicMapServiceLayer. The 
            <see cref="P:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeOffset">TimeOption.TimeOffset</see> is a special case 
            where the features that are returned will be offset from what is specified in the Map.TimeExtent 
            by the TimeOffset amount based upon specific 
            <see cref="P:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeOffsetUnit">TimeOption.TimeOffsetUnit</see> denomination. 
            Negative TimeOffset values are possible for returning features of previous times to the currently set 
            Map.TimeExtent.
            </para>
            <para>
            <b>NOTE:</b> A change was made to ArcGIS Server 10.02 (i.e. 10.0 Service Pack 2) and subsequents future versions 
            that impacts what is needed to draw ALL features 
            in an ArcGISDynamicMapServiceLayer that is time-enabled. Prior to ArcGIS Server 10.02, it was required in order 
            to see the ALL features for a time-enabled  ArcGISDynamicMapServiceLayer in a Map Control to either:<br/>
            (1) set the Map.TimeExtent to a valid time that covered the features in the ArcGISDynamicMapServiceLayer<br/>
            OR<br/>
            (2) if no Map.TimeExtent was set on the Map Control, then each TimeOption for the sub-layer of the 
            ArcGISDynamicMapServiceLayer needs to have the TimeOption.UseTime Property set to False.<br/>
            As of ArcGIS Sever 10.02 and higher, the time-enabled ArcGISDynamicMapServiceLayer will automatically show 
            ALL features, even if no Map.TimeExtent is set. See the code example in the 
            <see cref="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerTimeOptions">ArcGISDynamicMapServiceLayer.LayerTimeOptions</see> 
            document for a demonstration.
            </para>
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.TimeOption.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.TimeOption"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TimeOption.LayerId">
            <summary>
            Gets or sets the numeric identifier of the sub-layer in the time-enabled ArcGISDynamicMapServiceLayer for which 
            TimeOption rendering will occur.
            </summary>
            <remarks>
            <para>
            The TimeOption.LayerId is a String. Developers should cast the 
            <see cref="M:ESRI.ArcGIS.Client.LayerInfo.ID">ArcGISDynamicMapServiceLayer.Layers.ID</see> 
            (an Integer) to a String when setting the TimeOption.LayerId.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TimeOption.UseTime">
            <summary>
            Gets or sets the boolean value indicating whether a sub-layer of a time-enabled ArcGISDynamicMapServiceLayer 
            will use the <see cref="M:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> parameters.
            </summary>
            <remarks>
            <para>
            It is the <see cref="M:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> that controls what features 
            are displayed based upon the temporal information in the ArcGISDynamicMapServiceLayer. The 
            Map.TimeExtent acts as to limit the features displayed based upon the window-of-time specified by 
            the <see cref="M:ESRI.ArcGIS.Client.TimeExtent.Start">TimeExtent.Start</see> and 
            <see cref="M:ESRI.ArcGIS.Client.TimeExtent.End">TimeExtent.End</see>. One analogy you can think of is that 
            the Map.TimeExtent is like a window in a house. Depending on the size of the window, allows how much you 
            can see outside (i.e. the features in the ArcGISDynamicMapServiceLayer). See the visual analogy depiction.
            </para>
            <para>
            <img border="0" alt="Analogy of how the Map.TimeExtent limits the temporal features being displayed in a layer is like looking out a window only allow certain visual images to be seen based upon the size of the window." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.ArcGISDynamicMapServiceLayer.LayerTimeOptions.WindowOfTimeAnalogy.png"/>
            </para>
            <para>
            If the TimeOption.UseTime = True then the data in the ArcGISDynamicMapServiceLayer returned is based 
            upon occurrences between the TimeExtent.Start and TimeExtent.End of the Map Control. If the TimeOption.UseTime 
            = False then time based queries are disabled for the ArcGISDynamicMapServiceLayer (meaning all of the 
            records will be returned subject to any LayerDefinitons that may be set).
            </para>
            <para>
            The <see cref="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerDefinitions">ArcGISDynamicMapServiceLayer.LayerDefinitions</see> 
            take precedence over other data restriction techniques like those of the 
            <see cref="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerTimeOptions">ArcGISDynamicMapServiceLayer.LayerTimeOptions</see>. 
            In other words, the ArcGISDynamicMapServiceLayer.LayerDefinitions acts to limit the data in the 
            ArcGISDynamciMapServiceLayer that the ArcGISDynamicMapServiceLayer.LayerTimeOptions can operate on.
            </para>
            <para>
            <b>NOTE:</b> A change was made to ArcGIS Server 10.02 (i.e. 10.0 Service Pack 2) and subsequents future versions 
            that impacts what is needed to draw ALL features 
            in an ArcGISDynamicMapServiceLayer that is time-enabled. Prior to ArcGIS Server 10.02, it was required in order 
            to see the ALL features for a time-enabled  ArcGISDynamicMapServiceLayer in a Map Control to either:<br/>
            (1) set the Map.TimeExtent to a valid time that covered the features in the ArcGISDynamicMapServiceLayer<br/>
            OR<br/>
            (2) if no Map.TimeExtent was set on the Map Control, then each TimeOption for the sub-layer of the 
            ArcGISDynamicMapServiceLayer needs to have the TimeOption.UseTime Property set to False.<br/>
            As of ArcGIS Sever 10.02 and higher, the time-enabled ArcGISDynamicMapServiceLayer will automatically show 
            ALL features, even if no Map.TimeExtent is set. See the code example in the 
            <see cref="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerTimeOptions">ArcGISDynamicMapServiceLayer.LayerTimeOptions</see> 
            document for a demonstration.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            When the application loads all trees maintained in the San Francisco database with an ID less that 500 will be displayed. 
            Choose the different UseTime RadioButton options to see what effect occurs in the features being drawn in the Map (and 
            their count). When UseTime = True the data in the ArcGISDynamicMapServiceLayer returned is based upon occurrences between 
            the TimeExtent.Start (1/1/2000) and TimeExtent.End (12/31/2000) of the Map Control and will display 4 features. When 
            UseTime = False then time based queries are disabled for the ArcGISDynamicMapServiceLayer (meaning all of the records will 
            be returned subject to any LayerDefinitons that may be set) and will display 171 features.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Testing the UseTime settings of ArcGISDynamicMapServiceLayer.LayerTimeOptions." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Tasks.TimeOption.UseTime.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
              
              &lt;!-- Add a Map Control. --&gt;
              &lt;esri:Map Name="Map1" HorizontalAlignment="Left" VerticalAlignment="Top"   
                        Margin="14,240,0,0" Height="350" Width="500" WrapAround="True"
                        Extent="-13641670,4536157,-13616982,4553439"&gt;
                &lt;esri:Map.Layers&gt;
                  &lt;esri:LayerCollection&gt;
                    
                    &lt;!-- Add a backdrop ArcGISTiledMapServiceLayer. --&gt;
                    &lt;esri:ArcGISTiledMapServiceLayer 
                      Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer" /&gt;
                     
                    &lt;!-- 
                    Add an ArcGISDynamicMapServiceLayer. The layer displays trees maintained in San Francisco. Because
                    the amomut od data points in the service is large, a LayerDefinition has been applied such that only 
                    those trees with and numerical ID value of less that 500 will be drawn in the Map. The Initialized 
                    event is wired up to display the TimeExtents for which the trees will be displayed as well as count 
                    of the number of occurances displayed in the Map. The DisableClientCaching is set to true which means 
                    all Rendering logic will be handled on ArcGIS Server. The LayerDefinition takes precidence over other 
                    data restriction types of queries like the LayerTimeOptions.
                    --&gt;
                    &lt;esri:ArcGISDynamicMapServiceLayer ID="SanFranciscoTrees" 
                              Url="http://servicesbeta.esri.com/ArcGIS/rest/services/SanFrancisco/SFStreetTreesRendered/MapServer"
                              DisableClientCaching="True" Initialized="ArcGISDynamicMapServiceLayer_Initialized"&gt;
                      &lt;esri:ArcGISDynamicMapServiceLayer.LayerDefinitions&gt;
                        &lt;esri:LayerDefinition LayerID="0" Definition="TreeID &lt; 500"/&gt;
                      &lt;/esri:ArcGISDynamicMapServiceLayer.LayerDefinitions&gt;
                    &lt;/esri:ArcGISDynamicMapServiceLayer&gt;
                    
                  &lt;/esri:LayerCollection&gt;
                &lt;/esri:Map.Layers&gt;
              &lt;/esri:Map&gt;
                
              &lt;!-- Display the TimeExtent information being used by the Map Control. --&gt;
              &lt;sdk:Label Height="21" HorizontalAlignment="Left" Margin="12,111,0,0" Name="Label_TimeExtent_Start" 
                         VerticalAlignment="Top" Width="120" Content="Map.TimeExtent.Start:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="140,106,0,0" Name="TextBox_TimeExtent_Start" 
                       VerticalAlignment="Top" Width="374" /&gt;
              &lt;sdk:Label Height="21" HorizontalAlignment="Left" Margin="12,146,0,0" Name="Label_TimeExtent_End" 
                         VerticalAlignment="Top" Width="120" Content="Map.TimeExtent.End:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="140,144,0,0" Name="TextBox_TimeExtent_End" 
                       VerticalAlignment="Top" Width="374" /&gt;
              &lt;TextBlock Height="23" HorizontalAlignment="Left" Margin="12,109,0,0" Name="TextBlock_Ignored" Visibility="Visible" 
                         Text="---------------------------------------------- I G N O R E D --------------------------------------" 
                         VerticalAlignment="Top" Width="502" Foreground="Red" FontFamily="Arial" FontSize="14"/&gt;
              &lt;TextBlock Height="23" HorizontalAlignment="Left" Margin="14,144,0,0" Name="TextBlock_Ignored2" Visibility="Visible" 
                         Text="---------------------------------------------- I G N O R E D --------------------------------------" 
                         VerticalAlignment="Top" Width="502" Foreground="Red" FontFamily="Arial" FontSize="14"/&gt;
              
              &lt;!-- 
              Allow the user to change the ArcGISDynamicMapServiceLayer's UseTime options.
              If UseTime = True then the data in the ArcGISDynamicMapServiceLayer returned is based upon occurrences 
              between the TimeExtent.Start and TimeExtent.End of the Map Control.
              If UseTime = False then time based queries are disabled for the ArcGISDynamicMapServiceLayer (meaning all 
              of the records will be returned subject to any LayerDefinitons that may be set). 
              --&gt;
              &lt;sdk:Label Height="22" HorizontalAlignment="Left" Margin="14,180,0,0" Name="Label_UseTime" 
                         VerticalAlignment="Top" Width="120" Content="UseTime:" /&gt;
              &lt;RadioButton Content="True" Height="16" HorizontalAlignment="Left" Margin="72,181,0,0" 
                           Name="rb_UseTime_True" VerticalAlignment="Top" /&gt;
              &lt;RadioButton Content="False" Height="16" HorizontalAlignment="Left" Margin="123,181,0,0" 
                           Name="rb_UseTime_False" VerticalAlignment="Top" IsChecked="True"/&gt;
              
              &lt;!--
              Display the number of features that are returned as a result of changing the ArcGISDynamicMapServiceLayer's 
              UseTime options.
              --&gt;
              &lt;sdk:Label Content="Number of Features:" Height="23" HorizontalAlignment="Left" Margin="284,181,0,0" 
                         Name="Label_NumberOfFeatures" VerticalAlignment="Top" Width="120" /&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="401,176,0,0" Name="TextBox_NumberOfFeatures" 
                       VerticalAlignment="Top" Width="113" /&gt;
              
              &lt;!-- Add a button to demonstrate changing the ArcGISDynamicServiceLayer's UseTime options. --&gt;
              &lt;Button Content="Apply ArcGISDynamicMapServiceLayer.LayerTimeOptions" Height="23" HorizontalAlignment="Left" 
                      Margin="14,207,0,0" Name="Button1" VerticalAlignment="Top" Width="500" Click="Button1_Click"/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="100" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="788" TextWrapping="Wrap" 
               Text="When the application loads all trees maintained in the San Francisco database with an ID less that 500 will be 
                     displayed. Choose the different UseTime RadioButton options to see what effect occurs in the features being drawn in 
                     the Map (and their count). When UseTime = True the data in the ArcGISDynamicMapServiceLayer returned is based upon 
                     occurrences between the TimeExtent.Start (1/1/2000) and TimeExtent.End (12/31/2000) of the Map Control and will 
                     display 4 features. When UseTime = False then time based queries are disabled for the ArcGISDynamicMapServiceLayer 
                     (meaning all of the records will be returned subject to any LayerDefinitons that may be set) and will display 171 features." /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Get the ArcGISDynamicMapServiceLayer.
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = null;
              myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)(Map1.Layers["SanFranciscoTrees"]);
              
              // Create a new LayerTimeOptionCollection object.
              ESRI.ArcGIS.Client.LayerTimeOptionCollection myLayerTimeOptionCollection = new ESRI.ArcGIS.Client.LayerTimeOptionCollection();
              
              // Create a new TimeOption object. You can have multiple TimeOption objects; one for each FeatureLayer in
              // the ArcGISDynamicMapServicelayer.
              ESRI.ArcGIS.Client.Tasks.TimeOption myTimeOption1 = new ESRI.ArcGIS.Client.Tasks.TimeOption();
              
              // This the Layer ID from REST. Although the .LayerID property accepts a string you need to give it the integer 
              // value of a specific FeatureLayer in the ArcGISDynamicMapServiceLayer. 
              myTimeOption1.LayerId = Convert.ToString(0);
              
              // Create some variables used to obtain a count of the number of features returned via a QueryTask. The QueryTask
              // will approximate the same SQL syntax that is used by the ArcGISDynamicMapServiceLayer's TimeDataCumulative Property.
              string mySqlQuery = null;
              string mySubLayer_LayerDefinition = myArcGISDynamicMapServiceLayer.LayerDefinitions(0).Definition;
              
              // If TimeDataCumulative = False then all the features from the beginning of Map.TimeExtent.Start to 
              // Map.TimeExtent.End are returned.
              myTimeOption1.TimeDataCumulative = false;
              
              if (rb_UseTime_True.IsChecked == true)
              {
                //mySqlQuery = "qCaretaker = 'TreeID &lt; 500 AND PlantDate &gt;= '1/1/2001' AND PlantDate &lt;= '12/31/2001'"
                mySqlQuery = mySubLayer_LayerDefinition + " AND PlantDate &gt;= '" + TextBox_TimeExtent_Start.Text + "' AND PlantDate &lt;= '" + TextBox_TimeExtent_End.Text + "'";
                TextBlock_Ignored.Visibility = Windows.Visibility.Collapsed;
                TextBlock_Ignored2.Visibility = Windows.Visibility.Collapsed;
                myTimeOption1.UseTime = true;
              }
              else if (rb_UseTime_False.IsChecked == true)
              {
                //mySqlQuery = "TreeID &lt; 500"
                mySqlQuery = mySubLayer_LayerDefinition;
                TextBlock_Ignored.Visibility = Windows.Visibility.Visible;
                TextBlock_Ignored2.Visibility = Windows.Visibility.Visible;
                myTimeOption1.UseTime = false;
              }
              
              // Add the various options for the TimeOption into the LayerTimeOptionCollection. Note: you could have multiple TimeOption
              // objects and set the various values independently -- i.e. the ArcGISDynamicMapServiceLayer could have multiple
              // FeatureLayers each that is Time enabled.
              myLayerTimeOptionCollection.Add(myTimeOption1);
              
              // Set the ArcGISDynamicMalServiceLayer.LayerTimeOptions to the custom LayerTimeOptionCollection.
              myArcGISDynamicMapServiceLayer.LayerTimeOptions = myLayerTimeOptionCollection;
              
              // Create a TimeExtent object based upon what the user specifies for a TimeExtent.Start and TimeExtent.End.
              ESRI.ArcGIS.Client.TimeExtent myTimeExtent = new ESRI.ArcGIS.Client.TimeExtent(Convert.ToDateTime(TextBox_TimeExtent_Start.Text), Convert.ToDateTime(TextBox_TimeExtent_End.Text));
              
              // Set the Map.TimeExtent which will cause the ArcGISDynamicMapServiceLayer to re-render based upon the
              // new TimeExtent values.
              Map1.TimeExtent = myTimeExtent;
              
              // Display the number of features being returned in the ArcGISDynamicMapServiceLayer.
              GetFeatureCount(mySqlQuery);
            }
              
            private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
            {
              // Set the values that the Map Control will use for the TimeExtent.
              TextBox_TimeExtent_Start.Text = Convert.ToString(new DateTime(2000, 1, 1));
              TextBox_TimeExtent_End.Text = Convert.ToString(new DateTime(2000, 12, 31));
              
              // Create a SQL query that will perform QueryTask that approximates the same SQL syntax that is used by 
              // the ArcGISDynamicMapServiceLayer's UseTime Property.
              string mySqlQuery = null;
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)sender;
              string mySubLayer_LayerDefinition = myArcGISDynamicMapServiceLayer.LayerDefinitions(0).Definition;
              GetFeatureCount(mySubLayer_LayerDefinition);
            }
              
            private void GetFeatureCount(string sqlQuery)
            {
              // This function approximates the same SQL syntax that is used by  the ArcGISDynamicMapServiceLayer's 
              // UseTime Property and displays the feature count back to the user.
              
              // Get the ArcGISDynamicMapServicelayer.
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = null;
              myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)(Map1.Layers["SanFranciscoTrees"]);
              
              // Get the Url of the ArcGISDynamicMapServiceLayer. 
              string myUrl = myArcGISDynamicMapServiceLayer.Url;
              
              // Get the ID of the SanFranciscoTrees sub-layer.
              int mySubLayerID = myArcGISDynamicMapServiceLayer.Layers(0).ID;
              
              // Create a Query. Use the Map's Extent and SpatialReference. Return all the fields. 
              ESRI.ArcGIS.Client.Tasks.Query myQuery = new ESRI.ArcGIS.Client.Tasks.Query();
              myQuery.Geometry = Map1.Extent;
              myQuery.OutSpatialReference = Map1.SpatialReference;
              myQuery.OutFields.Add("*");
              myQuery.Where = sqlQuery;
              
              // Create a QueryTask using the correct Url and Query Parameters.
              ESRI.ArcGIS.Client.Tasks.QueryTask myQueryTask = new ESRI.ArcGIS.Client.Tasks.QueryTask();
              //queryTask.Url = "http://servicesbeta.esri.com/ArcGIS/rest/services/SanFrancisco/SFStreetTreesRendered/MapServer/0"
              myQueryTask.Url = myUrl + "/" + mySubLayerID.ToString();
              myQueryTask.ExecuteAsync(myQuery);
              
              // Add the Event Handler for the Asynchronous QueryTask request.
              myQueryTask.ExecuteCompleted += myQueryTask_ExecuteCompleted;
            }
              
            private void myQueryTask_ExecuteCompleted(object sender, ESRI.ArcGIS.Client.Tasks.QueryEventArgs e)
            {
              // Check to ensure we have valid return results.
              if (e.FeatureSet == null)
              {
                return;
              }
              
              // Obtain a FeatureSet from the queryArgs returned from the web service.
              ESRI.ArcGIS.Client.Tasks.FeatureSet myFeatureSet = e.FeatureSet;
              
              // Get the Features from the FeatureSet.
              System.Collections.Generic.IList&lt;ESRI.ArcGIS.Client.Graphic&gt; myFeatures = myFeatureSet.Features;
              
              // Display the number of features returned from the QueryTask.
              int myCount = myFeatures.Count;
              TextBox_NumberOfFeatures.Text = myCount.ToString();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' Get the ArcGISDynamicMapServiceLayer.
              Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer = CType(Map1.Layers("SanFranciscoTrees"), ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
              
              ' Create a new LayerTimeOptionCollection object.
              Dim myLayerTimeOptionCollection As New ESRI.ArcGIS.Client.LayerTimeOptionCollection
              
              ' Create a new TimeOption object. You can have multiple TimeOption objects; one for each FeatureLayer in
              ' the ArcGISDynamicMapServicelayer.
              Dim myTimeOption1 As New ESRI.ArcGIS.Client.Tasks.TimeOption
              
              ' This the Layer ID from REST. Although the .LayerID property accepts a string you need to give it the integer 
              ' value of a specific FeatureLayer in the ArcGISDynamicMapServiceLayer. 
              myTimeOption1.LayerId = CStr(0)
              
              ' Create some variables used to obtain a count of the number of features returned via a QueryTask. The QueryTask
              ' will approximate the same SQL syntax that is used by the ArcGISDynamicMapServiceLayer's TimeDataCumulative Property.
              Dim mySqlQuery As String = Nothing
              Dim mySubLayer_LayerDefinition As String = myArcGISDynamicMapServiceLayer.LayerDefinitions(0).Definition
              
              ' If TimeDataCumulative = False then all the features from the beginning of Map.TimeExtent.Start to 
              ' Map.TimeExtent.End are returned.
              myTimeOption1.TimeDataCumulative = False
              
              If rb_UseTime_True.IsChecked = True Then
                'mySqlQuery = "qCaretaker = 'TreeID &lt; 500 AND PlantDate &gt;= '1/1/2001' AND PlantDate &lt;= '12/31/2001'"
                mySqlQuery = mySubLayer_LayerDefinition + " AND PlantDate &gt;= '" + TextBox_TimeExtent_Start.Text + "' AND PlantDate &lt;= '" + TextBox_TimeExtent_End.Text + "'"
                TextBlock_Ignored.Visibility = Windows.Visibility.Collapsed
                TextBlock_Ignored2.Visibility = Windows.Visibility.Collapsed
                myTimeOption1.UseTime = True
                
              ElseIf rb_UseTime_False.IsChecked = True Then
                'mySqlQuery = "TreeID &lt; 500"
                mySqlQuery = mySubLayer_LayerDefinition
                TextBlock_Ignored.Visibility = Windows.Visibility.Visible
                TextBlock_Ignored2.Visibility = Windows.Visibility.Visible
                myTimeOption1.UseTime = False
              End If
              
              ' Add the various options for the TimeOption into the LayerTimeOptionCollection. Note: you could have multiple TimeOption
              ' objects and set the various values independently -- i.e. the ArcGISDynamicMapServiceLayer could have multiple
              ' FeatureLayers each that is Time enabled.
              myLayerTimeOptionCollection.Add(myTimeOption1)
              
              ' Set the ArcGISDynamicMalServiceLayer.LayerTimeOptions to the custom LayerTimeOptionCollection.
              myArcGISDynamicMapServiceLayer.LayerTimeOptions = myLayerTimeOptionCollection
               
              ' Create a TimeExtent object based upon what the user specifies for a TimeExtent.Start and TimeExtent.End.
              Dim myTimeExtent As New ESRI.ArcGIS.Client.TimeExtent(CDate(TextBox_TimeExtent_Start.Text), CDate(TextBox_TimeExtent_End.Text))
              
              ' Set the Map.TimeExtent which will cause the ArcGISDynamicMapServiceLayer to re-render based upon the
              ' new TimeExtent values.
              Map1.TimeExtent = myTimeExtent
              
              ' Display the number of features being returned in the ArcGISDynamicMapServiceLayer.
              GetFeatureCount(mySqlQuery)
              
            End Sub
            
            Private Sub ArcGISDynamicMapServiceLayer_Initialized(sender As System.Object, e As System.EventArgs)
              
              ' Set the values that the Map Control will use for the TimeExtent.
              TextBox_TimeExtent_Start.Text = CStr(New Date(2000, 1, 1))
              TextBox_TimeExtent_End.Text = CStr(New Date(2000, 12, 31))
              
              ' Create a SQL query that will perform QueryTask that approximates the same SQL syntax that is used by 
              ' the ArcGISDynamicMapServiceLayer's UseTime Property.
              Dim mySqlQuery As String = Nothing
              Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer = CType(sender, ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
              Dim mySubLayer_LayerDefinition As String = myArcGISDynamicMapServiceLayer.LayerDefinitions(0).Definition
              GetFeatureCount(mySubLayer_LayerDefinition)
              
            End Sub
            
            Private Sub GetFeatureCount(sqlQuery As String)
              
              ' This function approximates the same SQL syntax that is used by  the ArcGISDynamicMapServiceLayer's 
              ' UseTime Property and displays the feature count back to the user.
              
              ' Get the ArcGISDynamicMapServicelayer.
              Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer = CType(Map1.Layers("SanFranciscoTrees"), ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
              
              ' Get the Url of the ArcGISDynamicMapServiceLayer. 
              Dim myUrl As String = myArcGISDynamicMapServiceLayer.Url
              
              ' Get the ID of the SanFranciscoTrees sub-layer.
              Dim mySubLayerID As Integer = myArcGISDynamicMapServiceLayer.Layers(0).ID
              
              ' Create a Query. Use the Map's Extent and SpatialReference. Return all the fields. 
              Dim myQuery As New ESRI.ArcGIS.Client.Tasks.Query
              myQuery.Geometry = Map1.Extent
              myQuery.OutSpatialReference = Map1.SpatialReference
              myQuery.OutFields.Add("*")
              myQuery.Where = sqlQuery
              
              ' Create a QueryTask using the correct Url and Query Parameters.
              Dim myQueryTask As New ESRI.ArcGIS.Client.Tasks.QueryTask
              'queryTask.Url = "http://servicesbeta.esri.com/ArcGIS/rest/services/SanFrancisco/SFStreetTreesRendered/MapServer/0"
              myQueryTask.Url = myUrl + "/" + mySubLayerID.ToString
              myQueryTask.ExecuteAsync(myQuery)
              
              ' Add the Event Handler for the Asynchronous QueryTask request.
              AddHandler myQueryTask.ExecuteCompleted, AddressOf myQueryTask_ExecuteCompleted
              
            End Sub
            
            Private Sub myQueryTask_ExecuteCompleted(sender As Object, e As ESRI.ArcGIS.Client.Tasks.QueryEventArgs)
              
              ' Check to ensure we have valid return results.
              If e.FeatureSet Is Nothing Then
                Return
              End If
              
              ' Obtain a FeatureSet from the queryArgs returned from the web service.
              Dim myFeatureSet As ESRI.ArcGIS.Client.Tasks.FeatureSet = e.FeatureSet
              
              ' Get the Features from the FeatureSet.
              Dim myFeatures As System.Collections.Generic.IList(Of ESRI.ArcGIS.Client.Graphic) = myFeatureSet.Features
              
              ' Display the number of features returned from the QueryTask.
              Dim myCount As Integer = myFeatures.Count
              TextBox_NumberOfFeatures.Text = myCount.ToString
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeDataCumulative">
            <summary>
            Gets or sets a value indicating whether the features in a sub-layer of a time-enabled ArcGISDynamicMapServiceLayer 
            will be based upon the <see cref="M:ESRI.ArcGIS.Client.TimeExtent.Start">TimeExtent.Start</see> of the REST service.
            </summary>
            <remarks>
            <para>
            If the TimeOption.TimeDataCumulative = True then the data in the ArcGISDynamicMapServiceLayer returned is based 
            upon the <see cref="M:ESRI.ArcGIS.Client.TimeExtent.Start">TimeExtent.Start</see> of the REST service. If the 
            TimeOption.TimeDataCumulative = False then the data in the ArcGISDynamicMapServiceLayer returned is based upon 
            TimeExtent.Start of the Map Control.
            </para>
            <para>
            The <see cref="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerDefinitions">ArcGISDynamicMapServiceLayer.LayerDefinitions</see> 
            take precedence over other data restriction techniques like those of the 
            <see cref="M:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer.LayerTimeOptions">ArcGISDynamicMapServiceLayer.LayerTimeOptions</see>. 
            In other words, the ArcGISDynamicMapServiceLayer.LayerDefinitions acts to limit the data in the 
            ArcGISDynamciMapServiceLayer that the ArcGISDynamicMapServiceLayer.LayerTimeOptions can operate on.
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            When the application loads all major earthquakes with a Magnitude greater than 8.0 since 1/1/1970 will be displayed. Choose 
            the different TimeDataCumulative RadioButton options to see what effect occurs in the features being drawn in the Map (and 
            their count). When TimeDataCumulative = True the data in the ArcGISDynamicMapServiceLayer returned is based upon the 
            TimeExtent.Start of the REST service (which dates back to 1/1/1970) and will display 20 features. When 
            TimeDataCumulatve = False then the data in the ArcGISDynamicMapServiceLayer returned is based upon TimeExtent.Start of the 
            Map Control (which is set to 1/1/2000) and will display 9 features.
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Testing the TimeDataCumulative settings of ArcGISDynamicMapServiceLayer.LayerTimeOptions." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Tasks.TimeOption.TimeDataCumulative.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
            
              &lt;!-- Add a Map Control. --&gt;
              &lt;esri:Map Name="Map1" HorizontalAlignment="Left" VerticalAlignment="Top"   
                        Margin="14,240,0,0" Height="350" Width="500" WrapAround="True"&gt;
                &lt;esri:Map.Layers&gt;
                  &lt;esri:LayerCollection&gt;
                    
                    &lt;!-- Add a backdrop ArcGISTiledMapServiceLayer. --&gt;
                    &lt;esri:ArcGISTiledMapServiceLayer 
                      Url="http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer" /&gt;
                     
                    &lt;!-- 
                    Add an ArcGISDynamicMapServiceLayer. The layer displays major earthquakes since 1970. A LayerDefinition
                    has been applied such that ONLY those earthquakes with a Magnitude greater than 8.0 will be drawn in 
                    the Map. The Initialized event is wired up to display the TimeExtents for which the earthquakes 
                    will be displayed as well as count of the number of occurances displayed in the Map. The 
                    DisableClientCaching is set to true which means all Rendering logic will be handled on ArcGIS Server.
                    The LayerDefinition takes precidence over other data restriction types of queries like the LayerTimeOptions.
                    --&gt;
                    &lt;esri:ArcGISDynamicMapServiceLayer ID="earthquakes" 
                              Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer"
                              DisableClientCaching="True" Initialized="ArcGISDynamicMapServiceLayer_Initialized"&gt;
                      &lt;esri:ArcGISDynamicMapServiceLayer.LayerDefinitions&gt;
                        &lt;esri:LayerDefinition LayerID="0" Definition="Magnitude &gt; 8"/&gt;
                      &lt;/esri:ArcGISDynamicMapServiceLayer.LayerDefinitions&gt;
                    &lt;/esri:ArcGISDynamicMapServiceLayer&gt;
                    
                  &lt;/esri:LayerCollection&gt;
                &lt;/esri:Map.Layers&gt;
              &lt;/esri:Map&gt;
              
              &lt;!-- Display the TimeExtent information being used by the Map Control. --&gt;
              &lt;sdk:Label Height="21" HorizontalAlignment="Left" Margin="12,111,0,0" Name="Label_TimeExtent_Start" 
                         VerticalAlignment="Top" Width="120" Content="Map.TimeExtent.Start:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="140,106,0,0" Name="TextBox_TimeExtent_Start" 
                       VerticalAlignment="Top" Width="374" /&gt;
              &lt;sdk:Label Height="21" HorizontalAlignment="Left" Margin="12,146,0,0" Name="Label_TimeExtent_End" 
                         VerticalAlignment="Top" Width="120" Content="Map.TimeExtent.End:"/&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="140,144,0,0" Name="TextBox_TimeExtent_End" 
                       VerticalAlignment="Top" Width="374" /&gt;
              &lt;TextBlock Height="23" HorizontalAlignment="Left" Margin="12,109,0,0" Name="TextBlock_Ignored" Visibility="Visible" 
                         Text="---------------------------------------------- I G N O R E D --------------------------------------" 
                         VerticalAlignment="Top" Width="502" Foreground="Red" FontFamily="Arial" FontSize="14"/&gt;
              
              &lt;!-- 
              Allow the user options to change the ArcGISDynamicMapServiceLayer's TimeDataCumulative settings.
              If TimeDataCumulative = True then the data in the ArcGISDynamicMapServiceLayer returned is based upon 
              the TimeExtent.Start of the REST service (which dates back to 1/1/1970).
              If TimeDataCumulative = False then the data in the ArcGISDynamicMapServiceLayer returned is based upon
              TimeExtent.Start of the Map Control (which is set to 1/1/2000). 
              --&gt;
              &lt;sdk:Label Height="22" HorizontalAlignment="Left" Margin="14,180,0,0" Name="Label_TimeDataCumulative" 
                         VerticalAlignment="Top" Width="120" Content="TimeDataCumulative:" /&gt;
              &lt;RadioButton Content="True" Height="16" HorizontalAlignment="Left" Margin="140,181,0,0" 
                           Name="rb_TimeDataCumulative_True" VerticalAlignment="Top" IsChecked="True" /&gt;
              &lt;RadioButton Content="False" Height="16" HorizontalAlignment="Left" Margin="191,181,0,0" 
                           Name="rb_TimeDataCumulative_False" VerticalAlignment="Top" /&gt;
              
              &lt;!--
              Display the number of features that are returned as a result of changing the ArcGISDynamicMapServiceLayer's 
              TimeDataCumulative options.
              --&gt;
              &lt;sdk:Label Content="Number of Features:" Height="23" HorizontalAlignment="Left" Margin="284,181,0,0" 
                         Name="Label_NumberOfFeatures" VerticalAlignment="Top" Width="120" /&gt;
              &lt;TextBox Height="23" HorizontalAlignment="Left" Margin="401,176,0,0" Name="TextBox_NumberOfFeatures" 
                       VerticalAlignment="Top" Width="113" /&gt;
              
              &lt;!-- Add a button to demonstrate changing the ArcGISDynamicServiceLayer's TimeDataCumulative options. --&gt;
              &lt;Button Content="Apply ArcGISDynamicMapServiceLayer.LayerTimeOptions" Height="23" HorizontalAlignment="Left" 
                      Margin="14,207,0,0" Name="Button1" VerticalAlignment="Top" Width="500" Click="Button1_Click"/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="100" HorizontalAlignment="Left" Name="TextBlock1" VerticalAlignment="Top" Width="788" TextWrapping="Wrap" 
               Text="When the application loads all major earthquakes with a Magnitude greater than 8.0 since 1/1/1970 will be displayed. 
                     Choose the different TimeDataCumulative RadioButton options to see what effect occurs in the features being drawn in 
                     the Map (and their count). When TimeDataCumulative = True the data in the ArcGISDynamicMapServiceLayer returned is 
                     based upon the TimeExtent.Start of the REST service (which dates back to 1/1/1970) and will display 20 features. 
                     When TimeDataCumulatve = False then the data in the ArcGISDynamicMapServiceLayer returned is based upon 
                     TimeExtent.Start of the Map Control (which is set to 1/1/2000) and will display 9 features." /&gt;
               
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void Button1_Click(object sender, System.Windows.RoutedEventArgs e)
            {
              // Get the ArcGISDynamicMapServiceLayer.
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = null;
              myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)(Map1.Layers["earthquakes"]);
              
              // Create a new LayerTimeOptionCollection object.
              ESRI.ArcGIS.Client.LayerTimeOptionCollection myLayerTimeOptionCollection = new ESRI.ArcGIS.Client.LayerTimeOptionCollection();
              
              // Create a new TimeOption object. You can have multiple TimeOption objects; one for each FeatureLayer in
              // the ArcGISDynamicMapServicelayer.
              ESRI.ArcGIS.Client.Tasks.TimeOption myTimeOption1 = new ESRI.ArcGIS.Client.Tasks.TimeOption();
              
              // This the Layer ID from REST. Although the .LayerID property accepts a string you need to give it the integer 
              // value of a specific FeatureLayer in the ArcGISDynamicMapServiceLayer. 
              myTimeOption1.LayerId = Convert.ToString(0);
              
              // Create some variables used to obtain a count of the number of features returned via a QueryTask. The QueryTask
              // will approximate the same SQL syntax that is used by the ArcGISDynamicMapServiceLayer's TimeDataCumulative Property.
              string mySqlQuery = null;
              string mySubLayer_LayerDefinition = myArcGISDynamicMapServiceLayer.LayerDefinitions(0).Definition;
              
              // If TimeDataCumulative = True then the data in the ArcGISDynamicMapServiceLayer returned is based upon 
              // the TimeExtent.Start of the REST service (which dates back to 1/1/1970).
              // If TimeDataCumulative = False then the data in the ArcGISDynamicMapServiceLayer returned is based upon
              // TimeExtent.Start of the Map Control (which is set to 1/1/2000). 
              if (rb_TimeDataCumulative_True.IsChecked == true)
              {
                myTimeOption1.TimeDataCumulative = true;
                //mySqlQuery = "Magnitude > 8"
                mySqlQuery = mySubLayer_LayerDefinition;
                TextBlock_Ignored.Visibility = Windows.Visibility.Visible;
              }
               else if (rb_TimeDataCumulative_False.IsChecked == true)
              {
                myTimeOption1.TimeDataCumulative = false;
                //mySqlQuery = "Magnitude > 8 AND Date_ > DATE '1/1/2001'"
                mySqlQuery = mySubLayer_LayerDefinition + " AND Date_ > DATE '" + TextBox_TimeExtent_Start.Text + "'";
                TextBlock_Ignored.Visibility = Windows.Visibility.Collapsed;
              }
              
              // Make use of the TimeOption settings.
              myTimeOption1.UseTime = true;
              
              // Add the various options for the TimeOption into the LayerTimeOptionCollection. Note: you could have multiple TimeOption
              // objects and set the various values independently -- i.e. the ArcGISDynamicMapServiceLayer could have multiple
              // FeatureLayers each that is Time enabled.
              myLayerTimeOptionCollection.Add(myTimeOption1);
              
              // Set the ArcGISDynamicMalServiceLayer.LayerTimeOptions to the custom LayerTimeOptionCollection.
              myArcGISDynamicMapServiceLayer.LayerTimeOptions = myLayerTimeOptionCollection;
              
              // Create a TimeExtent object based upon what the user specifies for a TimeExtent.Start and TimeExtent.End.
              ESRI.ArcGIS.Client.TimeExtent myTimeExtent = new ESRI.ArcGIS.Client.TimeExtent(Convert.ToDateTime(TextBox_TimeExtent_Start.Text), Convert.ToDateTime(TextBox_TimeExtent_End.Text));
              
              // Set the Map.TimeExtent which will cause the ArcGISDynamicMapServiceLayer to re-render based upon the
              // new TimeExtent values.
              Map1.TimeExtent = myTimeExtent;
              
              // Display the number of features being returned in the ArcGISDynamicMapServiceLayer.
              GetFeatureCount(mySqlQuery);
            }
              
            private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
            {
              
              // Set the values that the Map Control will use for the TimeExtent.
              TextBox_TimeExtent_Start.Text = Convert.ToString(new DateTime(2000, 1, 1));
              TextBox_TimeExtent_End.Text = Convert.ToString(DateTime.Today);
              
              // Create a SQL query that will perform QueryTask that approximates the same SQL syntax that is used by 
              // the ArcGISDynamicMapServiceLayer's TimeDataCumulative Property.
              string mySqlQuery = null;
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)sender;
              string mySubLayer_LayerDefinition = myArcGISDynamicMapServiceLayer.LayerDefinitions(0).Definition;
              GetFeatureCount(mySubLayer_LayerDefinition);
            }
              
            private void GetFeatureCount(string sqlQuery)
            {
              // This function approximates the same SQL syntax that is used by  the ArcGISDynamicMapServiceLayer's 
              // TimeDataCumulative Property and displays the feature count back to the user.
              
              // Get the ArcGISDynamicMapServicelayer.
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = null;
              myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)(Map1.Layers["earthquakes"]);
              
              // Get the Url of the ArcGISDynamicMapServiceLayer. 
              string myUrl = myArcGISDynamicMapServiceLayer.Url;
              
              // Get the ID of the earthquakes sub-layer.
              int mySubLayerID = myArcGISDynamicMapServiceLayer.Layers(0).ID;
              
              // Create a Query. Use the Map's Extent and SpatialReference. Return all the fields. 
              ESRI.ArcGIS.Client.Tasks.Query myQuery = new ESRI.ArcGIS.Client.Tasks.Query();
              myQuery.Geometry = Map1.Extent;
              myQuery.OutSpatialReference = Map1.SpatialReference;
              myQuery.OutFields.Add("*");
              myQuery.Where = sqlQuery;
              
              // Create a QueryTask using the correct Url and Query Parameters.
              ESRI.ArcGIS.Client.Tasks.QueryTask myQueryTask = new ESRI.ArcGIS.Client.Tasks.QueryTask();
              //queryTask.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer/0"
              myQueryTask.Url = myUrl + "/" + mySubLayerID.ToString();
              myQueryTask.ExecuteAsync(myQuery);
              
              // Add the Event Handler for the Asynchronous QueryTask request.
              myQueryTask.ExecuteCompleted += myQueryTask_ExecuteCompleted;
            }
              
            private void myQueryTask_ExecuteCompleted(object sender, ESRI.ArcGIS.Client.Tasks.QueryEventArgs e)
            {
              // Check to ensure we have valid return results.
              if (e.FeatureSet == null)
              {
                return;
              }
              
              // Obtain a FeatureSet from the queryArgs returned from the web service.
              ESRI.ArcGIS.Client.Tasks.FeatureSet myFeatureSet = e.FeatureSet;
              
              // Get the Features from the FeatureSet.
              System.Collections.Generic.IList&lt;ESRI.ArcGIS.Client.Graphic&gt; myFeatures = myFeatureSet.Features;
              
              // Display the number of features returned from the QueryTask.
              int myCount = myFeatures.Count;
              TextBox_NumberOfFeatures.Text = myCount.ToString();
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub Button1_Click(sender As System.Object, e As System.Windows.RoutedEventArgs)
              
              ' Get the ArcGISDynamicMapServiceLayer.
              Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer = CType(Map1.Layers("earthquakes"), ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
              
              ' Create a new LayerTimeOptionCollection object.
              Dim myLayerTimeOptionCollection As New ESRI.ArcGIS.Client.LayerTimeOptionCollection
              
              ' Create a new TimeOption object. You can have multiple TimeOption objects; one for each FeatureLayer in
              ' the ArcGISDynamicMapServicelayer.
              Dim myTimeOption1 As New ESRI.ArcGIS.Client.Tasks.TimeOption
              
              ' This the Layer ID from REST. Although the .LayerID property accepts a string you need to give it the integer 
              ' value of a specific FeatureLayer in the ArcGISDynamicMapServiceLayer. 
              myTimeOption1.LayerId = CStr(0)
              
              ' Create some variables used to obtain a count of the number of features returned via a QueryTask. The QueryTask
              ' will approximate the same SQL syntax that is used by the ArcGISDynamicMapServiceLayer's TimeDataCumulative Property.
              Dim mySqlQuery As String = Nothing
              Dim mySubLayer_LayerDefinition As String = myArcGISDynamicMapServiceLayer.LayerDefinitions(0).Definition
              
              ' If TimeDataCumulative = True then the data in the ArcGISDynamicMapServiceLayer returned is based upon 
              ' the TimeExtent.Start of the REST service (which dates back to 1/1/1970).
              ' If TimeDataCumulative = False then the data in the ArcGISDynamicMapServiceLayer returned is based upon
              ' TimeExtent.Start of the Map Control (which is set to 1/1/2000). 
              If rb_TimeDataCumulative_True.IsChecked = True Then
                myTimeOption1.TimeDataCumulative = True
                'mySqlQuery = "Magnitude > 8"
                mySqlQuery = mySubLayer_LayerDefinition
                TextBlock_Ignored.Visibility = Windows.Visibility.Visible
              ElseIf rb_TimeDataCumulative_False.IsChecked = True Then
                myTimeOption1.TimeDataCumulative = False
                'mySqlQuery = "Magnitude > 8 AND Date_ > DATE '1/1/2001'"
                mySqlQuery = mySubLayer_LayerDefinition + " AND Date_ > DATE '" + TextBox_TimeExtent_Start.Text + "'"
                TextBlock_Ignored.Visibility = Windows.Visibility.Collapsed
              End If
              
              ' Make use of the TimeOption settings.
              myTimeOption1.UseTime = True
              
              ' Add the various options for the TimeOption into the LayerTimeOptionCollection. Note: you could have multiple TimeOption
              ' objects and set the various values independently -- i.e. the ArcGISDynamicMapServiceLayer could have multiple
              ' FeatureLayers each that is Time enabled.
              myLayerTimeOptionCollection.Add(myTimeOption1)
              
              ' Set the ArcGISDynamicMalServiceLayer.LayerTimeOptions to the custom LayerTimeOptionCollection.
              myArcGISDynamicMapServiceLayer.LayerTimeOptions = myLayerTimeOptionCollection
              
              ' Create a TimeExtent object based upon what the user specifies for a TimeExtent.Start and TimeExtent.End.
              Dim myTimeExtent As New ESRI.ArcGIS.Client.TimeExtent(CDate(TextBox_TimeExtent_Start.Text), CDate(TextBox_TimeExtent_End.Text))
              
              ' Set the Map.TimeExtent which will cause the ArcGISDynamicMapServiceLayer to re-render based upon the
              ' new TimeExtent values.
              Map1.TimeExtent = myTimeExtent
              
              ' Display the number of features being returned in the ArcGISDynamicMapServiceLayer.
              GetFeatureCount(mySqlQuery)
              
            End Sub
            
            Private Sub ArcGISDynamicMapServiceLayer_Initialized(sender As System.Object, e As System.EventArgs)
              
              ' Set the values that the Map Control will use for the TimeExtent.
              TextBox_TimeExtent_Start.Text = CStr(New Date(2000, 1, 1))
              TextBox_TimeExtent_End.Text = CStr(Date.Today)
              
              ' Create a SQL query that will perform QueryTask that approximates the same SQL syntax that is used by 
              ' the ArcGISDynamicMapServiceLayer's TimeDataCumulative Property.
              Dim mySqlQuery As String = Nothing
              Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer = CType(sender, ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
              Dim mySubLayer_LayerDefinition As String = myArcGISDynamicMapServiceLayer.LayerDefinitions(0).Definition
              GetFeatureCount(mySubLayer_LayerDefinition)
              
            End Sub
            
            Private Sub GetFeatureCount(sqlQuery As String)
              
              ' This function approximates the same SQL syntax that is used by  the ArcGISDynamicMapServiceLayer's 
              ' TimeDataCumulative Property and displays the feature count back to the user.
              
              ' Get the ArcGISDynamicMapServicelayer.
              Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer
              myArcGISDynamicMapServiceLayer = CType(Map1.Layers("earthquakes"), ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
              
              ' Get the Url of the ArcGISDynamicMapServiceLayer. 
              Dim myUrl As String = myArcGISDynamicMapServiceLayer.Url
              
              ' Get the ID of the earthquakes sub-layer.
              Dim mySubLayerID As Integer = myArcGISDynamicMapServiceLayer.Layers(0).ID
              
              ' Create a Query. Use the Map's Extent and SpatialReference. Return all the fields. 
              Dim myQuery As New ESRI.ArcGIS.Client.Tasks.Query
              myQuery.Geometry = Map1.Extent
              myQuery.OutSpatialReference = Map1.SpatialReference
              myQuery.OutFields.Add("*")
              myQuery.Where = sqlQuery
              
              ' Create a QueryTask using the correct Url and Query Parameters.
              Dim myQueryTask As New ESRI.ArcGIS.Client.Tasks.QueryTask
              'queryTask.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer/0"
              myQueryTask.Url = myUrl + "/" + mySubLayerID.ToString
              myQueryTask.ExecuteAsync(myQuery)
              
              ' Add the Event Handler for the Asynchronous QueryTask request.
              AddHandler myQueryTask.ExecuteCompleted, AddressOf myQueryTask_ExecuteCompleted
              
            End Sub
              
            Private Sub myQueryTask_ExecuteCompleted(sender As Object, e As ESRI.ArcGIS.Client.Tasks.QueryEventArgs)
              
              ' Check to ensure we have valid return results.
              If e.FeatureSet Is Nothing Then
                Return
              End If
              
              ' Obtain a FeatureSet from the queryArgs returned from the web service.
              Dim myFeatureSet As ESRI.ArcGIS.Client.Tasks.FeatureSet = e.FeatureSet
              
              ' Get the Features from the FeatureSet.
              Dim myFeatures As System.Collections.Generic.IList(Of ESRI.ArcGIS.Client.Graphic) = myFeatureSet.Features
              
              ' Display the number of features returned from the QueryTask.
              Dim myCount As Integer = myFeatures.Count
              TextBox_NumberOfFeatures.Text = myCount.ToString
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeOffset">
            <summary>
            Gets or sets the amount of time offset for sub-layer of a time-enabkled ArcGISDynamicMapServiceLayer so that it 
            can be overlaid on the top of a previous or future time period.
            </summary>
            <remarks>
            <para>
            Normally the <see cref="M:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> determines what features 
            will be displayed for a time-enabled ArcGISDynamicMapServiceLayer. The TimeOption.TimeOffset is a special case 
            where the features that are returned will be offset from what is specified in the Map.TimeExtent 
            by the TimeOffset amount based upon specific 
            <see cref="P:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeOffsetUnit">TimeOption.TimeOffsetUnit</see> denomination. 
            Negative TimeOffset values are possible for returning features of previous times to the currently set 
            Map.TimeExtent.
            </para>
            <para>
            The TimeOption.TimeOffset is an optional Property. If this Property is not set, then the effect of the Offset 
            on the temporal data in the sub-layer is zero (0).
            </para>
            </remarks>
            <example>
            <para>
            <b>How to use:</b>
            </para>
            <para>
            When the application loads two layers that are based upon the same hurricane track data will be displayed. The hurricane tracks 
            contain data from the year 1851 to the year 2007. Each of the two layers are restricted to only displaying Category 5 hurricanes. 
            One of the hurricane layers is a FeatureLayer and will display the data using Solid Green Polylines. The other layer is an 
            ArcGISDynamicMapServiceLayer and will display the data using Dark Red Solid Green Polylines. A TimeExtent of Jan. 1, 2005 to Dec. 
            31, 2005 has been applied to the Map Control which further restricts the display of the hurricane data to that window of time. 
            What is unique to this sample is that ArcGISDynamicMapServiceLayer has a TimeOption.TimeOffset of 365 days is applied to the via 
            the ArcGISDynamicMapServiceLayer.LayerTimeOptions resulting in the data that is actually returned being from Jan. 1, 2006 to Dec. 
            31, 2006!
            </para>
            <para>
            The XAML code in this example is used in conjunction with the code-behind (C# or VB.NET) to demonstrate
            the functionality.
            </para>
            <para>
            The following screen shot corresponds to the code example in this page.
            </para>
            <para>
            <img border="0" alt="Demonstrating how the TimeOption.TimeOffset can be used in the ArcGISDynamicMapServiceLayer.LayerTimeOptions." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.Tasks.TimeOption.TimeOffset.png"/>
            </para>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot"&gt;
            
              &lt;!-- 
              Add a Map Control zoomed into the Caribbean region. A TimeExtent is specified to limit the data
              that is displayed in the FeatureLayer and ArcGISDynamicMapServiceLayer between Jan. 1, 2005 and
              Dec. 31, 2005.
              --&gt;
              &lt;esri:Map x:Name="Map1" WrapAround="True" HorizontalAlignment="Left" VerticalAlignment="Top"
                        Margin="12,188,0,0" Height="400" Width="400" Extent="-11023120,528979,-7245336,4051956"  
                        TimeExtent="2005/01/01 00:00:00 UTC,2005/12/31 00:00:00 UTC" &gt;
              
                &lt;!-- Add an backdrop ArcGISTiledMapServiceLayer. --&gt;
                &lt;esri:ArcGISTiledMapServiceLayer ID="BaseLayer"
                              Url="http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer" /&gt;
                
                &lt;!-- 
                Add a FeatureLayer where only Category 5 hurricanes will be displayed. The dataset dates from the year 1851 
                to the year 2007. Because the Map.TimeExtent is set, only hurricanes that fall between Jan. 1, 2005 and
                Dec. 31, 2005 will be displayed (Solid Green Polylines). 
                --&gt;
                &lt;esri:FeatureLayer ID="HurricaneLayer1" Where="CAT = 'H5'"
                     Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Hurricanes/NOAA_Tracks_1851_2007/MapServer/0"&gt;
                  &lt;esri:FeatureLayer.Renderer&gt;
                    &lt;esri:SimpleRenderer&gt;
                      &lt;esri:SimpleLineSymbol Color="Green" Style="Solid" Width="3"/&gt;
                    &lt;/esri:SimpleRenderer&gt;
                  &lt;/esri:FeatureLayer.Renderer&gt;
                &lt;/esri:FeatureLayer&gt;
                
                &lt;!--
                Add an ArcGISDynamicMapServiceLayer to the Map. The Initialized event is wired up where in the code-behind
                the data that will be displayed will limit features to only Category 5 hurricanes. Because the Map.TimeExtent 
                is set, only hurricanes that fall between Jan. 1, 2005 and Dec. 31, 2005 are supposed to be displayed (Solid 
                Dark Red Polylines) BUT because a TimeOption.TimeOffset of 365 days is applied to the 
                ArcGISDynamicMapServiceLayer.LayerTimeOptions the data that is actually returned is from Jan. 1, 2006 to Dec.
                31, 2006! 
                --&gt;
                &lt;esri:ArcGISDynamicMapServiceLayer ID="HurricaneLayer2" Initialized="ArcGISDynamicMapServiceLayer_Initialized"
                      Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Hurricanes/NOAA_Tracks_1851_2007/MapServer"&gt;
                &lt;/esri:ArcGISDynamicMapServiceLayer&gt;
                
              &lt;/esri:Map&gt;
                
              &lt;!-- Add a Legend Control to demonstrate which features belong to which layers. --&gt;
              &lt;esri:Legend x:Name="MyLegend" Margin="418,188,182,12" Map="{Binding ElementName=Map1}" ShowOnlyVisibleLayers="True"
                           Height="400" Width="200" VerticalAlignment="Top" HorizontalAlignment="Left"/&gt;
              
              &lt;!-- Provide the instructions on how to use the sample code. --&gt;
              &lt;TextBlock Height="170" Name="TextBlock1" VerticalAlignment="Top" TextWrapping="Wrap" Margin="12,12,90,0" 
                     Text="When the application loads two layers that are based upon the same hurricane track data will be displayed.
                     The hurricane tracks contain data from the year 1851 to the year 2007. Each of the two layers are restricted to
                     only displaying Category 5 hurricanes. One of the hurricane layers is a FeatureLayer and will display the data 
                     using Solid Green Polylines. The other layer is an ArcGISDynamicMapServiceLayer and will display the data using
                     Dark Red Solid Green Polylines. A TimeExtent of Jan. 1, 2005 to Dec. 31, 2005 has been applied to the Map Control
                     which further restricts the display of the hurricane data to that window of time. What is unique to this sample
                     is that ArcGISDynamicMapServiceLayer has a TimeOption.TimeOffset of 365 days is applied to the via the 
                     ArcGISDynamicMapServiceLayer.LayerTimeOptions resulting in the data that is actually returned being from Jan. 1, 
                     2006 to Dec. 31, 2006!" /&gt;
              
            &lt;/Grid&gt;
            </code>
            <code title="Example CS1" description="" lang="CS">
            private void ArcGISDynamicMapServiceLayer_Initialized(object sender, System.EventArgs e)
            {
              // Get the ArcGISDynamicMapServiceLayer. 
              ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer myArcGISDynamicMapServiceLayer = (ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)sender;
              
              // Create and apply a LayerDefinition which restricts the data being returned on only Category 5 storms.
              ESRI.ArcGIS.Client.LayerDefinition myLayerDefinition = new ESRI.ArcGIS.Client.LayerDefinition();
              myLayerDefinition.Definition = "CAT = 'H5'";
              myLayerDefinition.LayerID = 0;
              myArcGISDynamicMapServiceLayer.LayerDefinitions.Add(myLayerDefinition);
              
              // Create a TimeOption to offset the hurricane data returned by the REST service by 365 days (i.e. 1 year).
              ESRI.ArcGIS.Client.Tasks.TimeOption myTimeOption = new ESRI.ArcGIS.Client.Tasks.TimeOption();
              myTimeOption.LayerId = "0";
              myTimeOption.TimeOffset = 365;
              myTimeOption.TimeOffsetUnit = ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Days;
              myTimeOption.UseTime = true;
              
              // Create a new LayerTimeOptionCollection and add the custom TimeOption to it. Then set the 
              // ArcGISDynamicMapServiceLayer.LayerTimeOptionsCollection Property to the new LayerTimeOptionCollection.
              ESRI.ArcGIS.Client.LayerTimeOptionCollection myLayerTimeOptions = new ESRI.ArcGIS.Client.LayerTimeOptionCollection();
              myLayerTimeOptions.Add(myTimeOption);
              myArcGISDynamicMapServiceLayer.LayerTimeOptions = myLayerTimeOptions;
            }
            </code>
            <code title="Example VB1" description="" lang="VB.NET">
            Private Sub ArcGISDynamicMapServiceLayer_Initialized(sender As System.Object, e As System.EventArgs)
              
              ' Get the ArcGISDynamicMapServiceLayer. 
              Dim myArcGISDynamicMapServiceLayer As ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer = CType(sender, ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer)
            
              ' Create and apply a LayerDefinition which restricts the data being returned on only Category 5 storms.
              Dim myLayerDefinition As New ESRI.ArcGIS.Client.LayerDefinition
              myLayerDefinition.Definition = "CAT = 'H5'"
              myLayerDefinition.LayerID = 0
              myArcGISDynamicMapServiceLayer.LayerDefinitions.Add(myLayerDefinition)
            
              ' Create a TimeOption to offset the hurricane data returned by the REST service by 365 days (i.e. 1 year).
              Dim myTimeOption As New ESRI.ArcGIS.Client.Tasks.TimeOption
              myTimeOption.LayerId = "0"
              myTimeOption.TimeOffset = 365
              myTimeOption.TimeOffsetUnit = ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Days
              myTimeOption.UseTime = True
            
              ' Create a new LayerTimeOptionCollection and add the custom TimeOption to it. Then set the 
              ' ArcGISDynamicMapServiceLayer.LayerTimeOptionsCollection Property to the new LayerTimeOptionCollection.
              Dim myLayerTimeOptions As New ESRI.ArcGIS.Client.LayerTimeOptionCollection
              myLayerTimeOptions.Add(myTimeOption)
              myArcGISDynamicMapServiceLayer.LayerTimeOptions = myLayerTimeOptions
            
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeOffsetUnit">
            <summary>
            Gets or sets the <see cref="T:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits">TimeOffsetUnits</see> Enumeration 
            that specifies the unit of measurement to be used for a 
            <see cref="P:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeOffset">TimeOption.TimeOffset</see> of a sub-layer 
            in a time-enabled ArcGISDynamicMapServiceLayer.
            </summary>
            <remarks>
            <para>
            Normally the <see cref="M:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> determines what features 
            will be displayed for a time-enabled ArcGISDynamicMapServiceLayer. The 
            <see cref="P:ESRI.ArcGIS.Client.Tasks.TimeOption.TimeOffset">TimeOption.TimeOffset</see> is a special case 
            where the features that are returned will be offset from what is specified in the Map.TimeExtent 
            by the TimeOption.TimeOffset amount based upon specific TimeOption.TimeOffsetUnit denomination. 
            Negative TimeOption.TimeOffset values are possible for returning features of previous times to the currently set 
            Map.TimeExtent.
            </para>
            <para>
            The TimeOption.TimeOffset is an optional Property. If this Property is not set, then the effect of the Offset 
            on the temporal data in the sub-layer is zero (0).
            </para>
            <para>
            The <see cref="T:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits">TimeOffsetUnits</see> Enumeration have the denominations of:
            </para>
            <list type="bullet">
              <item>Milliseconds</item>
              <item>Seconds</item>
              <item>Minutes</item>
              <item>Hours</item>
              <item>Days</item>
              <item>Weeks</item>
              <item>Months</item>
              <item>Years</item>
              <item>Decades</item>
              <item>Centuries</item>
              <item>Unknown</item>
            </list>
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits">
            <summary>
            The TimeOffsetUnits class is an enumeration used to indicate a unit of 
            measurement for a time offset.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Centuries">
            <summary>
            Indicates time should be offset by centuries. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Days">
            <summary>
            Indicates time should be offset by days.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Decades">
            <summary>
            Indicates time should be offset by decades.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Hours">
            <summary>
            Indicates time should be offset by hours.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Milliseconds">
            <summary>
            Indicates time should be offset by milliseconds.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Minutes">
            <summary>
            Indicates time should be offset by minutes.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Months">
            <summary>
            Indicates time should be offset by months.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Seconds">
            <summary>
            Indicates time should be offset by seconds.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Weeks">
            <summary>
            Indicates time should be offset by weeks.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Years">
            <summary>
            Indicates time should be offset by years.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.TimeOffsetUnits.Unknown">
            <summary>
            Indicates time offset is unkown.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.FindTask">
            <summary>
            Task for finding features from a map service.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FindTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.FindTask"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FindTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.FindTask"/> class.
            </summary>
            <param name="Url">The URL of the map service.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FindTask.ExecuteAsync(ESRI.ArcGIS.Client.Tasks.FindParameters)">
            <summary>
            Executes an Find against an ArcGIS Server map layer. The result is 
            returned as a List of FeatureSet. If the Find is successful, the 
            user-specified responder is invoked with the result. A FeatureSet 
            contains an array of Graphic features, which can be added to the map 
            using GraphicsLayer.Graphics.Add.
            </summary>
            <param name="findParameters">Specifies the layers and fields that 
            are used to search against.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FindTask.ExecuteAsync(ESRI.ArcGIS.Client.Tasks.FindParameters,System.Object)">
            <summary>
            Executes an Find against an ArcGIS Server map layer. The result is 
            returned as a List of FeatureSet. If the Find is successful, the 
            user-specified responder is invoked with the result. A FeatureSet 
            contains an array of Graphic features, which can be added to the map 
            using GraphicsLayer.Graphics.Add.
            </summary>
            <param name="findParameters">Specifies the layers and fields that are 
            used to search against.</param>
            <param name="userToken"> A user-defined object that is passed to the 
            method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.FindTask.OnExecuteCompleted(ESRI.ArcGIS.Client.Tasks.FindEventArgs)">
            <summary>
            Raises the <see cref="E:ExecuteComplete"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.FindEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.FindTask.LastResult">
            <summary>
            The result of the last execution of the task.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.FindTask.ExecuteCompleted">
            <summary>
            Occurs when the find operation completes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.Polyline">
            <summary>
            A collection of Paths used to represent a Polyline <see cref="T:ESRI.ArcGIS.Client.Geometry.Geometry"/>
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Polyline.Clone">
            <summary>
            Creates a deep clone of the current Object.
            </summary>
            <returns>Returns a deep clone of the current Object.</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Polyline.Paths">
            <summary>
            Gets or sets the paths.
            </summary>
            <value>The paths.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Geometry.Polyline.Extent">
            <summary>
            Gets the minimum enclosing <see cref="T:ESRI.ArcGIS.Client.Geometry.Envelope"/> of the instance
            </summary>
            <returns>Envelope</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Services.MapService">
            <summary>
            A class for interacting with a REST API map service.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Services.MapService"/> class.
            </summary>
            <param name="mapServiceUrl">The map service URL.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Services.MapService"/> class.
            </summary>
            <param name="mapServiceUrl">The map service URL.</param>
            <param name="token">The user token.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.#ctor(System.String,System.String,System.String,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Services.MapService"/> class.
            </summary>
            <param name="mapServiceUrl">The map service URL.</param>
            <param name="token">The user token.</param>
            <param name="proxyUrl">The proxy URL.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.GetTileUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the tile URL. Only applicable to cached map services.
            </summary>
            <param name="level">The tile cache level of detail.</param>
            <param name="row">The tile row.</param>
            <param name="col">The tile col.</param>
            <returns>The URL for the specified map cache tile.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.GetImageUrl(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,System.Int32[],System.String,System.Boolean,System.Collections.ObjectModel.ObservableCollection{ESRI.ArcGIS.Client.LayerDefinition},ESRI.ArcGIS.Client.TimeExtent,System.Double,ESRI.ArcGIS.Client.LayerTimeOptionCollection)">
            <summary>
            Gets the URL for an exported map image.
            </summary>
            <param name="extent">The map extent of the exported image.</param>
            <param name="width">The width of the exported image.</param>
            <param name="height">The height of the exported image.</param>
            <param name="layers">The layers to include in the exported image.</param>
            <param name="imageFormat">The format of the exported image.</param>
            <param name="disableClientCaching">If true, adds a timestamp parameter ("_ts") to the REST request to prevent the request from being loaded from the browser's cache.</param>
            <param name="layerDefinitions">The layer definitions.</param>
            <param name="timeInterval">The time interval.</param>
            <param name="versionNumber">The version number of the service url.</param>		
            <param name="layerTimeOptions">The layer time options.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.GetImage(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,System.Int32[],System.String,System.Boolean,System.Collections.ObjectModel.ObservableCollection{ESRI.ArcGIS.Client.LayerDefinition},ESRI.ArcGIS.Client.TimeExtent,ESRI.ArcGIS.Client.Services.MapService.ImageCompleteHandler,System.Double,ESRI.ArcGIS.Client.LayerTimeOptionCollection)">
            <summary>
            Exports and downloads a map image.
            </summary>
            <param name="extent">The map extent of the exported image.</param>
            <param name="width">The width of the exported image.</param>
            <param name="height">The height of the exported image.</param>
            <param name="layers">The layers to include in the exported image.</param>
            <param name="imageFormat">The format of the exported image.</param>
            <param name="disableClientCaching">If true, adds a timestamp parameter ("_ts") to the REST request to prevent the request from being loaded from the browser's cache.</param>
            <param name="layerDefinitions">The layer definitions.</param>
            <param name="timeInterval">The time interval.</param>
            <param name="onComplete">The handler to invoke when the image is exported.</param>
            <param name="versionNumber">The version number of the service url.</param>
            <param name="layerTimeOptions">The layer time options.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.GetGPImageUrl(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,System.String,System.Boolean,ESRI.ArcGIS.Client.Services.MapService.UrlCompleteHandler)">
            <summary>
            Gets the URL for an geoprocessing result image layer exported map image.
            </summary>
            <param name="extent">The map extent of the exported image.</param>
            <param name="width">The width of the exported image.</param>
            <param name="height">The height of the exported image.</param>
            <param name="imageFormat">The format of the exported image.</param>
            <param name="disableClientCaching">If true, adds a timestamp parameter ("_ts") to the REST request to prevent the request from being loaded from the browser's cache.</param>
            <param name="onComplete">The handler to invoke when the image is exported.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.GetImageServerImage(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,System.Int32[],ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceImageFormat,System.String,ESRI.ArcGIS.Client.ArcGISImageServiceLayer.ImageServiceInterpolation,System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Windows.Media.Color},ESRI.ArcGIS.Client.TimeExtent,ESRI.ArcGIS.Client.MosaicRule,ESRI.ArcGIS.Client.RenderingRule,System.Boolean,ESRI.ArcGIS.Client.Services.MapService.ImageCompleteHandler)">
            <summary>
            Gets the URL for an exported image server image.
            </summary>
            <param name="extent">The map extent of the exported image.</param>
            <param name="width">The width of the exported image.</param>
            <param name="height">The height of the exported image.</param>
            <param name="bandIds">If there are multiple bands, you can
            specify a single band to export, or you can change the band
            combination (red, green, blue) by specifying the band number.</param>
            <param name="format">The format of the exported image.</param>
            <param name="pixelType">The pixel type, also known as data type,
            pertains to the type of values stored in the raster, such as
            signed integer, unsigned integer, or floating point. Integers
            are whole numbers, whereas floating points have decimals.</param>
            <param name="interpolation">The resampling process of extrapolating
            the pixel values while transforming the raster dataset when it undergoes
            warping or when it changes coordinate space.</param>
            <param name="compressionQuality">Controls how much loss the image will
            be subjected to by the compression algorithm. Valid value ranges of
            compression quality are from 0 to 100.</param>
            <param name="noData">The no data.</param>
            <param name="noDataColor">Color of the no data.</param>
            <param name="timeExtent">The time instant or the time extent to query.</param>
            <param name="mosaicRule">Specifies the mosaic rule when defining how
            individual images should be mosaicked. It specifies selection, mosaic
            method, sort order, overlapping pixel resolution, etc.</param>
            <param name="renderingRule">Specifies the rendering rule for how the
            requested image should be rendered.</param>
            <param name="disableClientCaching">Disables browser caching on the client.</param>
            <param name="onComplete">The handler to invoke when the image is exported.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception},ESRI.ArcGIS.Client.Layer)">
            <summary>
            Queries for the legend infos of the map service.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> object.
            This object represents the legend of the map service and contains a collection of LayerLegendInfos.
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
            <param name="layer">Layer asking the legend infos.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.AddMissingLayerLegends(System.Collections.Generic.IList{ESRI.ArcGIS.Client.LayerLegendInfo},System.Boolean)">
            <summary>
            The legend REST end point don't return all layers.
            So ,add missing layers from mapServiceInfo (at least group layers or all layers if request on legend failed).
            </summary>
            <param name="layerLegendInfos">The root layer legends.</param>
            <param name="isDynamicMapLayer">Dynamic map layers don't adjust the same than tiled layers.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.AdjustScaleToLODs(ESRI.ArcGIS.Client.LayerLegendInfo,System.Boolean)">
            <summary>
            For tiled layers, adjust the min and maxscale to the LODS
            </summary>
            <param name="layerLegendInfo">The layer legend info to adjust.</param>
            <param name="isDynamicMapService">Dynamic map layers don't adjust the same than tiled layers.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.InitLegendHierarchy(System.Collections.Generic.IList{ESRI.ArcGIS.Client.LayerLegendInfo})">
            <summary>
            Inits the legend hierarchy.
            </summary>
            <param name="rootLayerLegends">The root layer legends.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.Descendants(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.LayerLegendInfo})">
            <summary>
            Find descendants from a specified collection of layer legend infos.
            </summary>
            <param name="layerLegendInfos">The layer legend infos.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.FindLayerLegendByID(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.LayerLegendInfo},System.Int32)">
            <summary>
            Finds the layer legend info corresponding to a sublayer.
            </summary>
            <param name="layerLegendInfos">The collection of parent layer legend infos to look at.</param>
            <param name="layerID">The sublayer ID.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Services.MapService.CheckForFault(System.ComponentModel.AsyncCompletedEventArgs,System.Exception@)">
            <summary>
            Checks for fault.
            </summary>
            <param name="e">The <see cref="T:System.Net.DownloadStringCompletedEventArgs"/> instance containing the event data.</param>
            <param name="ex">The exception generated if any.</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Services.MapService.Initialized">
            <summary>
            Occurs when the service has been initailized.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapService.MapServiceInfo">
            <summary>
            Gets the map service info.
            </summary>
            <value>The map service info.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapService.Token">
            <summary>
            Gets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Services.MapService.Fault">
            <summary>
            Occurs when the query completes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Services.MapService.UrlCompleteHandler">
            <summary>
            Handler used by the GetImageUrl method.
            </summary>
            <param name="mapInfo">Information about the exported map image.</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Services.MapService.RestFaultEventHandler">
            <summary>
            Delegate for the QueryComplete event.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Services.MapService.RestFaultEventArgs">
            <summary>
            EventArgs for the Fault task event.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapService.RestFaultEventArgs.Cancelled">
            <summary>
            Indicates whether the task request was cancelled.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapService.RestFaultEventArgs.Error">
            <summary>
            The error returned from executing the task.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.EditTask">
            <summary>
            Enables editing a feature service
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.EditTask.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.EditTask"/> class.
            </summary>
            <param name="layerUrl">Url for the feature service layer</param>
            <param name="objectIdField">The object id field</param>
            <param name="globalIdField">The global id field</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.EditTask.OnEndEdits(ESRI.ArcGIS.Client.Tasks.EndEditEventArgs)">
            <summary>
            Raises the <see cref="E:ESRI.ArcGIS.Client.Tasks.EditTask.EndApplyEdits"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Tasks.EndEditEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.EditTask.ApplyEdits(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Applies edits to the <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> on the server.
            </summary>
            <param name="adds">Graphics to add</param>
            <param name="deletes">Graphics to delete</param>
            <param name="updates">Graphics with updates</param>
            <seealso cref="E:ESRI.ArcGIS.Client.Tasks.EditTask.EndApplyEdits"/>
        </member>
        <member name="E:ESRI.ArcGIS.Client.Tasks.EditTask.EndApplyEdits">
            <summary>
            Event fired when edits are complete.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.LayerLegendInfo">
            <summary>
            Information about the legend/TOC entries  for a layer.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerLegendInfo.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Creates a layerlegendinfo from a JSON dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="serviceUrl">The service URL used to determine where relative image URLs can be found under.</param>
            <returns></returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerLegendInfo.LayerName">
            <summary>
            The name of the layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerLegendInfo.LayerDescription">
            <summary>
            The description of the layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerLegendInfo.LayerType">
            <summary>
            The type of layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerLegendInfo.SubLayerID">
            <summary>
            The ID of the sub layer.
            </summary>
            <remarks>Only used whether the layer is a sub layer.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerLegendInfo.MinimumScale">
            <summary>
            The minimum scale in which this layer can be viewed.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerLegendInfo.MaximumScale">
            <summary>
            The maximum scale in which this layer can be viewed.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerLegendInfo.LayerLegendInfos">
            <summary>
            Collection of LayerLegendInfos under this layer legend.
            </summary>
            <remarks>This collection can be null but is generally not null for a group layer or for a layer legend coming from an ArcGISDynamicmapServiceLayer.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerLegendInfo.LegendItemInfos">
            <summary>
            Collection of legend items for the layer.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.Query">
            <summary>
            The parameters used to execute the QueryTask.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.Query.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.OutSpatialReferenceWKID">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the Query.OutSpatialReference property.
            </para>
            <para>
            The well-known ID of the spatial reference for the returned geometry. If not specified, 
            the geometry is returned in the spatial reference of the containing map. 
            </para>
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.OutSpatialReference">
            <summary>
            The spatial reference for the returned geometry. If not specified, the geometry 
            is returned in the spatial reference of the containing map or the spatial reference. 
            specified in <see cref="P:ESRI.ArcGIS.Client.Tasks.Query.OutSpatialReferenceWKID"/>
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.ReturnGeometry">
            <summary>
            If true, each feature in the FeatureSet includes the geometry. Since the geometry makes 
            up a significant portion of the response, only use when you plan to use the geometry of
            the feature, for example, to include them on a map. By default, this is false.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.ReturnIdsOnly">
            <summary>
             If true, the response only populate the ObjectIDs property of the feature set. 
             The default is false. 
            </summary>		
            <remarks>Supported in ArcGIS REST Server v.10+</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.TimeExtent">
            <summary>
            Gets or sets the time instant or the time extent to query.
            </summary>
            <remarks>Supported in ArcGIS REST Server v.10+</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.SpatialRelationship">
            <summary>
            The spatial relationship to be applied on the input geometry while performing the query.
            The default is esriSpatialRelIntersects.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.RelationParameter">
            <summary>
            Gets or sets the spatial relate function that can be applied while 
            performing the query operation
            </summary>		
            <example>An example for this spatial relate function is "FFFTTT***".</example>
            <remarks>Supported in ArcGIS REST Server v.10+</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.MaxAllowableOffset">
            <summary>
            Gets or sets the max allowable offset. This option can be used to 
            specify the maximum allowable offset to be used for generalizing 
            geometries returned by the query operation.
            </summary>		
            <remarks>Supported in ArcGIS REST Server v.10+</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.Text">
            <summary>
            Shorthand for a literal search text on the display field, equivalent to: where 
            &lt;displayField&gt; like '%%'. The text is case sensitive. This parameter is ignored 
            if the where parameter is specified. 
            You can determine what the display field is for a layer using the ArcGIS Services Directory. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.Geometry">
            <summary>
            The geometry to apply to the spatial filter. The spatial relationship as 
            specified by spatialRelationship is applied to this geometry while 
            performing the query. The valid geometry types are Envelope, Point, 
            Multipoint, Polyline, or Polygon. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.Where">
            <summary>
            A where clause for the query. Any legal SQL where clause operating on the fields in the 
            layer is allowed, for example: where=POP2000 > 350000 .
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.OutFields">
            <summary>
            Attribute fields to include in the FeatureSet.
            </summary>
            <remarks>
            <para>
            Fields must exist in the map layer. You must list the actual field names rather than the alias names. 
            Returned fields are also the actual field names. However, you are able to use the alias names when 
            you display the results. For optimal performance, limit the output fields to only those you expect 
            to use. Each query must have access to the Shape and Objectid fields for a layer, but your list of 
            fields does not need to include these two fields. To return all fields, specify the wildcard '*' as 
            the value of this parameter. In this case, the query results include all the field values. 
            </para>
            <para>
            <b>Note:</b> The wildcard will not return the geometry (i.e. shape field). In order to return the 
            geometry information the <see cref="P:ESRI.ArcGIS.Client.Tasks.Query.ReturnGeometry">ReturnGeometry</see> 
            must be set to True.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.Query.ObjectIDs">
            <summary>
            Object ids to query for.  If object ids are specified, other query parameters like Where are ignored.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.DataBinding">
            <summary>
            The class supports the ArcGIS API for Silverlight infrastructure and is not intended to be used directly from your code. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.DataBinding.Symbol">
            <summary>
            Gets or sets the symbol.
            </summary>
            <value>The symbol.</value>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.DataBinding.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.DataBinding.TimeExtent">
            <summary>
            Gets or sets the time extent.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.UniqueValueRenderer">
            <summary>
            Custom graphics renderer
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.UniqueValueRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.UniqueValueRenderer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.UniqueValueRenderer.GetSymbol(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Gets a symbol based on a graphic.
            </summary>
            <param name="graphic">The graphic.</param>
            <returns>Symbol</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.UniqueValueRenderer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of a layer using this renderer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> containing the collection of legenditems coresponding to the renderer.
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.UniqueValueRenderer.ToJson">
            <summary>
            Serializes the unique value renderer to JSON
            </summary>
            <returns>
            A JSON string representation of the unique value renderer
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueRenderer.Infos">
            <summary>
            Gets the collection of <see cref="T:ESRI.ArcGIS.Client.UniqueValueInfo"/>.
            </summary>
            <value>The infos.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueRenderer.Attribute">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use the UniqueValueRenderer.Field Property instead.
            </para>
            <para>
            Gets or sets the attribute field to use for classes.
            </para>
            </summary>
            <remarks>
            Gets or sets the attribute field to use for classes.
            </remarks>
            <value>The attribute field.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueRenderer.Field">
            <summary>
            Gets or sets the attribute field to use for classes.
            </summary>
            <value>The attribute field.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueRenderer.DefaultSymbol">
            <summary>
            Gets or sets the default symbol.
            </summary>
            <value>The default symbol.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueRenderer.DefaultLabel">
            <summary>
            Gets or sets the default label.
            </summary>
            <value>The default label.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.UniqueValueRenderer.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.UniqueValueRenderer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.UniqueValueInfo">
            <summary>
            UniqueValueInfo for the <see cref="T:ESRI.ArcGIS.Client.UniqueValueRenderer"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.UniqueValueInfo.ToJson">
            <summary>
            Serializes the unique value info to JSON
            </summary>
            <returns>
            A JSON string representation of the unique value info
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.UniqueValueInfo.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder.BrushProperty">
            <summary>
            The brush
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder.GetBrush(System.Windows.DependencyObject)">
            <summary>
            Gets the brush
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder.SetBrush(System.Windows.DependencyObject,System.Windows.Media.ImageBrush)">
            <summary>
            Sets the brush
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder.PathProperty">
            <summary>
            The path of the polygon
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder.GetPath(System.Windows.DependencyObject)">
            <summary>
            Gets the path
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder.SetPath(System.Windows.DependencyObject,System.Windows.Media.PathGeometry)">
            <summary>
            Sets the path
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder.WidthProperty">
            <summary>
            The width of the image
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder.GetWidth(System.Windows.DependencyObject)">
            <summary>
            Gets the width of the image.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder.SetWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the width of the image
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder.HeightProperty">
            <summary>
            The height of the image
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder.GetHeight(System.Windows.DependencyObject)">
            <summary>
            Gets the image height.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.PictureFillSymbolSurrogateBinder.SetHeight(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the image height.
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ThrottleTimer">
            <summary>
            The throttle timer is useful for limiting the number of requests to a method if
            the method is repeatly called many times but you only want the method raised once.
            It delays raising the method until a set interval, and any previous calls to the
            actions in that interval will be cancelled.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ThrottleTimer.#ctor(System.Int32,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.ThrottleTimer"/> class.
            </summary>
            <param name="milliseconds">Milliseconds to throttle.</param>
            <param name="handler">The delegate to invoke.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ThrottleTimer.Invoke">
            <summary>
            Invokes this instance (note that this will happen asynchronously and delayed).
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ThrottleTimer.Cancel">
            <summary>
            Cancels this timer if running.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ThrottleTimer.Action">
            <summary>
            Delegate to Invoke.
            </summary>
            <value>The action.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.LayerOption">
            <summary>
            LayerOption enumeration.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LayerOption.top">
            <summary>
            Only the top-most layer at the specified location
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LayerOption.visible">
            <summary>
            All visible layers at the specified location
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LayerOption.all">
            <summary>
            All layers at the specified location
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.IdentifyResult">
            <summary>
            A result from executing the IdentifyTask.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyResult.LayerId">
            <summary>
            The layer id of the IdentifyResult.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyResult.LayerName">
            <summary>
            The layer name of the IdentifyResult.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyResult.Value">
            <summary>
            The value of the IdentifyResult.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyResult.DisplayFieldName">
            <summary>
            The display field name of the IdentifyResult.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.IdentifyResult.Feature">
            <summary>
            The feature of the IdentifyResult.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPFeatureRecordSetLayer">
            <summary>
            Represents a GPFeatureRecordSetLayer geoprocessing task inputs.
            For a large set of geometries, you can specify the Url property to the input features stored 
            in a JSON structure in a file on a public server. 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPFeatureRecordSetLayer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPFeatureRecordSetLayer"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPFeatureRecordSetLayer.#ctor(System.String,ESRI.ArcGIS.Client.Tasks.FeatureSet)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPFeatureRecordSetLayer"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="features">The FeatureSet to be contained by the GPFeatureRecordSetLayer.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPFeatureRecordSetLayer.#ctor(System.String,ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPFeatureRecordSetLayer"/> class.
            A new FeatureSet will be created containing a Graphic created from the passed in geometry.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPFeatureRecordSetLayer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPFeatureRecordSetLayer"/> class.
            Use this constructor when specifying an input file on a public server
            that contains the features in JSON format.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="url">The URL to the location of the input file.</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPDouble">
            <summary>
            A double input to a geoprocessing task.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPDouble.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPDouble"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPDouble.ToJson">
            <summary>
            Serializes the parameter to JSON.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPDouble.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Services.MapServiceInfo">
            <summary>
            Information about a REST API map service. The REST API map service resource represents a map 
            service. This resource works only with the default data frame of a published map document. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.CurrentVersion">
            <summary>
            The map service version.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.ServiceDescription">
            <summary>
            The map service description.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.MapName">
            <summary>
            The name of the map.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.Description">
            <summary>
            The map description.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.CopyrightText">
            <summary>
            The maps copyright text.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.SingleFusedMapCache">
            <summary>
            Whether the map is a single fused map cache.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.TileInfo">
            <summary>
            Information about the map tile cache if the map service is cached.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.SpatialReference">
            <summary>
            The spatial reference of the map.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.InitialExtent">
            <summary>
            The initial extent of the map.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.FullExtent">
            <summary>
            The full extent of the map.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.Units">
            <summary>
            The units of the map, e.g. esriDecimalDegrees
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.Layers">
            <summary>
            The layers contained by the map.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.IsReference">
            <summary>
            Gets or sets a value indicating whether this instance is reference
            i.e. the layer should be drawn on top of all operational layers.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.Name">
            <summary>
            The name of the image file.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.Extent">
            <summary>
            The full extent of the image service.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.PixelSizeX">
            <summary>
            Pixel Size X
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.PixelSizeY">
            <summary>
            Pixel Size Y
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.Capabilities">
            <summary>
            The map service capabilities (v10SP1+).
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.MapServiceInfo.TileServers">
            <summary>
            The tile servers that allow distributing load to multiple endpoints (optional)
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Services.Layer">
            <summary>
            Describes a layer in an ArcGIS REST map service. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.Layer.ID">
            <summary>
            The ID of the layer.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.Layer.Name">
            <summary>
            The name of the layer.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.Layer.DefaultVisibility">
            <summary>
            Whether the layer is visible by default.
            </summary>
            <value><c>true</c> if layer is visible by default; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.Layer.SubLayerIds">
            <summary>
            The IDs of sublayers, if any.
            </summary>
            <value>The sub layer IDs.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.Layer.MinScale">
             <summary>
            Minimum scale.
             </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Services.Layer.MaxScale">
             <summary>
            Maximum scale.
             </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Clustering.FlareSymbol">
            <summary>
            The class supports the ArcGIS API for Silverlight infrastructure and is not intended to be used directly from your code. 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Clustering.FlareSymbol.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Clustering.FlareSymbol"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Clustering.FlareSymbol.LoadTemplateFromResource(System.Int32)">
            <summary>
            Loads the template from an embedded resource.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Clustering.FlareSymbol.ForeColorProperty">
            <summary>
            Forecolor dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Clustering.FlareSymbol.FillColorProperty">
            <summary>
            Fill dependency property
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Clustering.FlareSymbol.ForeColor">
            <summary>
            Gets or sets the color of the fore.
            </summary>
            <value>The color of the fore.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Clustering.FlareSymbol.FillColor">
            <summary>
            Gets or sets the color of the fill.
            </summary>
            <value>The color of the fill.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.FeatureTemplate">
            <summary>
            A feature template describes a prototype graphic with geometry and attributes.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.FeatureTemplate.GetSymbol(ESRI.ArcGIS.Client.IRenderer)">
            <summary>
            Gets the symbol from renderer.
            </summary>
            <param name="renderer">The layer's renderer.</param>
            <returns></returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureTemplate.Name">
            <summary>
            The name of the feature template.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureTemplate.Description">
            <summary>
            The description of the feature template.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureTemplate.PrototypeGeometry">
            <summary>
            The prototype geometry.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureTemplate.PrototypeAttributes">
            <summary>
            The prototype attributes
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureTemplate.DrawingTool">
            <summary>
            The recommended drawing tool to use for the features using this template.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.FeatureEditTool">
            <summary>
            Recommended edit tool for a given <see cref="T:ESRI.ArcGIS.Client.FeatureService.FeatureTemplate"/>.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.FeatureEditTool.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.FeatureEditTool.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.FeatureEditTool.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.FeatureEditTool.Polygon">
            <summary>
            Polygon
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.FeatureEditTool.AutoCompletePolygon">
            <summary>
            Auto-complete Polygon
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.FeatureEditTool.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.FeatureEditTool.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.FeatureEditTool.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.FeatureEditTool.Freehand">
            <summary>
            Freehand
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Symbols.TileEffect">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.TileEffect.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.TileEffect.InputProperty">
            <summary>
            The Input dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.TileEffect.VerticalTileCountProperty">
            <summary>
            The VerticalTileCount dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.TileEffect.HorizontalTileCountProperty">
            <summary>
            The HorizontalTileCount dependency property
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.TileEffect.Input">
            <summary>
            Gets or sets the input.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.TileEffect.VerticalTileCount">
            <summary>
            Gets or sets the vertical tile count.
            </summary>
            <value>The vertical tile count.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.TileEffect.HorizontalTileCount">
            <summary>
            Gets or sets the horizontal tile count.
            </summary>
            <value>The horizontal tile count.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect">
            <summary>
            Performs a spatial query and selects the result on the feature layer.  Can use the Mode property
            to create a new selection, add to the existing selection or remove from the existing selection.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.OnIsEnabledChanged">
            <summary>
            Overrides to enable verb
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.Restart">
            <summary>
            Enables draw with new properties
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.Execute(ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Executes spatial select using geometry selector.
            </summary>
            <param name="selector">Geometry to select with</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.Mode">
            <summary>
            Selection mode.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.draw">
            <summary>
            Client side selection tool
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.drawSelection">
            <summary>
            Server side selection tool
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.Layers">
            <summary>
            Gets or sets the layers to select on.
            </summary>
            <value>The layers to select on.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.DrawMode">
            <summary>
            Gets or sets the draw mode.
            </summary>
            <value>The draw mode.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.Where">
            <summary>
            Gets or sets the where clause filter.  Only applicable for Feature layers.  If the feature layer has a Where, this Where supersedes it.
            Can set DrawMode to None for an attribute query
            </summary>
            <value>The where.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.SpatialSelectCompleted">
            <summary>
            Occurs when spatial select has completed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.SelectionMode">
            <summary>
            Selection mode.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.SelectionMode.New">
            <summary>
            New selection
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.SelectionMode.Add">
            <summary>
            Add to selection
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.SelectionMode.Remove">
            <summary>
            Remove from selection
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.SelectionMode.Keyboard">
            <summary>
            Defaults to <see cref="F:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.SelectionMode.New"/>. <see cref="F:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.SelectionMode.Add"/> if <see cref="F:System.Windows.Input.ModifierKeys.Control"/>
            key is pressed. <see cref="F:ESRI.ArcGIS.Client.FeatureService.Editing.SpatialSelect.SelectionMode.Remove"/> is <see cref="F:System.Windows.Input.ModifierKeys.Shift"/> is pressed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.Euclidian">
            <summary>
            Utility methods for densification and measure in a flat coordinate system.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Euclidian.Densify(ESRI.ArcGIS.Client.Geometry.Geometry,System.Double)">
            <summary>
            Densifies a <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline"/> or <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/> along a straight line.
            </summary>
            <param name="geom">Geometry to densify.</param>
            <param name="maxSegmentLength">Maximum segment length in the geometry's linear unit.</param>
            <returns>Densified geometry.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Euclidian.Length(ESRI.ArcGIS.Client.Geometry.Polygon)">
            <summary>
            Calculates the length of the perimeter of a polygon.
            </summary>
            <param name="polygon">The polygon to calculate the length for.</param>
            <returns>Length in geometry's linear unit.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Euclidian.Length(ESRI.ArcGIS.Client.Geometry.Polyline)">
            <summary>
            Calculates the length of the perimeter of a polyline.
            </summary>
            <param name="polyline">The polyline to calculate the length for.</param>
            <returns>Length in geometry's linear unit.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.Euclidian.Area(ESRI.ArcGIS.Client.Geometry.Polygon)">
            <summary>
            Calculates the area of a polygon.
            </summary>
            <param name="polygon">Polygon to calculate area for</param>
            <returns>Returns area in geometry's linear unit.</returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPMultiValue`1">
            <summary>
            A MultiValue input to a geoprocessing task.
            </summary>
            <remarks>
            Note that ArcGIS Server v10, only GPMultiValue&lt;<see cref="T:ESRI.ArcGIS.Client.Tasks.GPString"/>&gt;
            data type is supported by the server.
            </remarks>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPMultiValue`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPMultiValue`1"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPMultiValue`1.ToJson">
            <summary>
            Serializes the parameter to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPMultiValue`1.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol">
            <summary>
            A symbol tat is used to draw <see cref="T:ESRI.ArcGIS.Client.Geometry.Polygon"/> objects in the graphics layer
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.SimpleFillSymbol.ToJson">
            <summary>
            Serializes the simple fill symbol to JSON
            </summary>
            <returns>
            A JSON string representation of the simple fill symbol.
            </returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.GraphicElement">
            <summary>
            The Graphic Element control is used for placing graphics in the <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.GraphicElement.#ctor(ESRI.ArcGIS.Client.Graphic,ESRI.ArcGIS.Client.Geometry.Geometry,ESRI.ArcGIS.Client.IRenderer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Symbols.GraphicElement"/> class.
            </summary>
            <param name="g">The g.</param>
            <param name="displayGeometry">The geometry used for display.</param>
            <param name="renderer">The renderer.</param>
            <param name="ignoreMouseEvents">if set to <c>true</c> will not track mouseenter/leave events.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.GraphicElement.PathGeometryProperty">
            <summary> 
            Identifies the PathGeometry dependency property.
            </summary> 
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.GraphicElement.OnPathGeometryPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PathGeometryProperty property changed handler. 
            </summary>
            <param name="d">GraphicElement that changed its PathGeometry.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.GraphicElement.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.GraphicElement.PathGeometry">
            <summary> 
            Gets or sets the PathGeometry possible Value of the System.Windows.Media.PathGeometry object.
            </summary> 
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.GraphicGroupElement">
            <summary>
            GraphicElement used on a group of geometries (MultiPoint).
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleLineSymbol">
            <summary>
            Type of <see cref="T:ESRI.ArcGIS.Client.Symbols.LineSymbol"/> that is used to draw <see cref="T:ESRI.ArcGIS.Client.Geometry.Polyline"/> objects in the <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleLineSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleLineSymbol"/> class.
            FOR INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleLineSymbol.StyleProperty">
            <summary>
            Identifies the LineStyle dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleLineSymbol.SelectionColorProperty">
            <summary>
            Identifies the <see cref="T:System.Windows.Media.Color"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleLineSymbol.ToJson">
            <summary>
            Serializes the simple line symbol to JSON
            </summary>
            <returns>
            A JSON string representation of the simple line symbol.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleLineSymbol.Style">
            <summary>
            Gets or sets a pre-defined Dash Array using the LineStyle enumeration
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleLineSymbol.SelectionColor">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.TemporalRenderer">
             <summary>
             A custom graphics renderer where the symbology of a FeatureLayer is displayed based upon time information.
             </summary>
             <remarks>
             <para>
             The <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.ObservationRenderer">ObservationRenderer</see> Property 
             provides a default set of symbology for features in a time-based layer. This default symbology can be 
             overridden by the LatestObservationRenderer and the TrackRenderer to provide additional ways to graphically 
             represent the features that are returned from a FeatureLayer. While it is theoretically possible to have 
             any Renderer that Implements the <see cref="T:ESRI.ArcGIS.Client.IRenderer">IRenderer</see> 
             Interface be used as the ObservationRenderer Property, it typically makes sense to only use a 
             <see cref="T:ESRI.ArcGIS.Client.SimpleRenderer">SimpleRenderer</see>, 
             <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see>, or 
             <see cref="T:ESRI.ArcGIS.Client.UniqueValueRenderer">UniqueValueRenderer</see>.
             </para>
             <para>
             The <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.LatestObservationRenderer">LatestObservationRenderer</see> 
             Property provides a default set of symbology for the last time-based feature returned per 
             <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.TrackIdField">TrackIdField</see>. If no TrackIdField has been 
             specified then just the last observation that is returned from the FeatureLayer will be symbolized. Whatever 
             symbology properties that have been set (for example: a Symbol’s Color, Size, and Style) for the 
             LatestObservationRenderer will override what was set for the ObservationRenderer. While it is theoretically 
             possible to have any Renderer that Implements the 
             <see cref="T:ESRI.ArcGIS.Client.IRenderer">IRenderer</see> Interface be used as the 
             LastObservationRenderer Property, it typically makes sense to only use a 
             <see cref="T:ESRI.ArcGIS.Client.SimpleRenderer">SimpleRenderer</see>, 
             <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see>, or 
             <see cref="T:ESRI.ArcGIS.Client.UniqueValueRenderer">UniqueValueRenderer</see>.
             </para>
             <para>
             The <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.TrackRenderer">TrackRenderer</see> Property provides 
             polyline based symbology that connects markers (i.e. Points) for time-based features per 
             <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.TrackIdField">TrackIdField</see>. If no TrackIdField has been 
             specified then all observations that are returned from the Featurelayer will be symbolized in sequential 
             order using the polyline graphic. The polyline graphic that is drawn begins with the first temporal 
             observation and connects-the-dots as the phenomena moves spatially through time.
             </para>
             <para>
             The <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.SymbolAger">SymbolAger</see> Property is an optional 
             technique to modify a Symbol’s Size, Color, and Opacity for the Renderers applied to the TemporalRenderer 
             as a feature’s time stamp adjusts. Two SymbolAger’s are supported: the 
             <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and the 
             <see cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger">TimeClassBreaksAger</see>. The RampInterpolator will 
             modify the rendering of entire set of features and graduate the symbology based upon the set properties 
             (except for the LastObservationRenderer). The TimeClassBreaksAger will modify the rendering of a specific 
             set of defined groups based upon a range of values. If a specific group has not been defined by the 
             TimeClassBreaksAger then the ObservationRenderer will take precedence; additionally the 
             LastObservationRenderer takes precedence if set).
             </para>
             <para>
             The following screen shot depicts an image of hurricane Alberto moving across the Atlantic Ocean. The black 
             circles are defined as the movement of Alberto. The circles get larger and smaller depending on Alberto’s 
             measured wind speed via a ClassBreaksRenderer. The red diamond is the most recent occurrence of Alberto’s 
             movement as defined by the TimeExtent of the FeatureLayer. A TrackRenderer is used to denote the path of 
             Alberto’s movement via a yellow solid line that connects the back circles. A SymbolAger via a RampInterpolator 
             was used to demonstrate that as Alberto’s time observations get older, the symbology of the black circles 
             begin to fade. The screen shot matches the code example provided in this documentation page.
             </para>
             <para>
             <img border="0" alt="Hurricane Alberto in the Atlantic Ocean." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TemporalRenderer.png"/>
             </para>
             <para>
             The TemporalRenderer Class is only useful to render graphics from a FeatureLayer that has time based data 
             explicitly specified by an ArcGIS Server web service. One way to determine if the FeatureLayer is temporally 
             enabled is to copy the <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.Url">FeatureLayer.Url</see> Property into 
             the address bar of a web browser and then scroll through the ArcGIS Server web service description to look for 
             for a Time Info section. See the following screen shot:
             </para>
             <para>
             <img border="0" alt="Demonstration of the Time Info section of the ArcGIS Server web service description." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TemporalRenderer2.png"/>
             </para>
             </remarks>
             <example>
             <code title="Example XAML1" description="" lang="XAML">
             &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
             
               &lt;!--
               Display the FeatureLayer in Map3 that has a TemporalRenderer applied:
                     
               Add an ArcGISTiledMapsServiceLayer as a background to the map. The ArcGISTiledMapsServiceLayer 
               layer is first Layer added to the Map's Layers Collection and is drawn on the bottom. A FeatureLayer 
               is then added to the Map and draws on top of the background layer.
                       
               Set the Map3 Extent to zoom to the middle of the Atlantic ocean.
                       
               Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
               within the set TimeExtent will then be shown. If no Map TimeExtent is set then only the 
               ObservationRenderer is in effect. If a Map TimeExtent is set then the ObservationRenderer and the 
               TrackRenderer are in effect. In the case of this example the TimeExtent for the hurricane 
               information is shortened to a small temporal window that just covers the time extent necessary to 
               render the four hurricanes (Alberto, Isaac, Michael, and Nadine) that are returned by the service.
                       
               By binding the Map3 TimeExtent to the TimeSlider3 Value, the Map3 will automatically update as the slider 
               moves.
               --&gt;
               &lt;esri:Map Background="White" Height="375" HorizontalAlignment="Left" Margin="408,227,0,0" 
                         Name="Map3" VerticalAlignment="Top" Width="375" 
                         Extent="-82.08,2.81,-16.17,68.73" 
                         TimeExtent="{Binding ElementName=TimeSlider3, Path=Value}"&gt;
               
                 &lt;!--
                 Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
                 Layers Collection is on the bottom and the other Layer is added on the top.
                 --&gt;
                 &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer"
                                                  Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                 
                 &lt;!--
                 The FeatureLayer contains Hurricane data from NOAA as Markers (aka. Points). 
                             
                 The Where clause is optional. It is necessary when more that 500/1000 records returned. 
                 In ArcGIS Server 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. 
                 In ArcGIS Server 10 the default is 1000. This setting is configurable per map service using 
                 ArcCatalog or ArcGIS Server Manager (on the Parameters tab). 
                             
                 The Where clases gets only hurricane data for Alberto.
                             
                 Specify the Outfields Property to specify which Fields are returned on which the TemporalRenderer 
                 TrackIdField can use. Specifying the wildcard (*) character will return all Fields. 
                 --&gt;
                 &lt;esri:FeatureLayer ID="MyFeatureLayer"
                                    Url="http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0"
                                    Where="EVENTID = 'Alberto'"
                                    OutFields="*"&gt;
                 
                   &lt;esri:FeatureLayer.Renderer&gt;
                 
                     &lt;!--
                     Create the TemporalRenderer object. 
                     
                     Setting the TrackIdField draws polylines in time order for a group of attributes. If the 
                     TrackIdField property is not set and the TrackRenderer is used, then all point observations 
                     will have a polyline connecting them in order of time. This becomes messy if multiple
                     events are occurring at the same time (i.e. hurricanes) and the linework would then look like 
                     a spider diagram rather than discreet tracks with one per event. In this example to speed up
                     drawing time and limit the amount of data that is returned, the FeatureLayer.Where clause was 
                     used to restrict only one hurricane (or event) from displaying. If the FeatureLayer.Where 
                     clause was commented out, multiple hurricanes would be displayed. Having the TrackIdField 
                     becomes key to keeping each event separate.
                                         
                     The FeatureLayer OutFields Property is set to return all the fields via the wildcard 
                     character (*) and hence we can specify "EVENTID".
                     --&gt;
                     &lt;esri:TemporalRenderer TrackIdField="EVENTID"&gt;
                     
                       &lt;!--
                       Setting the ObservationRenderer.
                                               
                       In this example, a ClassBreaksBrenderer will be used to make a solid black circle symbol 
                       become larger as the size of hurricane Alberto grows via it's wind speed.
                       
                       Create the ClassBreaksRenderer and set the Field value for which groups will be defined.
                       The FeatureLayer OutFields Property is set to return all the fields via the wildcard 
                       character (*) and hence we can specify "WINDSPEED".
                                               
                       Define the Default symbol and ClassBreakInfo objects for: Tropical Depression, Tropical 
                       Storm, Hurricane Categories I, II and III.   
                       --&gt;
                       &lt;esri:TemporalRenderer.ObservationRenderer&gt;
                         &lt;esri:ClassBreaksRenderer Field="WINDSPEED"&gt;
                           &lt;esri:ClassBreaksRenderer.DefaultSymbol&gt;
                             &lt;esri:SimpleMarkerSymbol Color="Black" Size="1"/&gt;
                           &lt;/esri:ClassBreaksRenderer.DefaultSymbol&gt;
                           &lt;esri:ClassBreakInfo MinimumValue="0" MaximumValue="39" 
                                              Label="0 to 38 MPH" Description="Tropical Depression"&gt;
                             &lt;esri:SimpleMarkerSymbol Color="Black" Size="5"/&gt;
                           &lt;/esri:ClassBreakInfo&gt;
                           &lt;esri:ClassBreakInfo MinimumValue="39" MaximumValue="74" 
                                                Label="39 to 73 MPH" Description="Tropical Storm"&gt;
                             &lt;esri:SimpleMarkerSymbol Color="Black" Size="8"/&gt;
                           &lt;/esri:ClassBreakInfo&gt;
                           &lt;esri:ClassBreakInfo MinimumValue="74" MaximumValue="96" 
                                                Label="74 to 95 MPH" Description="Hurricane Category I"&gt;
                             &lt;esri:SimpleMarkerSymbol Color="Black" Size="11"/&gt;
                           &lt;/esri:ClassBreakInfo&gt;
                           &lt;esri:ClassBreakInfo MinimumValue="96" MaximumValue="111" 
                                                Label="96 to 110 MPH" Description="Hurricane Category II"&gt;
                             &lt;esri:SimpleMarkerSymbol Color="Black" Size="13"/&gt;
                           &lt;/esri:ClassBreakInfo&gt;
                           &lt;esri:ClassBreakInfo MinimumValue="111" MaximumValue="131" 
                                                Label="111 to 139 MPH" Description="Hurricane Category III"&gt;
                             &lt;esri:SimpleMarkerSymbol Color="Black" Size="15"/&gt;
                           &lt;/esri:ClassBreakInfo&gt;
                         &lt;/esri:ClassBreaksRenderer&gt;
                       &lt;/esri:TemporalRenderer.ObservationRenderer&gt;
                       
                       &lt;!--
                       LastObservationRenderer:
                       
                       If you do not want the last observation point in the returned set of features to be rendered
                       differently, then do not use the LatestObservationRenderer. If no Map3 TimeExtent is set then 
                       the LastObservationRenderer will not be drawn.
                       
                       Define a SimpleRenderer with a SimpleMarkerSymbol to display each observation. The last 
                       observation will be a red diamond.
                       --&gt;
                       &lt;esri:TemporalRenderer.LatestObservationRenderer&gt;
                         &lt;esri:SimpleRenderer&gt;
                           &lt;esri:SimpleMarkerSymbol Color="Red" Size="10" Style="Diamond"/&gt;
                         &lt;/esri:SimpleRenderer&gt;
                       &lt;/esri:TemporalRenderer.LatestObservationRenderer&gt;
                       
                       &lt;!--
                       TrackRenderer:
                       
                       Define a SimpleRenderer with a SimpleLineSymbol to display each tracked event. The event 
                       will be a yellow line connecting the time-based observations.
                       --&gt;
                       &lt;esri:TemporalRenderer.TrackRenderer&gt;
                         &lt;esri:SimpleRenderer&gt;
                           &lt;esri:SimpleLineSymbol Color="Yellow" Width="2"/&gt;
                         &lt;/esri:SimpleRenderer&gt;
                       &lt;/esri:TemporalRenderer.TrackRenderer&gt;
                       
                       &lt;!--
                       SymbolAger:
                                               
                       The SymbolAger will override the default rendering provided by the ObservationRenderer as the
                       TimeExtentProperty for the Map changes. The goal is to provide rendering to show how a phenomena 
                       has changed over time.
                               
                       Use a RampInterpolator as the SymbolAger. The RampInterpolator will provide an interpolation
                       of up to three attributes for a symbol (Color, Opacity, and Size) between the TimeExtentProperty
                       specified. You specify the From and To values for the desired attributes and the interpolation
                       occurs automatically between them based upon the TimeExtent.
                               
                       In this example only the Opacity attribute of the RampInterpolator is being use to show that 
                       as hurricane Alberto ages (i.e. gets older) the visibility of the symbol at its historical 
                       spatial location begins to fade.  Uncomment the other RampInterpolator attributes (Color and
                       Size) to see how they impact the visualization. Note: by ramping the Size of the of the symbol
                       of the using a RampInterpolator overrides the effect of the ClassBreaksRenderer where the 
                       hurricanes "WINDSPEED" was used to define the size. 
                       --&gt;
                       &lt;esri:TemporalRenderer.SymbolAger&gt;
                         &lt;esri:RampInterpolator&gt;
                           &lt;esri:RampInterpolator.OpacityRange&gt;
                             &lt;esri:OpacityRange From="1" To="0.2"/&gt;
                           &lt;/esri:RampInterpolator.OpacityRange&gt;
                                                       
                           &lt;!--
                           &lt;esri:RampInterpolator.ColorRange&gt;
                             &lt;esri:ColorRange From="Green" To="Red"/&gt;
                           &lt;/esri:RampInterpolator.ColorRange&gt;
                           &lt;esri:RampInterpolator.SizeRange&gt;
                             &lt;esri:SizeRange From="30" To="5"/&gt;
                           &lt;/esri:RampInterpolator.SizeRange&gt;
                           --&gt;
               
                         &lt;/esri:RampInterpolator&gt;
               
                       &lt;/esri:TemporalRenderer.SymbolAger&gt;
                                       
                     &lt;/esri:TemporalRenderer&gt;
               
                   &lt;/esri:FeatureLayer.Renderer&gt;
               
                 &lt;/esri:FeatureLayer&gt;
               
               &lt;/esri:Map&gt;
               
               &lt;!--
               Set the MinimumValue and MaximumValue of the TimeSlider3 to match the temporal window of hurricane Alberto.
                       
               Setting the Value defines where the slider handle will be on the TimeSlider control. In this case at the
               beginning of the hurricane Alberto (all the way to the left side).
               --&gt;
               &lt;esri:TimeSlider Name="TimeSlider3" 
                                MinimumValue="2000/08/04 00:00:01 UTC" MaximumValue="2000/08/24 06:00:01 UTC"
                                Value="2000/08/04 00:00:01 UTC,2000/08/04 00:00:01 UTC"
                                HorizontalAlignment="Left" VerticalAlignment="Top" 
                                Height="25" Width="375" Margin="408,201,0,0"&gt;
               &lt;/esri:TimeSlider&gt;
               
               &lt;!--
               Bind the Value.Start (which is a Date) from TimeSlider3 to the TextBlock_StartTime.TextProperty. The 
               text will remain static since the slider handle is already set to the beginning.
               --&gt;
               &lt;TextBlock Name="TextBlock_StartTime" Text="{Binding ElementName=TimeSlider3, Path=Value.Start}" 
                          HorizontalAlignment="Left" VerticalAlignment="Top" 
                          Height="23" Margin="413,177,0,0" /&gt;
                       
               &lt;!--
               Bind the Value.End (which is a Date) from TimeSlider3 to the TextBlock_EndTime.TextProperty. This 
               will update the text automatically as the slider moves to the right and the EndTime changes.
               --&gt;
               &lt;TextBlock Name="TextBlock_EndTime" Text="{Binding ElementName=TimeSlider3, Path=Value.End}" 
                                HorizontalAlignment="Left" VerticalAlignment="Top" 
                                Height="23" Margin="655,177,0,0" /&gt;
             
             &lt;/Grid&gt;
             </code>
                 
             <code title="Example CS1" description="" lang="CS">
             void MainPage_Loaded(object sender, RoutedEventArgs e)
             
             {
             
               // Initialize the controls upon application startup.
               // In this example it is assumed that the following controls were previously added in XAML:
               // Map3 &lt;== ESRI.ArcGIS.Client.Map Control
               // TimeSlider3 &lt;== ESRI.ArcGIS.Client.Toolkit.TimeSlider Control
               // TextBlock_StartTime &lt;== System.Windows.Controls.TextBlock
               // TextBlock_EndTime &lt;== System.Windows.Controls.TextBlock
            
               // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
               // Layers Collection is on the bottom and the other Layer is added on the top.
               ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer1 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
               myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
               Map3.Layers.Add(myArcGISTiledMapServiceLayer1);
            
               // Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
               ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer3 = new ESRI.ArcGIS.Client.FeatureLayer();
               myFeatureLayer3.ID = "hurricane";
            
               // A FeatureLayer that is Time enabled and contains hurricane data from NOAA.
               myFeatureLayer3.Url = "http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0";
            
               // The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
               // 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
               // default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
               // (on the Parameters tab). 
               myFeatureLayer3.Where = "EVENTID = 'Alberto'"; //Only display hurricane data for Alberto.
            
               // Specify the Outfields Property to specify which Fields are returned on which the TemporalRenderer.TrackIdField 
               // and the Client.ClassBreaksRenderer can use. Specifying the wildcard (*) character in the Add Property will 
               // return all Fields. 
               myFeatureLayer3.OutFields.Add("*");
            
               // Add the myFeatureLayer3 to the Map3 Layers Collection. 
               Map3.Layers.Add(myFeatureLayer3);
            
               // Zoom to the middle of the Atlantic Ocean.
               ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope3 = new ESRI.ArcGIS.Client.Geometry.Envelope();
               myEnvelope3.XMin = -82.08;
               myEnvelope3.YMin = 2.81;
               myEnvelope3.XMax = -16.17;
               myEnvelope3.YMax = 68.73;
               Map3.Extent = myEnvelope3;
            
               // Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
               // within the set TimeExtent will then be shown. If no Map.TimeExtent is set then only the 
               // ObservationRenderer is in effect. If a Map.TimeExtent is set then the ObservationRenderer and the 
               // LastObservationRenderer and TrackRenderer are in effect. In the case of this example
               // the TimeExtent for the hurricane Alberto is shortened to a small temporal window to display the 
               // various rendering effects clearly.
               ESRI.ArcGIS.Client.TimeExtent myTimeExtent = new ESRI.ArcGIS.Client.TimeExtent();
               System.DateTime dateStart = DateTime.Parse("8/4/2000 12:00:01 AM"); //Alberto Start
               myTimeExtent.Start = dateStart;
               System.DateTime dateEnd = DateTime.Parse("8/24/2000 6:00:01 AM"); //Alberto End
               myTimeExtent.End = dateEnd;
            
               // Set the minimum and maximum values of the TimeSlider3.
               TimeSlider3.MinimumValue = myTimeExtent.Start;
               TimeSlider3.MaximumValue = myTimeExtent.End;
            
               // Create another TimeExtent with the beginning and ending date being the same. This will set where the
               // slider is along the TimeSlider control. In our case we want it at the beginning.
               ESRI.ArcGIS.Client.TimeExtent myTimeExtentX = new ESRI.ArcGIS.Client.TimeExtent();
               System.DateTime dateStartX = DateTime.Parse("8/4/2000 12:00:01 AM"); //Alberto Start!
               myTimeExtentX.Start = dateStartX;
               System.DateTime dateEndX = DateTime.Parse("8/4/2000 12:00:01 AM"); //Alberto Start!
               myTimeExtentX.End = dateEndX;
               TimeSlider3.Value = myTimeExtentX;
            
               // Define the text above the TimeSlider that tells what is the start date/time.
               TextBlock_StartTime.Text = dateStart.ToString();
            
               // Bind the Value.End (which is a Date) from TimeSlider3 to the TextBlock_EndTime.TextProperty. This 
               // will update the text automatically as the slider moves.
               System.Windows.Data.Binding myBinding = new System.Windows.Data.Binding("Value.End");
               myBinding.Mode = System.Windows.Data.BindingMode.OneWay;
               myBinding.ElementName = "TimeSlider3";
               TextBlock_EndTime.SetBinding(TextBlock.TextProperty, myBinding);
            
               // Bind the Value (which is an ESRI.ArcGIS.Client.TimeExtent) from TimeSlider3 to the Map3.TimeExtentProperty.
               // This will update the Map automatically as the slider moves.
               System.Windows.Data.Binding myBinding2 = new System.Windows.Data.Binding("Value");
               myBinding2.Mode = System.Windows.Data.BindingMode.OneWay;
               myBinding2.ElementName = "TimeSlider3";
               Map3.SetBinding(ESRI.ArcGIS.Client.Map.TimeExtentProperty, myBinding2);
            
               // Since the TimeSlider3.Value Property is bound to the Map3.TimeExtentProperty Field, it is needed to
               // code the Rendering (via the TemporalRenderer) into the FeatureLayer's Initialized event so that
               // automatic updating of the FeatureLayer will occur as the user interacts with the TimeSlider.
               // Note: You can specify any name for the for the AddressOf function. 
               myFeatureLayer3.Initialized += new System.EventHandler&lt;EventArgs&gt;(FeatureLayerHurricanes_Initialized);
             } 
            
             private void FeatureLayerHurricanes_Initialized(object sender, System.EventArgs e)
             {
              
               // This function performs all of the rendering (or drawing) of the FeatureLayer using a TemporalRenderer. 
              
               // Get the FeatureLayer forom the Map's Layers Collection.
               ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer2 = (ESRI.ArcGIS.Client.FeatureLayer)Map3.Layers["hurricane"];
            
               // Create the TemporalRenderer.
               ESRI.ArcGIS.Client.TemporalRenderer myTemporalRenderer = new ESRI.ArcGIS.Client.TemporalRenderer();
            
               //-------------------------------------------------------------------------------------------
            
               // Prepare everything for setting the TemporalRenderer.ObservationRenderer Properety:
               //
               // In this example a ClassBreaksBrenderer will be used to make a solid black circle symbol become
               // larger as the size of hurricane Alberto grows via it's wind speed.
            
               // Create the ClassBreaksRenderer and set the Field value for which groups will be defined.
               // The FeatureLayer.OutFields Property set in the MainPage_Loaded function was set to return
               // all the fields via the wildcard character (*) and hence we can specify "WINDSPEED".
               ESRI.ArcGIS.Client.ClassBreaksRenderer myClassBreaksRenderer = new ESRI.ArcGIS.Client.ClassBreaksRenderer();
               myClassBreaksRenderer.Field = "WINDSPEED"; // Requires a numeric Field
            
               // Define the Default symbol
               ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol myDefaultMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
               System.Windows.Media.SolidColorBrush myDefaultBrush = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); //Black
               myDefaultMarkerSymbol.Color = myDefaultBrush;
               myDefaultMarkerSymbol.Size = 1;
               myClassBreaksRenderer.DefaultSymbol = myDefaultMarkerSymbol;
            
               // Tropical Depression
               ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo1 = new ESRI.ArcGIS.Client.ClassBreakInfo();
               myClassBreakInfo1.MinimumValue = 0;
               myClassBreakInfo1.MaximumValue = 39;
               myClassBreakInfo1.Description = "0 to 38 MPH";
               myClassBreakInfo1.Label = "Tropical Depression";
               ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol1 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
               System.Windows.Media.SolidColorBrush myBrush1 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); //Black
               mySimpleMarkerSymbol1.Color = myBrush1;
               mySimpleMarkerSymbol1.Size = 5;
               myClassBreakInfo1.Symbol = mySimpleMarkerSymbol1;
               myClassBreaksRenderer.Classes.Add(myClassBreakInfo1);
            
               // Tropical Storm
               ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo2 = new ESRI.ArcGIS.Client.ClassBreakInfo();
               myClassBreakInfo2.MinimumValue = 39;
               myClassBreakInfo2.MaximumValue = 74;
               myClassBreakInfo2.Description = "39 to 73 MPH";
               myClassBreakInfo2.Label = "Tropical Storm";
               ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol2 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
               System.Windows.Media.SolidColorBrush myBrush2 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); // Black
               mySimpleMarkerSymbol2.Color = myBrush2;
               mySimpleMarkerSymbol2.Size = 8;
               myClassBreakInfo2.Symbol = mySimpleMarkerSymbol2;
               myClassBreaksRenderer.Classes.Add(myClassBreakInfo2);
            
               // Hurricane Category I
               ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo3 = new ESRI.ArcGIS.Client.ClassBreakInfo();
               myClassBreakInfo3.MinimumValue = 74;
               myClassBreakInfo3.MaximumValue = 96;
               myClassBreakInfo3.Description = "74 to 95 MPH";
               myClassBreakInfo3.Label = "Hurricane Category I";
               ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol3 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
               System.Windows.Media.SolidColorBrush myBrush3 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); // Black
               mySimpleMarkerSymbol3.Color = myBrush3;
               mySimpleMarkerSymbol3.Size = 11;
               myClassBreakInfo3.Symbol = mySimpleMarkerSymbol3;
               myClassBreaksRenderer.Classes.Add(myClassBreakInfo3);
            
               // Hurricane Category II
               ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo4 = new ESRI.ArcGIS.Client.ClassBreakInfo();
               myClassBreakInfo4.MinimumValue = 96;
               myClassBreakInfo4.MaximumValue = 111;
               myClassBreakInfo4.Description = "96 to 110 MPH";
               myClassBreakInfo4.Label = "Hurricane Category II";
               ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol4 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
               System.Windows.Media.SolidColorBrush myBrush4 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); // Black
               mySimpleMarkerSymbol4.Color = myBrush4;
               mySimpleMarkerSymbol4.Size = 13;
               myClassBreakInfo4.Symbol = mySimpleMarkerSymbol4;
               myClassBreaksRenderer.Classes.Add(myClassBreakInfo4);
            
               // Hurricane Category III
               ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo5 = new ESRI.ArcGIS.Client.ClassBreakInfo();
               myClassBreakInfo5.MinimumValue = 111;
               myClassBreakInfo5.MaximumValue = 131;
               myClassBreakInfo5.Description = "111 to 130 MPH";
               myClassBreakInfo5.Label = "Hurricane Category III";
               ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol5 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
               System.Windows.Media.SolidColorBrush myBrush5 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); // Black
               mySimpleMarkerSymbol5.Color = myBrush5;
               mySimpleMarkerSymbol5.Size = 15;
               myClassBreakInfo5.Symbol = mySimpleMarkerSymbol5;
               myClassBreaksRenderer.Classes.Add(myClassBreakInfo5);
            
               // There are actually five hurricane categories. You can create the other two if desired.
               // Category IV (131 to 155 MPH) and Category V (156+ MPH)
            
               // Apply the ObservationRenderer information to the TemporalRenderer.
               myTemporalRenderer.ObservationRenderer = myClassBreaksRenderer;
            
               //-------------------------------------------------------------------------------------------
            
               // Prepare everything for setting the TrackRenderer Property:
               //
               // Setting the TrackIdField draws polylines in time order for a group of attributes. If the 
               // TrackIdField property is not set and the TrackRenderer is used, then all point observations 
               // will have a polyline connecting them in order of time. This becomes messy if multiple
               // events are occurring at the same time (i.e. hurricanes) and the linework would then look like 
               // a spider diagram rather than discreet tracks with one per event. In this example to speed up
               // drawing time and limit the amount of data that is returned, the FeatureLayer.Where clause was 
               // used to restrict only one hurricane (or event) from displaying. If the FeatureLayer.Where 
               // clause was commented out, multiple hurricanes would be displayed -- having the TrackIdField 
               // becomes key to keeping each event separate.
               // The FeatureLayer.OutFields Property set in the MainPage_Loaded function was set to return
               // all the fields via the wildcard character (*) and hence we can specify "EVENTID".
               myTemporalRenderer.TrackIdField = "EVENTID";
            
               // Define a SimpleRenderer with a SimpleLineSymbol to display each tracked event. The event 
               // will be a yellow line connecting the time-based observations.
               ESRI.ArcGIS.Client.SimpleRenderer myTrackRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
               ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol defaultSimpleLineSymbol3 = new ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol();
               System.Windows.Media.SolidColorBrush defaultBrush3 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)); //Yellow
               defaultSimpleLineSymbol3.Color = defaultBrush3;
               defaultSimpleLineSymbol3.Width = 2;
               myTrackRenderer.Symbol = defaultSimpleLineSymbol3;
            
               // Apply the TrackRenderer information to the TemporalRenderer.
               myTemporalRenderer.TrackRenderer = myTrackRenderer;
            
               //-------------------------------------------------------------------------------------------
            
               // Prepare everything for setting the LatestObservationRenderer Property:
               //
               // If you do not want the last observation point in the returned set of features to be rendered
               // differently, then do not use the LatestObservationRenderer. If no Map3.TimeExtent is set then 
               // the LastObservationRenderer will not be drawn.
            
               // Define a SimpleRenderer with a SimpleMarkerSymbol to display each observation. The last 
               // observation will be a red diamond.
               ESRI.ArcGIS.Client.SimpleRenderer mySimpleRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
               ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
               System.Windows.Media.SolidColorBrush defaultBrush = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 0, 0)); //Red
               mySymbol.Color = defaultBrush;
               mySymbol.Size = 10;
               mySymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Diamond;
               mySimpleRenderer.Symbol = mySymbol;
               myTemporalRenderer.LatestObservationRenderer = mySimpleRenderer;
            
               //-------------------------------------------------------------------------------------------
            
               // Prepare everything for setting the SymbolAger Property:
               //
               // The SymbolAger will override the default rendering provided by the ObservationRenderer as the
               // TimeExtentProperty for the Map changes. The goal is to provide rendering to show how a phenomena 
               // has changed over time.
               //
               // Use a RampInterpolator as the SymbolAger. The RampInterpolator will provide an interpolation
               // of up to three attributes for a symbol (Color, Opacity, and Size) between the TimeExtentProperty
               // specified. You specify the From and To values for the desired attributes and the interpolation
               // occurs automatically between them based upon the TimeExtent.
               //
               // In this example only the Opacity attribute of the RampInterpolator is being use to show that 
               // as hurricane Alberto ages (i.e. gets older) the visibility of the symbol at its historical 
               // spatial location begins to fade.  Uncomment the other RampInterpolator attributes (Color and
               // Size) to see how they impact the visulazation. Note: by ramping the Size of the of the symbol
               // of the using a RampInterpolator overrides the effect of the ClassBreaksRenderer where the 
               // hurricanes "WINDSPEED" was used to define the size. 
               ESRI.ArcGIS.Client.RampInterpolator myRampInterpolator = new ESRI.ArcGIS.Client.RampInterpolator();
            
               ESRI.ArcGIS.Client.OpacityRange myOpacityRange = new ESRI.ArcGIS.Client.OpacityRange();
               myOpacityRange.From = 1; //1 = solid
               myOpacityRange.To = 0.2; //0 = invisible
               myRampInterpolator.OpacityRange = myOpacityRange;
            
               //Dim myColorRange As New ESRI.ArcGIS.Client.ColorRange
               //myColorRange.From = Color.FromArgb(255, 0, 255, 0) 'Green
               //myColorRange.To = Color.FromArgb(255, 255, 0, 0) 'Red
               //myRampInterpolator.ColorRange = myColorRange
            
               //Dim mySizeRange As New ESRI.ArcGIS.Client.SizeRange
               //mySizeRange.From = 30
               //mySizeRange.To = 5
               //myRampInterpolator.SizeRange = mySizeRange
            
               // Apply the SymbolAger information to the TemporalRenderer.
               myTemporalRenderer.SymbolAger = myRampInterpolator;
            
               //-------------------------------------------------------------------------------------------
            
               // Finally, apply the TemporalRenderer information to the FeatureLayer Renderer.
               myFeatureLayer2.Renderer = myTemporalRenderer;
            
             }
             </code>
                 
             <code title="Example VB1" description="" lang="VB.NET">
             Private Sub MainPage_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded
             
               ' Initialize the controls upon application startup.
               ' In this example it is assumed that the following controls were previously added in XAML:
               ' Map3 &lt;== ESRI.ArcGIS.Client.Map Control
               ' TimeSlider3 &lt;== ESRI.ArcGIS.Client.Toolkit.TimeSlider Control
               ' TextBlock_StartTime &lt;== System.Windows.Controls.TextBlock
               ' TextBlock_EndTime &lt;== System.Windows.Controls.TextBlock
               
               ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
               ' Layers Collection is on the bottom and the other Layer is added on the top.
               Dim myArcGISTiledMapServiceLayer1 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
               myArcGISTiledMapServiceLayer1.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
               Map3.Layers.Add(myArcGISTiledMapServiceLayer1)
               
               ' Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
               Dim myFeatureLayer3 As New ESRI.ArcGIS.Client.FeatureLayer
               myFeatureLayer3.ID = "hurricane"
               
               ' A FeatureLayer that is Time enabled and contains hurricane data from NOAA.
               myFeatureLayer3.Url = "http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0"
               
               ' The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
               ' 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
               ' default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
               ' (on the Parameters tab). 
               myFeatureLayer3.Where = "EVENTID = 'Alberto'" 'Only display hurricane data for Alberto.
               
               ' Specify the Outfields Property to specify which Fields are returned on which the TemporalRenderer.TrackIdField 
               ' and the Client.ClassBreaksRenderer can use. Specifying the wildcard (*) character in the Add Property will 
               ' return all Fields. 
               myFeatureLayer3.OutFields.Add("*")
               
               ' Add the myFeatureLayer3 to the Map3 Layers Collection. 
               Map3.Layers.Add(myFeatureLayer3)
               
               ' Zoom to the middle of the Atlantic Ocean.
               Dim myEnvelope3 As New ESRI.ArcGIS.Client.Geometry.Envelope
               myEnvelope3.XMin = -82.08
               myEnvelope3.YMin = 2.81
               myEnvelope3.XMax = -16.17
               myEnvelope3.YMax = 68.73
               Map3.Extent = myEnvelope3
               
               ' Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
               ' within the set TimeExtent will then be shown. If no Map.TimeExtent is set then only the 
               ' ObservationRenderer is in effect. If a Map.TimeExtent is set then the ObservationRenderer and the 
               ' LastObservationRenderer and TrackRenderer are in effect. In the case of this example
               ' the TimeExtent for the hurricane Alberto is shortened to a small temporal window to display the 
               ' various rendering effects clearly.
               Dim myTimeExtent As New ESRI.ArcGIS.Client.TimeExtent
               Dim dateStart As Date = #8/4/2000 12:00:01 AM# 'Alberto Start
               myTimeExtent.Start = dateStart
               Dim dateEnd As Date = #8/24/2000 6:00:01 AM# 'Alberto End
               myTimeExtent.End = dateEnd
               
               ' Set the minimum and maximum values of the TimeSlider3.
               TimeSlider3.MinimumValue = myTimeExtent.Start
               TimeSlider3.MaximumValue = myTimeExtent.End
               
               ' Create another TimeExtent with the beginning and ending date being the same. This will set where the
               ' slider is along the TimeSlider control. In our case we want it at the beginning.
               Dim myTimeExtentX As New ESRI.ArcGIS.Client.TimeExtent
               Dim dateStartX As Date = #8/4/2000 12:00:01 AM# 'Alberto Start!
               myTimeExtentX.Start = dateStartX
               Dim dateEndX As Date = #8/4/2000 12:00:01 AM# 'Alberto Start!
               myTimeExtentX.End = dateEndX
               TimeSlider3.Value = myTimeExtentX
               
               ' Define the text above the TimeSlider that tells what is the start date/time.
               TextBlock_StartTime.Text = dateStart.ToString
               
               ' Bind the Value.End (which is a Date) from TimeSlider3 to the TextBlock_EndTime.TextProperty. This 
               ' will update the text automatically as the slider moves.
               Dim myBinding As System.Windows.Data.Binding = New System.Windows.Data.Binding("Value.End")
               myBinding.Mode = System.Windows.Data.BindingMode.OneWay
               myBinding.ElementName = "TimeSlider3"
               TextBlock_EndTime.SetBinding(TextBlock.TextProperty, myBinding)
               
               ' Bind the Value (which is an ESRI.ArcGIS.Client.TimeExtent) from TimeSlider3 to the Map3.TimeExtentProperty.
               ' This will update the Map automatically as the slider moves.
               Dim myBinding2 As System.Windows.Data.Binding = New System.Windows.Data.Binding("Value")
               myBinding2.Mode = System.Windows.Data.BindingMode.OneWay
               myBinding2.ElementName = "TimeSlider3"
               Map3.SetBinding(ESRI.ArcGIS.Client.Map.TimeExtentProperty, myBinding2)
               
               ' Since the TimeSlider3.Value Property is bound to the Map3.TimeExtentProperty Field, it is needed to
               ' code the Rendering (via the TemporalRenderer) into the FeatureLayer's Initialized event so that
               ' automatic updating of the FeatureLayer will occur as the user interacts with the TimeSlider.
               ' Note: You can specify any name for the for the AddressOf function. 
               AddHandler myFeatureLayer3.Initialized, AddressOf FeatureLayerHurricanes_Initialized
               
             End Sub
               
             Private Sub FeatureLayerHurricanes_Initialized(ByVal sender As System.Object, ByVal e As System.EventArgs)
               
               ' This function performs all of the rendering (or drawing) of the FeatureLayer using a TemporalRenderer. 
               
               ' Get the FeatureLayer forom the Map's Layers Collection.
               Dim myFeatureLayer2 As ESRI.ArcGIS.Client.FeatureLayer = Map3.Layers.Item("hurricane")
               
               ' Create the TemporalRenderer.
               Dim myTemporalRenderer As New ESRI.ArcGIS.Client.TemporalRenderer
               
               '-------------------------------------------------------------------------------------------
               
               ' Prepare everything for setting the TemporalRenderer.ObservationRenderer Properety:
               '
               ' In this example a ClassBreaksBrenderer will be used to make a solid black circle symbol become
               ' larger as the size of hurricane Alberto grows via it's wind speed.
               
               ' Create the ClassBreaksRenderer and set the Field value for which groups will be defined.
               ' The FeatureLayer.OutFields Property set in the MainPage_Loaded function was set to return
               ' all the fields via the wildcard character (*) and hence we can specify "WINDSPEED".
               Dim myClassBreaksRenderer As New ESRI.ArcGIS.Client.ClassBreaksRenderer
               myClassBreaksRenderer.Field = "WINDSPEED" ' Requires a numeric Field
               
               ' Define the Default symbol
               Dim myDefaultMarkerSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
               Dim myDefaultBrush As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) 'Black
               myDefaultMarkerSymbol.Color = myDefaultBrush
               myDefaultMarkerSymbol.Size = 1
               myClassBreaksRenderer.DefaultSymbol = myDefaultMarkerSymbol
               
               ' Tropical Depression
               Dim myClassBreakInfo1 As New ESRI.ArcGIS.Client.ClassBreakInfo
               myClassBreakInfo1.MinimumValue = 0
               myClassBreakInfo1.MaximumValue = 39
               myClassBreakInfo1.Description = "0 to 38 MPH"
               myClassBreakInfo1.Label = "Tropical Depression"
               Dim mySimpleMarkerSymbol1 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
               Dim myBrush1 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) 'Black
               mySimpleMarkerSymbol1.Color = myBrush1
               mySimpleMarkerSymbol1.Size = 5
               myClassBreakInfo1.Symbol = mySimpleMarkerSymbol1
               myClassBreaksRenderer.Classes.Add(myClassBreakInfo1)
               
               ' Tropical Storm
               Dim myClassBreakInfo2 As New ESRI.ArcGIS.Client.ClassBreakInfo
               myClassBreakInfo2.MinimumValue = 39
               myClassBreakInfo2.MaximumValue = 74
               myClassBreakInfo2.Description = "39 to 73 MPH"
               myClassBreakInfo2.Label = "Tropical Storm"
               Dim mySimpleMarkerSymbol2 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
               Dim myBrush2 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) ' Black
               mySimpleMarkerSymbol2.Color = myBrush2
               mySimpleMarkerSymbol2.Size = 8
               myClassBreakInfo2.Symbol = mySimpleMarkerSymbol2
               myClassBreaksRenderer.Classes.Add(myClassBreakInfo2)
               
               ' Hurricane Category I
               Dim myClassBreakInfo3 As New ESRI.ArcGIS.Client.ClassBreakInfo
               myClassBreakInfo3.MinimumValue = 74
               myClassBreakInfo3.MaximumValue = 96
               myClassBreakInfo3.Description = "74 to 95 MPH"
               myClassBreakInfo3.Label = "Hurricane Category I"
               Dim mySimpleMarkerSymbol3 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
               Dim myBrush3 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) ' Black
               mySimpleMarkerSymbol3.Color = myBrush3
               mySimpleMarkerSymbol3.Size = 11
               myClassBreakInfo3.Symbol = mySimpleMarkerSymbol3
               myClassBreaksRenderer.Classes.Add(myClassBreakInfo3)
               
               ' Hurricane Category II
               Dim myClassBreakInfo4 As New ESRI.ArcGIS.Client.ClassBreakInfo
               myClassBreakInfo4.MinimumValue = 96
               myClassBreakInfo4.MaximumValue = 111
               myClassBreakInfo4.Description = "96 to 110 MPH"
               myClassBreakInfo4.Label = "Hurricane Category II"
               Dim mySimpleMarkerSymbol4 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
               Dim myBrush4 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) ' Black
               mySimpleMarkerSymbol4.Color = myBrush4
               mySimpleMarkerSymbol4.Size = 13
               myClassBreakInfo4.Symbol = mySimpleMarkerSymbol4
               myClassBreaksRenderer.Classes.Add(myClassBreakInfo4)
               
               ' Hurricane Category III
               Dim myClassBreakInfo5 As New ESRI.ArcGIS.Client.ClassBreakInfo
               myClassBreakInfo5.MinimumValue = 111
               myClassBreakInfo5.MaximumValue = 131
               myClassBreakInfo5.Description = "111 to 130 MPH"
               myClassBreakInfo5.Label = "Hurricane Category III"
               Dim mySimpleMarkerSymbol5 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
               Dim myBrush5 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) ' Black
               mySimpleMarkerSymbol5.Color = myBrush5
               mySimpleMarkerSymbol5.Size = 15
               myClassBreakInfo5.Symbol = mySimpleMarkerSymbol5
               myClassBreaksRenderer.Classes.Add(myClassBreakInfo5)
               
               ' There are actually five hurricane categories. You can create the other two if desired.
               ' Category IV (131 to 155 MPH) and Category V (156+ MPH)
               
               ' Apply the ObservationRenderer information to the TemporalRenderer.
               myTemporalRenderer.ObservationRenderer = myClassBreaksRenderer
               
               '-------------------------------------------------------------------------------------------
               
               ' Prepare everything for setting the TrackRenderer Property:
               '
               ' Setting the TrackIdField draws polylines in time order for a group of attributes. If the 
               ' TrackIdField property is not set and the TrackRenderer is used, then all point observations 
               ' will have a polyline connecting them in order of time. This becomes messy if multiple
               ' events are occurring at the same time (i.e. hurricanes) and the linework would then look like 
               ' a spider diagram rather than discreet tracks with one per event. In this example to speed up
               ' drawing time and limit the amount of data that is returned, the FeatureLayer.Where clause was 
               ' used to restrict only one hurricane (or event) from displaying. If the FeatureLayer.Where 
               ' clause was commented out, multiple hurricanes would be displayed -- having the TrackIdField 
               ' becomes key to keeping each event separate.
               ' The FeatureLayer.OutFields Property set in the MainPage_Loaded function was set to return
               ' all the fields via the wildcard character (*) and hence we can specify "EVENTID".
               myTemporalRenderer.TrackIdField = "EVENTID"
               
               ' Define a SimpleRenderer with a SimpleLineSymbol to display each tracked event. The event 
               ' will be a yellow line connecting the time-based observations.
               Dim myTrackRenderer As New ESRI.ArcGIS.Client.SimpleRenderer
               Dim defaultSimpleLineSymbol3 As New ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol
               Dim defaultBrush3 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)) 'Yellow
               defaultSimpleLineSymbol3.Color = defaultBrush3
               defaultSimpleLineSymbol3.Width = 2
               myTrackRenderer.Symbol = defaultSimpleLineSymbol3
               
               ' Apply the TrackRenderer information to the TemporalRenderer.
               myTemporalRenderer.TrackRenderer = myTrackRenderer
               
               '-------------------------------------------------------------------------------------------
               
               ' Prepare everything for setting the LatestObservationRenderer Property:
               '
               ' If you do not want the last observation point in the returned set of features to be rendered
               ' differently, then do not use the LatestObservationRenderer. If no Map3.TimeExtent is set then 
               ' the LastObservationRenderer will not be drawn.
               
               ' Define a SimpleRenderer with a SimpleMarkerSymbol to display each observation. The last 
               ' observation will be a red diamond.
               Dim mySimpleRenderer As New ESRI.ArcGIS.Client.SimpleRenderer
               Dim mySymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
               Dim defaultBrush As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 0, 0)) 'Red
               mySymbol.Color = defaultBrush
               mySymbol.Size = 10
               mySymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Diamond
               mySimpleRenderer.Symbol = mySymbol
               myTemporalRenderer.LatestObservationRenderer = mySimpleRenderer
               
               '-------------------------------------------------------------------------------------------
               
               ' Prepare everything for setting the SymbolAger Property:
               '
               ' The SymbolAger will override the default rendering provided by the ObservationRenderer as the
               ' TimeExtentProperty for the Map changes. The goal is to provide rendering to show how a phenomena 
               ' has changed over time.
               '
               ' Use a RampInterpolator as the SymbolAger. The RampInterpolator will provide an interpolation
               ' of up to three attributes for a symbol (Color, Opacity, and Size) between the TimeExtentProperty
               ' specified. You specify the From and To values for the desired attributes and the interpolation
               ' occurs automatically between them based upon the TimeExtent.
               '
               ' In this example only the Opacity attribute of the RampInterpolator is being use to show that 
               ' as hurricane Alberto ages (i.e. gets older) the visibility of the symbol at its historical 
               ' spatial location begins to fade.  Uncomment the other RampInterpolator attributes (Color and
               ' Size) to see how they impact the visulazation. Note: by ramping the Size of the of the symbol
               ' of the using a RampInterpolator overrides the effect of the ClassBreaksRenderer where the 
               ' hurricanes "WINDSPEED" was used to define the size. 
               Dim myRampInterpolator As New ESRI.ArcGIS.Client.RampInterpolator
               
               Dim myOpacityRange As New ESRI.ArcGIS.Client.OpacityRange
               myOpacityRange.From = 1 '1 = solid
               myOpacityRange.To = 0.2 '0 = invisible
               myRampInterpolator.OpacityRange = myOpacityRange
               
               'Dim myColorRange As New ESRI.ArcGIS.Client.ColorRange
               'myColorRange.From = Color.FromArgb(255, 0, 255, 0) 'Green
               'myColorRange.To = Color.FromArgb(255, 255, 0, 0) 'Red
               'myRampInterpolator.ColorRange = myColorRange
               
               'Dim mySizeRange As New ESRI.ArcGIS.Client.SizeRange
               'mySizeRange.From = 30
               'mySizeRange.To = 5
               'myRampInterpolator.SizeRange = mySizeRange
               
               ' Apply the SymbolAger information to the TemporalRenderer.
               myTemporalRenderer.SymbolAger = myRampInterpolator
               
               '-------------------------------------------------------------------------------------------
               
               ' Finally, apply the TemporalRenderer information to the FeatureLayer Renderer.
               myFeatureLayer2.Renderer = myTemporalRenderer
               
             End Sub
             </code>
             </example>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TemporalRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer"/> class.
            </summary>        
        </member>
        <member name="M:ESRI.ArcGIS.Client.TemporalRenderer.GetTrackID(ESRI.ArcGIS.Client.Graphic,ESRI.ArcGIS.Client.GraphicsLayer)">
            <summary>
            Gets the track ID.
            </summary>
            <param name="graphic">The graphic.</param>
            <param name="layer">The layer.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TemporalRenderer.GetSymbol(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Gets a symbol based on a graphic.
            </summary>
            <param name="graphic">The graphic.</param>
            <returns>Symbol</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TemporalRenderer.QueryLegendInfos(System.Action{ESRI.ArcGIS.Client.LayerLegendInfo},System.Action{System.Exception})">
            <summary>
            Queries for the legend infos of a layer using this renderer.
            </summary>
            <remarks>
            The returned result is encapsulated in a <see cref="T:ESRI.ArcGIS.Client.LayerLegendInfo"/> containing the collection of legenditems coresponding to the renderer.
            </remarks>
            <param name="callback">The method to call on completion.</param>
            <param name="errorCallback">The method to call in the event of an error.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TemporalRenderer.ObservationRenderer">
            <summary>
            Gets or sets the default set of symbology for features in a time-based layer.
            </summary>
            <remarks>
            <para>
            This default symbology of the ObservationRenderer Property can be overridden by the 
            LatestObservationRenderer and the TrackRenderer to provide additional ways to graphically represent 
            the features that are returned from a FeatureLayer.  While it is theoretically possible to have any 
            Renderer that Implements the <see cref="T:ESRI.ArcGIS.Client.IRenderer">IRenderer</see> Interface 
            be used as the ObservationRenderer Property, it typically makes sense to only use a 
            <see cref="T:ESRI.ArcGIS.Client.SimpleRenderer">SimpleRenderer</see>, 
            <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see>, or 
            <see cref="T:ESRI.ArcGIS.Client.UniqueValueRenderer">UniqueValueRenderer</see>.
            </para>
            <para>
            By using a SimpleRenderer for the ObservationRenderer property you are assured that each feature 
            returned from the service will be drawn on the map provided you have not exceeded the service limit. 
            When using a ClassBreaksRenderer as the ObservationRenderer Property, if you do not specify all of 
            the ClassBreakInfo objects to cover all of the data observation possibilities (i.e. features returned) 
            then those features for which there is no ClassBreakInfo will not be rendered (i.e. drawn) unless a 
            ClassBreaksRenderer.DefaultSymbol is set.
            </para>
            <para>
            The following screen shot depicts an image of earthquakes locations from January 15, 1970 to January 
            15, 2009 for which at least one death occurred. Only the ObservationRenderer Property is used in the 
            TemporalRenderer. The ObservationRenderer Property is based upon a ClassBreaksRender where the earthquake 
            points are drawn based upon their Magnitude. The map is centered over North and South America. The 
            yellow markers denote medium earthquakes (Magnitude 4 to 6), the black markers denote large earthquakes 
            (Magnitude 6 to 8), and the red markers denote enormous earthquakes (Magnitude 8 to 10). A default symbol 
            of a green square is provided to draw all earthquakes that are not defined by the other classes. The 
            screen shot matches the code example provided in this documentation page.
            </para>
            <para>
            <img border="0" alt="Earthquakes in the Americas." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TemporalRenderer.ObservationRenderer.png"/>
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
              
              &lt;!--
              Display the FeatureLayer in myMap2 that has a TemporalRenderer applied:
                      
              Add an ArcGISTiledMapsServiceLayer as a background to the map. The ArcGISTiledMapsServiceLayer 
              layer is first Layer added to the Map's Layers Collection and is drawn on the bottom. A FeatureLayer 
              is then added to the map and draws on top of the background layer.
                      
              Set the Map2 Extent to zoom to the North and South America.
                      
              Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
              within the set TimeExtent will then be shown. In the case of this example the TimeExtent for the 
              earthquakes is shortened to a smaller temporal window to display the various rendering effects clearly.
                      
              Manually setting the TimeExtent of the Map2. Could have bound to a TimeSlider for more interactiveness.
              --&gt;
              &lt;esri:Map Background="White" Height="375" HorizontalAlignment="Left" Margin="408,227,0,0" 
                        Name="Map2" VerticalAlignment="Top" Width="375" 
                        Extent="-166.2,-57.0,-34.36,74.47" 
                        TimeExtent="1970/01/15 00:00:00 UTC,2009/01/15 00:00:00 UTC"&gt;
              
                &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer"
                                                 Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                
                &lt;!--
                The FeatureLayer contains earthquake events data from the USGS as Markers (aka. Points). 
                            
                The Where clause for the FeatureLayer is optional. The Where clause is necessary when more that 
                500/1000 records returned. In ArcGIS Server 9.3.1 and prior, the default maximum is 500 records 
                returned per FeatureLayer. In ArcGIS Server 10 the default is 1000. This setting is configurable 
                per map service using ArcCatalog or ArcGIS Server Manager (on the Parameters tab). This Where
                clause only displays earthquakes where one or more deaths have occurred.
                            
                Specify the Outfields Property to specify which Fields are returned on which the TemporalRenderer 
                TrackIdField can use. Specifying the wildcard (*) character in the Add Property will return all 
                Fields. 
                --&gt;
                &lt;esri:FeatureLayer ID="MyFeatureLayer"
                                   Url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer/0" 
                                   Where="Num_Deaths &gt; 1" 
                                   OutFields="*"&gt;
                
                  &lt;esri:FeatureLayer.Renderer&gt;
                  
                    &lt;!--
                    Create the TemporalRenderer.  
                                    
                    The TemporalRenderer will use only the ObservationRenderer Property to create the image.
                    --&gt;
                    &lt;esri:TemporalRenderer&gt;
                      
                      &lt;!--
                      ObservationRenderer Property:
                      When using a ClassBreaksRenderer as the TemporalRenderer.ObservationRenderer 
                      Property, if you do not specify all of the ClassBreakInfo objects to cover all 
                      of the data observation possibilities (i.e. features returned) then those 
                      features for which there is no ClassBreakInfo will not be rendered (i.e. drawn) 
                      unless a ClassBreaksRenderer DefaultSymbol is specified.
                      A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning 
                      classification or grouping) to delineate the different symbology and class break 
                      information. The next three sections of code define 3 different ClassBreakInfo 
                      Classes (or groups) and their associated symbology.
                      --&gt;
                      &lt;esri:TemporalRenderer.ObservationRenderer&gt;
                        &lt;esri:ClassBreaksRenderer Field="Magnitude"&gt;
                        
                          &lt;!--
                          Define a default SimpleMarkerSymbol for a 'catch all' to draw the features 
                          for which no ClassBreaksInfo has been defined. In this example, only 
                          earthquakes with a Magnitude of 3 and greater have a defined ClassBreakInfo 
                          category and yet all earthquakes with one or more deaths will be returned. 
                          Defining a default SimpleMarkerSymbol will provide symbology for those 
                          features that have a magnitude less that 3. If a ClassBreaksRenderer 
                          DefaultSymbol was not defined these features would not be drawn on the Map.
                          --&gt;
                          &lt;esri:ClassBreaksRenderer.DefaultSymbol&gt;
                            &lt;esri:SimpleMarkerSymbol Color="Green" Size="10" Style="Square"/&gt;
                          &lt;/esri:ClassBreaksRenderer.DefaultSymbol&gt;
                            
                          &lt;!--
                          A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning 
                          classification or grouping) to delineate the different symbology and class break 
                          information. The next three sections of code define 3 different ClassBreakInfo 
                          Classes (or groups) and their associated symbology.
                          --&gt;
                            
                          &lt;!--
                          Group #1: Create a ClassBreakInfo object as a container of information for each 
                          group. Define the minimum and maximum values for the numeric grouping of the 
                          Field defined as the ClassBreaksRenderer Field. Add a description and label.
                          --&gt;
                          &lt;esri:ClassBreakInfo MinimumValue="4" MaximumValue="6"
                                               Description="Small yellow circles" Label="4 to 6 Magnitude"&gt;
                            &lt;esri:SimpleMarkerSymbol Color="Yellow" Size="5"/&gt;
                          &lt;/esri:ClassBreakInfo&gt;
                            
                          &lt;!--
                          Group #2: Create a ClassBreakInfo object as a container of information for each 
                          group. Define the minimum and maximum values for the numeric grouping of the 
                          Field defined as the ClassBreaksRenderer Field. Add a description and label.
                          --&gt;
                          &lt;esri:ClassBreakInfo MinimumValue="6" MaximumValue="8"
                                               Description="Medium black circles" Label="6 to 8 Magnitude"&gt;
                            &lt;esri:SimpleMarkerSymbol Color="Black" Size="7" /&gt;
                          &lt;/esri:ClassBreakInfo&gt;
                            
                          &lt;!--
                          Group #3: Create a ClassBreakInfo object as a container of information for each 
                          group. Define the minimum and maximum values for the numeric grouping of the 
                          Field defined as the ClassBreaksRenderer Field. Add a description and label.
                          --&gt;
                          &lt;esri:ClassBreakInfo MinimumValue="8" MaximumValue="10"
                                               Description="Large red circles" Label="8 to 10 Magnitude"&gt;
                            &lt;esri:SimpleMarkerSymbol Color="Red" Size="9" /&gt;
                          &lt;/esri:ClassBreakInfo&gt;
                          
                        &lt;/esri:ClassBreaksRenderer&gt;
                        
                      &lt;/esri:TemporalRenderer.ObservationRenderer&gt;
                      
                    &lt;/esri:TemporalRenderer&gt;
                    
                  &lt;/esri:FeatureLayer.Renderer&gt;
                  
                &lt;/esri:FeatureLayer&gt;
                
              &lt;/esri:Map&gt;
              
            &lt;/Grid&gt;
            </code>
                
            <code title="Example CS1" description="" lang="CS">
            public void DrawEarthquakes(ESRI.ArcGIS.Client.Map myMap2)
            {
            
              // Display the FeatureLayer in myMap2 that has a TemporalRenderer applied
              // ======================================================================
              
              // Clear the Layers in the Map's for runs of the function.
              myMap2.Layers.Clear();
              
              // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
              // Layers Collection is on the bottom and the other Layer is added on the top.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              myMap2.Layers.Add(myArcGISTiledMapServiceLayer2);
              
              // Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
              ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer2 = new ESRI.ArcGIS.Client.FeatureLayer();
              
              // This FeatureLayer contains historical earthquake data as Markers (aka. Points).
              myFeatureLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer/0";
              
              // The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
              // 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
              // default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
              // (on the Parameters tab). 
              myFeatureLayer2.Where = "Num_Deaths &gt; 1"; //Only display earthquakes events for which 1 or more deaths have occurred.
              
              // Specify the Outfields Property to specify which Fields are returned on which the 
              // ClassBreaksRenderer.Field can use. Specifying the wildcard (*) character in the Add Property 
              // will return all Fields. 
              myFeatureLayer2.OutFields.Add("*");
              
              // Further restrict the earthquake data to just the temporal window specified.
              ESRI.ArcGIS.Client.TimeExtent myTimeExtent = new ESRI.ArcGIS.Client.TimeExtent();
              System.DateTime dateStart = DateTime.Parse("1/15/1970");
              myTimeExtent.Start = dateStart;
              System.DateTime dateEnd = DateTime.Parse("1/15/2009");
              myTimeExtent.End = dateEnd;
              
              // Manually setting the TimeExtent of the myMap2. Could have used a TimeSlider for more inter-activeness.
              myMap2.TimeExtent = myTimeExtent;
              
              // Create the TemporalRenderer object. Only the ObservationRenderer will be used to create the image.
              ESRI.ArcGIS.Client.TemporalRenderer myTemporalRenderer = new ESRI.ArcGIS.Client.TemporalRenderer();
              
              // When using a ClassBreaksRenderer as the TemporalRenderer.ObservationRenderer Property, if you do not
              // specify all of the ClassBreakInfo objects to cover all of the data observation possibilities (i.e. 
              // features returned) then those features for which there is no ClassBreakInfo will not be 
              // rendered (i.e. drawn) unless you set a Default symbol.  
              //
              // Define a default SimpleMarkerSymbol for a 'catch all' to draw the features for which no ClassBreaksInfo 
              // has been defined. In this example, only earthquakes with a Magnitude of 3 and greater have a defined 
              // ClassBreakInfo category and yet all earthquakes with one or more deaths will be returned. Defining a 
              // default SimpleMarkerSymbol will provide symbology for those features that have a magnitude less that 3. 
              // If a ClassBreaksRenderer.DefaultSymbol was not defined these features would not be drawn on the Map.
              //
              // A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning classification or 
              // grouping) to delineate the different symbology and class break information. The next three sections 
              // of code define 3 different ClassBreakInfo Classes (or groups) and their associated symbology.
              ESRI.ArcGIS.Client.ClassBreaksRenderer myClassBreaksRenderer = new ESRI.ArcGIS.Client.ClassBreaksRenderer();
              myClassBreaksRenderer.Field = "Magnitude"; // Requires a numeric Field
              
              // Define the Default symbol
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol myDefaultMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              System.Windows.Media.SolidColorBrush myDefaultBrush = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 0)); //Green
              myDefaultMarkerSymbol.Color = myDefaultBrush;
              myDefaultMarkerSymbol.Size = 10;
              myDefaultMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square;
              myClassBreaksRenderer.DefaultSymbol = myDefaultMarkerSymbol;
              
              
              // Group #1
              // ========
              // Create a ClassBreakInfo object as a container of information for each group. 
              ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo1 = new ESRI.ArcGIS.Client.ClassBreakInfo();
              
              // Define the minimum and maximum values for the numeric grouping of the Field defined as the
              // ClassBreaksRenderer.Field.
              myClassBreakInfo1.MinimumValue = 0;
              myClassBreakInfo1.MaximumValue = 6;
              
              // Add an informational description and label for the group.
              myClassBreakInfo1.Description = "Small yellow circles";
              myClassBreakInfo1.Label = "0 to 6 Magnitude";
              
              // Each ClassBreakInfo grouping needs a symbol to display
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol1 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              System.Windows.Media.SolidColorBrush myBrush1 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)); //Yellow
              mySimpleMarkerSymbol1.Color = myBrush1;
              mySimpleMarkerSymbol1.Size = 5;
              myClassBreakInfo1.Symbol = mySimpleMarkerSymbol1;
              
              // Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
              myClassBreaksRenderer.Classes.Add(myClassBreakInfo1);
              
              
              // Group #2
              // ========
              // Create a ClassBreakInfo object as a container of information for each group. 
              ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo2 = new ESRI.ArcGIS.Client.ClassBreakInfo();
              
              // Define the minimum and maximum values for the numeric grouping of the Field defined as the
              // ClassBreaksRenderer.Field.
              myClassBreakInfo2.MinimumValue = 6;
              myClassBreakInfo2.MaximumValue = 8;
              
              // Add an informational description and label for the group.
              myClassBreakInfo2.Description = "Medium black circles";
              myClassBreakInfo2.Label = "6 to 8 Magnitude";
              
              // Each ClassBreakInfo grouping needs a symbol to display
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol2 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              System.Windows.Media.SolidColorBrush myBrush2 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); // Black
              mySimpleMarkerSymbol2.Color = myBrush2;
              mySimpleMarkerSymbol2.Size = 7;
              myClassBreakInfo2.Symbol = mySimpleMarkerSymbol2;
              
              // Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
              myClassBreaksRenderer.Classes.Add(myClassBreakInfo2);
              
              
              // Group #3
              // ========
              // Create a ClassBreakInfo object as a container of information for each group. 
              ESRI.ArcGIS.Client.ClassBreakInfo myClassBreakInfo3 = new ESRI.ArcGIS.Client.ClassBreakInfo();
              
              // Define the minimum and maximum values for the numeric grouping of the Field defined as the
              // ClassBreaksRenderer.Field.
              myClassBreakInfo3.MinimumValue = 8;
              myClassBreakInfo3.MaximumValue = 10;
              
              // Add an informational description and label for the group.
              myClassBreakInfo3.Description = "Large red circles";
              myClassBreakInfo3.Label = "8 to 10 Magnitude";
              
              // Each ClassBreakInfo grouping needs a symbol to display
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySimpleMarkerSymbol3 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              System.Windows.Media.SolidColorBrush myBrush3 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 0, 0)); // Red
              mySimpleMarkerSymbol3.Color = myBrush3;
              mySimpleMarkerSymbol3.Size = 9;
              myClassBreakInfo3.Symbol = mySimpleMarkerSymbol3;
              
              // Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
              myClassBreaksRenderer.Classes.Add(myClassBreakInfo3);
              
              
              // Now that all of the ClassBreakInfo information has been added to the ClassBreaksRenderer object, 
              // associate the ClassBreaksRenderer with the TemporalRenderer.ObservationRenderer Property.
              myTemporalRenderer.ObservationRenderer = myClassBreaksRenderer;
              
              // Apply the TemporalRenderer as the Renderer of the FeatureLayer.
              myFeatureLayer2.Renderer = myTemporalRenderer;
              
              // Add the myFeatureLayer2 to the Map2 Layer Collection. 
              Map2.Layers.Add(myFeatureLayer2);
              
              // Zoom to the North and South America.
              ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope2 = new ESRI.ArcGIS.Client.Geometry.Envelope();
              myEnvelope2.XMin = -166.2;
              myEnvelope2.YMin = -57.0;
              myEnvelope2.XMax = -34.36;
              myEnvelope2.YMax = 74.47;
              myMap2.Extent = myEnvelope2;
              
            }
            </code>
                
            <code title="Example VB1" description="" lang="VB.NET">
            Public Sub DrawEarthquakes(ByVal myMap2 As ESRI.ArcGIS.Client.Map)
            
              ' Display the FeatureLayer in myMap2 that has a TemporalRenderer applied
              ' ======================================================================
              
              ' Clear the Layers in the Map's for runs of the function.
              myMap2.Layers.Clear()
               
              ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
              ' Layers Collection is on the bottom and the other Layer is added on the top.
              Dim myArcGISTiledMapServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              myMap2.Layers.Add(myArcGISTiledMapServiceLayer2)
               
              ' Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
              Dim myFeatureLayer2 As New ESRI.ArcGIS.Client.FeatureLayer
               
              ' This FeatureLayer contains historical earthquake data as Markers (aka. Points).
              myFeatureLayer2.Url = "http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Earthquakes/Since_1970/MapServer/0"
               
              ' The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
              ' 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
              ' default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
              ' (on the Parameters tab). 
              myFeatureLayer2.Where = "Num_Deaths &gt; 1" 'Only display earthquakes events for which 1 or more deaths have occurred.
               
              ' Specify the Outfields Property to specify which Fields are returned on which the 
              ' ClassBreaksRenderer.Field can use. Specifying the wildcard (*) character in the Add Property 
              ' will return all Fields. 
              myFeatureLayer2.OutFields.Add("*")
               
              ' Further restrict the earthquake data to just the temporal window specified.
              Dim myTimeExtent As New ESRI.ArcGIS.Client.TimeExtent
              Dim dateStart As Date = #1/15/1970#
              myTimeExtent.Start = dateStart
              Dim dateEnd As Date = #1/15/2009#
              myTimeExtent.End = dateEnd
               
              ' Manually setting the TimeExtent of the myMap2. Could have used a TimeSlider for more inter-activeness.
              myMap2.TimeExtent = myTimeExtent
               
              ' Create the TemporalRenderer object. Only the ObservationRenderer will be used to create the image.
              Dim myTemporalRenderer As New ESRI.ArcGIS.Client.TemporalRenderer
               
              ' When using a ClassBreaksRenderer as the TemporalRenderer.ObservationRenderer Property, if you do not
              ' specify all of the ClassBreakInfo objects to cover all of the data observation possibilities (i.e. 
              ' features returned) then those features for which there is no ClassBreakInfo will not be 
              ' rendered (i.e. drawn) unless you set a Default symbol.  
              '
              ' Define a default SimpleMarkerSymbol for a 'catch all' to draw the features for which no ClassBreaksInfo 
              ' has been defined. In this example, only earthquakes with a Magnitude of 3 and greater have a defined 
              ' ClassBreakInfo category and yet all earthquakes with one or more deaths will be returned. Defining a 
              ' default SimpleMarkerSymbol will provide symbology for those features that have a magnitude less that 3. 
              ' If a ClassBreaksRenderer.DefaultSymbol was not defined these features would not be drawn on the Map.
              '
              ' A ClassBreaksRenderer should have 2 or more ClassBreakInfo Classes (meaning classification or 
              ' grouping) to delineate the different symbology and class break information. The next three sections 
              ' of code define 3 different ClassBreakInfo Classes (or groups) and their associated symbology.
               
              Dim myClassBreaksRenderer As New ESRI.ArcGIS.Client.ClassBreaksRenderer
              myClassBreaksRenderer.Field = "Magnitude" ' Requires a numeric Field
               
              ' Define the Default symbol
              Dim myDefaultMarkerSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              Dim myDefaultBrush As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 0)) 'Green
              myDefaultMarkerSymbol.Color = myDefaultBrush
              myDefaultMarkerSymbol.Size = 10
              myDefaultMarkerSymbol.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square
              myClassBreaksRenderer.DefaultSymbol = myDefaultMarkerSymbol
               
              ' Group #1
              ' ========
              ' Create a ClassBreakInfo object as a container of information for each group. 
              Dim myClassBreakInfo1 As New ESRI.ArcGIS.Client.ClassBreakInfo
               
              ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
              ' ClassBreaksRenderer.Field.
              myClassBreakInfo1.MinimumValue = 0
              myClassBreakInfo1.MaximumValue = 6
               
              ' Add an informational description and label for the group.
              myClassBreakInfo1.Description = "Small yellow circles"
              myClassBreakInfo1.Label = "0 to 6 Magnitude"
               
              ' Each ClassBreakInfo grouping needs a symbol to display
              Dim mySimpleMarkerSymbol1 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              Dim myBrush1 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)) 'Yellow
              mySimpleMarkerSymbol1.Color = myBrush1
              mySimpleMarkerSymbol1.Size = 5
              myClassBreakInfo1.Symbol = mySimpleMarkerSymbol1
               
              ' Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
              myClassBreaksRenderer.Classes.Add(myClassBreakInfo1)
               
               
              ' Group #2
              ' ========
              ' Create a ClassBreakInfo object as a container of information for each group. 
              Dim myClassBreakInfo2 As New ESRI.ArcGIS.Client.ClassBreakInfo
               
              ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
              ' ClassBreaksRenderer.Field.
              myClassBreakInfo2.MinimumValue = 6
              myClassBreakInfo2.MaximumValue = 8
               
              ' Add an informational description and label for the group.
              myClassBreakInfo2.Description = "Medium black circles"
              myClassBreakInfo2.Label = "6 to 8 Magnitude"
               
              ' Each ClassBreakInfo grouping needs a symbol to display
              Dim mySimpleMarkerSymbol2 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              Dim myBrush2 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) ' Black
              mySimpleMarkerSymbol2.Color = myBrush2
              mySimpleMarkerSymbol2.Size = 7
              myClassBreakInfo2.Symbol = mySimpleMarkerSymbol2
               
              ' Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
              myClassBreaksRenderer.Classes.Add(myClassBreakInfo2)
               
               
              ' Group #3
              ' ========
              ' Create a ClassBreakInfo object as a container of information for each group. 
              Dim myClassBreakInfo3 As New ESRI.ArcGIS.Client.ClassBreakInfo
               
              ' Define the minimum and maximum values for the numeric grouping of the Field defined as the
              ' ClassBreaksRenderer.Field.
              myClassBreakInfo3.MinimumValue = 8
              myClassBreakInfo3.MaximumValue = 10
               
              ' Add an informational description and label for the group.
              myClassBreakInfo3.Description = "Large red circles"
              myClassBreakInfo3.Label = "8 to 10 Magnitude"
               
              ' Each ClassBreakInfo grouping needs a symbol to display
              Dim mySimpleMarkerSymbol3 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              Dim myBrush3 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 0, 0)) ' Red
              mySimpleMarkerSymbol3.Color = myBrush3
              mySimpleMarkerSymbol3.Size = 9
              myClassBreakInfo3.Symbol = mySimpleMarkerSymbol3
               
              ' Add the ClassBreaksInfo information to the Classes (grouping) of the ClassBreaksRenderer
              myClassBreaksRenderer.Classes.Add(myClassBreakInfo3)
               
               
              ' Now that all of the ClassBreakInfo information has been added to the ClassBreaksRenderer object, 
              ' associate the ClassBreaksRenderer with the TemporalRenderer.ObservationRenderer Property.
              myTemporalRenderer.ObservationRenderer = myClassBreaksRenderer
               
              ' Apply the TemporalRenderer as the Renderer of the FeatureLayer.
              myFeatureLayer2.Renderer = myTemporalRenderer
               
              ' Add the myFeatureLayer2 to the Map2 Layer Collection. 
              Map2.Layers.Add(myFeatureLayer2)
               
              ' Zoom to the North and South America.
              Dim myEnvelope2 As New ESRI.ArcGIS.Client.Geometry.Envelope
              myEnvelope2.XMin = -166.2
              myEnvelope2.YMin = -57.0
              myEnvelope2.XMax = -34.36
              myEnvelope2.YMax = 74.47
              myMap2.Extent = myEnvelope2
            
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TemporalRenderer.LatestObservationRenderer">
            <summary>
            Gets or sets the default set of symbology for the last time-based feature returned per 
            <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.TrackIdField">TrackIdField</see>. If no TrackIdField 
            has been specified then just the last observation that is returned from the 
            <see cref="T:ESRI.ArcGIS.Client.FeatureLayer">FeatureLayer</see> will be symbolized.
            </summary>
            <remarks>
            <para>
            Whatever symbology properties that have been set (for example: a Symbol’s Color, Size, and Style) 
            for the LatestObservationRenderer will override what was set for the 
            <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.ObservationRenderer">ObservationRenderer</see>. While 
            it is theoretically possible to have any Renderer that Implements the 
            <see cref="T:ESRI.ArcGIS.Client.IRenderer">IRenderer</see> Interface be used as the 
            LastObservationRenderer Property, it typically makes sense to only use a 
            <see cref="T:ESRI.ArcGIS.Client.SimpleRenderer">SimpleRenderer</see>, 
            <see cref="T:ESRI.ArcGIS.Client.ClassBreaksRenderer">ClassBreaksRenderer</see>, or 
            <see cref="T:ESRI.ArcGIS.Client.UniqueValueRenderer">UniqueValueRenderer</see>.
            </para>
            <para>
            It is not mandatory to have the LastObservationRenderer set when using a TemporalRenderer. If no 
            LastObservatonRenderer is supplied then whatever is the set at the ObservationRenderer will display 
            at the last feature provided by the service.
            </para>
            <para>
            In order for the LastObservationRenderer to be displayed on the map, it is required that the 
            <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> Property be 
            specified. If the Map.TimeExtent Property is not specified, whatever is set for the ObservationRenderer 
            will be used for the last feature provided by the service.
            </para>
            <para>
            The following screen shot depicts an image of hurricane Alberto moving from West to East across the 
            Atlantic Ocean. The red triangles are defined as the features drawn by the ObservationRenderer. The 
            yellow polyline is defined as the path movement between the time-based features drawn by the 
            TrackRenderer. The solid black circle is the last known point (as of this image’s rendering) drawn by 
            the LastObservationRenderer. The screen shot matches the code example provided in this documentation page.
            </para>
            <para>
            <img border="0" alt="Hurricane Alberto in the Atlantic Ocean." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TemporalRenderer.LastObservationRenderer.png"/>
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
            
              &lt;!--
              Display the FeatureLayer in myMap2 that has a TemporalRenderer applied:
                      
              Add an ArcGISTiledMapsServiceLayer as a background to the map. The ArcGISTiledMapsServiceLayer 
              layer is first Layer added to the Map's Layers Collection and is drawn on the bottom. A FeatureLayer 
              is then added to the map and draws on top of the background layer.
                      
              Set the Map2 Extent to zoom to the middle of the Atlantic ocean.
                      
              Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
              within the set TimeExtent will then be shown. If no Map TimeExtent is set then only the 
              ObservationRenderer is in effect. If a Map TimeExtent is set then the ObservationRenderer and the 
              LastObservationRenderer (and TrackRenderer if defined) are in effect. In the case of this example
              the TimeExtent for the hurricane Alberto is shortened to a small temporal window to display the 
              various rendering effects clearly.
                      
              Manually setting the TimeExtent of the Map2. Could have bound to a TimeSlider for more interactiveness.
              --&gt;
              &lt;esri:Map Background="White" Height="375" HorizontalAlignment="Left" Margin="408,227,0,0" 
                        Name="Map2" VerticalAlignment="Top" Width="375" 
                        Extent="-77.69,-13.88,-11.77,52.03" 
                        TimeExtent="2000/08/03 00:00:01 UTC,2000/08/08 06:00:01 UTC"&gt;
                          
                &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer"
                                                 Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                
                &lt;!--
                The FeatureLayer contains Hurricane data from NOAA as Markers (aka. Points). 
                            
                The Where clause for the FeatureLayer is optional. The Where clause is necessary when more that 
                500/1000 records returned. In ArcGIS Server 9.3.1 and prior, the default maximum is 500 records 
                returned per FeatureLayer. In ArcGIS Server 10 the default is 1000. This setting is configurable 
                per map service using ArcCatalog or ArcGIS Server Manager (on the Parameters tab). This Where
                clause only displays hurricane data for Alberto.
                            
                Specify the Outfields Property to specify which Fields are returned on which the TemporalRenderer 
                TrackIdField can use. Specifying the wildcard (*) character in the Add Property will return all 
                Fields. 
                --&gt;
                &lt;esri:FeatureLayer ID="MyFeatureLayer"
                                   Url="http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0" 
                                   Where="EVENTID = 'Alberto'" 
                                   OutFields="*"&gt;
                  
                  &lt;esri:FeatureLayer.Renderer&gt;
                    
                    &lt;!--
                    Create the TemporalRenderer. Specify which TrackIdField (via its string name) the 
                    TemporalRenderer will use for breaking the rendering of the polyline event Symbols into 
                    groups. 
                                    
                    The TemporalRenderer will use three different Properties (ObservationRenderer, 
                    LatestObservationRenderer, and TrackRenderer) to create the image.
                                        
                    Setting the TrackIdField draws polylines in time order for a group of attributes. If 
                    the TrackIdField property is not set and the TrackRenderer is used, then all point 
                    observations will have a polyline connecting them in order of time. This becomes messy 
                    if multiple events are occurring at the same time (i.e. hurricanes) and the linework 
                    would then look like a spider diagram rather than discreet tracks with one per event. 
                    In this example to speed up drawing time and limit the amount of data that is returned, 
                    the FeatureLayer Where clause was used to restrict only one hurricane (or event) from 
                    displaying. If the FeatureLayer Where clause was commented out, multiple hurricanes 
                    would be displayed. Having the TrackIdField becomes key to keeping each event separate.
                    --&gt;
                    &lt;esri:TemporalRenderer TrackIdField="EVENTID"&gt;
                                            
                      &lt;!--
                      ObservationRenderer Property:
                      All features (or observations) are drawn using the ObservationRenderer unless they 
                      are overridden by another renderer (such as the LastObservationRenderer).
                      
                      Define a SimpleRenderer with a SimpleMarkerSymbol to display each observation. Each 
                      observation will be a small red triangle.
                      --&gt;
                      &lt;esri:TemporalRenderer.ObservationRenderer&gt;
                        &lt;esri:SimpleRenderer&gt;
                          &lt;esri:SimpleMarkerSymbol Color="Red" Size="5" Style="Triangle"/&gt;
                        &lt;/esri:SimpleRenderer&gt;
                      &lt;/esri:TemporalRenderer.ObservationRenderer&gt;
                                              
                      &lt;!--
                      LatestObservationRenderer Property:
                      If you do not want the last observation point in the returned set of features to 
                      be rendered differently then do not use the LatestObservationRenderer. If no 
                      Map2 TimeExtent is set then  the LastObservationRenderer will not be drawn.
                      
                      Define a SimpleRenderer with a SimpleMarkerSymbol to display each observation. The 
                      last observation will be a big black dot.
                      --&gt;
                      &lt;esri:TemporalRenderer.LatestObservationRenderer&gt;
                        &lt;esri:SimpleRenderer&gt;
                          &lt;esri:SimpleMarkerSymbol Color="Black" Size="10"/&gt;
                        &lt;/esri:SimpleRenderer&gt;
                      &lt;/esri:TemporalRenderer.LatestObservationRenderer&gt;
                      
                      &lt;!--
                      TrackRenderer Property:
                      Define a SimpleRenderer with a SimpleLineSymbol to display each tracked event. 
                      The event will be a yellow line connecting the time-based observations.
                      --&gt;
                      &lt;esri:TemporalRenderer.TrackRenderer&gt;
                        &lt;esri:SimpleRenderer&gt;
                          &lt;esri:SimpleLineSymbol Color="Yellow" Width="1"/&gt;
                        &lt;/esri:SimpleRenderer&gt;
                      &lt;/esri:TemporalRenderer.TrackRenderer&gt;
                      
                    &lt;/esri:TemporalRenderer&gt;
                                
                  &lt;/esri:FeatureLayer.Renderer&gt;
                  
                &lt;/esri:FeatureLayer&gt;
                
              &lt;/esri:Map&gt;
              
            &lt;/Grid&gt;
            </code>
                
            <code title="Example CS1" description="" lang="CS">
            public void DrawHurricaneAlberto(ESRI.ArcGIS.Client.Map myMap2)
            {
              
              // Display the FeatureLayer in myMap2 that has a TemporalRenderer applied
              // ======================================================================
              
              // Clear out any exiting layers
              myMap2.Layers.Clear();
              
              // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
              // Layers Collection is on the bottom and the other Layer is added on the top.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              myMap2.Layers.Add(myArcGISTiledMapServiceLayer2);
              
              // Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
              ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer2 = new ESRI.ArcGIS.Client.FeatureLayer();
              
              // This FeatureLayer contains hurricane data from NOAA. 
              myFeatureLayer2.Url = "http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0";
              
              // The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
              // 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
              // default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
              // (on the Parameters tab). 
              myFeatureLayer2.Where = "EVENTID = 'Alberto'"; //Only display hurricane data for Alberto.
              
              // Specify the Outfields Property to specify which Fields are returned on which the 
              // TemporalRenderer.TrackIdField can use. Specifying the wildcard (*) character in the Add Property 
              // will return all Fields. 
              myFeatureLayer2.OutFields.Add("*");
              
              // Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
              // within the set TimeExtent will then be shown. If no Map.TimeExtent is set then only the 
              // ObservationRenderer is in effect. If a Map.TimeExtent is set then the ObservationRenderer and the 
              // LastObservationRenderer (and TrackRenderer if defined) are in effect. In the case of this example
              // the TimeExtent for the hurricane Alberto is shortened to a small temporal window to display the 
              // various rendering effects clearly.
              ESRI.ArcGIS.Client.TimeExtent myTimeExtent = new ESRI.ArcGIS.Client.TimeExtent();
              System.DateTime date1 = DateTime.Parse("8/3/2000 12:00:01 AM"); //Alberto Start
              myTimeExtent.Start = date1;
              System.DateTime date2 = DateTime.Parse("8/8/2000 6:00:01 AM"); //Alberto End
              myTimeExtent.End = date2;
              
              // Manually setting the TimeExtent of the myMap2. Could have used a TimeSlider for more interactiveness.
              myMap2.TimeExtent = myTimeExtent;
              
              // Create the TemporalRenderer object. It will use three different Properties (ObservationRenderer, 
              // LatestObservationRenderer, and TrackRenderer) to create the image.
              ESRI.ArcGIS.Client.TemporalRenderer myTemporalRenderer = new ESRI.ArcGIS.Client.TemporalRenderer();
              
              
              // ObservationRenderer Property:
              // -----------------------------
              // All features (or observations) are drawn using the ObservationRenderer unless they are
              // overridden by another renderer (such as the LastObservationRenderer).
              
              // Define a SimpleRenderer with a SimpleMarkerSymbol to display each observation. Each observation
              // will be a small red triangle.
              ESRI.ArcGIS.Client.SimpleRenderer mySimpleRenderer2 = new ESRI.ArcGIS.Client.SimpleRenderer();
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySymbol2 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              System.Windows.Media.SolidColorBrush defaultBrush2 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 0, 0)); //Red
              mySymbol2.Color = defaultBrush2;
              mySymbol2.Size = 5;
              mySymbol2.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Triangle;
              mySimpleRenderer2.Symbol = mySymbol2;
              myTemporalRenderer.ObservationRenderer = mySimpleRenderer2;
              
              
              // LatestObservationRenderer Property:
              // ----------------------------------
              // If you do not want the last observation point in the returned set of features to be rendered
              // differently then do not use the LatestObservationRenderer. If no myMap2.TimeExtent is set then 
              // the LastObservationRenderer will not be drawn.
              
              // Define a SimpleRenderer with a SimpleMarkerSymbol to display each observation. The last 
              // observation will be a big black dot.
              ESRI.ArcGIS.Client.SimpleRenderer mySimpleRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol mySymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              System.Windows.Media.SolidColorBrush defaultBrush = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); //Black
              mySymbol.Color = defaultBrush;
              mySymbol.Size = 10;
              mySimpleRenderer.Symbol = mySymbol;
              myTemporalRenderer.LatestObservationRenderer = mySimpleRenderer;
              
              
              // TrackRenderer Property:
              // -----------------------
              // Setting the TrackIdField draws polylines in time order for a group of attributes. If the 
              // TrackIdField property is not set and the TrackRenderer is used, then all point observations 
              // will have a polyline connecting them in order of time. This becomes messy if multiple
              // events are occurring at the same time (i.e. hurricanes) and the linework would then look like 
              // a spider diagram rather than discreet tracks with one per event. In this example to speed up
              // drawing time and limit the amount of data that is returned, the FeatureLayer.Where clause was 
              // used to restrict only one hurricane (or event) from displaying. If the FeatureLayer.Where 
              // clause was commented out, multiple hurricanes would be displayed -- having the TrackIdField 
              // becomes key to keeping each event separate.
              myTemporalRenderer.TrackIdField = "EVENTID";
              
              // Define a SimpleRenderer with a SimpleLineSymbol to display each tracked event. The event 
              // will be a yellow line connecting the time-based observations.
              ESRI.ArcGIS.Client.SimpleRenderer myTrackRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
              ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol defaultSimpleLineSymbol3 = new ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol();
              System.Windows.Media.SolidColorBrush defaultBrush3 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)); //Yellow
              defaultSimpleLineSymbol3.Color = defaultBrush3;
              defaultSimpleLineSymbol3.Width = 1;
              myTrackRenderer.Symbol = defaultSimpleLineSymbol3;
              myTemporalRenderer.TrackRenderer = myTrackRenderer;
              
              
              // Apply the TemporalRenderer as the Renderer of the FeatureLayer.
              myFeatureLayer2.Renderer = myTemporalRenderer;
              
              // Add the myFeatureLayer2 to the myMap2 Layer Collection. 
              Map2.Layers.Add(myFeatureLayer2);
              
              
              // Zoom to the middle of the Atlantic ocean.
              ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope2 = new ESRI.ArcGIS.Client.Geometry.Envelope();
              myEnvelope2.XMin = -77.69;
              myEnvelope2.YMin = -13.88;
              myEnvelope2.XMax = -11.77;
              myEnvelope2.YMax = 52.03;
              myMap2.Extent = myEnvelope2;
              
            }
            </code>
                
            <code title="Example VB1" description="" lang="VB.NET">
            Public Sub DrawHurricaneAlberto(ByVal myMap2 As ESRI.ArcGIS.Client.Map)
              
              ' Display the FeatureLayer in myMap2 that has a TemporalRenderer applied
              ' ======================================================================
              
              ' Clear out any exiting layers
              myMap2.Layers.Clear()
              
              ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
              ' Layers Collection is on the bottom and the other Layer is added on the top.
              Dim myArcGISTiledMapServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              myMap2.Layers.Add(myArcGISTiledMapServiceLayer2)
              
              ' Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
              Dim myFeatureLayer2 As New ESRI.ArcGIS.Client.FeatureLayer
              
              ' This FeatureLayer contains hurricane data from NOAA. 
              myFeatureLayer2.Url = "http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0"
              
              ' The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
              ' 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
              ' default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
              ' (on the Parameters tab). 
              myFeatureLayer2.Where = "EVENTID = 'Alberto'" 'Only display hurricane data for Alberto.
              
              ' Specify the Outfields Property to specify which Fields are returned on which the 
              ' TemporalRenderer.TrackIdField can use. Specifying the wildcard (*) character in the Add Property 
              ' will return all Fields. 
              myFeatureLayer2.OutFields.Add("*")
              
              ' Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
              ' within the set TimeExtent will then be shown. If no Map.TimeExtent is set then only the 
              ' ObservationRenderer is in effect. If a Map.TimeExtent is set then the ObservationRenderer and the 
              ' LastObservationRenderer (and TrackRenderer if defined) are in effect. In the case of this example
              ' the TimeExtent for the hurricane Alberto is shortened to a small temporal window to display the 
              ' various rendering effects clearly.
              Dim myTimeExtent As New ESRI.ArcGIS.Client.TimeExtent
              Dim date1 As Date = #8/3/2000 12:00:01 AM# 'Alberto Start
              myTimeExtent.Start = date1
              Dim date2 As Date = #8/8/2000 6:00:01 AM# 'Alberto End
              myTimeExtent.End = date2
              
              ' Manually setting the TimeExtent of the myMap2. Could have used a TimeSlider for more interactiveness.
              myMap2.TimeExtent = myTimeExtent
              
              ' Create the TemporalRenderer object. It will use three different Properties (ObservationRenderer, 
              ' LatestObservationRenderer, and TrackRenderer) to create the image.
              Dim myTemporalRenderer As New ESRI.ArcGIS.Client.TemporalRenderer
              
              
              ' ObservationRenderer Property:
              ' -----------------------------
              ' All features (or observations) are drawn using the ObservationRenderer unless they are
              ' overridden by another renderer (such as the LastObservationRenderer).
              
              ' Define a SimpleRenderer with a SimpleMarkerSymbol to display each observation. Each observation
              ' will be a small red triangle.
              Dim mySimpleRenderer2 As New ESRI.ArcGIS.Client.SimpleRenderer
              Dim mySymbol2 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              Dim defaultBrush2 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 0, 0)) 'Red
              mySymbol2.Color = defaultBrush2
              mySymbol2.Size = 5
              mySymbol2.Style = ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Triangle
              mySimpleRenderer2.Symbol = mySymbol2
              myTemporalRenderer.ObservationRenderer = mySimpleRenderer2
              
              
              ' LatestObservationRenderer Property:
              ' ----------------------------------
              ' If you do not want the last observation point in the returned set of features to be rendered
              ' differently then do not use the LatestObservationRenderer. If no myMap2.TimeExtent is set then 
              ' the LastObservationRenderer will not be drawn.
              
              ' Define a SimpleRenderer with a SimpleMarkerSymbol to display each observation. The last 
              ' observation will be a big black dot.
              Dim mySimpleRenderer As New ESRI.ArcGIS.Client.SimpleRenderer
              Dim mySymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              Dim defaultBrush As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) 'Black
              mySymbol.Color = defaultBrush
              mySymbol.Size = 10
              mySimpleRenderer.Symbol = mySymbol
              myTemporalRenderer.LatestObservationRenderer = mySimpleRenderer
              
              
              ' TrackRenderer Property:
              ' -----------------------
              ' Setting the TrackIdField draws polylines in time order for a group of attributes. If the 
              ' TrackIdField property is not set and the TrackRenderer is used, then all point observations 
              ' will have a polyline connecting them in order of time. This becomes messy if multiple
              ' events are occurring at the same time (i.e. hurricanes) and the linework would then look like 
              ' a spider diagram rather than discreet tracks with one per event. In this example to speed up
              ' drawing time and limit the amount of data that is returned, the FeatureLayer.Where clause was 
              ' used to restrict only one hurricane (or event) from displaying. If the FeatureLayer.Where 
              ' clause was commented out, multiple hurricanes would be displayed -- having the TrackIdField 
              ' becomes key to keeping each event separate.
              myTemporalRenderer.TrackIdField = "EVENTID"
              
              ' Define a SimpleRenderer with a SimpleLineSymbol to display each tracked event. The event 
              ' will be a yellow line connecting the time-based observations.
              Dim myTrackRenderer As New ESRI.ArcGIS.Client.SimpleRenderer
              Dim defaultSimpleLineSymbol3 As New ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol
              Dim defaultBrush3 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 0)) 'Yellow
              defaultSimpleLineSymbol3.Color = defaultBrush3
              defaultSimpleLineSymbol3.Width = 1
              myTrackRenderer.Symbol = defaultSimpleLineSymbol3
              myTemporalRenderer.TrackRenderer = myTrackRenderer
              
              
              ' Apply the TemporalRenderer as the Renderer of the FeatureLayer.
              myFeatureLayer2.Renderer = myTemporalRenderer
              
              ' Add the myFeatureLayer2 to the myMap2 Layer Collection. 
              Map2.Layers.Add(myFeatureLayer2)
              
              
              ' Zoom to the middle of the Atlantic ocean.
              Dim myEnvelope2 As New ESRI.ArcGIS.Client.Geometry.Envelope
              myEnvelope2.XMin = -77.69
              myEnvelope2.YMin = -13.88
              myEnvelope2.XMax = -11.77
              myEnvelope2.YMax = 52.03
              myMap2.Extent = myEnvelope2
              
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TemporalRenderer.TrackRenderer">
            <summary>
            Gets or sets the default set of polyline based symbology rendering for time-based features that track 
            a phenomena returned per <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.TrackIdField">TrackIdField</see>.
            </summary>
            <remarks>
            <para>
            The TrackRenderer Property provides polyline based symbology that connects markers (i.e. Points) for 
            time-based features per <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.TrackIdField">TrackIdField</see>. 
            If no TrackIdField has been specified then all observations that are returned from the Featurelayer will 
            be symbolized in sequential order using the polyline graphic. The polyline graphic that is drawn begins 
            with the first temporal observation and connects-the-dots as the phenomena moves spatially through time.
            </para>
            <para>
            The following screen shot depicts an image of movement for four hurricanes in the Atlantic Ocean. Each 
            hurricane has its own symbology as defined by the TemporalRenderer.ObservationRenderer. The solid red 
            circles denote hurricane Alberto. The solid green circles denote hurricane Isaac. The solid blue 
            circles denote hurricane Michael. The solid black circles denote hurricane Nadine. The hurricanes 
            Alberto, Isaac, and Michael are renderer via UniqueValueInfo objects of a UniqueValueRenderer. The 
            hurricane Nadine is rendered as the default symbology defined by the UniqueValueRenderer. The white 
            polyline is defined as the path movement for each hurricane drawn by the TrackRenderer. The screen shot 
            matches the code example provided in this documentation page.
            </para>
            <para>
            <img border="0" alt="Four hurricanes in the Atlantic Ocean." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TemporalRenderer.TrackRenderer.png"/>
            </para>
            <para>
            For the example code provided in this document had the TemporalRenderer.TrackIdField not been specified 
            as part of creating a TrackRenderer, all point observations for the hurricanes would be connected into a 
            single polyline based upon the time. This becomes messy if multiple events are occurring at the same time 
            (i.e. hurricanes) and the linework would then look like a spider diagram rather than discreet tracks with 
            one per event. See the following image for an example where the TemporalRenderer.TrackIdField was not 
            specified while attempting to create a TrackRenderer.
            </para>
            <para>
            <img border="0" alt="Four hurricanes in the Atlantic Ocean." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TemporalRenderer.TrackRenderer2.png"/>
            </para>
            </remarks>
            <example>
            <code title="Example XAML1" description="" lang="XAML">
            &lt;Grid x:Name="LayoutRoot" Background="White"&gt;
              
              &lt;!--
              Display the FeatureLayer in myMap2 that has a TemporalRenderer applied:
                      
              Add an ArcGISTiledMapsServiceLayer as a background to the map. The ArcGISTiledMapsServiceLayer 
              layer is first Layer added to the Map's Layers Collection and is drawn on the bottom. A FeatureLayer 
              is then added to the map and draws on top of the background layer.
                      
              Set the Map2 Extent to zoom to the middle of the Atlantic ocean.
                      
              Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
              within the set TimeExtent will then be shown. If no Map TimeExtent is set then only the 
              ObservationRenderer is in effect. If a Map TimeExtent is set then the ObservationRenderer and the 
              TrackRenderer are in effect. In the case of this example the TimeExtent for the hurricane 
              information is shortened to a small temporal window that just covers the time extent necessary to 
              render the four hurricanes (Alberto, Isaac, Michael, and Nadine) that are returned by the service.
                      
              Manually setting the TimeExtent of the Map2. Could have bound to a TimeSlider for more interactiveness.
              --&gt;
              &lt;esri:Map Background="White" Height="375" HorizontalAlignment="Left" Margin="408,227,0,0" 
                        Name="Map2" VerticalAlignment="Top" Width="375" 
                        Extent="-77.69,-13.88,-11.77,52.03" 
                        TimeExtent="2000/08/01 00:00:01 UTC,2000/10/25 06:00:01 UTC"&gt;
                
                &lt;esri:ArcGISTiledMapServiceLayer ID="StreetMapLayer"
                                                 Url="http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/&gt;
                
                &lt;!--
                The FeatureLayer contains Hurricane data from NOAA as Markers (aka. Points). 
                            
                The Where clause is optional. It is necessary when more that 500/1000 records returned. 
                In ArcGIS Server 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. 
                In ArcGIS Server 10 the default is 1000. This setting is configurable per map service using 
                ArcCatalog or ArcGIS Server Manager (on the Parameters tab). 
                            
                The Where clases gets all hurricanes that contain the letter 'A' (upper or lower case). Only 
                four hurricanes (Alberto, Isaac, Michael, and Nadine) are returned given this syntax.
                            
                Specify the Outfields Property to specify which Fields are returned on which the TemporalRenderer 
                TrackIdField can use. Specifying the wildcard (*) character in the Add Property will return all 
                Fields. 
                --&gt;
                &lt;esri:FeatureLayer ID="MyFeatureLayer"
                                   Url= "http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0"
                                   Where= "EVENTID LIKE '%A%' OR EVENTID LIKE '%a%'"
                                   OutFields="*"&gt;
                  
                  &lt;esri:FeatureLayer.Renderer&gt;
                    
                    &lt;!--
                    Create the TemporalRenderer object. It will use two different Properties 
                    (ObservationRenderer, and TrackRenderer) to create the image. 
                                        
                    Specify which TrackIdField (via its string name) the TemporalRenderer will use for 
                    breaking the rendering of the polyline event Symbols into groups. 
                    
                    Setting the TrackIdField draws polylines in time order for a group of attributes. If 
                    the TrackIdField property is not set and the TrackRenderer is used, then all point 
                    observations will have a polyline connecting them in order of time. This becomes messy 
                    if multiple events are occurring at the same time (i.e. hurricanes) and the linework 
                    would then look like a spider diagram rather than discreet tracks with one per event. 
                    In this example to speed up drawing time and limit the amount of data that is returned, 
                    the FeatureLayer Where clause was used to restrict only four hurricanes (or event) 
                    from displaying. If the FeatureLayer Where clause was commented out, more hurricanes 
                    would be displayed. Having the TrackIdField becomes key to keeping each event separate.
                    --&gt;
                    &lt;esri:TemporalRenderer TrackIdField="EVENTID"&gt;
                      
                      &lt;!--
                      ObservationRenderer Property:
                      When using a UniqueValueRenderer as the TemporalRenderer.ObservationRenderer Property, 
                      if you do not specify all of the UniqueValueInfo objects to cover all of the data 
                      observation possibilities (i.e. features returned) then those features for which there 
                      is no UniqueValueInfo will not be rendered (i.e. drawn) unless you set a Default symbol.  
                              
                      Define a default SimpleMarkerSymbol for a 'catch all' to draw the features for which no 
                      UniqueValueInfo has been defined. In this example, there are four hurricanes that are 
                      returned as a result of the Where clause, they are: Alberto, Isaac, Michael, and Nadine. 
                      Yet only three UniqueValueInfo objects have been defined to render the hurricane movements, 
                      they are: Alberto, Isaac, and Michael. A UniqueValueInfo has been intentionally left our 
                      for hurricane Nadine. Defining a default SimpleMarkerSymbol will provide symbology for 
                      those features that are returned for Nadine.
                                              
                      If a UniqueValueRenderer.DefaultSymbol was not defined, the features for Nadine would not 
                      be drawn on the Map.
                              
                      A UniqueValueRenderer should have 2 or more UniqueValueInfo Classes (meaning classification 
                      or grouping) to delineate the different symbology and class break information. The next 
                      three sections of code define 3 different UniqueValueInfo Classes (or groups) and their 
                      associated symbology.
                                              
                      For the UniqueValueRenderer define a Default symbol. Create a UniqueValueInfo object as a 
                      container of information for each group. the value that contains the grouping of the Field 
                      defined as the UniqueValueRenderer.Field. Add an informational description and label 
                      for the group. Each UniqueValueInfo grouping needs a symbol to display.
                      --&gt;
                      &lt;esri:TemporalRenderer.ObservationRenderer&gt;
                        &lt;esri:UniqueValueRenderer Field="EVENTID"&gt;
                          &lt;esri:UniqueValueRenderer.DefaultSymbol&gt;
                            &lt;esri:SimpleMarkerSymbol Color="Black" Size="5"/&gt;
                          &lt;/esri:UniqueValueRenderer.DefaultSymbol&gt;
                          &lt;esri:UniqueValueInfo Value="Alberto"&gt;
                            &lt;esri:SimpleMarkerSymbol Color="Red" Size="5"/&gt;
                          &lt;/esri:UniqueValueInfo&gt;
                          &lt;esri:UniqueValueInfo Value="Isaac"&gt;
                            &lt;esri:SimpleMarkerSymbol Color="Green" Size="5"/&gt;
                          &lt;/esri:UniqueValueInfo&gt;
                          &lt;esri:UniqueValueInfo Value="Michael"&gt;
                            &lt;esri:SimpleMarkerSymbol Color="Blue" Size="5"/&gt;
                          &lt;/esri:UniqueValueInfo&gt;
                        &lt;/esri:UniqueValueRenderer&gt;
                      &lt;/esri:TemporalRenderer.ObservationRenderer&gt;
                      
                      &lt;!--
                      TrackRenderer Property:
                      Define a SimpleRenderer with a SimpleLineSymbol to display each tracked event. 
                      The event will be a white line connecting the time-based observations.
                      --&gt;
                      &lt;esri:TemporalRenderer.TrackRenderer&gt;
                        &lt;esri:SimpleRenderer&gt;
                          &lt;esri:SimpleLineSymbol Color="White" Width="1"/&gt;
                        &lt;/esri:SimpleRenderer&gt;
                      &lt;/esri:TemporalRenderer.TrackRenderer&gt;
                      
                    &lt;/esri:TemporalRenderer&gt;
                    
                  &lt;/esri:FeatureLayer.Renderer&gt;
                  
                &lt;/esri:FeatureLayer&gt;
                
              &lt;/esri:Map&gt;
              
            &lt;/Grid&gt;
            </code>
                
            <code title="Example CS1" description="" lang="CS">
            public void DrawHurricanesMultiple_TrackRenderer(ESRI.ArcGIS.Client.Map myMap2)
            {
              
              // Display the FeatureLayer in myMap2 that has a TemporalRenderer applied
              // ======================================================================
              
              // Clear out any exiting layers
              myMap2.Layers.Clear();
              
              // Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
              // Layers Collection is on the bottom and the other Layer is added on the top.
              ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer myArcGISTiledMapServiceLayer2 = new ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer();
              myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer";
              myMap2.Layers.Add(myArcGISTiledMapServiceLayer2);
              
              // Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
              ESRI.ArcGIS.Client.FeatureLayer myFeatureLayer2 = new ESRI.ArcGIS.Client.FeatureLayer();
              
              // This FeatureLayer contains hurricane data from NOAA. 
              myFeatureLayer2.Url = "http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0";
              
              // The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
              // 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
              // default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
              // (on the Parameters tab). 
              // Only four hurricanes (Alberto, Isaac, Michael, and Nadine) are returned for this Where clause.
              myFeatureLayer2.Where = "EVENTID LIKE '%A%' OR EVENTID LIKE '%a%'"; //Get all hurricanes that contain the letter 'A' (upper or lower case).
              
              // Specify the Outfields Property to specify which Fields are returned on which the 
              // TemporalRenderer.TrackIdField can use. Specifying the wildcard (*) character in the Add Property 
              // will return all Fields. 
              myFeatureLayer2.OutFields.Add("*");
              
              // Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
              // within the set TimeExtent will then be shown. If no Map.TimeExtent is set then only the 
              // ObservationRenderer is in effect. If a Map.TimeExtent is set then the ObservationRenderer and the 
              // TrackRenderer are in effect. In the case of this example the TimeExtent for the hurricane 
              // information is shortened to a small temporal window that just covers the time extent necessary to 
              // render the four hurricanes (Alberto, Isaac, Michael, and Nadine) that are returned by the service.
              ESRI.ArcGIS.Client.TimeExtent myTimeExtent = new ESRI.ArcGIS.Client.TimeExtent();
              System.DateTime date1 = DateTime.Parse("8/1/2000 12:00:01 AM"); //Custom Start date/time
              myTimeExtent.Start = date1;
              System.DateTime date2 = DateTime.Parse("10/25/2000 12:00:01 AM"); //Custom End date/time
              myTimeExtent.End = date2;
              
              // Manually setting the TimeExtent of the myMap2. Could have used a TimeSlider for more interactiveness.
              myMap2.TimeExtent = myTimeExtent;
              
              // Create the TemporalRenderer object. It will use two different Properties (ObservationRenderer, 
              // and TrackRenderer) to create the image.
              ESRI.ArcGIS.Client.TemporalRenderer myTemporalRenderer = new ESRI.ArcGIS.Client.TemporalRenderer();
              
              // When using a UniqueValueRenderer as the TemporalRenderer.ObservationRenderer Property, if you do not
              // specify all of the UniqueValueInfo objects to cover all of the data observation possibilities (i.e. 
              // features returned) then those features for which there is no UniqueValueInfo will not be 
              // rendered (i.e. drawn) unless you set a Default symbol.  
              //
              // Define a default SimpleMarkerSymbol for a 'catch all' to draw the features for which no UniqueValueInfo 
              // has been defined. In this example, there are four hurricanes that are returned as a result of the Where
              // clause, they are: Alberto, Isaac, Michael, and Nadine. Yet only three UniqueValueInfo objects have been
              // defined to render the hurricane movements, they are: Alberto, Isaac, and Michael. A UniqueValueInfo
              // has been intentionally left our for hurricane Nadine. Defining a default SimpleMarkerSymbol will provide 
              // symbology for those features that are returned for Nadine. 
              // If a UniqueValueRenderer.DefaultSymbol was not defined, the features for Nadine would not be drawn on 
              // the Map.
              //
              // A UniqueValueRenderer should have 2 or more UniqueValueInfo Classes (meaning classification or 
              // grouping) to delineate the different symbology and class break information. The next three sections 
              // of code define 3 different UniqueValueInfo Classes (or groups) and their associated symbology.
              ESRI.ArcGIS.Client.UniqueValueRenderer myUniqueValueRenderer = new ESRI.ArcGIS.Client.UniqueValueRenderer();
              myUniqueValueRenderer.Field = "EVENTID"; //Name of the hurricanes
              
              // Define the Default symbol
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol myDefaultSimpleMarkerSymbol = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              System.Windows.Media.SolidColorBrush mySolidColorBrush = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)); //Black
              myDefaultSimpleMarkerSymbol.Color = mySolidColorBrush;
              myDefaultSimpleMarkerSymbol.Size = 5;
              myUniqueValueRenderer.DefaultSymbol = myDefaultSimpleMarkerSymbol;
              
              // Group #1
              // ========
              // Create a UniqueValueInfo object as a container of information for each group. 
              ESRI.ArcGIS.Client.UniqueValueInfo uniqueAvalueInfo1 = new ESRI.ArcGIS.Client.UniqueValueInfo();
              
              // Define the value that contains the grouping of the Field defined as the UniqueValueRenderer.Field.
              uniqueAvalueInfo1.Value = "Alberto";
              
              // Add an informational description and label for the group.
              uniqueAvalueInfo1.Description = "Small red circles";
              uniqueAvalueInfo1.Label = "Hurricane Alberto";
              
              // Each UniqueValueInfo grouping needs a symbol to display
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol simpleMarkerSymbol1 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              System.Windows.Media.SolidColorBrush solidColorBrush1 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 0, 0)); //Red
              simpleMarkerSymbol1.Color = solidColorBrush1;
              simpleMarkerSymbol1.Size = 5;
              uniqueAvalueInfo1.Symbol = simpleMarkerSymbol1;
              
              // Add the UniqueValueInfo information to the Infos (grouping) of the UniqueValueRenderer
              myUniqueValueRenderer.Infos.Add(uniqueAvalueInfo1);
              
              
              // Group #2
              // ========
              // Create a UniqueValueInfo object as a container of information for each group. 
              ESRI.ArcGIS.Client.UniqueValueInfo uniqueAvalueInfo2 = new ESRI.ArcGIS.Client.UniqueValueInfo();
              
              // Define the value that contains the grouping of the Field defined as the UniqueValueRenderer.Field.
              uniqueAvalueInfo2.Value = "Isaac";
              
              // Add an informational description and label for the group.
              uniqueAvalueInfo2.Description = "Small green circles";
              uniqueAvalueInfo2.Label = "Hurricane Isaac";
              
              // Each UniqueValueInfo grouping needs a symbol to display
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol simpleMarkerSymbol2 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              System.Windows.Media.SolidColorBrush solidColorBrush2 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 0)); //Green
              simpleMarkerSymbol2.Color = solidColorBrush2;
              simpleMarkerSymbol2.Size = 5;
              uniqueAvalueInfo2.Symbol = simpleMarkerSymbol2;
              
              // Add the UniqueValueInfo information to the Infos (grouping) of the UniqueValueRenderer
              myUniqueValueRenderer.Infos.Add(uniqueAvalueInfo2);
              
              
              // Group #3
              // ========
              // Create a UniqueValueInfo object as a container of information for each group. 
              ESRI.ArcGIS.Client.UniqueValueInfo uniqueAvalueInfo3 = new ESRI.ArcGIS.Client.UniqueValueInfo();
              
              // Define the value that contains the grouping of the Field defined as the UniqueValueRenderer.Field.
              uniqueAvalueInfo3.Value = "Michael";
              
              // Add an informational description and label for the group.
              uniqueAvalueInfo3.Description = "Small blue circles";
              uniqueAvalueInfo3.Label = "Hurricane Michael";
              
              // Each UniqueValueInfo grouping needs a symbol to display
              ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol simpleMarkerSymbol3 = new ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol();
              System.Windows.Media.SolidColorBrush solidColorBrush3 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 255)); //Blue
              simpleMarkerSymbol3.Color = solidColorBrush3;
              simpleMarkerSymbol3.Size = 5;
              uniqueAvalueInfo3.Symbol = simpleMarkerSymbol3;
              
              // Add the UniqueValueInfo information to the Infos (grouping) of the UniqueValueRenderer
              myUniqueValueRenderer.Infos.Add(uniqueAvalueInfo3);
              
              // Now that all of the UniqueValueInfo information has been added to the UniqueValueRenderer object, 
              // associate the UniqueValueRenderer with the TemporalRenderer.ObservationRenderer Property.
              myTemporalRenderer.ObservationRenderer = myUniqueValueRenderer;
              
              
              // TrackRenderer Property:
              // -----------------------
              // Setting the TrackIdField draws polylines in time order for a group of attributes. If the 
              // TrackIdField property is not set and the TrackRenderer is used, then all point observations 
              // will have a polyline connecting them in order of time. This becomes messy if multiple
              // events are occurring at the same time (i.e. hurricanes) and the linework would then look like 
              // a spider diagram rather than discreet tracks with one per event. In this example to speed up
              // drawing time and limit the amount of data that is returned, the FeatureLayer.Where clause was 
              // used to restrict only four hurricanes (or event) from displaying. If the FeatureLayer.Where 
              // clause was commented out, more hurricanes would be displayed -- having the TrackIdField 
              // becomes key to keeping each event separate.
              myTemporalRenderer.TrackIdField = "EVENTID";
              
              // Define a SimpleRenderer with a SimpleLineSymbol to display each tracked event. The event 
              // will be a yellow line connecting the time-based observations.
              ESRI.ArcGIS.Client.SimpleRenderer myTrackRenderer = new ESRI.ArcGIS.Client.SimpleRenderer();
              ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol defaultSimpleLineSymbol3 = new ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol();
              System.Windows.Media.SolidColorBrush defaultBrush3 = new System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 255)); //White
              defaultSimpleLineSymbol3.Color = defaultBrush3;
              defaultSimpleLineSymbol3.Width = 1;
              myTrackRenderer.Symbol = defaultSimpleLineSymbol3;
              myTemporalRenderer.TrackRenderer = myTrackRenderer;
              
              // Apply the TemporalRenderer as the Renderer of the FeatureLayer.
              myFeatureLayer2.Renderer = myTemporalRenderer;
              
              // Add the myFeatureLayer2 to the myMap2 Layer Collection. 
              Map2.Layers.Add(myFeatureLayer2);
              
              // Zoom to the middle of the Atlantic ocean.
              ESRI.ArcGIS.Client.Geometry.Envelope myEnvelope2 = new ESRI.ArcGIS.Client.Geometry.Envelope();
              myEnvelope2.XMin = -77.69;
              myEnvelope2.YMin = -13.88;
              myEnvelope2.XMax = -11.77;
              myEnvelope2.YMax = 52.03;
              myMap2.Extent = myEnvelope2;
              
            }
            </code>
                
            <code title="Example VB1" description="" lang="VB.NET">
            Public Sub DrawHurricanesMultiple_TrackRenderer(ByVal myMap2 As ESRI.ArcGIS.Client.Map)
              
              ' Display the FeatureLayer in myMap2 that has a TemporalRenderer applied
              ' ======================================================================
              
              ' Clear out any exiting layers
              myMap2.Layers.Clear()
              
              ' Add an ArcGISTiledMapsServiceLayer as a background to the map. Note: The first Layer added to the Map's 
              ' Layers Collection is on the bottom and the other Layer is added on the top.
              Dim myArcGISTiledMapServiceLayer2 As New ESRI.ArcGIS.Client.ArcGISTiledMapServiceLayer
              myArcGISTiledMapServiceLayer2.Url = "http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"
              myMap2.Layers.Add(myArcGISTiledMapServiceLayer2)
              
              ' Add a FeatureLayer to the map. Note: This Layer is drawn on top of the background layer.
              Dim myFeatureLayer2 As New ESRI.ArcGIS.Client.FeatureLayer
              
              ' This FeatureLayer contains hurricane data from NOAA. 
              myFeatureLayer2.Url = "http://servicesbeta.esri.com/ArcGIS/rest/services/Hurricanes/Hurricanes/MapServer/0"
              
              ' The Where clause is optional. It is necessary when more that 500/1000 records returned. In ArcGIS Server 
              ' 9.3.1 and prior, the default maximum is 500 records returned per FeatureLayer. In ArcGIS Server 10 the 
              ' default is 1000. This setting is configurable per map service using ArcCatalog or ArcGIS Server Manager 
              ' (on the Parameters tab). 
              ' Only four hurricanes (Alberto, Isaac, Michael, and Nadine) are returned for this Where clause.
              myFeatureLayer2.Where = "EVENTID LIKE '%A%' OR EVENTID LIKE '%a%'" 'Get all hurricanes that contain the letter 'A' (upper or lower case).
              
              ' Specify the Outfields Property to specify which Fields are returned on which the 
              ' TemporalRenderer.TrackIdField can use. Specifying the wildcard (*) character in the Add Property 
              ' will return all Fields. 
              myFeatureLayer2.OutFields.Add("*")
              
              ' Setting the Map's TimeExtent acts like a Where clause in that only those features/records that fall
              ' within the set TimeExtent will then be shown. If no Map.TimeExtent is set then only the 
              ' ObservationRenderer is in effect. If a Map.TimeExtent is set then the ObservationRenderer and the 
              ' TrackRenderer are in effect. In the case of this example the TimeExtent for the hurricane 
              ' information is shortened to a small temporal window that just covers the time extent necessary to 
              ' render the four hurricanes (Alberto, Isaac, Michael, and Nadine) that are returned by the service.
              Dim myTimeExtent As New ESRI.ArcGIS.Client.TimeExtent
              Dim date1 As Date = #8/1/2000 12:00:01 AM# 'Custom Start date/time
              myTimeExtent.Start = date1
              Dim date2 As Date = #10/25/2000 12:00:01 AM# 'Custom End date/time
              myTimeExtent.End = date2
              
              ' Manually setting the TimeExtent of the myMap2. Could have used a TimeSlider for more interactiveness.
              myMap2.TimeExtent = myTimeExtent
              
              ' Create the TemporalRenderer object. It will use two different Properties (ObservationRenderer, 
              ' and TrackRenderer) to create the image.
              Dim myTemporalRenderer As New ESRI.ArcGIS.Client.TemporalRenderer
              
              ' When using a UniqueValueRenderer as the TemporalRenderer.ObservationRenderer Property, if you do not
              ' specify all of the UniqueValueInfo objects to cover all of the data observation possibilities (i.e. 
              ' features returned) then those features for which there is no UniqueValueInfo will not be 
              ' rendered (i.e. drawn) unless you set a Default symbol.  
              '
              ' Define a default SimpleMarkerSymbol for a 'catch all' to draw the features for which no UniqueValueInfo 
              ' has been defined. In this example, there are four hurricanes that are returned as a result of the Where
              ' clause, they are: Alberto, Isaac, Michael, and Nadine. Yet only three UniqueValueInfo objects have been
              ' defined to render the hurricane movements, they are: Alberto, Isaac, and Michael. A UniqueValueInfo
              ' has been intentionally left our for hurricane Nadine. Defining a default SimpleMarkerSymbol will provide 
              ' symbology for those features that are returned for Nadine. 
              ' If a UniqueValueRenderer.DefaultSymbol was not defined, the features for Nadine would not be drawn on 
              ' the Map.
              '
              ' A UniqueValueRenderer should have 2 or more UniqueValueInfo Classes (meaning classification or 
              ' grouping) to delineate the different symbology and class break information. The next three sections 
              ' of code define 3 different UniqueValueInfo Classes (or groups) and their associated symbology.
              Dim myUniqueValueRenderer As New ESRI.ArcGIS.Client.UniqueValueRenderer
              myUniqueValueRenderer.Field = "EVENTID" 'Name of the hurricanes
              
              ' Define the Default symbol
              Dim myDefaultSimpleMarkerSymbol As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              Dim mySolidColorBrush As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 0)) 'Black
              myDefaultSimpleMarkerSymbol.Color = mySolidColorBrush
              myDefaultSimpleMarkerSymbol.Size = 5
              myUniqueValueRenderer.DefaultSymbol = myDefaultSimpleMarkerSymbol
              
              ' Group #1
              ' ========
              ' Create a UniqueValueInfo object as a container of information for each group. 
              Dim uniqueAvalueInfo1 As New ESRI.ArcGIS.Client.UniqueValueInfo
              
              ' Define the value that contains the grouping of the Field defined as the UniqueValueRenderer.Field.
              uniqueAvalueInfo1.Value = "Alberto"
              
              ' Add an informational description and label for the group.
              uniqueAvalueInfo1.Description = "Small red circles"
              uniqueAvalueInfo1.Label = "Hurricane Alberto"
              
              ' Each UniqueValueInfo grouping needs a symbol to display
              Dim simpleMarkerSymbol1 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              Dim solidColorBrush1 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 0, 0)) 'Red
              simpleMarkerSymbol1.Color = solidColorBrush1
              simpleMarkerSymbol1.Size = 5
              uniqueAvalueInfo1.Symbol = simpleMarkerSymbol1
              
              ' Add the UniqueValueInfo information to the Infos (grouping) of the UniqueValueRenderer
              myUniqueValueRenderer.Infos.Add(uniqueAvalueInfo1)
              
              
              ' Group #2
              ' ========
              ' Create a UniqueValueInfo object as a container of information for each group. 
              Dim uniqueAvalueInfo2 As New ESRI.ArcGIS.Client.UniqueValueInfo
              
              ' Define the value that contains the grouping of the Field defined as the UniqueValueRenderer.Field.
              uniqueAvalueInfo2.Value = "Isaac"
              
              ' Add an informational description and label for the group.
              uniqueAvalueInfo2.Description = "Small green circles"
              uniqueAvalueInfo2.Label = "Hurricane Isaac"
              
              ' Each UniqueValueInfo grouping needs a symbol to display
              Dim simpleMarkerSymbol2 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              Dim solidColorBrush2 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 255, 0)) 'Green
              simpleMarkerSymbol2.Color = solidColorBrush2
              simpleMarkerSymbol2.Size = 5
              uniqueAvalueInfo2.Symbol = simpleMarkerSymbol2
              
              ' Add the UniqueValueInfo information to the Infos (grouping) of the UniqueValueRenderer
              myUniqueValueRenderer.Infos.Add(uniqueAvalueInfo2)
              
              
              ' Group #3
              ' ========
              ' Create a UniqueValueInfo object as a container of information for each group. 
              Dim uniqueAvalueInfo3 As New ESRI.ArcGIS.Client.UniqueValueInfo
              
              ' Define the value that contains the grouping of the Field defined as the UniqueValueRenderer.Field.
              uniqueAvalueInfo3.Value = "Michael"
              
              ' Add an informational description and label for the group.
              uniqueAvalueInfo3.Description = "Small blue circles"
              uniqueAvalueInfo3.Label = "Hurricane Michael"
              
              ' Each UniqueValueInfo grouping needs a symbol to display
              Dim simpleMarkerSymbol3 As New ESRI.ArcGIS.Client.Symbols.SimpleMarkerSymbol
              Dim solidColorBrush3 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 0, 0, 255)) 'Blue
              simpleMarkerSymbol3.Color = solidColorBrush3
              simpleMarkerSymbol3.Size = 5
              uniqueAvalueInfo3.Symbol = simpleMarkerSymbol3
              
              ' Add the UniqueValueInfo information to the Infos (grouping) of the UniqueValueRenderer
              myUniqueValueRenderer.Infos.Add(uniqueAvalueInfo3)
              
              ' Now that all of the UniqueValueInfo information has been added to the UniqueValueRenderer object, 
              ' associate the UniqueValueRenderer with the TemporalRenderer.ObservationRenderer Property.
              myTemporalRenderer.ObservationRenderer = myUniqueValueRenderer
              
              
              ' TrackRenderer Property:
              ' -----------------------
              ' Setting the TrackIdField draws polylines in time order for a group of attributes. If the 
              ' TrackIdField property is not set and the TrackRenderer is used, then all point observations 
              ' will have a polyline connecting them in order of time. This becomes messy if multiple
              ' events are occurring at the same time (i.e. hurricanes) and the linework would then look like 
              ' a spider diagram rather than discreet tracks with one per event. In this example to speed up
              ' drawing time and limit the amount of data that is returned, the FeatureLayer.Where clause was 
              ' used to restrict only four hurricanes (or event) from displaying. If the FeatureLayer.Where 
              ' clause was commented out, more hurricanes would be displayed -- having the TrackIdField 
              ' becomes key to keeping each event separate.
              myTemporalRenderer.TrackIdField = "EVENTID"
              
              ' Define a SimpleRenderer with a SimpleLineSymbol to display each tracked event. The event 
              ' will be a yellow line connecting the time-based observations.
              Dim myTrackRenderer As New ESRI.ArcGIS.Client.SimpleRenderer
              Dim defaultSimpleLineSymbol3 As New ESRI.ArcGIS.Client.Symbols.SimpleLineSymbol
              Dim defaultBrush3 As New System.Windows.Media.SolidColorBrush(Color.FromArgb(255, 255, 255, 255)) 'White
              defaultSimpleLineSymbol3.Color = defaultBrush3
              defaultSimpleLineSymbol3.Width = 1
              myTrackRenderer.Symbol = defaultSimpleLineSymbol3
              myTemporalRenderer.TrackRenderer = myTrackRenderer
              
              ' Apply the TemporalRenderer as the Renderer of the FeatureLayer.
              myFeatureLayer2.Renderer = myTemporalRenderer
              
              ' Add the myFeatureLayer2 to the myMap2 Layer Collection. 
              Map2.Layers.Add(myFeatureLayer2)
              
              ' Zoom to the middle of the Atlantic ocean.
              Dim myEnvelope2 As New ESRI.ArcGIS.Client.Geometry.Envelope
              myEnvelope2.XMin = -77.69
              myEnvelope2.YMin = -13.88
              myEnvelope2.XMax = -11.77
              myEnvelope2.YMax = 52.03
              myMap2.Extent = myEnvelope2
            
            End Sub
            </code>
            </example>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TemporalRenderer.SymbolAger">
            <summary>
            Gets or sets the ability to modify a Symbol’s Size, Color, and Opacity for a FeatureLayer’s 
            TemporalRenderer as individual features time stamp adjusts.
            </summary>
            <seealso cref="T:ESRI.ArcGIS.Client.RampInterpolator"/>
            <seealso cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger"/>
            <remarks>
            <para>
            The SymbolAger Property is optional on the TemporalRenderer. The SymbolAger will override the default 
            rendering provided by the <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.ObservationRenderer">ObservationRenderer</see> 
            as the <see cref="P:ESRI.ArcGIS.Client.Map.TimeExtent">Map.TimeExtent</see> Property changes. The goal is to 
            provide rendering to show how a phenomenon has changed over time. The 
            <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.LatestObservationRenderer">LatestObservationRenderer</see> takes 
            precedence over the SymbolAger if it set. Two SymbolAger’s are supported: the 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see> and the 
            <see cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger">TimeClassBreaksAger</see>. 
            </para>
            <para>
            The RampInterpolator will modify the rendering of entire set of features and graduate the symbology based 
            upon the set properties. The graduation of the symbology occurs over the Map.TimeExtent Property that is 
            specified.
            </para>
            <para>
            The TimeClassBreaksAger will modify the rendering of a specific set of defined groups (called 
            <see cref="T:ESRI.ArcGIS.Client.TimeClassBreakInfo">TimeClassBreakInfo</see> objects) based upon a range 
            of values. Each group has its own 
            <see cref="P:ESRI.ArcGIS.Client.TimeClassBreakInfo.MinimumAge">TimeClassBreakInfo.MinimumAge</see> and 
            <see cref="P:ESRI.ArcGIS.Client.TimeClassBreakInfo.MaximumAge">TimeClassBreakInfo.MaximumAge</see> time extent 
            for which the symbology will be adjusted. If a specific group has not been defined by the TimeClassBreaksAger 
            then the ObservationRenderer will take precedence.
            </para>
            <para>
            Code examples of how to use the SymbolAger can be found in the 
            <see cref="T:ESRI.ArcGIS.Client.TemporalRenderer">TemporalRenderer</see>, 
            <see cref="T:ESRI.ArcGIS.Client.RampInterpolator">RampInterpolator</see>, and 
            <see cref="T:ESRI.ArcGIS.Client.TimeClassBreaksAger">TimeClassBreaksAger</see> Classes.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TemporalRenderer.TrackIdField">
            <summary>
            Gets or sets that name of the Field specified by the 
            <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.OutFields">FeatureLayer.OutFields</see> Property for 
            which tracks (or groups) of point temporal events are categorized.
            </summary>
            <remarks>
            <para>
            Setting the TrackIdField Property is necessary when using the 
            <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.TrackRenderer">TrackRenderer</see> 
            Property to display individual temporal events linked together via a polyline broken down by tracks 
            (or groups). If no TrackIdField has been specified for the TrackRenderer then all 
            observations that are returned from the FeatureLayer will be symbolized in sequential order using 
            the polyline graphic. The polyline graphic that is drawn begins with the first temporal observation 
            and connects-the-dots as the phenomena moves spatially through time.
            </para>
            <para>
            The <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.LatestObservationRenderer">LatestObservationRenderer</see> 
            Property makes use of the TrackIdField to provide a default set of symbology for the last time-based 
            feature returned per track (or group). If no TrackIdField has been specified then just the last 
            observation that is returned from the FeatureLayer will be symbolized.
            </para>
            <para>
            Useful examples of phenomena that would serve as good candidates for specifying temporal data into 
            tracks (or groups) so that their movement can be displayed visually on a map include: hurricanes, 
            animal migrations, emergency service vehicles, military troops, fleet vehicles, etc.
            </para>
            <para>
            For a complete example of how to use the TrackIdField Property see code provided in the 
            <see cref="P:ESRI.ArcGIS.Client.TemporalRenderer.TrackRenderer">TrackRenderer</see> Property.
            </para>
            <para>
            <b>TIP:</b> 
            One way to determine what tracks (or groups) of temporal data are available for a FeatureLayer is to 
            copy the <see cref="P:ESRI.ArcGIS.Client.FeatureLayer.Url">FeatureLayer.Url</see> Property into the 
            address bar of a web browser and then scroll to the bottom of the returned web page and in the 
            <b>Supported Operations</b> section click on the <b>Query</b> tab. See the following screen shot:
            </para>
            <para>
            <img border="0" alt="Using the FeatureLayer.URL in a web browser." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TemporalRenderer.TrackIdField1.png"/>
            </para>
            <para>
            Then specify valid arguments in the various form elements and click either the <b>Query (GET)</b> or 
            <b>Query (Post)</b> buttons to return the tabular records. Note: Setting the <b>Where</b> clause to <b>1=1</b> 
            will return all records and setting the <b>Return Fields</b> to <b>*</b> will return all Fields. See the 
            following screen shots:
            </para>
            <para>
            <img border="0" alt="Setting the various form elements for a Query." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TemporalRenderer.TrackIdField2.png"/>
            </para>
            <para>
            <img border="0" alt="Returned results from a Query." src="C:\ArcGIS\dotNET\API SDK\v2x-branch\ArcGISSilverlightSDK\LibraryReference\images\Client.TemporalRenderer.TrackIdField3.png"/>
            </para>
            </remarks>
        </member>
        <member name="E:ESRI.ArcGIS.Client.TemporalRenderer.LegendChanged">
            <summary>
            Occurs when the legend of the layer changed.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.TemporalRenderer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.RendererInfoCollection`1">
            <summary>
            Helper class for managing LegendChanged event coming from a RendererInfo collection.
            The event LegendChanged must be fired in 3 cases:
                 - the collection changes (e.g. infos.Add(new UniqueValueRendererInfo() {....}))
                 - a property of a rendererinfo item changes (e.g. infos[3].Label = "New Label" )
                 - a property of a rendererInfo symbol changes (e.g. (infos[3].Symbol as SimpleMarkerSymbol).Size = 20)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Automation.Peers.MapAutomationPeer">
            <summary>
             Exposes <see cref="T:ESRI.ArcGIS.Client.Map"/> types to UI Automation.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Automation.Peers.MapAutomationPeer.#ctor(ESRI.ArcGIS.Client.Map)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Automation.Peers.MapAutomationPeer"/> class.
            </summary>
            <param name="owner">The <see cref="T:ESRI.ArcGIS.Client.Map"/> associated with this <see cref="T:ESRI.ArcGIS.Client.Automation.Peers.MapAutomationPeer"/>.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Automation.Peers.MapAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>
            The name of the owner type that is associated with this 
            <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Automation.Peers.MapAutomationPeer.Navigate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Changes the associated map's offset, resolution and rotation.
            </summary>
            <remarks>
            Use this method for automating pan and zoom operations to create custom navigation input and animations.
            </remarks>
            <param name="deltaX">Horizontal offset in pixels.</param>
            <param name="deltaY">Vertical offset in pixels.</param>
            <param name="deltaResolution">Delta resolution for zoom.</param>
            <param name="deltaAngle">Rotation offset.</param>
        </member>
        <member name="T:ESRI.ArcGIS.Client.StringToNullableDouble">
            <summary>
             Provides a way of converting nullable double to and from a string 
             representation, as well as for accessing standard values and 
             subproperties.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.NullableConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given 
            type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext 
            that provides a format context.</param>
            <param name="sourceType">A System.Type that represents the type you 
            want to convert from.</param>
            <returns>true if this converter can perform the conversion; 
            otherwise, false.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.NullableConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of 
            the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/>
            to use as the current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotImplementedException">
            	<see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/> not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Utils.Normalization.Split(ESRI.ArcGIS.Client.Geometry.Polygon,System.Double,ESRI.ArcGIS.Client.Geometry.Polygon@,ESRI.ArcGIS.Client.Geometry.Polygon@)">
            <summary>
            Splits a polygon in two along a vertical line.
            </summary>
            <param name="input">Polygon to split.</param>
            <param name="edge">Longitude/x where polygon should be split.</param>
            <param name="left">Polygon on left side of split line - or null if none.</param>
            <param name="right">Polygon on right side of split line - or null if none.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Utils.Normalization.MergePolygons(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Geometry.Polygon})">
            <summary>
            Merges two polygons together if they share common vertical edges.
            </summary>
            <param name="polys">The polys.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Utils.Normalization.MergeSegments(System.Collections.Generic.List{ESRI.ArcGIS.Client.Geometry.PointCollection})">
            <summary>
            Stitches line segments together where they share common clip or end vertices.
            </summary>
            <param name="segments"></param>
            <returns></returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer">
            <summary>
            Layer containing an image result from a geoprocessing task
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.#ctor(System.String,System.String,System.String,ESRI.ArcGIS.Client.MapImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.#ctor(System.String,System.String,System.String,ESRI.ArcGIS.Client.Geometry.Envelope,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="jobId">The job id.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="extent">The extent.</param>
            <param name="proxyUrl">The proxy URL.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.GetUrl(ESRI.ArcGIS.Client.Geometry.Envelope,System.Int32,System.Int32,ESRI.ArcGIS.Client.DynamicMapServiceLayer.OnUrlComplete)">
            <summary>
            Gets the URL.
            </summary>
            <param name="extent">The extent.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="onComplete">The on complete.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.Initialize">
            <summary>
            Initializes the resource.
            Override this method if your resource requires asyncronous requests to initialize,
            and call the base method when initialization is completed.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.JobId">
            <summary>
            The jobId for the job associated with the result image layer.
            </summary>
            <value>The jobId.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.ParameterName">
            <summary>
            The name of the result parameter as defined in ArcGIS Services Directory.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.Url">
            <summary>
            Gets or sets the geoprocessing map image result URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.ProxyUrl">
            <summary>
            Gets or sets the geoprocessing map image result ProxyUrl.
            </summary>
            <value>The ProxyUrl.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.ImageFormat">
            <summary>
            Gets or sets the image format.
            </summary>
            <value>The image format.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.DisableClientCaching">
            <summary>
             If true, adds a timestamp parameter ("_ts") to the REST request to prevent the request from being loaded from the browser's cache.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.Token">
            <summary>
            Gets or sets the token for accessing a secure dynamic ArcGIS service.
            </summary>
            <value>The token.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.RestImageFormat">
            <summary>
            REST imageformats
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.RestImageFormat.PNG24">
            <summary>
            24bit PNG
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GPResultImageLayer.RestImageFormat.JPG">
            <summary>
            JPEG
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.AreasAndLengths">
            <summary>
            Contains a list of areas and corresponding lengths.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AreasAndLengths.Areas">
            <summary>
            Gets the areas.
            </summary>
            <value>The areas.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AreasAndLengths.Lengths">
            <summary>
            Gets the lengths.
            </summary>
            <value>The lengths.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.MapPointConverter">
            <summary>
             Provides a way of converting <see cref="T:ESRI.ArcGIS.Client.Geometry.MapPoint"/> to and from a string representation, as well
             as for accessing standard values and subproperties.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MapPointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MapPointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type,
            using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to.</param>
            <returns>Returns whether this converter can convert the object to the specified type.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MapPointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.MapPointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null.</exception>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ElementLayer">
            <summary>
            Framework Element component layer
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ElementLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.ElementLayer"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ElementLayer.EnvelopeProperty">
            <summary>
            Identifies the ESRI.ArcGIS.Client.ElementLayer.Envelope attached property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ElementLayer.SetEnvelope(System.Windows.UIElement,ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Sets the value of the ESRI.ArcGIS.Client.ElementLayer.Envelope attached property for a given object.
            </summary>
            <param name="element">The object to which the property is written.</param>
            <param name="envelope">The ESRI.ArcGIS.Client.ElementLayer.Envelope of the specified element.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ElementLayer.GetEnvelope(System.Windows.UIElement)">
            <summary>
            Gets the value of the ESRI.ArcGIS.Client.ElementLayer.Envelope attached property for a given object.
            </summary>
            <param name="element">The object from which the property value is read.</param>
            <returns>The ESRI.ArcGIS.Client.ElementLayer.Envelope value of the specified object.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.ElementLayer.Draw(ESRI.ArcGIS.Client.Geometry.Envelope,System.Double,ESRI.ArcGIS.Client.Geometry.MapPoint,System.Boolean,System.Boolean)">
            <summary>
            Performs an update of the layer
            </summary>
            <param name="extent">Extent to draw</param>
            <param name="resolution">Resolution to draw at</param>
            <param name="canvasOrigin">Origin of the canvas</param>
            <param name="useTransitions">Whether smooth transitions should be used, like fading in the images</param>
            <param name="isContinuous">if set to <c>true</c> is continuous draw.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ElementLayer.Children">
            <summary>
            Gets the elements in this layer.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ElementLayer.FullExtent">
            <summary>
            Gets the minimum enclosing envelope that all the features in the layer.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Geometry.PointCollectionConverter">
            <summary>
             Provides a way of converting <see cref="T:ESRI.ArcGIS.Client.Geometry.PointCollection"/> to and from a string representation, as well
             as for accessing standard values and subproperties.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.PointCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.PointCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type,
            using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to.</param>
            <returns>Returns whether this converter can convert the object to the specified type.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.PointCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Geometry.PointCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null.</exception>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.CodedValueDomain">
            <summary>
            A coded value domain describes the values that can be assigned to a field in a code and description format.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.CodedValueDomain.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.CodedValueDomain.CodedValueDomainFromDictionary(System.Collections.Generic.IDictionary{System.String,System.Object},ESRI.ArcGIS.Client.Field.FieldType)">
            <summary>
            Creates a coded value domain from a dictionary.
            </summary>
            <param name="dictionary">Dictionary to create a coded value domain from.</param>
            <param name="fieldType">Field type</param>
            <returns>A coded value domain from a dictionary</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.CodedValueDomain.CodedValues">
            <summary>
            The values that can be assigned to a field: its description and corresponding code.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices">
            <summary>
            Enables editing vertices of geometries of graphics in a graphics layer.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.MaintainAspectRatioProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.MaintainAspectRatio"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.ScaleEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.ScaleEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.RotateEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.RotateEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.MoveEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.MoveEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.EditVerticesEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.EditVerticesEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.MapProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.Map"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.ContinuousProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.Continuous"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.IsEnabledProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.IsEnabled"/> dependency property.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.MaintainAspectRatio">
            <summary>
            Gets or sets a value indicating whether aspect ratio need to be maintained.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.ScaleEnabled">
            <summary>
            Gets or sets a value indicating whether scale is enabled.
            </summary>
            <value><c>true</c> if scale is enabled; otherwise, <c>false</c>.</value>        
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.RotateEnabled">
            <summary>
            Gets or sets a value indicating whether rotate is enabled.
            </summary>
            <value><c>true</c> if rotate is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.MoveEnabled">
            <summary>
            Gets or sets a value indicating whether move is enabled.
            </summary>
            <value><c>true</c> if move is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.EditVerticesEnabled">
            <summary>
            Gets or sets a value indicating whether edit vertices is enabled.
            </summary>
            <value><c>true</c> if edit vertices is enabled; otherwise, <c>false</c>.</value>        
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.Map">
            <summary>
            Gets or sets the map to edit on.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.Continuous">
            <summary>
            Gets or sets a value indicating whether edit vertices is enabled.
            </summary>
            <value>
            	<c>true</c> if edit vertices is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.IsEnabled">
            <summary>
            Gets or sets a value indicating whether edit vertices is enabled.
            </summary>
            <value>
            	<c>true</c> if edit vertices is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.Layers">
            <summary>
            Gets or sets the layers to edit features on.
            </summary>
            <value>The layers to edit features on..</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.VertexSymbol">
            <summary>
            Gets or sets the line symbol used for drawing vertices.
            </summary>
            <value>The default vertex marker symbol.</value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FeatureService.Editing.EditVertices.EditVerticesCompleted">
            <summary>
            Occurs when edit vertices has completed.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.EditException">
            <summary>
            Edit exception.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Relationship">
            <summary>
            Describes a relationship for a feature service.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Relationship.Id">
            <summary>
            Gets the relationship id.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Relationship.Name">
            <summary>
            Gets the name of the relationship.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Relationship.RelatedTableId">
            <summary>
            Gets the related table id.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.PointDataSource">
            <summary>
            Point Graphics DataSource that allows binding a model or view with X/Y or Latitude/Longitude properties
            to <see cref="P:ESRI.ArcGIS.Client.GraphicsLayer.GraphicsSource"/> and converting the items to renderable Point Graphics in the process.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.PointDataSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.PointDataSource"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.PointDataSource._xCoordinateBinding">
            <summary>
            The binding used to identify the dependent value binding.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.PointDataSource._yCoordinateBinding">
            <summary>
            The binding used to identify the dependent value binding.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.PointDataSource.CreateDataPoint(System.Object)">
            <summary>
            Returns a Control suitable for the Series.
            </summary>
            <returns>The DataPoint instance.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.PointDataSource.PrepareDataPoint(ESRI.ArcGIS.Client.GraphicsDataSource.DataObject,System.Object)">
            <summary>
            Prepares the data point.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="dataContext">The data context.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.PointDataSource.DataSpatialReferenceProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.PointDataSource.DataSpatialReference"/> dependency property.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.PointDataSource.XCoordinateBinding">
            <summary>
            Gets or sets the Binding to use for identifying the dependent value.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.PointDataSource.YCoordinateBinding">
            <summary>
            Gets or sets the Binding to use for identifying the dependent value.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.PointDataSource.DataSpatialReference">
            <summary>
            Gets or sets the data spatial reference ID of the source data.
            </summary>
            <value>The data spatial reference.</value>
            <remarks>
            Defaults to ESPG:4326, WGS84 Longitude/Latitude spherical coordinate system.
            </remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.PointDataSource.DataPoint.XProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.PointDataSource.DataPoint.X"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.PointDataSource.DataPoint.YProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.PointDataSource.DataPoint.X"/> dependency property.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Utils.Clipping.PolygonClip">
            <summary>
            Polygon clipping to a box using a Sutherland-Hogdman algorithm.
            It has been simplified for only clipping to Envelope edges.
            Note that this algorithm might create artifact edges when crossing holes along the boundary.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Utils.Clipping.PolygonClip.Clip(ESRI.ArcGIS.Client.Geometry.Polygon)">
            <summary>
            Clips the specified poly. If the polygon does not intersect
            the envelope, an empty polygon is returned.
            </summary>
            <param name="poly">The polygon to clip.</param>
            <returns>Clipped polygon</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Utils.Clipping.PolygonClip.Clip(ESRI.ArcGIS.Client.Geometry.PointCollection)">
            <summary>
            Clips the specified ring along all edges.
            </summary>
            <param name="ring">The ring.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Utils.Clipping.PolygonClip.ClipRing(ESRI.ArcGIS.Client.Geometry.PointCollection,ESRI.ArcGIS.Client.Utils.Clipping.PolygonClip.Edge)">
            <summary>
            Clips a ring along an edge.
            </summary>
            <param name="ring">The ring.</param>
            <param name="clipBoundary">The clip boundary.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Utils.Clipping.PolygonClip.EdgeIntersection(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Utils.Clipping.PolygonClip.Edge)">
            <summary>
            Gets the point where the line crosses the intersection.
            </summary>
            <param name="p0">The p0.</param>
            <param name="p1">The p1.</param>
            <param name="edge">The edge.</param>
            <returns></returns>
        </member>
        <member name="T:ESRI.ArcGIS.Client.TimeExtent">
            <summary>
            Time Extent.
            </summary>	
        </member>
        <member name="M:ESRI.ArcGIS.Client.TimeExtent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.TimeExtent"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TimeExtent.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.TimeExtent"/> class.
            </summary>
            <param name="time">The start and end time.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TimeExtent.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.TimeExtent"/> class.
            </summary>
            <param name="startTime">The start.</param>
            <param name="endTime">The end.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TimeExtent.Offset(System.TimeSpan)">
            <summary>
            Returns a new time extent with the given offset from "this" time extent.
            </summary>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TimeExtent.Intersects(ESRI.ArcGIS.Client.TimeExtent)">
            <summary>
            Checks if this instance intersects the specified extent.
            </summary>
            <param name="extent">The extent to intersect with.</param>
            <returns>True if this instance intesects the specified extent.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TimeExtent.Intersects(System.DateTime)">
            <summary>
            Checks if this instance intersects the specified date.
            </summary>
            <param name="date">The date to intersect.</param>
            <returns>True if the date is within the time extent.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.TimeExtent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TimeExtent.Start">
            <summary>
            Gets or sets the start of the extent.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.TimeExtent.End">
            <summary>
            Gets or sets the end of the extent.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.DateTimeTypeConverter">
            <summary>
            DateTime Converter for specifying <see cref="T:System.DateTime"/> in XAML.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DateTimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DateTimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="destinationType">The type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DateTimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotImplementedException">
            	<see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/> not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="M:ESRI.ArcGIS.Client.DateTimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified value object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
            <exception cref="T:System.NotImplementedException">
            	<see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>  not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.ServiceException">
            <summary>
            Exception that represents an error returned from the REST API
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.ServiceException.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ServiceException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>The error message that explains the reason for the exception, 
            or an empty string("")</value>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ServiceException.Code">
            <summary>
            The service error code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ServiceException.Details">
            <summary>
            The service error details.
            </summary>
            <value>The details.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.RelationshipParameter">
            <summary>
            The RelationshipParameter contains properties to define a 
            relationship when using the ExecuteRelationshipQuery or 
            ExecuteRelationshipQueryAsync Method of the <see cref="T:ESRI.ArcGIS.Client.Tasks.QueryTask"/>.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.RelationshipParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.RelationshipParameter"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RelationshipParameter.ObjectIds">
            <summary>
            Gets or sets the object ids.
            </summary>
            <value>The object ids.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RelationshipParameter.RelationshipId">
            <summary>
            Gets or sets the relationship id.
            </summary>
            <value>The relationship id.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RelationshipParameter.OutFields">
            <summary>
            Gets or sets the out fields.These fields will be returned as attributes of a <see cref="T:ESRI.ArcGIS.Client.Graphic"/>.
            </summary>
            <value>The out fields.</value>
            <remarks>The wildcard (*) can be used to return all fields.</remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RelationshipParameter.DefinitionExpression">
            <summary>
            Gets or sets the definition expression. Will filter the results based 
            on matching results defined bty the expression criteria.
            </summary>
            <value>The definition expression.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RelationshipParameter.ReturnGeometry">
            <summary>
            Gets or sets a value indicating whether to return geometry.
            </summary>
            <remarks>
            <para>
            If true, the featureset includes the geometry associated with each feature.
            </para>
            <para>
            This parameter only applies to related layers. It will be ignored for related tables.
            </para>
            <para>
            <b>Note: </b>For the <see cref="P:ESRI.ArcGIS.Client.Tasks.Query.OutFields">OutFields</see> 
            parameter, the wildcard '*' will not return the geometry (i.e. shape field). In order to return 
            the geometry information the ReturnGeometry must be set to True.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RelationshipParameter.MaxAllowableOffset">
            <summary>
            Gets or sets the max allowable offset. 
            </summary>
            <value>The max allowable offset.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.RelationshipParameter.OutSpatialReference">
            <summary>
            Gets or sets the out spatial reference. Indicates that any returning 
            geometry should be in the spatial reference of this property.
            </summary>
            <value>The out spatial reference.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.AddressCandidate">
            <summary>
            An address candidate that represents a result from an AddressToLocations operation.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.AddressCandidate.#ctor(System.String,ESRI.ArcGIS.Client.Geometry.MapPoint,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.AddressCandidate"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="location">The location.</param>
            <param name="score">The score.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AddressCandidate.Address">
            <summary>
            The address.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AddressCandidate.Attributes">
            <summary>
            Name-value pairs of field name and field value as defined 
            in the outFields parameter to AddressToLocations.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AddressCandidate.Location">
            <summary>
            The location of the address.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.AddressCandidate.Score">
            <summary>
            Numeric score between 0 and 100 for geocode candidates.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPRasterData">
            <summary>
            A raster data file input to a geoprocessing task.
            This is used for parameters of type GPRasterData or GPRasterDataLayer.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPRasterData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPRasterData"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="url">The URL to the location of the input data file.</param>
            <param name="format">The format of the raster data such as "jpg", "tif", etc.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPRasterData.ToJson">
            <summary>
            Serializes the parameter to JSON.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPRasterData.Url">
            <summary>
            The URL to the location of the input raster data file.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPRasterData.Format">
            <summary>
            The format of the raster data such as "jpg", "tif", etc.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPExecuteResults">
            <summary>
            The results of executing a geoprocessing task.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPExecuteResults.#ctor(System.Collections.Generic.List{ESRI.ArcGIS.Client.Tasks.GPParameter},System.Collections.Generic.List{ESRI.ArcGIS.Client.Tasks.GPMessage})">
            <summary>
            Constructor.
            </summary>
            <param name="outParameters">The parameters returned by the geoprocessing task.</param>
            <param name="messages">The messages returned by the geoprocessing task.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPExecuteResults.OutParameters">
            <summary>
            The geoprocessing task execution output parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPExecuteResults.Messages">
            <summary>
            The messages returned from the task.
            </summary>
            <value>The messages.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GeometryRelation">
            <summary>
            SpatialRelationship enumeration.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryRelation.esriGeometryRelationCross">
            <summary>
            Two polylines cross if they share only points in common, at least one of which is not an 
            endpoint.  A polyline and an polygon cross if they share a polyline in common on the 
            interior of the polygon which is not equivalent to the entire polyline.  Cross is a 
            Clementini operator.
            If either one of the geometries is empty, the geometries do not cross.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryRelation.esriGeometryRelationDisjoint">
            <summary>
            Two geometries are disjoint if their intersection is empty.  Two geometries intersect 
            if disjoint is "false".  Disjoint is a Clementini operator.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryRelation.esriGeometryRelationIn">
            <summary>
            The base geometry is within the comparison geometry if the base geometry is the 
            intersection of the geometries and the intersection of their interiors is not empty.  
            Within is a Clementini operator. Within is the opposite operator of contains.
            An empty geometry is within another geometry, unless the other geometry is empty.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryRelation.esriGeometryRelationInteriorIntersection">
            <summary>
            Geometries intersect excluding boundary touch.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryRelation.esriGeometryRelationIntersection">
            <summary>
            Geometry interiors intersect or boundaries touch, same as 'not disjoint'.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryRelation.esriGeometryRelationLineCoincidence">
            <summary>
            The boundaries of the geometries must share an intersection, but the relationship between 
            the interiors of the shapes is not considered (they could overlap, one could be contained 
            in the other, or their interiors could be disjoint).  This relation applies to polylines 
            and polygons. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryRelation.esriGeometryRelationLineTouch">
            <summary>
            Two geometries are said to touch when the intersection of the geometries is non-empty, but 
            the intersection of their interiors is empty.  This evaluates if the touch occurs along a 
            boundary (not a point).  Valid for polygons. 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryRelation.esriGeometryRelationOverlap">
            <summary>
            Two polylines share a common sub-line, or two polygons share a common sub-area.   Overlaps 
            is a Clementini operator.
            Two geometries do not overlap if either one is empty.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryRelation.esriGeometryRelationPointTouch">
            <summary>
            Two geometries are said to touch when the intersection of the geometries is non-empty, but 
            the intersection of their interiors is empty.  This evaluates if the touch occurs at a point 
            (not a boundary). 
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryRelation.esriGeometryRelationTouch">
            <summary>
            The union of esriGeometryRelationPointTouch and esriGeometryRelationLineTouch.  Two 
            geometries are said to touch when the intersection of the geometries is non-empty, but 
            the intersection of their interiors is empty.  Touches is a Clementini operator. For 
            example, a point touches a polyline only if the point is coincident with one of the 
            polyline end points.
            If either one of the two geometries is empty, the geometries are not touched.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryRelation.esriGeometryRelationWithin">
            <summary>
            Same as esriGeometryRelationIn but also allows polylines that are strictly on the 
            boundaries of polygons to be considered “in” the polygon.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.GeometryRelation.esriGeometryRelationRelation">
            <summary>
            Allows specification of any relationship defined using the 'Shape Comparison Language'. 
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ScaleBarUnit">
            <summary>
            <para>
            <b>Note: This API is now obsolete.</b> Please use ScaleLineUnit in the ESRI.ArcGIS.Client.Toolkit namespace.
            </para>
            <para>
            Unit used by the scale bar
            </para>
            </summary>
            <remarks>The integer value of the enums corresponds to 1/10th of a millimeter</remarks>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBarUnit.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBarUnit.DecimalDegrees">
            <summary>
            Decimal degrees
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBarUnit.Inches">
            <summary>
            Inches
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBarUnit.Feet">
            <summary>
            Feet
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBarUnit.Yards">
            <summary>
            Yards
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBarUnit.Miles">
            <summary>
            Miles
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBarUnit.NauticalMiles">
            <summary>
            Nautical Miles
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBarUnit.Millimeters">
            <summary>
            Millimeters
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBarUnit.Centimeters">
            <summary>
            Centimeters
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBarUnit.Decimeters">
            <summary>
            Decimeters
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBarUnit.Meters">
            <summary>
            Meters
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.ScaleBarUnit.Kilometers">
            <summary>
            Kilometers
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.LayerCanvas">
            <summary>
            Canvas used for placing map elements for a given layer at a given resolution and origin. 
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerCanvas.GetExtent(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:ESRI.ArcGIS.Client.LayerCanvas.ExtentProperty"/> attached property
            for a given object.
            </summary>
            <param name="obj"> The object from which the property value is read.</param>
            <returns>The <see cref="F:ESRI.ArcGIS.Client.LayerCanvas.ExtentProperty"/> value of the specified object.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerCanvas.SetExtent(System.Windows.DependencyObject,ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Sets the value of the <see cref="F:ESRI.ArcGIS.Client.LayerCanvas.ExtentProperty"/> attached property for a given object.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The <see cref="F:ESRI.ArcGIS.Client.LayerCanvas.ExtentProperty"/> value of the specified element.</param>
        </member>
        <member name="F:ESRI.ArcGIS.Client.LayerCanvas.ExtentProperty">
            <summary>
            Identifies the <see cref="F:ESRI.ArcGIS.Client.LayerCanvas.ExtentProperty"/> attached property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.LayerCanvas.OutdatedProperty">
            <summary>
            Used to mark an object for removal, as soon as the layer has fully loaded.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerCanvas.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "measure" pass of Silverlight layout. Classes can override this method to define their own measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of child object allotted sizes.
            </returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerCanvas.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of Silverlight layout. Classes can override this method to define their own arrange pass behavior.
            </summary>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="F:ESRI.ArcGIS.Client.LayerCanvas.OriginXProperty">
            <summary> 
            Identifies the Origin dependency property.
            </summary> 
        </member>
        <member name="F:ESRI.ArcGIS.Client.LayerCanvas.OriginYProperty">
            <summary> 
            Identifies the Origin dependency property.
            </summary> 
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerCanvas.OnOriginPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OriginProperty property changed handler. 
            </summary>
            <param name="d">LayerCanvas that changed its Origin.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="F:ESRI.ArcGIS.Client.LayerCanvas.ResolutionProperty">
            <summary> 
            Identifies the Resolution dependency property.
            </summary> 
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerCanvas.OnResolutionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ResolutionProperty property changed handler. 
            </summary>
            <param name="d">LayerCanvas that changed its Resolution.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerCanvas.Layer">
            <summary>
            Gets the layer this canvas is linked to.
            </summary>
            <value>The layer.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerCanvas.OriginX">
            <summary> 
            Gets or sets the origin.
            </summary> 
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerCanvas.OriginY">
            <summary> 
            Gets or sets the origin.
            </summary> 
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerCanvas.Origin">
            <summary>
            Gets or sets the origin.
            </summary>
            <value>The origin.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerCanvas.Resolution">
            <summary> 
            Gets or sets the Resolution possible Value of the double object.
            </summary> 
        </member>
        <member name="T:ESRI.ArcGIS.Client.LayerInfo">
            <summary>
            Contains information about each layer in an <see cref="T:ESRI.ArcGIS.Client.ArcGISDynamicMapServiceLayer"/> service.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.LayerInfo"/> class.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.LayerInfo.#ctor(System.Int32,System.String,System.Boolean,System.Int32[],System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.LayerInfo"/> class.
            </summary>
            <param name="id">Layer ID.</param>
            <param name="name">Layer name.</param>
            <param name="defaultVisibility">True if layer is visible by default.</param>
            <param name="subLayerIds">The sub layer ids.</param>
            <param name="minScale">The min scale.</param>
            <param name="maxScale">The max scale.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerInfo.ID">
            <summary>
            The ID of the layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerInfo.Name">
            <summary>
            The name of the layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerInfo.DefaultVisibility">
            <summary>
            Whether the layer is visible by default.
            </summary>
            <value><c>true</c> if layer is visible by default; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerInfo.SubLayerIds">
            <summary>
            The IDs of sublayers, if any.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerInfo.MinScale">
            <summary>
            Minimum scale of the layer.
            </summary>
            <remarks>
            <para>
            Note: In order to get valid a MinScale value returned, you must be accessing a web service from ArcGIS
            Server 10 SP1 (i.e. 10.01) and above.
            </para>
            </remarks>
        </member>
        <member name="P:ESRI.ArcGIS.Client.LayerInfo.MaxScale">
            <summary>
            Maximum scale of the layer.
            </summary>
            <remarks>
            <para>
            Note: In order to get valid a MaxScale value returned, you must be accessing a web service from ArcGIS
            Server 10 SP1 (i.e. 10.01) and above.
            </para>
            </remarks>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Log">
            <summary>
            Internal error logging and handling
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.EditResults">
            <summary>
            Results of the edit operation
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.EditResults.AddResults">
            <summary>
            Results for the adds in the edit operation
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.EditResults.UpdateResults">
            <summary>
            Results for the updates in the edit operation
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.EditResults.DeleteResults">
            <summary>
            Results for the deletes in the edit operation
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.BeginEditEventArgs">
            <summary>
            Arguments for the begin edits event.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BeginEditEventArgs.Cancel">
            <summary>
            Whether to cancel edit.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BeginEditEventArgs.Adds">
            <summary>
            Adds
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BeginEditEventArgs.Deletes">
            <summary>
            Deletes
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BeginEditEventArgs.Updates">
            <summary>
            Updates
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.WebRequest">
            <summary>
            The ESRI WebRequest class will automatically switch from a GET to a POST when a
            set of parameters and URL will exceed 2048 bytes.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.WebRequest.downloadStringCompleted(System.Object,System.Net.DownloadStringCompletedEventArgs)">
            <summary>
            Called when the WebClient GET request is completed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Net.DownloadStringCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.WebRequest.CreateUrl(System.String,System.String,System.String)">
            <summary>
            Combines the base url and querystring.
            </summary>
            <param name="url">The URL.</param>
            <param name="querystring">The querystring.</param>
            <param name="proxyUrl">The proxy URL.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.WebRequest.GetUrlEncodedQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds the query string based on a set of parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Ampersand-delimited querystring</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.WebRequest.OnFailed(ESRI.ArcGIS.Client.WebRequest.RequestEventArgs)">
            <summary>
            Raises the <see cref="E:Failed"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.WebRequest.RequestEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.WebRequest.OnComplete(ESRI.ArcGIS.Client.WebRequest.RequestEventArgs)">
            <summary>
            Raises the <see cref="E:Complete"/> event.
            </summary>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.WebRequest.RequestEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.WebRequest.CreateWebClient">
            <summary>
            For WPF this will create a WebClient object that supports gzip compression.
            For Silverlight it will return a normal WebClient object.
            </summary>
            <returns>WebClient</returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.WebRequest.ForcePost">
            <summary>
            Whether POST should always be used (e.g. FeatureService ApplyEdits)
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.WebRequest.Completed">
            <summary>
            Occurs when the request has succesfully completed.
            </summary>
        </member>
        <member name="E:ESRI.ArcGIS.Client.WebRequest.Failed">
            <summary>
            Occurs if the request failed.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.WebRequest.ServiceException.Code">
            <summary>
            The service error code.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.LinearUnit">
            <summary>
            Represents a linear unit of distance.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Meter">
            <summary>International meter.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.GermanMeter">
            <summary>German legal meter.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Foot">
            <summary>International foot (0.3048 meters).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.SurveyFoot">
            <summary>US survey foot.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.ClarkeFoot">
            <summary>Clarke's foot.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Fathom">
            <summary>Fathom.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.NauticalMile">
            <summary>International nautical mile (1,852 meters).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.SurveyChain">
            <summary>US survey chain.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.SurveyLink">
            <summary>US survey link.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.SurveyMile">
            <summary>US survey mile.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Kilometer">
            <summary>Kilometer.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.ClarkeYard">
            <summary>Yard (Clarke's ratio).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.ClarkeChain">
            <summary>Chain (Clarke's ratio).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.ClarkeLink">
            <summary>Link (Clarke's ratio).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.SearsYard">
            <summary>Yard (Sears).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.SearsFoot">
            <summary>Sears' foot.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.SearsChain">
            <summary>Chain (Sears).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.SearsLink">
            <summary>Link (Sears).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Benoit1895A_Yard">
            <summary>Yard (Benoit 1895 A).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Benoit1895A_Foot">
            <summary>Foot (Benoit 1895 A).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Benoit1895A_Chain">
            <summary>Chain (Benoit 1895 A).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Benoit1895A_Link">
            <summary>Link (Benoit 1895 A).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Benoit1895B_Yard">
            <summary>Yard (Benoit 1895 B).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Benoit1895B_Foot">
            <summary>Foot (Benoit 1895 B).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Benoit1895B_Chain">
            <summary>Chain (Benoit 1895 B).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Benoit1895B_Link">
            <summary>Link (Benoit 1895 B).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.IndianFoot">
            <summary>Indian geodetic foot.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Indian1937Foot">
            <summary>Indian foot (1937).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Indian1962Foot">
            <summary>Indian foot (1962).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Indian1975Foot">
            <summary>Indian foot (1975).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.IndianYard">
            <summary>Indian yard.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Indian1937Yard">
            <summary>Indian yard (1937).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Indian1962Yard">
            <summary>Indian yard (1962).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Indian1975Yard">
            <summary>Indian yard (1975).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Foot1865">
            <summary>Foot (1865).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Radian">
            <summary>Radian.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Degree">
            <summary>Degree.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.ArcMinute">
            <summary>Arc-minute.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.ArcSecond">
            <summary>Arc-second.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Grad">
            <summary>Grad.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Gon">
            <summary>Gon.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Microradian">
            <summary>Microradian.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.ArcMinuteCentesimal">
            <summary>Centesimal arc-minute.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.ArcSecondCentesimal">
            <summary>Centesimal arc-second.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Mil6400">
            <summary>Mil.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.British1936Foot">
            <summary>British Foot (1936).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.GoldCoastFoot">
            <summary>Gold Coast Foot.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.InternationalChain">
            <summary>International Chain.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.InternationalLink">
            <summary>International Link.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.InternationalYard">
            <summary>International Yard.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.StatuteMile">
            <summary>Statute Mile (5,280 feet, 1,760 yards, or exactly 1,609.344 meters).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.SurveyYard">
            <summary>US survey Yard.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit._50KilometerLength">
            <summary>50 Kilometer Length.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit._150KilometerLength">
            <summary>150 Kilometer Length.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Decimeter">
            <summary>Decimeter.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Centimeter">
            <summary>Centimeter.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.Millimeter">
            <summary>Millimeter.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.InternationalInch">
            <summary>International inch.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.USsurveyInch">
            <summary>US survey inch.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.InternationalRod">
            <summary>International rod.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.USsurveyRod">
            <summary>US survey rod.</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.USNauticalMile">
            <summary>US nautical mile (pre-1954).</summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Tasks.LinearUnit.UKNauticalMile">
            <summary>UK nautical mile (pre-1970).</summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyParameters">
            <summary>
            The parameters used to execute the <see cref="T:ESRI.ArcGIS.Client.Tasks.IdentifyTask"/> against a
            image service layer that has a catalog of images.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyParameters"/> class.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyParameters.Geometry">
            <summary>
            The geometry to identify on. The valid geometry types are Point or 
            Polygon. 
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyParameters.PixelX">
            <summary>
            Gets or sets the width of the pixel level being identified.
            </summary>
            <remarks>
            If pixel size is not specified, 
            then pixel size will default to the base resolution of the dataset. 
            The raster at the specified pixel size in the mosaic dataset will be 
            used for identify.
            </remarks>
            <value>The pixel X size.</value>
            <seealso cref="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyParameters.PixelY"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Map.Resolution"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyParameters.PixelY">
            <summary>
            Gets or sets the height of the pixel level being identified.
            </summary>
            <remarks>
            If pixel size is not specified, 
            then pixel size will default to the base resolution of the dataset. 
            The raster at the specified pixel size in the mosaic dataset will be 
            used for identify.
            </remarks>
            <value>The pixel y size.</value>
            <seealso cref="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyParameters.PixelX"/>
            <seealso cref="P:ESRI.ArcGIS.Client.Map.Resolution"/>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.ImageServiceIdentifyParameters.MosaicRule">
            <summary>
            Gets or sets the mosaic rulte. Specifies the mosaic rule defining 
            the image sorting order. When mosaic rule is not specified, mosaic 
            rule will default to esriMosaicCenter. 
            </summary>
            <value>The mosaic rule.</value>
            <seealso cref="P:ESRI.ArcGIS.Client.ArcGISImageServiceLayer.MosaicRule"/>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.GPString">
            <summary>
            A string input to a geoprocessing task.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPString.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Tasks.GPString"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Tasks.GPString.ToJson">
            <summary>
            Serializes the parameter to JSON.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.GPString.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Tasks.BufferParameters">
            <summary>
            Sets the distances, units, and other parameters for a buffer operation.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BufferParameters.Features">
            <summary>
            The graphics to be buffered.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BufferParameters.Distances">
            <summary>
            The distances the input features are buffered. The distance units are specified by Unit.
            </summary>
            <value>The distances.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BufferParameters.BufferSpatialReference">
            <summary>
            The spatial reference in which the geometries are buffered.
            </summary>
            <value>The spatial reference.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BufferParameters.OutSpatialReference">
            <summary>
            The spatial reference for the returned geometries.
            </summary>
            <value>The spatial reference.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BufferParameters.UnionResults">
            <summary>
            If true, all geometries buffered at a given distance are unioned into a 
            single (possibly multipart) polygon, and the unioned geometry is returned.
            The default is false.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Tasks.BufferParameters.Unit">
            <summary>
            The units for calculating each buffer distance. If not specified, 
            the units are derived from BufferSpatialReference. If BufferSpatialReference 
            is not specified, the units are derived from the input features.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol">
            <summary>
            Point symbol using a bitmap image for symbol
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol"/> class.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.SourceProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.Source"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.WidthProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.Width"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.HeightProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.Height"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.OpacityProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.Opacity"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.ToJson">
            <summary>
            Serializes the picture marker symbol to JSON
            </summary>
            <returns>
            A JSON string representation of the picture marker symbol.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.Source">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.Width">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.Height">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.Symbols.PictureMarkerSymbol.Opacity">
            <summary>
            Gets or sets the opacity of the image.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.ServiceError">
            <summary>
            Exception that represents an error returned from the REST API
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ServiceError.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>The error message that explains the reason for the exception, 
            or an empty string("")</value>		
        </member>
        <member name="P:ESRI.ArcGIS.Client.ServiceError.Code">
            <summary>
            The service error code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.ServiceError.Details">
            <summary>
            The service error details.
            </summary>
            <value>The details.</value>
        </member>
        <member name="T:ESRI.ArcGIS.Client.MouseDragHelper">
            <summary>
            Adds mouse drag event handlers to a FrameworkElement
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo">
            <summary>
            Information about a feature layer that is retrieved from the Map or Feature Service.  
            For feature and map service layers, FeatureLayerInfo is populated on FeatureLayer initialization.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.#ctor(System.Windows.Media.Brush,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="selectionColor">The selection color.</param>
            <param name="fromFeatureCollection">if set to <c>true</c> initializes the <see cref="T:ESRI.ArcGIS.Client.FeatureLayer"/> 
            from a feature collection either by a JSON string or a dictionary.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.OnReady(System.EventArgs)">
            <summary>
            Fires the Ready event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Get(System.String,System.String,System.String,System.Net.ICredentials)">
            <summary>
            Gets feature layer information from the map service layer or feature service.  The Ready event is fired when
            the information has been retrieved.
            </summary>
            <param name="layer">The url of the layer.</param>
            <param name="token">The token.</param>
            <param name="proxy">The proxy.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a FeatureSet from a Dictionary.
            </summary>
            <param name="dictionary">The FeatureSet Dictionary.</param>
            <returns>The deserialized FeatureSet.</returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.GetDetails(System.String,System.String,System.String,System.Int32,System.Action{ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo,System.Exception},System.Net.ICredentials)">
            <summary>
            Gets the sub layer or table id details.
            </summary>
            <param name="url">The URL.</param>
            <param name="proxyUrl">The proxy URL.</param>
            <param name="token">The token.</param>
            <param name="id">The sub layer or table  id.</param>
            <param name="onCompleted">The method to call when details of the sub layer or table is retrieved.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.GetAllDetails(System.String,System.String,System.String,System.Action{System.Collections.Generic.IDictionary{System.Int32,ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo},System.Exception},System.Net.ICredentials)">
            <summary>
            Gets all details for sub layers or tables.
            </summary>
            <param name="url">The URL.</param>
            <param name="proxyUrl">The proxy URL.</param>
            <param name="token">The token.</param>
            <param name="onCompleted">The method to call when details of the sub layer or table is retrieved.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Id">
            <summary>
            The ID of the layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Name">
            <summary>
            The name of the layer
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Type">
            <summary>
            The type of the layer.  "Table" if just a table. "Feature Layer" for feature layers.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Description">
            <summary>
            Layer description.  Map Service layers only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.DefinitionExpression">
            <summary>
            The definition expression.  Map Service layers only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Version">
            <summary>
            The definition expression.  Map Service layers only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.TypeIdField">
            <summary>
            The name of the field that has the Type ID for the feature.  Feature Service layer only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.ObjectIdField">
            <summary>
            The name of the field that has the Object ID for the feature.  Feature Service layer only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.GlobalIdField">
            <summary>
            The name of the field that has the Global ID for the feature.  Feature Service layer only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.DisplayField">
            <summary>
            The name of the field that has the feature's description.  Map service layer only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Fields">
            <summary>
            The fields in the layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.GeometryType">
            <summary>
            The geometry type of the graphics in the layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.MinimumScale">
            <summary>
            The minimum scale in which this layer can be viewed.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.MaximumScale">
            <summary>
            The maximum scale in which this layer can be viewed.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.CopyrightText">
            <summary>
            The copyright text for the layer.  Map service layer only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Extent">
            <summary>
            The extent of the layer.  Map service layer only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.DefaultSpatialReference">
            <summary>
            The spatial reference of the layer.  Feature Service layer only.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Renderer">
            <summary>
            The renderer used for determining feature symbols.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.TimeInfo">
            <summary>
            The time info for this layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Capabilities">
            <summary>
            Gets the capabilities of the feature layer.
            </summary>
            <value>The capabilities.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.FeatureTypes">
            <summary>
            The sub-types of features in this layer indexed by feature type ID.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Templates">
            <summary>
            For layers without sub-types, the templates of features.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Relationships">
            <summary>
            Gets the relationships for the layer.
            </summary>
            <value>The relationships.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.HasAttachments">
            <summary>
            Indicates whether the features can store attachments. <c>False</c> if it is a map service layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.IsFeatureServiceLayer">
            <summary>
            Whether the layer is a feature service.  False if it is a map service layer.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is editable or not.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:ESRI.ArcGIS.Client.FeatureService.FeatureLayerInfo.Ready">
            <summary>
            Event fired when feature layer info has been retrieved from the service after Get() has been called.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol">
            <summary>
            Simple marker symbol
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol"/> class.
            FOR INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.StyleProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.Style"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.SizeProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.Size"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.ColorProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.Color"/> dependency property.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.XOffsetFromCenterProperty">
            <summary>
            Dependency property for the X offset from the center.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.YOffsetFromCenterProperty">
            <summary>
            Dependency property for the Y offset from the center.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.AngleProperty">
            <summary>
            The dependency property for Angle.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.RenderTransformPointProperty">
            <summary>
            Dependency property for RenderTransformPoint
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.OutlineColorProperty">
            <summary>
            Gets or sets the outline color.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.OutlineThicknessProperty">
            <summary>
            Gets or sets the outline thickness.
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.OutlineStyleProperty">
            <summary>
            Identifies the OutlineStyle dependency property
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.SelectionColorProperty">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.SelectionColor"/> dependency property.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.ToJson">
            <summary>
            Serializes the simple marker symbol to JSON
            </summary>
            <returns>
            A JSON string representation of the simple marker symbol.
            </returns>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.Style">
            <summary>
            Gets or sets the symbol style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.Size">
            <summary>
            Size of the marker in pixels.
            <br/>
            This property can be used as the source for data binding.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.XOffsetFromCenter">
            <summary>
            Gets and sets the X offset from the center.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.YOffsetFromCenter">
            <summary>
            Gets and sets the Y offset from the center.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.OffsetX">
            <summary>
            Gets the horizontal offset of centering the symbol.
            </summary>
            <remarks>Setting the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.OffsetX"/> property is not allowed on the SimpleMarkerSymbol sub class.</remarks>
            <value></value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.OffsetY">
            <summary>
            Gets the vertical offset of centering the symbol.
            </summary>
            <remarks>Setting the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.OffsetY"/> property is not allowed on the SimpleMarkerSymbol sub class.</remarks>
            <value></value>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.Angle">
            <summary>
            Gets or sets the angle
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.RenderTransformPoint">
            <summary>
            Gets the render transform point used for drawing the symbol.  Cannot set.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.OutlineColor">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.OutlineColor"/> dependency property.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.OutlineThickness">
            <summary>
            Identifies the <see cref="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.OutlineThickness"/> dependency property.
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.OutlineStyle">
            <summary>
            Gets or sets a pre-defined Dash Array using the LineStyle enumeration
            </summary>
        </member>
        <member name="P:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.SelectionColor">
            <summary>
            Gets or sets the selection color.
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle">
            <summary>
            <see cref="T:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol"/> style
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Cross">
            <summary>
            Cross
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.Diamond">
            <summary>
            Diamond
            </summary>
        </member>
        <member name="F:ESRI.ArcGIS.Client.FeatureService.Symbols.SimpleMarkerSymbol.SimpleMarkerStyle.X">
            <summary>
            X
            </summary>
        </member>
        <member name="T:ESRI.ArcGIS.Client.FeatureService.Symbols.DashArrayConverter">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.DashArrayConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts values
            </summary>
            <param name="value">Value to convert</param>
            <param name="targetType">Type to convert to</param>
            <param name="parameter">Parameter for conversion</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:ESRI.ArcGIS.Client.FeatureService.Symbols.DashArrayConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
    </members>
</doc>
